
ATMEL_I2C_TXD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000b5c  00000bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080009c  0080009c  00000c2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003502  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001319  00000000  00000000  000045aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002078  00000000  00000000  000058c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bbc  00000000  00000000  0000793c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000169f  00000000  00000000  000084f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002423  00000000  00000000  00009b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000bfba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_1>
   8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_2>
   c:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_6>
  1c:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_7>
  20:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_8>
  24:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_9>
  28:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_10>
  2c:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_11>
  30:	0c 94 12 04 	jmp	0x824	; 0x824 <__vector_12>
  34:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__vector_13>
  38:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__vector_14>
  3c:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_15>
  40:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e9       	ldi	r26, 0x9C	; 156
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3b       	cpi	r26, 0xB8	; 184
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <System_Initialization>:
u8 data = 'K';
//u8 KeyData = 0;

void System_Initialization(void) {
	// Initializing LCD Module
	LCD_voidInit();
  92:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_voidInit>
	LCD_voidSetCursor(0, 0);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidSetCursor>
	LCD_voidDisplayString("I2C TRANSMIT");
  9e:	81 e6       	ldi	r24, 0x61	; 97
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_voidDisplayString>

	// Initializing I2C Module Master
	//_delay_ms(1500);
	I2C_voidMasterInit();
  a6:	0e 94 bd 03 	call	0x77a	; 0x77a <I2C_voidMasterInit>
  aa:	08 95       	ret

000000ac <executeMain_TXD>:
}

void executeMain_TXD(void) {
	LCD_voidSetCursor(1, 0);
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidSetCursor>
	LCD_voidDisplayString("Sending..");
  b4:	8f e6       	ldi	r24, 0x6F	; 111
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_voidDisplayString>

	I2C_voidSendStartCondition();
  bc:	0e 94 c6 03 	call	0x78c	; 0x78c <I2C_voidSendStartCondition>
		LCD_voidSetCursor(1, 0);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidSetCursor>
		LCD_voidDisplayString("1Sending..");
  c8:	8e e6       	ldi	r24, 0x6E	; 110
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_voidDisplayString>
	I2C_voidMasterSendSlaveAddressWrite(I2C_SLAVE1_ADDRESS);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <I2C_voidMasterSendSlaveAddressWrite>
		LCD_voidSetCursor(1, 0);
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidSetCursor>
		LCD_voidDisplayString("2Sending..");
  de:	89 e7       	ldi	r24, 0x79	; 121
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_voidDisplayString>
	I2C_voidMasterSendDataByte(data);
  e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ea:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <I2C_voidMasterSendDataByte>
		LCD_voidSetCursor(1, 0);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidSetCursor>
		LCD_voidDisplayString("3Sending..");
  f6:	84 e8       	ldi	r24, 0x84	; 132
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_voidDisplayString>
	//_delay_ms(100);
	I2C_voidSendStopCondition();
  fe:	0e 94 08 04 	call	0x810	; 0x810 <I2C_voidSendStopCondition>

	LCD_voidSetCursor(2, 0);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidSetCursor>
	LCD_voidDisplayString("TxD: ");
 10a:	8f e8       	ldi	r24, 0x8F	; 143
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_voidDisplayString>
	LCD_voidSetCursor(2, 5);
 112:	65 e0       	ldi	r22, 0x05	; 5
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidSetCursor>
	LCD_voidSendData(data);
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_voidSendData>

	LCD_voidSetCursor(3, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_voidSetCursor>
	LCD_voidDisplayString("Done!");
 12a:	85 e9       	ldi	r24, 0x95	; 149
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_voidDisplayString>
 132:	08 95       	ret

00000134 <main>:
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void)
{
	System_Initialization();
 134:	0e 94 49 00 	call	0x92	; 0x92 <System_Initialization>
	executeMain_TXD();
 138:	0e 94 56 00 	call	0xac	; 0xac <executeMain_TXD>
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x8>

0000013e <LCD_voidSendCommand>:

}


// Sends a command to the LCD
void LCD_voidSendCommand(u8 copy_u8Command) {
 13e:	cf 93       	push	r28
 140:	c8 2f       	mov	r28, r24
	// Set RS Pin to '0'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	89 ef       	ldi	r24, 0xF9	; 249
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_voidSendCommand+0x12>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_voidSendCommand+0x18>
 156:	00 00       	nop
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_voidSendCommand+0x28>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_voidSendCommand+0x2e>
 16c:	00 00       	nop
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
 16e:	c4 fb       	bst	r28, 4
 170:	44 27       	eor	r20, r20
 172:	40 f9       	bld	r20, 0
 174:	63 e0       	ldi	r22, 0x03	; 3
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
 17c:	c5 fb       	bst	r28, 5
 17e:	44 27       	eor	r20, r20
 180:	40 f9       	bld	r20, 0
 182:	64 e0       	ldi	r22, 0x04	; 4
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
 18a:	c6 fb       	bst	r28, 6
 18c:	44 27       	eor	r20, r20
 18e:	40 f9       	bld	r20, 0
 190:	65 e0       	ldi	r22, 0x05	; 5
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
 198:	4c 2f       	mov	r20, r28
 19a:	44 1f       	adc	r20, r20
 19c:	44 27       	eor	r20, r20
 19e:	44 1f       	adc	r20, r20
 1a0:	66 e0       	ldi	r22, 0x06	; 6
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 1a8:	89 ef       	ldi	r24, 0xF9	; 249
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_voidSendCommand+0x6e>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_voidSendCommand+0x74>
 1b2:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 1be:	89 ef       	ldi	r24, 0xF9	; 249
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_voidSendCommand+0x84>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_voidSendCommand+0x8a>
 1c8:	00 00       	nop
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 1d4:	89 ef       	ldi	r24, 0xF9	; 249
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_voidSendCommand+0x9a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCD_voidSendCommand+0xa0>
 1de:	00 00       	nop
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
 1e0:	4c 2f       	mov	r20, r28
 1e2:	41 70       	andi	r20, 0x01	; 1
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
 1ec:	c1 fb       	bst	r28, 1
 1ee:	44 27       	eor	r20, r20
 1f0:	40 f9       	bld	r20, 0
 1f2:	64 e0       	ldi	r22, 0x04	; 4
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
 1fa:	c2 fb       	bst	r28, 2
 1fc:	44 27       	eor	r20, r20
 1fe:	40 f9       	bld	r20, 0
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
 208:	c3 fb       	bst	r28, 3
 20a:	44 27       	eor	r20, r20
 20c:	40 f9       	bld	r20, 0
 20e:	66 e0       	ldi	r22, 0x06	; 6
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 216:	89 ef       	ldi	r24, 0xF9	; 249
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_voidSendCommand+0xdc>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_voidSendCommand+0xe2>
 220:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 22c:	89 ef       	ldi	r24, 0xF9	; 249
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_voidSendCommand+0xf2>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_voidSendCommand+0xf8>
 236:	00 00       	nop
		_delay_ms(1);
#endif
}
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <LCD_voidInit>:
 *******************************************************************************/

// Initializes and enables the LCD Module to start functionality
void LCD_voidInit(void) {
	// Initialize RS Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 b1 02 	call	0x562	; 0x562 <GPIO_voidSetPinDirection>

	// Initialize Enable Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 b1 02 	call	0x562	; 0x562 <GPIO_voidSetPinDirection>
 250:	87 e8       	ldi	r24, 0x87	; 135
 252:	93 e1       	ldi	r25, 0x13	; 19
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCD_voidInit+0x18>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCD_voidInit+0x1e>
 25a:	00 00       	nop
	if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_voidSetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
		LCD_voidSendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}
	else {
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 b1 02 	call	0x562	; 0x562 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	64 e0       	ldi	r22, 0x04	; 4
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 b1 02 	call	0x562	; 0x562 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	65 e0       	ldi	r22, 0x05	; 5
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 b1 02 	call	0x562	; 0x562 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	66 e0       	ldi	r22, 0x06	; 6
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 b1 02 	call	0x562	; 0x562 <GPIO_voidSetPinDirection>


		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT1);
 284:	83 e3       	ldi	r24, 0x33	; 51
 286:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT2);
 28a:	82 e3       	ldi	r24, 0x32	; 50
 28c:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_5x7_DOTS);
 290:	88 e2       	ldi	r24, 0x28	; 40
 292:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_voidSendCommand>
 296:	83 ef       	ldi	r24, 0xF3	; 243
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_voidInit+0x5e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_voidInit+0x64>
 2a0:	00 00       	nop
		//LCD_voidSendCommand(LCD_2LINES_FOUR_BIT);
		_delay_ms(2);
	}

	LCD_voidSendCommand(LCD_CURSOR_OFF);
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_voidSendCommand>
 2a8:	83 ef       	ldi	r24, 0xF3	; 243
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCD_voidInit+0x70>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCD_voidInit+0x76>
 2b2:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_voidSendCommand>
 2ba:	83 ef       	ldi	r24, 0xF3	; 243
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_voidInit+0x82>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_voidInit+0x88>
 2c4:	00 00       	nop
 2c6:	08 95       	ret

000002c8 <LCD_voidSendData>:
#endif
}


// Displays a character on the LCD
void LCD_voidSendData(u8 copy_u8data) {
 2c8:	cf 93       	push	r28
 2ca:	c8 2f       	mov	r28, r24
	// Set RS Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 2d6:	89 ef       	ldi	r24, 0xF9	; 249
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_voidSendData+0x12>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_voidSendData+0x18>
 2e0:	00 00       	nop
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 2ec:	89 ef       	ldi	r24, 0xF9	; 249
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_voidSendData+0x28>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_voidSendData+0x2e>
 2f6:	00 00       	nop
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
 2f8:	c4 fb       	bst	r28, 4
 2fa:	44 27       	eor	r20, r20
 2fc:	40 f9       	bld	r20, 0
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
 306:	c5 fb       	bst	r28, 5
 308:	44 27       	eor	r20, r20
 30a:	40 f9       	bld	r20, 0
 30c:	64 e0       	ldi	r22, 0x04	; 4
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
 314:	c6 fb       	bst	r28, 6
 316:	44 27       	eor	r20, r20
 318:	40 f9       	bld	r20, 0
 31a:	65 e0       	ldi	r22, 0x05	; 5
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
 322:	4c 2f       	mov	r20, r28
 324:	44 1f       	adc	r20, r20
 326:	44 27       	eor	r20, r20
 328:	44 1f       	adc	r20, r20
 32a:	66 e0       	ldi	r22, 0x06	; 6
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 332:	89 ef       	ldi	r24, 0xF9	; 249
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <LCD_voidSendData+0x6e>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_voidSendData+0x74>
 33c:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 348:	89 ef       	ldi	r24, 0xF9	; 249
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_voidSendData+0x84>
 350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_voidSendData+0x8a>
 352:	00 00       	nop
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 35e:	89 ef       	ldi	r24, 0xF9	; 249
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCD_voidSendData+0x9a>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_voidSendData+0xa0>
 368:	00 00       	nop
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
 36a:	4c 2f       	mov	r20, r28
 36c:	41 70       	andi	r20, 0x01	; 1
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
 376:	c1 fb       	bst	r28, 1
 378:	44 27       	eor	r20, r20
 37a:	40 f9       	bld	r20, 0
 37c:	64 e0       	ldi	r22, 0x04	; 4
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
 384:	c2 fb       	bst	r28, 2
 386:	44 27       	eor	r20, r20
 388:	40 f9       	bld	r20, 0
 38a:	65 e0       	ldi	r22, 0x05	; 5
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
 392:	c3 fb       	bst	r28, 3
 394:	44 27       	eor	r20, r20
 396:	40 f9       	bld	r20, 0
 398:	66 e0       	ldi	r22, 0x06	; 6
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 3a0:	89 ef       	ldi	r24, 0xF9	; 249
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_voidSendData+0xdc>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LCD_voidSendData+0xe2>
 3aa:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_voidSetPinValue>
 3b6:	89 ef       	ldi	r24, 0xF9	; 249
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_voidSendData+0xf2>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_voidSendData+0xf8>
 3c0:	00 00       	nop
		_delay_ms(1);
#endif
}
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <LCD_voidDisplayString>:


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	8c 01       	movw	r16, r24
	u8 i = 0;
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0') {
 3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <LCD_voidDisplayString+0x12>
		LCD_voidSendData(str[i]);
 3d2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LCD_voidSendData>
		i++;
 3d6:	cf 5f       	subi	r28, 0xFF	; 255


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
	u8 i = 0;
	while(str[i] != '\0') {
 3d8:	f8 01       	movw	r30, r16
 3da:	ec 0f       	add	r30, r28
 3dc:	f1 1d       	adc	r31, r1
 3de:	80 81       	ld	r24, Z
 3e0:	81 11       	cpse	r24, r1
 3e2:	f7 cf       	rjmp	.-18     	; 0x3d2 <LCD_voidDisplayString+0xc>
		LCD_voidSendData(str[i]);
		i++;
	}
}
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	08 95       	ret

000003ec <LCD_voidSetCursor>:
// Chooses where the cursor would stand on the LCD to type from it
void LCD_voidSetCursor(u8 copy_u8row, u8 copy_u8_col) {
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	31 f0       	breq	.+12     	; 0x3fc <LCD_voidSetCursor+0x10>
 3f0:	70 f0       	brcs	.+28     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	31 f0       	breq	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	39 f0       	breq	.+14     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fa:	0a c0       	rjmp	.+20     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
			break;
		case LINE1:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x40;
 3fc:	90 e4       	ldi	r25, 0x40	; 64
 3fe:	96 0f       	add	r25, r22
			break;
 400:	07 c0       	rjmp	.+14     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		case LINE2:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x10;
 402:	90 e1       	ldi	r25, 0x10	; 16
 404:	96 0f       	add	r25, r22
			break;
 406:	04 c0       	rjmp	.+8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
 408:	90 e5       	ldi	r25, 0x50	; 80
 40a:	96 0f       	add	r25, r22
			break;
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
 40e:	96 2f       	mov	r25, r22
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
			break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_voidSendCommand(LCD_MEMORY_ADDRESS | LINE0_ADDRESS);
 410:	89 2f       	mov	r24, r25
 412:	80 68       	ori	r24, 0x80	; 128
 414:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_voidSendCommand>
 418:	08 95       	ret

0000041a <__vector_16>:
	CallBackPtr_ADC = Ptr_ADC;
}


void __vector_16(void) __attribute__((signal, used));
void __vector_16(void) {
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	2f 93       	push	r18
 426:	3f 93       	push	r19
 428:	4f 93       	push	r20
 42a:	5f 93       	push	r21
 42c:	6f 93       	push	r22
 42e:	7f 93       	push	r23
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	af 93       	push	r26
 436:	bf 93       	push	r27
 438:	ef 93       	push	r30
 43a:	ff 93       	push	r31
	if(CallBackPtr_ADC != NULL) {
 43c:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <__data_end>
 440:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <__data_end+0x1>
 444:	30 97       	sbiw	r30, 0x00	; 0
 446:	09 f0       	breq	.+2      	; 0x44a <__vector_16+0x30>
		CallBackPtr_ADC();
 448:	09 95       	icall
	}
}
 44a:	ff 91       	pop	r31
 44c:	ef 91       	pop	r30
 44e:	bf 91       	pop	r27
 450:	af 91       	pop	r26
 452:	9f 91       	pop	r25
 454:	8f 91       	pop	r24
 456:	7f 91       	pop	r23
 458:	6f 91       	pop	r22
 45a:	5f 91       	pop	r21
 45c:	4f 91       	pop	r20
 45e:	3f 91       	pop	r19
 460:	2f 91       	pop	r18
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <__vector_1>:
}


// Disables Compiler Optimizations & verifies callback not empty
void __vector_1(void) __attribute__((signal, used));
void __vector_1(void) {
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
	if(CallBackPtr_INT0 != NULL) {
 48e:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <CallBackPtr_INT0>
 492:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <CallBackPtr_INT0+0x1>
 496:	30 97       	sbiw	r30, 0x00	; 0
 498:	09 f0       	breq	.+2      	; 0x49c <__vector_1+0x30>
		CallBackPtr_INT0();
 49a:	09 95       	icall
	}
}
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_2>:

void __vector_2(void) __attribute__((signal, used));
void __vector_2(void) {
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
	if(CallBackPtr_INT1 != NULL) {
 4e0:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <CallBackPtr_INT1>
 4e4:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <CallBackPtr_INT1+0x1>
 4e8:	30 97       	sbiw	r30, 0x00	; 0
 4ea:	09 f0       	breq	.+2      	; 0x4ee <__vector_2+0x30>
		CallBackPtr_INT1();
 4ec:	09 95       	icall
	}
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_3>:

void __vector_3(void) __attribute__((signal, used));
void __vector_3(void) {
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	if(CallBackPtr_INT2 != NULL) {
 532:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <CallBackPtr_INT2>
 536:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <CallBackPtr_INT2+0x1>
 53a:	30 97       	sbiw	r30, 0x00	; 0
 53c:	09 f0       	breq	.+2      	; 0x540 <__vector_3+0x30>
		CallBackPtr_INT2();
 53e:	09 95       	icall
	}
}
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	bf 91       	pop	r27
 546:	af 91       	pop	r26
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	7f 91       	pop	r23
 54e:	6f 91       	pop	r22
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <GPIO_voidSetPinDirection>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
 562:	68 30       	cpi	r22, 0x08	; 8
 564:	08 f0       	brcs	.+2      	; 0x568 <GPIO_voidSetPinDirection+0x6>
 566:	7b c0       	rjmp	.+246    	; 0x65e <GPIO_voidSetPinDirection+0xfc>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
 568:	84 30       	cpi	r24, 0x04	; 4
 56a:	08 f0       	brcs	.+2      	; 0x56e <GPIO_voidSetPinDirection+0xc>
 56c:	7a c0       	rjmp	.+244    	; 0x662 <GPIO_voidSetPinDirection+0x100>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
 56e:	42 30       	cpi	r20, 0x02	; 2
 570:	08 f0       	brcs	.+2      	; 0x574 <GPIO_voidSetPinDirection+0x12>
 572:	79 c0       	rjmp	.+242    	; 0x666 <GPIO_voidSetPinDirection+0x104>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	11 f1       	breq	.+68     	; 0x5bc <GPIO_voidSetPinDirection+0x5a>
 578:	30 f0       	brcs	.+12     	; 0x586 <GPIO_voidSetPinDirection+0x24>
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	d1 f1       	breq	.+116    	; 0x5f2 <GPIO_voidSetPinDirection+0x90>
 57e:	83 30       	cpi	r24, 0x03	; 3
 580:	09 f4       	brne	.+2      	; 0x584 <GPIO_voidSetPinDirection+0x22>
 582:	52 c0       	rjmp	.+164    	; 0x628 <GPIO_voidSetPinDirection+0xc6>
 584:	72 c0       	rjmp	.+228    	; 0x66a <GPIO_voidSetPinDirection+0x108>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 586:	41 30       	cpi	r20, 0x01	; 1
 588:	61 f4       	brne	.+24     	; 0x5a2 <GPIO_voidSetPinDirection+0x40>
					SET_BIT(DDRA_REG, copy_u8pinID);
 58a:	2a b3       	in	r18, 0x1a	; 26
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <GPIO_voidSetPinDirection+0x34>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <GPIO_voidSetPinDirection+0x30>
 59a:	82 2b       	or	r24, r18
 59c:	8a bb       	out	0x1a, r24	; 26
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	08 95       	ret
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRA_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
 5a2:	2a b3       	in	r18, 0x1a	; 26
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <GPIO_voidSetPinDirection+0x4c>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <GPIO_voidSetPinDirection+0x48>
 5b2:	80 95       	com	r24
 5b4:	82 23       	and	r24, r18
 5b6:	8a bb       	out	0x1a, r24	; 26
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	08 95       	ret
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 5bc:	41 30       	cpi	r20, 0x01	; 1
 5be:	61 f4       	brne	.+24     	; 0x5d8 <GPIO_voidSetPinDirection+0x76>
					SET_BIT(DDRB_REG, copy_u8pinID);
 5c0:	27 b3       	in	r18, 0x17	; 23
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <GPIO_voidSetPinDirection+0x6a>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <GPIO_voidSetPinDirection+0x66>
 5d0:	82 2b       	or	r24, r18
 5d2:	87 bb       	out	0x17, r24	; 23
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	08 95       	ret
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRB_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
 5d8:	27 b3       	in	r18, 0x17	; 23
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <GPIO_voidSetPinDirection+0x82>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <GPIO_voidSetPinDirection+0x7e>
 5e8:	80 95       	com	r24
 5ea:	82 23       	and	r24, r18
 5ec:	87 bb       	out	0x17, r24	; 23
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 5f2:	41 30       	cpi	r20, 0x01	; 1
 5f4:	61 f4       	brne	.+24     	; 0x60e <GPIO_voidSetPinDirection+0xac>
					SET_BIT(DDRC_REG, copy_u8pinID);
 5f6:	24 b3       	in	r18, 0x14	; 20
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <GPIO_voidSetPinDirection+0xa0>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <GPIO_voidSetPinDirection+0x9c>
 606:	82 2b       	or	r24, r18
 608:	84 bb       	out	0x14, r24	; 20
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	08 95       	ret
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRC_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
 60e:	24 b3       	in	r18, 0x14	; 20
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <GPIO_voidSetPinDirection+0xb8>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	6a 95       	dec	r22
 61c:	e2 f7       	brpl	.-8      	; 0x616 <GPIO_voidSetPinDirection+0xb4>
 61e:	80 95       	com	r24
 620:	82 23       	and	r24, r18
 622:	84 bb       	out	0x14, r24	; 20
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	08 95       	ret
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 628:	41 30       	cpi	r20, 0x01	; 1
 62a:	61 f4       	brne	.+24     	; 0x644 <GPIO_voidSetPinDirection+0xe2>
					SET_BIT(DDRD_REG, copy_u8pinID);
 62c:	21 b3       	in	r18, 0x11	; 17
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <GPIO_voidSetPinDirection+0xd6>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <GPIO_voidSetPinDirection+0xd2>
 63c:	82 2b       	or	r24, r18
 63e:	81 bb       	out	0x11, r24	; 17
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	08 95       	ret
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRD_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
 644:	21 b3       	in	r18, 0x11	; 17
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <GPIO_voidSetPinDirection+0xee>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <GPIO_voidSetPinDirection+0xea>
 654:	80 95       	com	r24
 656:	82 23       	and	r24, r18
 658:	81 bb       	out	0x11, r24	; 17
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	08 95       	ret
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	08 95       	ret
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 666:	83 e0       	ldi	r24, 0x03	; 3
 668:	08 95       	ret
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 66a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 66c:	08 95       	ret

0000066e <GPIO_voidSetPinValue>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
 66e:	68 30       	cpi	r22, 0x08	; 8
 670:	08 f0       	brcs	.+2      	; 0x674 <GPIO_voidSetPinValue+0x6>
 672:	7b c0       	rjmp	.+246    	; 0x76a <GPIO_voidSetPinValue+0xfc>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
 674:	84 30       	cpi	r24, 0x04	; 4
 676:	08 f0       	brcs	.+2      	; 0x67a <GPIO_voidSetPinValue+0xc>
 678:	7a c0       	rjmp	.+244    	; 0x76e <GPIO_voidSetPinValue+0x100>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
 67a:	42 30       	cpi	r20, 0x02	; 2
 67c:	08 f0       	brcs	.+2      	; 0x680 <GPIO_voidSetPinValue+0x12>
 67e:	79 c0       	rjmp	.+242    	; 0x772 <GPIO_voidSetPinValue+0x104>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		switch(copy_u8portID)
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	11 f1       	breq	.+68     	; 0x6c8 <GPIO_voidSetPinValue+0x5a>
 684:	30 f0       	brcs	.+12     	; 0x692 <GPIO_voidSetPinValue+0x24>
 686:	82 30       	cpi	r24, 0x02	; 2
 688:	d1 f1       	breq	.+116    	; 0x6fe <GPIO_voidSetPinValue+0x90>
 68a:	83 30       	cpi	r24, 0x03	; 3
 68c:	09 f4       	brne	.+2      	; 0x690 <GPIO_voidSetPinValue+0x22>
 68e:	52 c0       	rjmp	.+164    	; 0x734 <GPIO_voidSetPinValue+0xc6>
 690:	72 c0       	rjmp	.+228    	; 0x776 <GPIO_voidSetPinValue+0x108>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
 692:	41 30       	cpi	r20, 0x01	; 1
 694:	61 f4       	brne	.+24     	; 0x6ae <GPIO_voidSetPinValue+0x40>
					SET_BIT(PORTA_REG ,copy_u8pinID);
 696:	2b b3       	in	r18, 0x1b	; 27
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <GPIO_voidSetPinValue+0x34>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <GPIO_voidSetPinValue+0x30>
 6a6:	82 2b       	or	r24, r18
 6a8:	8b bb       	out	0x1b, r24	; 27
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	08 95       	ret
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTA_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
 6ae:	2b b3       	in	r18, 0x1b	; 27
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <GPIO_voidSetPinValue+0x4c>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	6a 95       	dec	r22
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <GPIO_voidSetPinValue+0x48>
 6be:	80 95       	com	r24
 6c0:	82 23       	and	r24, r18
 6c2:	8b bb       	out	0x1b, r24	; 27
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	08 95       	ret
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
 6c8:	41 30       	cpi	r20, 0x01	; 1
 6ca:	61 f4       	brne	.+24     	; 0x6e4 <GPIO_voidSetPinValue+0x76>
					SET_BIT(PORTB_REG ,copy_u8pinID);
 6cc:	28 b3       	in	r18, 0x18	; 24
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <GPIO_voidSetPinValue+0x6a>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	6a 95       	dec	r22
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <GPIO_voidSetPinValue+0x66>
 6dc:	82 2b       	or	r24, r18
 6de:	88 bb       	out	0x18, r24	; 24
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	08 95       	ret
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTB_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
 6e4:	28 b3       	in	r18, 0x18	; 24
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <GPIO_voidSetPinValue+0x82>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <GPIO_voidSetPinValue+0x7e>
 6f4:	80 95       	com	r24
 6f6:	82 23       	and	r24, r18
 6f8:	88 bb       	out	0x18, r24	; 24
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	08 95       	ret
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
 6fe:	41 30       	cpi	r20, 0x01	; 1
 700:	61 f4       	brne	.+24     	; 0x71a <GPIO_voidSetPinValue+0xac>
					SET_BIT(PORTC_REG ,copy_u8pinID);
 702:	25 b3       	in	r18, 0x15	; 21
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <GPIO_voidSetPinValue+0xa0>
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	6a 95       	dec	r22
 710:	e2 f7       	brpl	.-8      	; 0x70a <GPIO_voidSetPinValue+0x9c>
 712:	82 2b       	or	r24, r18
 714:	85 bb       	out	0x15, r24	; 21
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	08 95       	ret
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTC_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
 71a:	25 b3       	in	r18, 0x15	; 21
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <GPIO_voidSetPinValue+0xb8>
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	6a 95       	dec	r22
 728:	e2 f7       	brpl	.-8      	; 0x722 <GPIO_voidSetPinValue+0xb4>
 72a:	80 95       	com	r24
 72c:	82 23       	and	r24, r18
 72e:	85 bb       	out	0x15, r24	; 21
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	08 95       	ret
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
 734:	41 30       	cpi	r20, 0x01	; 1
 736:	61 f4       	brne	.+24     	; 0x750 <GPIO_voidSetPinValue+0xe2>
					SET_BIT(PORTD_REG ,copy_u8pinID);
 738:	22 b3       	in	r18, 0x12	; 18
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <GPIO_voidSetPinValue+0xd6>
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	6a 95       	dec	r22
 746:	e2 f7       	brpl	.-8      	; 0x740 <GPIO_voidSetPinValue+0xd2>
 748:	82 2b       	or	r24, r18
 74a:	82 bb       	out	0x12, r24	; 18
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	08 95       	ret
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTD_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
 750:	22 b3       	in	r18, 0x12	; 18
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <GPIO_voidSetPinValue+0xee>
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	6a 95       	dec	r22
 75e:	e2 f7       	brpl	.-8      	; 0x758 <GPIO_voidSetPinValue+0xea>
 760:	80 95       	com	r24
 762:	82 23       	and	r24, r18
 764:	82 bb       	out	0x12, r24	; 18
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	08 95       	ret
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	08 95       	ret
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	08 95       	ret
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 772:	83 e0       	ldi	r24, 0x03	; 3
 774:	08 95       	ret
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 776:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 778:	08 95       	ret

0000077a <I2C_voidMasterInit>:
	if(((TWSR_REG->TWS) << 3) != I2C_SLAV_RXD_DATA_R_NACK);

	Data = TWDR_REG;

	return Data;
}
 77a:	82 e0       	ldi	r24, 0x02	; 2
 77c:	80 b9       	out	0x00, r24	; 0
 77e:	81 b1       	in	r24, 0x01	; 1
 780:	8c 7f       	andi	r24, 0xFC	; 252
 782:	81 b9       	out	0x01, r24	; 1
 784:	81 b1       	in	r24, 0x01	; 1
 786:	87 70       	andi	r24, 0x07	; 7
 788:	81 b9       	out	0x01, r24	; 1
 78a:	08 95       	ret

0000078c <I2C_voidSendStartCondition>:
 78c:	86 b7       	in	r24, 0x36	; 54
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	86 bf       	out	0x36, r24	; 54
 792:	86 b7       	in	r24, 0x36	; 54
 794:	80 62       	ori	r24, 0x20	; 32
 796:	86 bf       	out	0x36, r24	; 54
 798:	86 b7       	in	r24, 0x36	; 54
 79a:	84 60       	ori	r24, 0x04	; 4
 79c:	86 bf       	out	0x36, r24	; 54
 79e:	06 b6       	in	r0, 0x36	; 54
 7a0:	07 fe       	sbrs	r0, 7
 7a2:	fd cf       	rjmp	.-6      	; 0x79e <I2C_voidSendStartCondition+0x12>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <I2C_voidSendStartCondition+0x1e>
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	91 b1       	in	r25, 0x01	; 1
 7ac:	96 95       	lsr	r25
 7ae:	96 95       	lsr	r25
 7b0:	96 95       	lsr	r25
 7b2:	91 30       	cpi	r25, 0x01	; 1
 7b4:	c9 f7       	brne	.-14     	; 0x7a8 <I2C_voidSendStartCondition+0x1c>
 7b6:	08 95       	ret

000007b8 <I2C_voidMasterSendSlaveAddressWrite>:
 7b8:	88 0f       	add	r24, r24
 7ba:	83 b9       	out	0x03, r24	; 3
 7bc:	83 b1       	in	r24, 0x03	; 3
 7be:	8e 7f       	andi	r24, 0xFE	; 254
 7c0:	83 b9       	out	0x03, r24	; 3
 7c2:	86 b7       	in	r24, 0x36	; 54
 7c4:	80 68       	ori	r24, 0x80	; 128
 7c6:	86 bf       	out	0x36, r24	; 54
 7c8:	86 b7       	in	r24, 0x36	; 54
 7ca:	84 60       	ori	r24, 0x04	; 4
 7cc:	86 bf       	out	0x36, r24	; 54
 7ce:	06 b6       	in	r0, 0x36	; 54
 7d0:	07 fe       	sbrs	r0, 7
 7d2:	fd cf       	rjmp	.-6      	; 0x7ce <I2C_voidMasterSendSlaveAddressWrite+0x16>
 7d4:	81 b1       	in	r24, 0x01	; 1
 7d6:	86 95       	lsr	r24
 7d8:	86 95       	lsr	r24
 7da:	86 95       	lsr	r24
 7dc:	83 30       	cpi	r24, 0x03	; 3
 7de:	11 f4       	brne	.+4      	; 0x7e4 <I2C_voidMasterSendSlaveAddressWrite+0x2c>
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	08 95       	ret
 7e4:	83 e0       	ldi	r24, 0x03	; 3
 7e6:	08 95       	ret

000007e8 <I2C_voidMasterSendDataByte>:
 7e8:	83 b9       	out	0x03, r24	; 3
 7ea:	86 b7       	in	r24, 0x36	; 54
 7ec:	80 68       	ori	r24, 0x80	; 128
 7ee:	86 bf       	out	0x36, r24	; 54
 7f0:	86 b7       	in	r24, 0x36	; 54
 7f2:	84 60       	ori	r24, 0x04	; 4
 7f4:	86 bf       	out	0x36, r24	; 54
 7f6:	06 b6       	in	r0, 0x36	; 54
 7f8:	07 fe       	sbrs	r0, 7
 7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <I2C_voidMasterSendDataByte+0xe>
 7fc:	81 b1       	in	r24, 0x01	; 1
 7fe:	86 95       	lsr	r24
 800:	86 95       	lsr	r24
 802:	86 95       	lsr	r24
 804:	85 30       	cpi	r24, 0x05	; 5
 806:	11 f4       	brne	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	08 95       	ret
 80c:	85 e0       	ldi	r24, 0x05	; 5
 80e:	08 95       	ret

00000810 <I2C_voidSendStopCondition>:


// Responsible for the SPI to receive an array of bytes, a string
void I2C_voidSendStopCondition(void) {
	TWCR_REG->TWSTO = 1;
 810:	86 b7       	in	r24, 0x36	; 54
 812:	80 61       	ori	r24, 0x10	; 16
 814:	86 bf       	out	0x36, r24	; 54

	TWCR_REG->TWINT = 1;
 816:	86 b7       	in	r24, 0x36	; 54
 818:	80 68       	ori	r24, 0x80	; 128
 81a:	86 bf       	out	0x36, r24	; 54

	TWCR_REG->TWEN = 1;
 81c:	86 b7       	in	r24, 0x36	; 54
 81e:	84 60       	ori	r24, 0x04	; 4
 820:	86 bf       	out	0x36, r24	; 54
 822:	08 95       	ret

00000824 <__vector_12>:
	CallBackPtr_SPI = Ptr_SPI;
}

// The ISR For the SPI CallBack Function
void __vector_12(void) __attribute__((signal, used));
void __vector_12(void) {
 824:	1f 92       	push	r1
 826:	0f 92       	push	r0
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	0f 92       	push	r0
 82c:	11 24       	eor	r1, r1
 82e:	2f 93       	push	r18
 830:	3f 93       	push	r19
 832:	4f 93       	push	r20
 834:	5f 93       	push	r21
 836:	6f 93       	push	r22
 838:	7f 93       	push	r23
 83a:	8f 93       	push	r24
 83c:	9f 93       	push	r25
 83e:	af 93       	push	r26
 840:	bf 93       	push	r27
 842:	ef 93       	push	r30
 844:	ff 93       	push	r31
	if(CallBackPtr_SPI != NULL) {
 846:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <CallBackPtr_SPI>
 84a:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <CallBackPtr_SPI+0x1>
 84e:	30 97       	sbiw	r30, 0x00	; 0
 850:	09 f0       	breq	.+2      	; 0x854 <__vector_12+0x30>
		CallBackPtr_SPI();
 852:	09 95       	icall
	}
}
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <__vector_10>:
	CallBackPtr_TIMER0_OVF = Ptr_TIMER;
}


void __vector_10(void) __attribute__((signal, used));
void __vector_10(void) {
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
 880:	2f 93       	push	r18
 882:	3f 93       	push	r19
 884:	4f 93       	push	r20
 886:	5f 93       	push	r21
 888:	6f 93       	push	r22
 88a:	7f 93       	push	r23
 88c:	8f 93       	push	r24
 88e:	9f 93       	push	r25
 890:	af 93       	push	r26
 892:	bf 93       	push	r27
 894:	ef 93       	push	r30
 896:	ff 93       	push	r31
	if(CallBackPtr_TIMER0_COMP != NULL) {
 898:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <CallBackPtr_TIMER0_COMP>
 89c:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <CallBackPtr_TIMER0_COMP+0x1>
 8a0:	30 97       	sbiw	r30, 0x00	; 0
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <__vector_10+0x30>
		CallBackPtr_TIMER0_COMP();
 8a4:	09 95       	icall
	}
}
 8a6:	ff 91       	pop	r31
 8a8:	ef 91       	pop	r30
 8aa:	bf 91       	pop	r27
 8ac:	af 91       	pop	r26
 8ae:	9f 91       	pop	r25
 8b0:	8f 91       	pop	r24
 8b2:	7f 91       	pop	r23
 8b4:	6f 91       	pop	r22
 8b6:	5f 91       	pop	r21
 8b8:	4f 91       	pop	r20
 8ba:	3f 91       	pop	r19
 8bc:	2f 91       	pop	r18
 8be:	0f 90       	pop	r0
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	0f 90       	pop	r0
 8c4:	1f 90       	pop	r1
 8c6:	18 95       	reti

000008c8 <__vector_11>:

void __vector_11(void) __attribute__((signal, used));
void __vector_11(void) {
 8c8:	1f 92       	push	r1
 8ca:	0f 92       	push	r0
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	0f 92       	push	r0
 8d0:	11 24       	eor	r1, r1
 8d2:	2f 93       	push	r18
 8d4:	3f 93       	push	r19
 8d6:	4f 93       	push	r20
 8d8:	5f 93       	push	r21
 8da:	6f 93       	push	r22
 8dc:	7f 93       	push	r23
 8de:	8f 93       	push	r24
 8e0:	9f 93       	push	r25
 8e2:	af 93       	push	r26
 8e4:	bf 93       	push	r27
 8e6:	ef 93       	push	r30
 8e8:	ff 93       	push	r31
	if(CallBackPtr_TIMER0_OVF != NULL) {
 8ea:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <CallBackPtr_TIMER0_OVF>
 8ee:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <CallBackPtr_TIMER0_OVF+0x1>
 8f2:	30 97       	sbiw	r30, 0x00	; 0
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <__vector_11+0x30>
		CallBackPtr_TIMER0_OVF();
 8f6:	09 95       	icall
	}
}
 8f8:	ff 91       	pop	r31
 8fa:	ef 91       	pop	r30
 8fc:	bf 91       	pop	r27
 8fe:	af 91       	pop	r26
 900:	9f 91       	pop	r25
 902:	8f 91       	pop	r24
 904:	7f 91       	pop	r23
 906:	6f 91       	pop	r22
 908:	5f 91       	pop	r21
 90a:	4f 91       	pop	r20
 90c:	3f 91       	pop	r19
 90e:	2f 91       	pop	r18
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <__vector_6>:
	CallBackPtr_TIMER1_OVF = Ptr_TIMER;
}


void __vector_6(void) __attribute__((signal, used));
void __vector_6(void) {
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	4f 93       	push	r20
 92a:	5f 93       	push	r21
 92c:	6f 93       	push	r22
 92e:	7f 93       	push	r23
 930:	8f 93       	push	r24
 932:	9f 93       	push	r25
 934:	af 93       	push	r26
 936:	bf 93       	push	r27
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_CAPT != NULL) {
 93c:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <CallBackPtr_TIMER1_CAPT>
 940:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <CallBackPtr_TIMER1_CAPT+0x1>
 944:	30 97       	sbiw	r30, 0x00	; 0
 946:	09 f0       	breq	.+2      	; 0x94a <__vector_6+0x30>
		CallBackPtr_TIMER1_CAPT();
 948:	09 95       	icall
	}
}
 94a:	ff 91       	pop	r31
 94c:	ef 91       	pop	r30
 94e:	bf 91       	pop	r27
 950:	af 91       	pop	r26
 952:	9f 91       	pop	r25
 954:	8f 91       	pop	r24
 956:	7f 91       	pop	r23
 958:	6f 91       	pop	r22
 95a:	5f 91       	pop	r21
 95c:	4f 91       	pop	r20
 95e:	3f 91       	pop	r19
 960:	2f 91       	pop	r18
 962:	0f 90       	pop	r0
 964:	0f be       	out	0x3f, r0	; 63
 966:	0f 90       	pop	r0
 968:	1f 90       	pop	r1
 96a:	18 95       	reti

0000096c <__vector_7>:

void __vector_7(void) __attribute__((signal, used));
void __vector_7(void) {
 96c:	1f 92       	push	r1
 96e:	0f 92       	push	r0
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	0f 92       	push	r0
 974:	11 24       	eor	r1, r1
 976:	2f 93       	push	r18
 978:	3f 93       	push	r19
 97a:	4f 93       	push	r20
 97c:	5f 93       	push	r21
 97e:	6f 93       	push	r22
 980:	7f 93       	push	r23
 982:	8f 93       	push	r24
 984:	9f 93       	push	r25
 986:	af 93       	push	r26
 988:	bf 93       	push	r27
 98a:	ef 93       	push	r30
 98c:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_COMPA != NULL) {
 98e:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <CallBackPtr_TIMER1_COMPA>
 992:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <CallBackPtr_TIMER1_COMPA+0x1>
 996:	30 97       	sbiw	r30, 0x00	; 0
 998:	09 f0       	breq	.+2      	; 0x99c <__vector_7+0x30>
		CallBackPtr_TIMER1_COMPA();
 99a:	09 95       	icall
	}
}
 99c:	ff 91       	pop	r31
 99e:	ef 91       	pop	r30
 9a0:	bf 91       	pop	r27
 9a2:	af 91       	pop	r26
 9a4:	9f 91       	pop	r25
 9a6:	8f 91       	pop	r24
 9a8:	7f 91       	pop	r23
 9aa:	6f 91       	pop	r22
 9ac:	5f 91       	pop	r21
 9ae:	4f 91       	pop	r20
 9b0:	3f 91       	pop	r19
 9b2:	2f 91       	pop	r18
 9b4:	0f 90       	pop	r0
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	0f 90       	pop	r0
 9ba:	1f 90       	pop	r1
 9bc:	18 95       	reti

000009be <__vector_8>:

void __vector_8(void) __attribute__((signal, used));
void __vector_8(void) {
 9be:	1f 92       	push	r1
 9c0:	0f 92       	push	r0
 9c2:	0f b6       	in	r0, 0x3f	; 63
 9c4:	0f 92       	push	r0
 9c6:	11 24       	eor	r1, r1
 9c8:	2f 93       	push	r18
 9ca:	3f 93       	push	r19
 9cc:	4f 93       	push	r20
 9ce:	5f 93       	push	r21
 9d0:	6f 93       	push	r22
 9d2:	7f 93       	push	r23
 9d4:	8f 93       	push	r24
 9d6:	9f 93       	push	r25
 9d8:	af 93       	push	r26
 9da:	bf 93       	push	r27
 9dc:	ef 93       	push	r30
 9de:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_COMPB != NULL) {
 9e0:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <CallBackPtr_TIMER1_COMPB>
 9e4:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <CallBackPtr_TIMER1_COMPB+0x1>
 9e8:	30 97       	sbiw	r30, 0x00	; 0
 9ea:	09 f0       	breq	.+2      	; 0x9ee <__vector_8+0x30>
		CallBackPtr_TIMER1_COMPB();
 9ec:	09 95       	icall
	}
}
 9ee:	ff 91       	pop	r31
 9f0:	ef 91       	pop	r30
 9f2:	bf 91       	pop	r27
 9f4:	af 91       	pop	r26
 9f6:	9f 91       	pop	r25
 9f8:	8f 91       	pop	r24
 9fa:	7f 91       	pop	r23
 9fc:	6f 91       	pop	r22
 9fe:	5f 91       	pop	r21
 a00:	4f 91       	pop	r20
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	0f 90       	pop	r0
 a0c:	1f 90       	pop	r1
 a0e:	18 95       	reti

00000a10 <__vector_9>:

void __vector_9(void) __attribute__((signal, used));
void __vector_9(void) {
 a10:	1f 92       	push	r1
 a12:	0f 92       	push	r0
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	0f 92       	push	r0
 a18:	11 24       	eor	r1, r1
 a1a:	2f 93       	push	r18
 a1c:	3f 93       	push	r19
 a1e:	4f 93       	push	r20
 a20:	5f 93       	push	r21
 a22:	6f 93       	push	r22
 a24:	7f 93       	push	r23
 a26:	8f 93       	push	r24
 a28:	9f 93       	push	r25
 a2a:	af 93       	push	r26
 a2c:	bf 93       	push	r27
 a2e:	ef 93       	push	r30
 a30:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_OVF != NULL) {
 a32:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <CallBackPtr_TIMER1_OVF>
 a36:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <CallBackPtr_TIMER1_OVF+0x1>
 a3a:	30 97       	sbiw	r30, 0x00	; 0
 a3c:	09 f0       	breq	.+2      	; 0xa40 <__vector_9+0x30>
		CallBackPtr_TIMER1_OVF();
 a3e:	09 95       	icall
	}
}
 a40:	ff 91       	pop	r31
 a42:	ef 91       	pop	r30
 a44:	bf 91       	pop	r27
 a46:	af 91       	pop	r26
 a48:	9f 91       	pop	r25
 a4a:	8f 91       	pop	r24
 a4c:	7f 91       	pop	r23
 a4e:	6f 91       	pop	r22
 a50:	5f 91       	pop	r21
 a52:	4f 91       	pop	r20
 a54:	3f 91       	pop	r19
 a56:	2f 91       	pop	r18
 a58:	0f 90       	pop	r0
 a5a:	0f be       	out	0x3f, r0	; 63
 a5c:	0f 90       	pop	r0
 a5e:	1f 90       	pop	r1
 a60:	18 95       	reti

00000a62 <__vector_13>:
}


// The ISR For the UART RXC Callback Function
void __vector_13(void) __attribute__((signal, used));
void __vector_13(void) {
 a62:	1f 92       	push	r1
 a64:	0f 92       	push	r0
 a66:	0f b6       	in	r0, 0x3f	; 63
 a68:	0f 92       	push	r0
 a6a:	11 24       	eor	r1, r1
 a6c:	2f 93       	push	r18
 a6e:	3f 93       	push	r19
 a70:	4f 93       	push	r20
 a72:	5f 93       	push	r21
 a74:	6f 93       	push	r22
 a76:	7f 93       	push	r23
 a78:	8f 93       	push	r24
 a7a:	9f 93       	push	r25
 a7c:	af 93       	push	r26
 a7e:	bf 93       	push	r27
 a80:	ef 93       	push	r30
 a82:	ff 93       	push	r31
	if(CallBackPtr_UART_RXC != NULL) {
 a84:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <CallBackPtr_UART_RXC>
 a88:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <CallBackPtr_UART_RXC+0x1>
 a8c:	30 97       	sbiw	r30, 0x00	; 0
 a8e:	09 f0       	breq	.+2      	; 0xa92 <__vector_13+0x30>
		CallBackPtr_UART_RXC();
 a90:	09 95       	icall
	}
}
 a92:	ff 91       	pop	r31
 a94:	ef 91       	pop	r30
 a96:	bf 91       	pop	r27
 a98:	af 91       	pop	r26
 a9a:	9f 91       	pop	r25
 a9c:	8f 91       	pop	r24
 a9e:	7f 91       	pop	r23
 aa0:	6f 91       	pop	r22
 aa2:	5f 91       	pop	r21
 aa4:	4f 91       	pop	r20
 aa6:	3f 91       	pop	r19
 aa8:	2f 91       	pop	r18
 aaa:	0f 90       	pop	r0
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	0f 90       	pop	r0
 ab0:	1f 90       	pop	r1
 ab2:	18 95       	reti

00000ab4 <__vector_14>:

// The ISR For the UART UDRE Callback Function
void __vector_14(void) __attribute__((signal, used));
void __vector_14(void) {
 ab4:	1f 92       	push	r1
 ab6:	0f 92       	push	r0
 ab8:	0f b6       	in	r0, 0x3f	; 63
 aba:	0f 92       	push	r0
 abc:	11 24       	eor	r1, r1
 abe:	2f 93       	push	r18
 ac0:	3f 93       	push	r19
 ac2:	4f 93       	push	r20
 ac4:	5f 93       	push	r21
 ac6:	6f 93       	push	r22
 ac8:	7f 93       	push	r23
 aca:	8f 93       	push	r24
 acc:	9f 93       	push	r25
 ace:	af 93       	push	r26
 ad0:	bf 93       	push	r27
 ad2:	ef 93       	push	r30
 ad4:	ff 93       	push	r31
	if(CallBackPtr_UART_UDRE != NULL) {
 ad6:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <CallBackPtr_UART_UDRE>
 ada:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <CallBackPtr_UART_UDRE+0x1>
 ade:	30 97       	sbiw	r30, 0x00	; 0
 ae0:	09 f0       	breq	.+2      	; 0xae4 <__vector_14+0x30>
		CallBackPtr_UART_UDRE();
 ae2:	09 95       	icall
	}
}
 ae4:	ff 91       	pop	r31
 ae6:	ef 91       	pop	r30
 ae8:	bf 91       	pop	r27
 aea:	af 91       	pop	r26
 aec:	9f 91       	pop	r25
 aee:	8f 91       	pop	r24
 af0:	7f 91       	pop	r23
 af2:	6f 91       	pop	r22
 af4:	5f 91       	pop	r21
 af6:	4f 91       	pop	r20
 af8:	3f 91       	pop	r19
 afa:	2f 91       	pop	r18
 afc:	0f 90       	pop	r0
 afe:	0f be       	out	0x3f, r0	; 63
 b00:	0f 90       	pop	r0
 b02:	1f 90       	pop	r1
 b04:	18 95       	reti

00000b06 <__vector_15>:

// The ISR For the UART TXC Callback Function
void __vector_15(void) __attribute__((signal, used));
void __vector_15(void) {
 b06:	1f 92       	push	r1
 b08:	0f 92       	push	r0
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	0f 92       	push	r0
 b0e:	11 24       	eor	r1, r1
 b10:	2f 93       	push	r18
 b12:	3f 93       	push	r19
 b14:	4f 93       	push	r20
 b16:	5f 93       	push	r21
 b18:	6f 93       	push	r22
 b1a:	7f 93       	push	r23
 b1c:	8f 93       	push	r24
 b1e:	9f 93       	push	r25
 b20:	af 93       	push	r26
 b22:	bf 93       	push	r27
 b24:	ef 93       	push	r30
 b26:	ff 93       	push	r31
	if(CallBackPtr_UART_TXC != NULL) {
 b28:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <CallBackPtr_UART_TXC>
 b2c:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <CallBackPtr_UART_TXC+0x1>
 b30:	30 97       	sbiw	r30, 0x00	; 0
 b32:	09 f0       	breq	.+2      	; 0xb36 <__vector_15+0x30>
		CallBackPtr_UART_TXC();
 b34:	09 95       	icall
	}
}
 b36:	ff 91       	pop	r31
 b38:	ef 91       	pop	r30
 b3a:	bf 91       	pop	r27
 b3c:	af 91       	pop	r26
 b3e:	9f 91       	pop	r25
 b40:	8f 91       	pop	r24
 b42:	7f 91       	pop	r23
 b44:	6f 91       	pop	r22
 b46:	5f 91       	pop	r21
 b48:	4f 91       	pop	r20
 b4a:	3f 91       	pop	r19
 b4c:	2f 91       	pop	r18
 b4e:	0f 90       	pop	r0
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	0f 90       	pop	r0
 b54:	1f 90       	pop	r1
 b56:	18 95       	reti

00000b58 <_exit>:
 b58:	f8 94       	cli

00000b5a <__stop_program>:
 b5a:	ff cf       	rjmp	.-2      	; 0xb5a <__stop_program>
