
ATMEL_I2C_TXD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000b80  00000c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080009c  0080009c  00000c50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035b8  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000138e  00000000  00000000  00004684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000215f  00000000  00000000  00005a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bbc  00000000  00000000  00007b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000169f  00000000  00000000  00008730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024b3  00000000  00000000  00009dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000c282  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_1>
   8:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_2>
   c:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_6>
  1c:	0c 94 c8 04 	jmp	0x990	; 0x990 <__vector_7>
  20:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_8>
  24:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__vector_9>
  28:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__vector_10>
  2c:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__vector_11>
  30:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_12>
  34:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__vector_13>
  38:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_14>
  3c:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__vector_15>
  40:	0c 94 19 02 	jmp	0x432	; 0x432 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e9       	ldi	r26, 0x9C	; 156
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3b       	cpi	r26, 0xB8	; 184
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  8a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <System_Initialization>:
u8 data = 'P';
//u8 KeyData = 0;

void System_Initialization(void) {
	// Initializing LCD Module
	LCD_voidInit();
  92:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_voidInit>
	LCD_voidSetCursor(0, 0);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 02 02 	call	0x404	; 0x404 <LCD_voidSetCursor>
	LCD_voidDisplayString("I2C TRANSMIT");
  9e:	81 e6       	ldi	r24, 0x61	; 97
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	83 e2       	ldi	r24, 0x23	; 35
  a8:	94 ef       	ldi	r25, 0xF4	; 244
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <System_Initialization+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <System_Initialization+0x1e>
  b0:	00 00       	nop

	// Initializing I2C Module Master
	_delay_ms(250);
	I2C_voidMasterInit();
  b2:	0e 94 c9 03 	call	0x792	; 0x792 <I2C_voidMasterInit>
  b6:	83 e2       	ldi	r24, 0x23	; 35
  b8:	94 ef       	ldi	r25, 0xF4	; 244
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <System_Initialization+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <System_Initialization+0x2e>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <executeMain_TXD>:
	_delay_ms(250);
}

void executeMain_TXD(void) {
	LCD_voidSetCursor(1, 0);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 02 02 	call	0x404	; 0x404 <LCD_voidSetCursor>
	LCD_voidDisplayString("Sending..");
  cc:	8f e6       	ldi	r24, 0x6F	; 111
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_voidDisplayString>

	I2C_voidSendStartCondition();
  d4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <I2C_voidSendStartCondition>
		LCD_voidSetCursor(1, 0);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 02 02 	call	0x404	; 0x404 <LCD_voidSetCursor>
		LCD_voidDisplayString("1Sending..");
  e0:	8e e6       	ldi	r24, 0x6E	; 110
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_voidDisplayString>
	I2C_voidMasterSendSlaveAddressWrite(0x02);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <I2C_voidMasterSendSlaveAddressWrite>
		LCD_voidSetCursor(1, 0);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 02 02 	call	0x404	; 0x404 <LCD_voidSetCursor>
		LCD_voidDisplayString("2Sending..");
  f6:	89 e7       	ldi	r24, 0x79	; 121
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_voidDisplayString>
	I2C_voidMasterSendDataByte(data);
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	0e 94 06 04 	call	0x80c	; 0x80c <I2C_voidMasterSendDataByte>
		LCD_voidSetCursor(1, 0);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 02 02 	call	0x404	; 0x404 <LCD_voidSetCursor>
		LCD_voidDisplayString("3Sending..");
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_voidDisplayString>
	//_delay_ms(100);
	I2C_voidSendStopCondition();
 116:	0e 94 1a 04 	call	0x834	; 0x834 <I2C_voidSendStopCondition>

	LCD_voidSetCursor(2, 0);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 02 02 	call	0x404	; 0x404 <LCD_voidSetCursor>
	LCD_voidDisplayString("TxD: ");
 122:	8f e8       	ldi	r24, 0x8F	; 143
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_voidDisplayString>
	LCD_voidSetCursor(2, 5);
 12a:	65 e0       	ldi	r22, 0x05	; 5
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 02 02 	call	0x404	; 0x404 <LCD_voidSetCursor>
	LCD_voidSendData(data);
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidSendData>

	LCD_voidSetCursor(3, 0);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	0e 94 02 02 	call	0x404	; 0x404 <LCD_voidSetCursor>
	LCD_voidDisplayString("Done!");
 142:	85 e9       	ldi	r24, 0x95	; 149
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_voidDisplayString>
 14a:	08 95       	ret

0000014c <main>:
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void)
{
	System_Initialization();
 14c:	0e 94 49 00 	call	0x92	; 0x92 <System_Initialization>
	executeMain_TXD();
 150:	0e 94 62 00 	call	0xc4	; 0xc4 <executeMain_TXD>
 154:	ff cf       	rjmp	.-2      	; 0x154 <main+0x8>

00000156 <LCD_voidSendCommand>:

}


// Sends a command to the LCD
void LCD_voidSendCommand(u8 copy_u8Command) {
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
	// Set RS Pin to '0'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 164:	89 ef       	ldi	r24, 0xF9	; 249
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_voidSendCommand+0x12>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_voidSendCommand+0x18>
 16e:	00 00       	nop
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 17a:	89 ef       	ldi	r24, 0xF9	; 249
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_voidSendCommand+0x28>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_voidSendCommand+0x2e>
 184:	00 00       	nop
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
 186:	c4 fb       	bst	r28, 4
 188:	44 27       	eor	r20, r20
 18a:	40 f9       	bld	r20, 0
 18c:	63 e0       	ldi	r22, 0x03	; 3
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
 194:	c5 fb       	bst	r28, 5
 196:	44 27       	eor	r20, r20
 198:	40 f9       	bld	r20, 0
 19a:	64 e0       	ldi	r22, 0x04	; 4
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
 1a2:	c6 fb       	bst	r28, 6
 1a4:	44 27       	eor	r20, r20
 1a6:	40 f9       	bld	r20, 0
 1a8:	65 e0       	ldi	r22, 0x05	; 5
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
 1b0:	4c 2f       	mov	r20, r28
 1b2:	44 1f       	adc	r20, r20
 1b4:	44 27       	eor	r20, r20
 1b6:	44 1f       	adc	r20, r20
 1b8:	66 e0       	ldi	r22, 0x06	; 6
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 1c0:	89 ef       	ldi	r24, 0xF9	; 249
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_voidSendCommand+0x6e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_voidSendCommand+0x74>
 1ca:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 1d6:	89 ef       	ldi	r24, 0xF9	; 249
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_voidSendCommand+0x84>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_voidSendCommand+0x8a>
 1e0:	00 00       	nop
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 1ec:	89 ef       	ldi	r24, 0xF9	; 249
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_voidSendCommand+0x9a>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_voidSendCommand+0xa0>
 1f6:	00 00       	nop
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
 1f8:	4c 2f       	mov	r20, r28
 1fa:	41 70       	andi	r20, 0x01	; 1
 1fc:	63 e0       	ldi	r22, 0x03	; 3
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
 204:	c1 fb       	bst	r28, 1
 206:	44 27       	eor	r20, r20
 208:	40 f9       	bld	r20, 0
 20a:	64 e0       	ldi	r22, 0x04	; 4
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
 212:	c2 fb       	bst	r28, 2
 214:	44 27       	eor	r20, r20
 216:	40 f9       	bld	r20, 0
 218:	65 e0       	ldi	r22, 0x05	; 5
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
 220:	c3 fb       	bst	r28, 3
 222:	44 27       	eor	r20, r20
 224:	40 f9       	bld	r20, 0
 226:	66 e0       	ldi	r22, 0x06	; 6
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 22e:	89 ef       	ldi	r24, 0xF9	; 249
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_voidSendCommand+0xdc>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_voidSendCommand+0xe2>
 238:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 244:	89 ef       	ldi	r24, 0xF9	; 249
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_voidSendCommand+0xf2>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_voidSendCommand+0xf8>
 24e:	00 00       	nop
		_delay_ms(1);
#endif
}
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <LCD_voidInit>:
 *******************************************************************************/

// Initializes and enables the LCD Module to start functionality
void LCD_voidInit(void) {
	// Initialize RS Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 bd 02 	call	0x57a	; 0x57a <GPIO_voidSetPinDirection>

	// Initialize Enable Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	62 e0       	ldi	r22, 0x02	; 2
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 bd 02 	call	0x57a	; 0x57a <GPIO_voidSetPinDirection>
 268:	87 e8       	ldi	r24, 0x87	; 135
 26a:	93 e1       	ldi	r25, 0x13	; 19
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_voidInit+0x18>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_voidInit+0x1e>
 272:	00 00       	nop
	if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_voidSetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
		LCD_voidSendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}
	else {
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 bd 02 	call	0x57a	; 0x57a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	64 e0       	ldi	r22, 0x04	; 4
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 bd 02 	call	0x57a	; 0x57a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	65 e0       	ldi	r22, 0x05	; 5
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 bd 02 	call	0x57a	; 0x57a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	66 e0       	ldi	r22, 0x06	; 6
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 bd 02 	call	0x57a	; 0x57a <GPIO_voidSetPinDirection>


		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT1);
 29c:	83 e3       	ldi	r24, 0x33	; 51
 29e:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT2);
 2a2:	82 e3       	ldi	r24, 0x32	; 50
 2a4:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_5x7_DOTS);
 2a8:	88 e2       	ldi	r24, 0x28	; 40
 2aa:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_voidSendCommand>
 2ae:	83 ef       	ldi	r24, 0xF3	; 243
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_voidInit+0x5e>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_voidInit+0x64>
 2b8:	00 00       	nop
		//LCD_voidSendCommand(LCD_2LINES_FOUR_BIT);
		_delay_ms(2);
	}

	LCD_voidSendCommand(LCD_CURSOR_OFF);
 2ba:	8c e0       	ldi	r24, 0x0C	; 12
 2bc:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_voidSendCommand>
 2c0:	83 ef       	ldi	r24, 0xF3	; 243
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_voidInit+0x70>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_voidInit+0x76>
 2ca:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_voidSendCommand>
 2d2:	83 ef       	ldi	r24, 0xF3	; 243
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_voidInit+0x82>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_voidInit+0x88>
 2dc:	00 00       	nop
 2de:	08 95       	ret

000002e0 <LCD_voidSendData>:
#endif
}


// Displays a character on the LCD
void LCD_voidSendData(u8 copy_u8data) {
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
	// Set RS Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 2ee:	89 ef       	ldi	r24, 0xF9	; 249
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_voidSendData+0x12>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_voidSendData+0x18>
 2f8:	00 00       	nop
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 304:	89 ef       	ldi	r24, 0xF9	; 249
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_voidSendData+0x28>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_voidSendData+0x2e>
 30e:	00 00       	nop
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
 310:	c4 fb       	bst	r28, 4
 312:	44 27       	eor	r20, r20
 314:	40 f9       	bld	r20, 0
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
 31e:	c5 fb       	bst	r28, 5
 320:	44 27       	eor	r20, r20
 322:	40 f9       	bld	r20, 0
 324:	64 e0       	ldi	r22, 0x04	; 4
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
 32c:	c6 fb       	bst	r28, 6
 32e:	44 27       	eor	r20, r20
 330:	40 f9       	bld	r20, 0
 332:	65 e0       	ldi	r22, 0x05	; 5
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
 33a:	4c 2f       	mov	r20, r28
 33c:	44 1f       	adc	r20, r20
 33e:	44 27       	eor	r20, r20
 340:	44 1f       	adc	r20, r20
 342:	66 e0       	ldi	r22, 0x06	; 6
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 34a:	89 ef       	ldi	r24, 0xF9	; 249
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <LCD_voidSendData+0x6e>
 352:	00 c0       	rjmp	.+0      	; 0x354 <LCD_voidSendData+0x74>
 354:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 360:	89 ef       	ldi	r24, 0xF9	; 249
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_voidSendData+0x84>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_voidSendData+0x8a>
 36a:	00 00       	nop
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 376:	89 ef       	ldi	r24, 0xF9	; 249
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_voidSendData+0x9a>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_voidSendData+0xa0>
 380:	00 00       	nop
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
 382:	4c 2f       	mov	r20, r28
 384:	41 70       	andi	r20, 0x01	; 1
 386:	63 e0       	ldi	r22, 0x03	; 3
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
 38e:	c1 fb       	bst	r28, 1
 390:	44 27       	eor	r20, r20
 392:	40 f9       	bld	r20, 0
 394:	64 e0       	ldi	r22, 0x04	; 4
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
 39c:	c2 fb       	bst	r28, 2
 39e:	44 27       	eor	r20, r20
 3a0:	40 f9       	bld	r20, 0
 3a2:	65 e0       	ldi	r22, 0x05	; 5
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
 3aa:	c3 fb       	bst	r28, 3
 3ac:	44 27       	eor	r20, r20
 3ae:	40 f9       	bld	r20, 0
 3b0:	66 e0       	ldi	r22, 0x06	; 6
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 3b8:	89 ef       	ldi	r24, 0xF9	; 249
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_voidSendData+0xdc>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_voidSendData+0xe2>
 3c2:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 43 03 	call	0x686	; 0x686 <GPIO_voidSetPinValue>
 3ce:	89 ef       	ldi	r24, 0xF9	; 249
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_voidSendData+0xf2>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_voidSendData+0xf8>
 3d8:	00 00       	nop
		_delay_ms(1);
#endif
}
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <LCD_voidDisplayString>:


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	8c 01       	movw	r16, r24
	u8 i = 0;
 3e6:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0') {
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <LCD_voidDisplayString+0x12>
		LCD_voidSendData(str[i]);
 3ea:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_voidSendData>
		i++;
 3ee:	cf 5f       	subi	r28, 0xFF	; 255


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
	u8 i = 0;
	while(str[i] != '\0') {
 3f0:	f8 01       	movw	r30, r16
 3f2:	ec 0f       	add	r30, r28
 3f4:	f1 1d       	adc	r31, r1
 3f6:	80 81       	ld	r24, Z
 3f8:	81 11       	cpse	r24, r1
 3fa:	f7 cf       	rjmp	.-18     	; 0x3ea <LCD_voidDisplayString+0xc>
		LCD_voidSendData(str[i]);
		i++;
	}
}
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	08 95       	ret

00000404 <LCD_voidSetCursor>:
// Chooses where the cursor would stand on the LCD to type from it
void LCD_voidSetCursor(u8 copy_u8row, u8 copy_u8_col) {
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	31 f0       	breq	.+12     	; 0x414 <LCD_voidSetCursor+0x10>
 408:	70 f0       	brcs	.+28     	; 0x426 <LCD_voidSetCursor+0x22>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	31 f0       	breq	.+12     	; 0x41a <LCD_voidSetCursor+0x16>
 40e:	83 30       	cpi	r24, 0x03	; 3
 410:	39 f0       	breq	.+14     	; 0x420 <LCD_voidSetCursor+0x1c>
 412:	0a c0       	rjmp	.+20     	; 0x428 <LCD_voidSetCursor+0x24>
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
			break;
		case LINE1:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x40;
 414:	90 e4       	ldi	r25, 0x40	; 64
 416:	96 0f       	add	r25, r22
			break;
 418:	07 c0       	rjmp	.+14     	; 0x428 <LCD_voidSetCursor+0x24>
		case LINE2:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x10;
 41a:	90 e1       	ldi	r25, 0x10	; 16
 41c:	96 0f       	add	r25, r22
			break;
 41e:	04 c0       	rjmp	.+8      	; 0x428 <LCD_voidSetCursor+0x24>
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
 420:	90 e5       	ldi	r25, 0x50	; 80
 422:	96 0f       	add	r25, r22
			break;
 424:	01 c0       	rjmp	.+2      	; 0x428 <LCD_voidSetCursor+0x24>
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
 426:	96 2f       	mov	r25, r22
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
			break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_voidSendCommand(LCD_MEMORY_ADDRESS | LINE0_ADDRESS);
 428:	89 2f       	mov	r24, r25
 42a:	80 68       	ori	r24, 0x80	; 128
 42c:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_voidSendCommand>
 430:	08 95       	ret

00000432 <__vector_16>:
	CallBackPtr_ADC = Ptr_ADC;
}


void __vector_16(void) __attribute__((signal, used));
void __vector_16(void) {
 432:	1f 92       	push	r1
 434:	0f 92       	push	r0
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	0f 92       	push	r0
 43a:	11 24       	eor	r1, r1
 43c:	2f 93       	push	r18
 43e:	3f 93       	push	r19
 440:	4f 93       	push	r20
 442:	5f 93       	push	r21
 444:	6f 93       	push	r22
 446:	7f 93       	push	r23
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
 44c:	af 93       	push	r26
 44e:	bf 93       	push	r27
 450:	ef 93       	push	r30
 452:	ff 93       	push	r31
	if(CallBackPtr_ADC != NULL) {
 454:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <__data_end>
 458:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <__data_end+0x1>
 45c:	30 97       	sbiw	r30, 0x00	; 0
 45e:	09 f0       	breq	.+2      	; 0x462 <__vector_16+0x30>
		CallBackPtr_ADC();
 460:	09 95       	icall
	}
}
 462:	ff 91       	pop	r31
 464:	ef 91       	pop	r30
 466:	bf 91       	pop	r27
 468:	af 91       	pop	r26
 46a:	9f 91       	pop	r25
 46c:	8f 91       	pop	r24
 46e:	7f 91       	pop	r23
 470:	6f 91       	pop	r22
 472:	5f 91       	pop	r21
 474:	4f 91       	pop	r20
 476:	3f 91       	pop	r19
 478:	2f 91       	pop	r18
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <__vector_1>:
}


// Disables Compiler Optimizations & verifies callback not empty
void __vector_1(void) __attribute__((signal, used));
void __vector_1(void) {
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	4f 93       	push	r20
 494:	5f 93       	push	r21
 496:	6f 93       	push	r22
 498:	7f 93       	push	r23
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	af 93       	push	r26
 4a0:	bf 93       	push	r27
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
	if(CallBackPtr_INT0 != NULL) {
 4a6:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <CallBackPtr_INT0>
 4aa:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <CallBackPtr_INT0+0x1>
 4ae:	30 97       	sbiw	r30, 0x00	; 0
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__vector_1+0x30>
		CallBackPtr_INT0();
 4b2:	09 95       	icall
	}
}
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	bf 91       	pop	r27
 4ba:	af 91       	pop	r26
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	7f 91       	pop	r23
 4c2:	6f 91       	pop	r22
 4c4:	5f 91       	pop	r21
 4c6:	4f 91       	pop	r20
 4c8:	3f 91       	pop	r19
 4ca:	2f 91       	pop	r18
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_2>:

void __vector_2(void) __attribute__((signal, used));
void __vector_2(void) {
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
	if(CallBackPtr_INT1 != NULL) {
 4f8:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <CallBackPtr_INT1>
 4fc:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <CallBackPtr_INT1+0x1>
 500:	30 97       	sbiw	r30, 0x00	; 0
 502:	09 f0       	breq	.+2      	; 0x506 <__vector_2+0x30>
		CallBackPtr_INT1();
 504:	09 95       	icall
	}
}
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	bf 91       	pop	r27
 50c:	af 91       	pop	r26
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	7f 91       	pop	r23
 514:	6f 91       	pop	r22
 516:	5f 91       	pop	r21
 518:	4f 91       	pop	r20
 51a:	3f 91       	pop	r19
 51c:	2f 91       	pop	r18
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <__vector_3>:

void __vector_3(void) __attribute__((signal, used));
void __vector_3(void) {
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	6f 93       	push	r22
 53c:	7f 93       	push	r23
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
	if(CallBackPtr_INT2 != NULL) {
 54a:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <CallBackPtr_INT2>
 54e:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <CallBackPtr_INT2+0x1>
 552:	30 97       	sbiw	r30, 0x00	; 0
 554:	09 f0       	breq	.+2      	; 0x558 <__vector_3+0x30>
		CallBackPtr_INT2();
 556:	09 95       	icall
	}
}
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <GPIO_voidSetPinDirection>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
 57a:	68 30       	cpi	r22, 0x08	; 8
 57c:	08 f0       	brcs	.+2      	; 0x580 <GPIO_voidSetPinDirection+0x6>
 57e:	7b c0       	rjmp	.+246    	; 0x676 <GPIO_voidSetPinDirection+0xfc>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
 580:	84 30       	cpi	r24, 0x04	; 4
 582:	08 f0       	brcs	.+2      	; 0x586 <GPIO_voidSetPinDirection+0xc>
 584:	7a c0       	rjmp	.+244    	; 0x67a <GPIO_voidSetPinDirection+0x100>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
 586:	42 30       	cpi	r20, 0x02	; 2
 588:	08 f0       	brcs	.+2      	; 0x58c <GPIO_voidSetPinDirection+0x12>
 58a:	79 c0       	rjmp	.+242    	; 0x67e <GPIO_voidSetPinDirection+0x104>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	11 f1       	breq	.+68     	; 0x5d4 <GPIO_voidSetPinDirection+0x5a>
 590:	30 f0       	brcs	.+12     	; 0x59e <GPIO_voidSetPinDirection+0x24>
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	d1 f1       	breq	.+116    	; 0x60a <GPIO_voidSetPinDirection+0x90>
 596:	83 30       	cpi	r24, 0x03	; 3
 598:	09 f4       	brne	.+2      	; 0x59c <GPIO_voidSetPinDirection+0x22>
 59a:	52 c0       	rjmp	.+164    	; 0x640 <GPIO_voidSetPinDirection+0xc6>
 59c:	72 c0       	rjmp	.+228    	; 0x682 <GPIO_voidSetPinDirection+0x108>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 59e:	41 30       	cpi	r20, 0x01	; 1
 5a0:	61 f4       	brne	.+24     	; 0x5ba <GPIO_voidSetPinDirection+0x40>
					SET_BIT(DDRA_REG, copy_u8pinID);
 5a2:	2a b3       	in	r18, 0x1a	; 26
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <GPIO_voidSetPinDirection+0x34>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <GPIO_voidSetPinDirection+0x30>
 5b2:	82 2b       	or	r24, r18
 5b4:	8a bb       	out	0x1a, r24	; 26
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	08 95       	ret
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRA_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
 5ba:	2a b3       	in	r18, 0x1a	; 26
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <GPIO_voidSetPinDirection+0x4c>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <GPIO_voidSetPinDirection+0x48>
 5ca:	80 95       	com	r24
 5cc:	82 23       	and	r24, r18
 5ce:	8a bb       	out	0x1a, r24	; 26
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	08 95       	ret
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 5d4:	41 30       	cpi	r20, 0x01	; 1
 5d6:	61 f4       	brne	.+24     	; 0x5f0 <GPIO_voidSetPinDirection+0x76>
					SET_BIT(DDRB_REG, copy_u8pinID);
 5d8:	27 b3       	in	r18, 0x17	; 23
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <GPIO_voidSetPinDirection+0x6a>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <GPIO_voidSetPinDirection+0x66>
 5e8:	82 2b       	or	r24, r18
 5ea:	87 bb       	out	0x17, r24	; 23
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	08 95       	ret
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRB_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
 5f0:	27 b3       	in	r18, 0x17	; 23
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <GPIO_voidSetPinDirection+0x82>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	6a 95       	dec	r22
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <GPIO_voidSetPinDirection+0x7e>
 600:	80 95       	com	r24
 602:	82 23       	and	r24, r18
 604:	87 bb       	out	0x17, r24	; 23
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	08 95       	ret
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 60a:	41 30       	cpi	r20, 0x01	; 1
 60c:	61 f4       	brne	.+24     	; 0x626 <GPIO_voidSetPinDirection+0xac>
					SET_BIT(DDRC_REG, copy_u8pinID);
 60e:	24 b3       	in	r18, 0x14	; 20
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <GPIO_voidSetPinDirection+0xa0>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	6a 95       	dec	r22
 61c:	e2 f7       	brpl	.-8      	; 0x616 <GPIO_voidSetPinDirection+0x9c>
 61e:	82 2b       	or	r24, r18
 620:	84 bb       	out	0x14, r24	; 20
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	08 95       	ret
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRC_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
 626:	24 b3       	in	r18, 0x14	; 20
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <GPIO_voidSetPinDirection+0xb8>
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	6a 95       	dec	r22
 634:	e2 f7       	brpl	.-8      	; 0x62e <GPIO_voidSetPinDirection+0xb4>
 636:	80 95       	com	r24
 638:	82 23       	and	r24, r18
 63a:	84 bb       	out	0x14, r24	; 20
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	08 95       	ret
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 640:	41 30       	cpi	r20, 0x01	; 1
 642:	61 f4       	brne	.+24     	; 0x65c <GPIO_voidSetPinDirection+0xe2>
					SET_BIT(DDRD_REG, copy_u8pinID);
 644:	21 b3       	in	r18, 0x11	; 17
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <GPIO_voidSetPinDirection+0xd6>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <GPIO_voidSetPinDirection+0xd2>
 654:	82 2b       	or	r24, r18
 656:	81 bb       	out	0x11, r24	; 17
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	08 95       	ret
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRD_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
 65c:	21 b3       	in	r18, 0x11	; 17
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 c0       	rjmp	.+4      	; 0x668 <GPIO_voidSetPinDirection+0xee>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	6a 95       	dec	r22
 66a:	e2 f7       	brpl	.-8      	; 0x664 <GPIO_voidSetPinDirection+0xea>
 66c:	80 95       	com	r24
 66e:	82 23       	and	r24, r18
 670:	81 bb       	out	0x11, r24	; 17
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	08 95       	ret
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	08 95       	ret
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	08 95       	ret
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 67e:	83 e0       	ldi	r24, 0x03	; 3
 680:	08 95       	ret
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 682:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 684:	08 95       	ret

00000686 <GPIO_voidSetPinValue>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
 686:	68 30       	cpi	r22, 0x08	; 8
 688:	08 f0       	brcs	.+2      	; 0x68c <GPIO_voidSetPinValue+0x6>
 68a:	7b c0       	rjmp	.+246    	; 0x782 <GPIO_voidSetPinValue+0xfc>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
 68c:	84 30       	cpi	r24, 0x04	; 4
 68e:	08 f0       	brcs	.+2      	; 0x692 <GPIO_voidSetPinValue+0xc>
 690:	7a c0       	rjmp	.+244    	; 0x786 <GPIO_voidSetPinValue+0x100>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
 692:	42 30       	cpi	r20, 0x02	; 2
 694:	08 f0       	brcs	.+2      	; 0x698 <GPIO_voidSetPinValue+0x12>
 696:	79 c0       	rjmp	.+242    	; 0x78a <GPIO_voidSetPinValue+0x104>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		switch(copy_u8portID)
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	11 f1       	breq	.+68     	; 0x6e0 <GPIO_voidSetPinValue+0x5a>
 69c:	30 f0       	brcs	.+12     	; 0x6aa <GPIO_voidSetPinValue+0x24>
 69e:	82 30       	cpi	r24, 0x02	; 2
 6a0:	d1 f1       	breq	.+116    	; 0x716 <GPIO_voidSetPinValue+0x90>
 6a2:	83 30       	cpi	r24, 0x03	; 3
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <GPIO_voidSetPinValue+0x22>
 6a6:	52 c0       	rjmp	.+164    	; 0x74c <GPIO_voidSetPinValue+0xc6>
 6a8:	72 c0       	rjmp	.+228    	; 0x78e <GPIO_voidSetPinValue+0x108>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
 6aa:	41 30       	cpi	r20, 0x01	; 1
 6ac:	61 f4       	brne	.+24     	; 0x6c6 <GPIO_voidSetPinValue+0x40>
					SET_BIT(PORTA_REG ,copy_u8pinID);
 6ae:	2b b3       	in	r18, 0x1b	; 27
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <GPIO_voidSetPinValue+0x34>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	6a 95       	dec	r22
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <GPIO_voidSetPinValue+0x30>
 6be:	82 2b       	or	r24, r18
 6c0:	8b bb       	out	0x1b, r24	; 27
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	08 95       	ret
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTA_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
 6c6:	2b b3       	in	r18, 0x1b	; 27
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <GPIO_voidSetPinValue+0x4c>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <GPIO_voidSetPinValue+0x48>
 6d6:	80 95       	com	r24
 6d8:	82 23       	and	r24, r18
 6da:	8b bb       	out	0x1b, r24	; 27
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	08 95       	ret
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
 6e0:	41 30       	cpi	r20, 0x01	; 1
 6e2:	61 f4       	brne	.+24     	; 0x6fc <GPIO_voidSetPinValue+0x76>
					SET_BIT(PORTB_REG ,copy_u8pinID);
 6e4:	28 b3       	in	r18, 0x18	; 24
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <GPIO_voidSetPinValue+0x6a>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	6a 95       	dec	r22
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <GPIO_voidSetPinValue+0x66>
 6f4:	82 2b       	or	r24, r18
 6f6:	88 bb       	out	0x18, r24	; 24
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	08 95       	ret
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTB_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
 6fc:	28 b3       	in	r18, 0x18	; 24
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <GPIO_voidSetPinValue+0x82>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <GPIO_voidSetPinValue+0x7e>
 70c:	80 95       	com	r24
 70e:	82 23       	and	r24, r18
 710:	88 bb       	out	0x18, r24	; 24
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	08 95       	ret
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
 716:	41 30       	cpi	r20, 0x01	; 1
 718:	61 f4       	brne	.+24     	; 0x732 <GPIO_voidSetPinValue+0xac>
					SET_BIT(PORTC_REG ,copy_u8pinID);
 71a:	25 b3       	in	r18, 0x15	; 21
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	02 c0       	rjmp	.+4      	; 0x726 <GPIO_voidSetPinValue+0xa0>
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	6a 95       	dec	r22
 728:	e2 f7       	brpl	.-8      	; 0x722 <GPIO_voidSetPinValue+0x9c>
 72a:	82 2b       	or	r24, r18
 72c:	85 bb       	out	0x15, r24	; 21
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	08 95       	ret
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTC_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
 732:	25 b3       	in	r18, 0x15	; 21
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <GPIO_voidSetPinValue+0xb8>
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	6a 95       	dec	r22
 740:	e2 f7       	brpl	.-8      	; 0x73a <GPIO_voidSetPinValue+0xb4>
 742:	80 95       	com	r24
 744:	82 23       	and	r24, r18
 746:	85 bb       	out	0x15, r24	; 21
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	08 95       	ret
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
 74c:	41 30       	cpi	r20, 0x01	; 1
 74e:	61 f4       	brne	.+24     	; 0x768 <GPIO_voidSetPinValue+0xe2>
					SET_BIT(PORTD_REG ,copy_u8pinID);
 750:	22 b3       	in	r18, 0x12	; 18
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <GPIO_voidSetPinValue+0xd6>
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	6a 95       	dec	r22
 75e:	e2 f7       	brpl	.-8      	; 0x758 <GPIO_voidSetPinValue+0xd2>
 760:	82 2b       	or	r24, r18
 762:	82 bb       	out	0x12, r24	; 18
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	08 95       	ret
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTD_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
 768:	22 b3       	in	r18, 0x12	; 18
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <GPIO_voidSetPinValue+0xee>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <GPIO_voidSetPinValue+0xea>
 778:	80 95       	com	r24
 77a:	82 23       	and	r24, r18
 77c:	82 bb       	out	0x12, r24	; 18
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	08 95       	ret
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	08 95       	ret
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	08 95       	ret
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 78a:	83 e0       	ldi	r24, 0x03	; 3
 78c:	08 95       	ret
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 78e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 790:	08 95       	ret

00000792 <I2C_voidMasterInit>:
	//if(((TWSR_REG->TWS) << 3) != I2C_SLAV_RXD_DATA_R_NACK);

	Data = TWDR_REG;

	return Data;
}
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	80 b9       	out	0x00, r24	; 0
 796:	81 b1       	in	r24, 0x01	; 1
 798:	8c 7f       	andi	r24, 0xFC	; 252
 79a:	81 b9       	out	0x01, r24	; 1
 79c:	81 b1       	in	r24, 0x01	; 1
 79e:	87 70       	andi	r24, 0x07	; 7
 7a0:	81 b9       	out	0x01, r24	; 1
 7a2:	86 b7       	in	r24, 0x36	; 54
 7a4:	80 64       	ori	r24, 0x40	; 64
 7a6:	86 bf       	out	0x36, r24	; 54
 7a8:	08 95       	ret

000007aa <I2C_voidSendStartCondition>:
 7aa:	86 b7       	in	r24, 0x36	; 54
 7ac:	80 68       	ori	r24, 0x80	; 128
 7ae:	86 bf       	out	0x36, r24	; 54
 7b0:	86 b7       	in	r24, 0x36	; 54
 7b2:	80 62       	ori	r24, 0x20	; 32
 7b4:	86 bf       	out	0x36, r24	; 54
 7b6:	86 b7       	in	r24, 0x36	; 54
 7b8:	84 60       	ori	r24, 0x04	; 4
 7ba:	86 bf       	out	0x36, r24	; 54
 7bc:	06 b6       	in	r0, 0x36	; 54
 7be:	07 fe       	sbrs	r0, 7
 7c0:	fd cf       	rjmp	.-6      	; 0x7bc <I2C_voidSendStartCondition+0x12>
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <I2C_voidSendStartCondition+0x1e>
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	91 b1       	in	r25, 0x01	; 1
 7ca:	96 95       	lsr	r25
 7cc:	96 95       	lsr	r25
 7ce:	96 95       	lsr	r25
 7d0:	91 30       	cpi	r25, 0x01	; 1
 7d2:	c9 f7       	brne	.-14     	; 0x7c6 <I2C_voidSendStartCondition+0x1c>
 7d4:	08 95       	ret

000007d6 <I2C_voidMasterSendSlaveAddressWrite>:
 7d6:	88 0f       	add	r24, r24
 7d8:	83 b9       	out	0x03, r24	; 3
 7da:	83 b1       	in	r24, 0x03	; 3
 7dc:	8e 7f       	andi	r24, 0xFE	; 254
 7de:	83 b9       	out	0x03, r24	; 3
 7e0:	86 b7       	in	r24, 0x36	; 54
 7e2:	8f 7d       	andi	r24, 0xDF	; 223
 7e4:	86 bf       	out	0x36, r24	; 54
 7e6:	86 b7       	in	r24, 0x36	; 54
 7e8:	80 68       	ori	r24, 0x80	; 128
 7ea:	86 bf       	out	0x36, r24	; 54
 7ec:	86 b7       	in	r24, 0x36	; 54
 7ee:	84 60       	ori	r24, 0x04	; 4
 7f0:	86 bf       	out	0x36, r24	; 54
 7f2:	06 b6       	in	r0, 0x36	; 54
 7f4:	07 fe       	sbrs	r0, 7
 7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <I2C_voidMasterSendSlaveAddressWrite+0x1c>
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	01 c0       	rjmp	.+2      	; 0x7fe <I2C_voidMasterSendSlaveAddressWrite+0x28>
 7fc:	83 e0       	ldi	r24, 0x03	; 3
 7fe:	91 b1       	in	r25, 0x01	; 1
 800:	96 95       	lsr	r25
 802:	96 95       	lsr	r25
 804:	96 95       	lsr	r25
 806:	93 30       	cpi	r25, 0x03	; 3
 808:	c9 f7       	brne	.-14     	; 0x7fc <I2C_voidMasterSendSlaveAddressWrite+0x26>
 80a:	08 95       	ret

0000080c <I2C_voidMasterSendDataByte>:
 80c:	83 b9       	out	0x03, r24	; 3
 80e:	86 b7       	in	r24, 0x36	; 54
 810:	80 68       	ori	r24, 0x80	; 128
 812:	86 bf       	out	0x36, r24	; 54
 814:	86 b7       	in	r24, 0x36	; 54
 816:	84 60       	ori	r24, 0x04	; 4
 818:	86 bf       	out	0x36, r24	; 54
 81a:	06 b6       	in	r0, 0x36	; 54
 81c:	07 fe       	sbrs	r0, 7
 81e:	fd cf       	rjmp	.-6      	; 0x81a <I2C_voidMasterSendDataByte+0xe>
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	01 c0       	rjmp	.+2      	; 0x826 <I2C_voidMasterSendDataByte+0x1a>
 824:	85 e0       	ldi	r24, 0x05	; 5
 826:	91 b1       	in	r25, 0x01	; 1
 828:	96 95       	lsr	r25
 82a:	96 95       	lsr	r25
 82c:	96 95       	lsr	r25
 82e:	95 30       	cpi	r25, 0x05	; 5
 830:	c9 f7       	brne	.-14     	; 0x824 <I2C_voidMasterSendDataByte+0x18>
 832:	08 95       	ret

00000834 <I2C_voidSendStopCondition>:


// Responsible for the SPI to receive an array of bytes, a string
void I2C_voidSendStopCondition(void) {
	TWCR_REG->TWSTO = 1;
 834:	86 b7       	in	r24, 0x36	; 54
 836:	80 61       	ori	r24, 0x10	; 16
 838:	86 bf       	out	0x36, r24	; 54

	TWCR_REG->TWINT = 1;
 83a:	86 b7       	in	r24, 0x36	; 54
 83c:	80 68       	ori	r24, 0x80	; 128
 83e:	86 bf       	out	0x36, r24	; 54

	TWCR_REG->TWEN = 1;
 840:	86 b7       	in	r24, 0x36	; 54
 842:	84 60       	ori	r24, 0x04	; 4
 844:	86 bf       	out	0x36, r24	; 54
 846:	08 95       	ret

00000848 <__vector_12>:
	CallBackPtr_SPI = Ptr_SPI;
}

// The ISR For the SPI CallBack Function
void __vector_12(void) __attribute__((signal, used));
void __vector_12(void) {
 848:	1f 92       	push	r1
 84a:	0f 92       	push	r0
 84c:	0f b6       	in	r0, 0x3f	; 63
 84e:	0f 92       	push	r0
 850:	11 24       	eor	r1, r1
 852:	2f 93       	push	r18
 854:	3f 93       	push	r19
 856:	4f 93       	push	r20
 858:	5f 93       	push	r21
 85a:	6f 93       	push	r22
 85c:	7f 93       	push	r23
 85e:	8f 93       	push	r24
 860:	9f 93       	push	r25
 862:	af 93       	push	r26
 864:	bf 93       	push	r27
 866:	ef 93       	push	r30
 868:	ff 93       	push	r31
	if(CallBackPtr_SPI != NULL) {
 86a:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <CallBackPtr_SPI>
 86e:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <CallBackPtr_SPI+0x1>
 872:	30 97       	sbiw	r30, 0x00	; 0
 874:	09 f0       	breq	.+2      	; 0x878 <__stack+0x19>
		CallBackPtr_SPI();
 876:	09 95       	icall
	}
}
 878:	ff 91       	pop	r31
 87a:	ef 91       	pop	r30
 87c:	bf 91       	pop	r27
 87e:	af 91       	pop	r26
 880:	9f 91       	pop	r25
 882:	8f 91       	pop	r24
 884:	7f 91       	pop	r23
 886:	6f 91       	pop	r22
 888:	5f 91       	pop	r21
 88a:	4f 91       	pop	r20
 88c:	3f 91       	pop	r19
 88e:	2f 91       	pop	r18
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <__vector_10>:
	CallBackPtr_TIMER0_OVF = Ptr_TIMER;
}


void __vector_10(void) __attribute__((signal, used));
void __vector_10(void) {
 89a:	1f 92       	push	r1
 89c:	0f 92       	push	r0
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	0f 92       	push	r0
 8a2:	11 24       	eor	r1, r1
 8a4:	2f 93       	push	r18
 8a6:	3f 93       	push	r19
 8a8:	4f 93       	push	r20
 8aa:	5f 93       	push	r21
 8ac:	6f 93       	push	r22
 8ae:	7f 93       	push	r23
 8b0:	8f 93       	push	r24
 8b2:	9f 93       	push	r25
 8b4:	af 93       	push	r26
 8b6:	bf 93       	push	r27
 8b8:	ef 93       	push	r30
 8ba:	ff 93       	push	r31
	if(CallBackPtr_TIMER0_COMP != NULL) {
 8bc:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <CallBackPtr_TIMER0_COMP>
 8c0:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <CallBackPtr_TIMER0_COMP+0x1>
 8c4:	30 97       	sbiw	r30, 0x00	; 0
 8c6:	09 f0       	breq	.+2      	; 0x8ca <__vector_10+0x30>
		CallBackPtr_TIMER0_COMP();
 8c8:	09 95       	icall
	}
}
 8ca:	ff 91       	pop	r31
 8cc:	ef 91       	pop	r30
 8ce:	bf 91       	pop	r27
 8d0:	af 91       	pop	r26
 8d2:	9f 91       	pop	r25
 8d4:	8f 91       	pop	r24
 8d6:	7f 91       	pop	r23
 8d8:	6f 91       	pop	r22
 8da:	5f 91       	pop	r21
 8dc:	4f 91       	pop	r20
 8de:	3f 91       	pop	r19
 8e0:	2f 91       	pop	r18
 8e2:	0f 90       	pop	r0
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	0f 90       	pop	r0
 8e8:	1f 90       	pop	r1
 8ea:	18 95       	reti

000008ec <__vector_11>:

void __vector_11(void) __attribute__((signal, used));
void __vector_11(void) {
 8ec:	1f 92       	push	r1
 8ee:	0f 92       	push	r0
 8f0:	0f b6       	in	r0, 0x3f	; 63
 8f2:	0f 92       	push	r0
 8f4:	11 24       	eor	r1, r1
 8f6:	2f 93       	push	r18
 8f8:	3f 93       	push	r19
 8fa:	4f 93       	push	r20
 8fc:	5f 93       	push	r21
 8fe:	6f 93       	push	r22
 900:	7f 93       	push	r23
 902:	8f 93       	push	r24
 904:	9f 93       	push	r25
 906:	af 93       	push	r26
 908:	bf 93       	push	r27
 90a:	ef 93       	push	r30
 90c:	ff 93       	push	r31
	if(CallBackPtr_TIMER0_OVF != NULL) {
 90e:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <CallBackPtr_TIMER0_OVF>
 912:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <CallBackPtr_TIMER0_OVF+0x1>
 916:	30 97       	sbiw	r30, 0x00	; 0
 918:	09 f0       	breq	.+2      	; 0x91c <__vector_11+0x30>
		CallBackPtr_TIMER0_OVF();
 91a:	09 95       	icall
	}
}
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	bf 91       	pop	r27
 922:	af 91       	pop	r26
 924:	9f 91       	pop	r25
 926:	8f 91       	pop	r24
 928:	7f 91       	pop	r23
 92a:	6f 91       	pop	r22
 92c:	5f 91       	pop	r21
 92e:	4f 91       	pop	r20
 930:	3f 91       	pop	r19
 932:	2f 91       	pop	r18
 934:	0f 90       	pop	r0
 936:	0f be       	out	0x3f, r0	; 63
 938:	0f 90       	pop	r0
 93a:	1f 90       	pop	r1
 93c:	18 95       	reti

0000093e <__vector_6>:
	CallBackPtr_TIMER1_OVF = Ptr_TIMER;
}


void __vector_6(void) __attribute__((signal, used));
void __vector_6(void) {
 93e:	1f 92       	push	r1
 940:	0f 92       	push	r0
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	0f 92       	push	r0
 946:	11 24       	eor	r1, r1
 948:	2f 93       	push	r18
 94a:	3f 93       	push	r19
 94c:	4f 93       	push	r20
 94e:	5f 93       	push	r21
 950:	6f 93       	push	r22
 952:	7f 93       	push	r23
 954:	8f 93       	push	r24
 956:	9f 93       	push	r25
 958:	af 93       	push	r26
 95a:	bf 93       	push	r27
 95c:	ef 93       	push	r30
 95e:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_CAPT != NULL) {
 960:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <CallBackPtr_TIMER1_CAPT>
 964:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <CallBackPtr_TIMER1_CAPT+0x1>
 968:	30 97       	sbiw	r30, 0x00	; 0
 96a:	09 f0       	breq	.+2      	; 0x96e <__vector_6+0x30>
		CallBackPtr_TIMER1_CAPT();
 96c:	09 95       	icall
	}
}
 96e:	ff 91       	pop	r31
 970:	ef 91       	pop	r30
 972:	bf 91       	pop	r27
 974:	af 91       	pop	r26
 976:	9f 91       	pop	r25
 978:	8f 91       	pop	r24
 97a:	7f 91       	pop	r23
 97c:	6f 91       	pop	r22
 97e:	5f 91       	pop	r21
 980:	4f 91       	pop	r20
 982:	3f 91       	pop	r19
 984:	2f 91       	pop	r18
 986:	0f 90       	pop	r0
 988:	0f be       	out	0x3f, r0	; 63
 98a:	0f 90       	pop	r0
 98c:	1f 90       	pop	r1
 98e:	18 95       	reti

00000990 <__vector_7>:

void __vector_7(void) __attribute__((signal, used));
void __vector_7(void) {
 990:	1f 92       	push	r1
 992:	0f 92       	push	r0
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	0f 92       	push	r0
 998:	11 24       	eor	r1, r1
 99a:	2f 93       	push	r18
 99c:	3f 93       	push	r19
 99e:	4f 93       	push	r20
 9a0:	5f 93       	push	r21
 9a2:	6f 93       	push	r22
 9a4:	7f 93       	push	r23
 9a6:	8f 93       	push	r24
 9a8:	9f 93       	push	r25
 9aa:	af 93       	push	r26
 9ac:	bf 93       	push	r27
 9ae:	ef 93       	push	r30
 9b0:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_COMPA != NULL) {
 9b2:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <CallBackPtr_TIMER1_COMPA>
 9b6:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <CallBackPtr_TIMER1_COMPA+0x1>
 9ba:	30 97       	sbiw	r30, 0x00	; 0
 9bc:	09 f0       	breq	.+2      	; 0x9c0 <__vector_7+0x30>
		CallBackPtr_TIMER1_COMPA();
 9be:	09 95       	icall
	}
}
 9c0:	ff 91       	pop	r31
 9c2:	ef 91       	pop	r30
 9c4:	bf 91       	pop	r27
 9c6:	af 91       	pop	r26
 9c8:	9f 91       	pop	r25
 9ca:	8f 91       	pop	r24
 9cc:	7f 91       	pop	r23
 9ce:	6f 91       	pop	r22
 9d0:	5f 91       	pop	r21
 9d2:	4f 91       	pop	r20
 9d4:	3f 91       	pop	r19
 9d6:	2f 91       	pop	r18
 9d8:	0f 90       	pop	r0
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	0f 90       	pop	r0
 9de:	1f 90       	pop	r1
 9e0:	18 95       	reti

000009e2 <__vector_8>:

void __vector_8(void) __attribute__((signal, used));
void __vector_8(void) {
 9e2:	1f 92       	push	r1
 9e4:	0f 92       	push	r0
 9e6:	0f b6       	in	r0, 0x3f	; 63
 9e8:	0f 92       	push	r0
 9ea:	11 24       	eor	r1, r1
 9ec:	2f 93       	push	r18
 9ee:	3f 93       	push	r19
 9f0:	4f 93       	push	r20
 9f2:	5f 93       	push	r21
 9f4:	6f 93       	push	r22
 9f6:	7f 93       	push	r23
 9f8:	8f 93       	push	r24
 9fa:	9f 93       	push	r25
 9fc:	af 93       	push	r26
 9fe:	bf 93       	push	r27
 a00:	ef 93       	push	r30
 a02:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_COMPB != NULL) {
 a04:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <CallBackPtr_TIMER1_COMPB>
 a08:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <CallBackPtr_TIMER1_COMPB+0x1>
 a0c:	30 97       	sbiw	r30, 0x00	; 0
 a0e:	09 f0       	breq	.+2      	; 0xa12 <__vector_8+0x30>
		CallBackPtr_TIMER1_COMPB();
 a10:	09 95       	icall
	}
}
 a12:	ff 91       	pop	r31
 a14:	ef 91       	pop	r30
 a16:	bf 91       	pop	r27
 a18:	af 91       	pop	r26
 a1a:	9f 91       	pop	r25
 a1c:	8f 91       	pop	r24
 a1e:	7f 91       	pop	r23
 a20:	6f 91       	pop	r22
 a22:	5f 91       	pop	r21
 a24:	4f 91       	pop	r20
 a26:	3f 91       	pop	r19
 a28:	2f 91       	pop	r18
 a2a:	0f 90       	pop	r0
 a2c:	0f be       	out	0x3f, r0	; 63
 a2e:	0f 90       	pop	r0
 a30:	1f 90       	pop	r1
 a32:	18 95       	reti

00000a34 <__vector_9>:

void __vector_9(void) __attribute__((signal, used));
void __vector_9(void) {
 a34:	1f 92       	push	r1
 a36:	0f 92       	push	r0
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	0f 92       	push	r0
 a3c:	11 24       	eor	r1, r1
 a3e:	2f 93       	push	r18
 a40:	3f 93       	push	r19
 a42:	4f 93       	push	r20
 a44:	5f 93       	push	r21
 a46:	6f 93       	push	r22
 a48:	7f 93       	push	r23
 a4a:	8f 93       	push	r24
 a4c:	9f 93       	push	r25
 a4e:	af 93       	push	r26
 a50:	bf 93       	push	r27
 a52:	ef 93       	push	r30
 a54:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_OVF != NULL) {
 a56:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <CallBackPtr_TIMER1_OVF>
 a5a:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <CallBackPtr_TIMER1_OVF+0x1>
 a5e:	30 97       	sbiw	r30, 0x00	; 0
 a60:	09 f0       	breq	.+2      	; 0xa64 <__vector_9+0x30>
		CallBackPtr_TIMER1_OVF();
 a62:	09 95       	icall
	}
}
 a64:	ff 91       	pop	r31
 a66:	ef 91       	pop	r30
 a68:	bf 91       	pop	r27
 a6a:	af 91       	pop	r26
 a6c:	9f 91       	pop	r25
 a6e:	8f 91       	pop	r24
 a70:	7f 91       	pop	r23
 a72:	6f 91       	pop	r22
 a74:	5f 91       	pop	r21
 a76:	4f 91       	pop	r20
 a78:	3f 91       	pop	r19
 a7a:	2f 91       	pop	r18
 a7c:	0f 90       	pop	r0
 a7e:	0f be       	out	0x3f, r0	; 63
 a80:	0f 90       	pop	r0
 a82:	1f 90       	pop	r1
 a84:	18 95       	reti

00000a86 <__vector_13>:
}


// The ISR For the UART RXC Callback Function
void __vector_13(void) __attribute__((signal, used));
void __vector_13(void) {
 a86:	1f 92       	push	r1
 a88:	0f 92       	push	r0
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	0f 92       	push	r0
 a8e:	11 24       	eor	r1, r1
 a90:	2f 93       	push	r18
 a92:	3f 93       	push	r19
 a94:	4f 93       	push	r20
 a96:	5f 93       	push	r21
 a98:	6f 93       	push	r22
 a9a:	7f 93       	push	r23
 a9c:	8f 93       	push	r24
 a9e:	9f 93       	push	r25
 aa0:	af 93       	push	r26
 aa2:	bf 93       	push	r27
 aa4:	ef 93       	push	r30
 aa6:	ff 93       	push	r31
	if(CallBackPtr_UART_RXC != NULL) {
 aa8:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <CallBackPtr_UART_RXC>
 aac:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <CallBackPtr_UART_RXC+0x1>
 ab0:	30 97       	sbiw	r30, 0x00	; 0
 ab2:	09 f0       	breq	.+2      	; 0xab6 <__vector_13+0x30>
		CallBackPtr_UART_RXC();
 ab4:	09 95       	icall
	}
}
 ab6:	ff 91       	pop	r31
 ab8:	ef 91       	pop	r30
 aba:	bf 91       	pop	r27
 abc:	af 91       	pop	r26
 abe:	9f 91       	pop	r25
 ac0:	8f 91       	pop	r24
 ac2:	7f 91       	pop	r23
 ac4:	6f 91       	pop	r22
 ac6:	5f 91       	pop	r21
 ac8:	4f 91       	pop	r20
 aca:	3f 91       	pop	r19
 acc:	2f 91       	pop	r18
 ace:	0f 90       	pop	r0
 ad0:	0f be       	out	0x3f, r0	; 63
 ad2:	0f 90       	pop	r0
 ad4:	1f 90       	pop	r1
 ad6:	18 95       	reti

00000ad8 <__vector_14>:

// The ISR For the UART UDRE Callback Function
void __vector_14(void) __attribute__((signal, used));
void __vector_14(void) {
 ad8:	1f 92       	push	r1
 ada:	0f 92       	push	r0
 adc:	0f b6       	in	r0, 0x3f	; 63
 ade:	0f 92       	push	r0
 ae0:	11 24       	eor	r1, r1
 ae2:	2f 93       	push	r18
 ae4:	3f 93       	push	r19
 ae6:	4f 93       	push	r20
 ae8:	5f 93       	push	r21
 aea:	6f 93       	push	r22
 aec:	7f 93       	push	r23
 aee:	8f 93       	push	r24
 af0:	9f 93       	push	r25
 af2:	af 93       	push	r26
 af4:	bf 93       	push	r27
 af6:	ef 93       	push	r30
 af8:	ff 93       	push	r31
	if(CallBackPtr_UART_UDRE != NULL) {
 afa:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <CallBackPtr_UART_UDRE>
 afe:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <CallBackPtr_UART_UDRE+0x1>
 b02:	30 97       	sbiw	r30, 0x00	; 0
 b04:	09 f0       	breq	.+2      	; 0xb08 <__vector_14+0x30>
		CallBackPtr_UART_UDRE();
 b06:	09 95       	icall
	}
}
 b08:	ff 91       	pop	r31
 b0a:	ef 91       	pop	r30
 b0c:	bf 91       	pop	r27
 b0e:	af 91       	pop	r26
 b10:	9f 91       	pop	r25
 b12:	8f 91       	pop	r24
 b14:	7f 91       	pop	r23
 b16:	6f 91       	pop	r22
 b18:	5f 91       	pop	r21
 b1a:	4f 91       	pop	r20
 b1c:	3f 91       	pop	r19
 b1e:	2f 91       	pop	r18
 b20:	0f 90       	pop	r0
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	0f 90       	pop	r0
 b26:	1f 90       	pop	r1
 b28:	18 95       	reti

00000b2a <__vector_15>:

// The ISR For the UART TXC Callback Function
void __vector_15(void) __attribute__((signal, used));
void __vector_15(void) {
 b2a:	1f 92       	push	r1
 b2c:	0f 92       	push	r0
 b2e:	0f b6       	in	r0, 0x3f	; 63
 b30:	0f 92       	push	r0
 b32:	11 24       	eor	r1, r1
 b34:	2f 93       	push	r18
 b36:	3f 93       	push	r19
 b38:	4f 93       	push	r20
 b3a:	5f 93       	push	r21
 b3c:	6f 93       	push	r22
 b3e:	7f 93       	push	r23
 b40:	8f 93       	push	r24
 b42:	9f 93       	push	r25
 b44:	af 93       	push	r26
 b46:	bf 93       	push	r27
 b48:	ef 93       	push	r30
 b4a:	ff 93       	push	r31
	if(CallBackPtr_UART_TXC != NULL) {
 b4c:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <CallBackPtr_UART_TXC>
 b50:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <CallBackPtr_UART_TXC+0x1>
 b54:	30 97       	sbiw	r30, 0x00	; 0
 b56:	09 f0       	breq	.+2      	; 0xb5a <__vector_15+0x30>
		CallBackPtr_UART_TXC();
 b58:	09 95       	icall
	}
}
 b5a:	ff 91       	pop	r31
 b5c:	ef 91       	pop	r30
 b5e:	bf 91       	pop	r27
 b60:	af 91       	pop	r26
 b62:	9f 91       	pop	r25
 b64:	8f 91       	pop	r24
 b66:	7f 91       	pop	r23
 b68:	6f 91       	pop	r22
 b6a:	5f 91       	pop	r21
 b6c:	4f 91       	pop	r20
 b6e:	3f 91       	pop	r19
 b70:	2f 91       	pop	r18
 b72:	0f 90       	pop	r0
 b74:	0f be       	out	0x3f, r0	; 63
 b76:	0f 90       	pop	r0
 b78:	1f 90       	pop	r1
 b7a:	18 95       	reti

00000b7c <_exit>:
 b7c:	f8 94       	cli

00000b7e <__stop_program>:
 b7e:	ff cf       	rjmp	.-2      	; 0xb7e <__stop_program>
