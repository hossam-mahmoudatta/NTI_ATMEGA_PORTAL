
TASK6_DISPLAYCHAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002a4c  00002ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000026e8  00000000  00000000  00002ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000152b  00000000  00000000  000051b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000066db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000681b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000698b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000085d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000094bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a659  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ae27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9e 14 	call	0x293c	; 0x293c <main>
      7a:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_vidSetPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_vidSetPinDirection(u8_t copy_u8portID, u8_t copy_u8pinID, u8_t copy_u8pinDIR) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_vidSetPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <GPIO_vidSetPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
		// Setup the pin direction as required
	switch(copy_u8portID) {
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	3d 83       	std	Y+5, r19	; 0x05
     b52:	2c 83       	std	Y+4, r18	; 0x04
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	91 05       	cpc	r25, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <GPIO_vidSetPinDirection+0x2a>
     b5e:	43 c0       	rjmp	.+134    	; 0xbe6 <GPIO_vidSetPinDirection+0xb0>
     b60:	2c 81       	ldd	r18, Y+4	; 0x04
     b62:	3d 81       	ldd	r19, Y+5	; 0x05
     b64:	22 30       	cpi	r18, 0x02	; 2
     b66:	31 05       	cpc	r19, r1
     b68:	2c f4       	brge	.+10     	; 0xb74 <GPIO_vidSetPinDirection+0x3e>
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	9d 81       	ldd	r25, Y+5	; 0x05
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	71 f0       	breq	.+28     	; 0xb8e <GPIO_vidSetPinDirection+0x58>
     b72:	bc c0       	rjmp	.+376    	; 0xcec <GPIO_vidSetPinDirection+0x1b6>
     b74:	2c 81       	ldd	r18, Y+4	; 0x04
     b76:	3d 81       	ldd	r19, Y+5	; 0x05
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_vidSetPinDirection+0x4a>
     b7e:	5f c0       	rjmp	.+190    	; 0xc3e <GPIO_vidSetPinDirection+0x108>
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <GPIO_vidSetPinDirection+0x56>
     b8a:	85 c0       	rjmp	.+266    	; 0xc96 <GPIO_vidSetPinDirection+0x160>
     b8c:	af c0       	rjmp	.+350    	; 0xcec <GPIO_vidSetPinDirection+0x1b6>
		case PORT_A:
			if(copy_u8pinDIR == PIN_OUTPUT) {
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	a1 f4       	brne	.+40     	; 0xbbc <GPIO_vidSetPinDirection+0x86>
				SET_BIT(DDRA_REG, copy_u8pinID);
     b94:	aa e3       	ldi	r26, 0x3A	; 58
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ea e3       	ldi	r30, 0x3A	; 58
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	48 2f       	mov	r20, r24
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 2e       	mov	r0, r18
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <GPIO_vidSetPinDirection+0x7c>
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	0a 94       	dec	r0
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <GPIO_vidSetPinDirection+0x78>
     bb6:	84 2b       	or	r24, r20
     bb8:	8c 93       	st	X, r24
     bba:	98 c0       	rjmp	.+304    	; 0xcec <GPIO_vidSetPinDirection+0x1b6>
			}
			else {
				CLR_BIT(DDRA_REG, copy_u8pinID);
     bbc:	aa e3       	ldi	r26, 0x3A	; 58
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	ea e3       	ldi	r30, 0x3A	; 58
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 2e       	mov	r0, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <GPIO_vidSetPinDirection+0xa4>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <GPIO_vidSetPinDirection+0xa0>
     bde:	80 95       	com	r24
     be0:	84 23       	and	r24, r20
     be2:	8c 93       	st	X, r24
     be4:	83 c0       	rjmp	.+262    	; 0xcec <GPIO_vidSetPinDirection+0x1b6>
			}
			break;
		case PORT_B:
			if(copy_u8pinDIR == PIN_OUTPUT) {
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	a1 f4       	brne	.+40     	; 0xc14 <GPIO_vidSetPinDirection+0xde>
				SET_BIT(DDRB_REG, copy_u8pinID);
     bec:	a7 e3       	ldi	r26, 0x37	; 55
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e7 e3       	ldi	r30, 0x37	; 55
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	48 2f       	mov	r20, r24
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 2e       	mov	r0, r18
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <GPIO_vidSetPinDirection+0xd4>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	0a 94       	dec	r0
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <GPIO_vidSetPinDirection+0xd0>
     c0e:	84 2b       	or	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	6c c0       	rjmp	.+216    	; 0xcec <GPIO_vidSetPinDirection+0x1b6>
			}
			else {
				CLR_BIT(DDRB_REG, copy_u8pinID);
     c14:	a7 e3       	ldi	r26, 0x37	; 55
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e7 e3       	ldi	r30, 0x37	; 55
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <GPIO_vidSetPinDirection+0xfc>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <GPIO_vidSetPinDirection+0xf8>
     c36:	80 95       	com	r24
     c38:	84 23       	and	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	57 c0       	rjmp	.+174    	; 0xcec <GPIO_vidSetPinDirection+0x1b6>
			}
			break;
		case PORT_C:
			if(copy_u8pinDIR == PIN_OUTPUT) {
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	a1 f4       	brne	.+40     	; 0xc6c <GPIO_vidSetPinDirection+0x136>
				SET_BIT(DDRC_REG, copy_u8pinID);
     c44:	a4 e3       	ldi	r26, 0x34	; 52
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e4 e3       	ldi	r30, 0x34	; 52
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <GPIO_vidSetPinDirection+0x12c>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <GPIO_vidSetPinDirection+0x128>
     c66:	84 2b       	or	r24, r20
     c68:	8c 93       	st	X, r24
     c6a:	40 c0       	rjmp	.+128    	; 0xcec <GPIO_vidSetPinDirection+0x1b6>
			}
			else {
				CLR_BIT(DDRC_REG, copy_u8pinID);
     c6c:	a4 e3       	ldi	r26, 0x34	; 52
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e4 e3       	ldi	r30, 0x34	; 52
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	48 2f       	mov	r20, r24
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	02 2e       	mov	r0, r18
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <GPIO_vidSetPinDirection+0x154>
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	0a 94       	dec	r0
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <GPIO_vidSetPinDirection+0x150>
     c8e:	80 95       	com	r24
     c90:	84 23       	and	r24, r20
     c92:	8c 93       	st	X, r24
     c94:	2b c0       	rjmp	.+86     	; 0xcec <GPIO_vidSetPinDirection+0x1b6>
			}
			break;
		case PORT_D:
			if(copy_u8pinDIR == PIN_OUTPUT) {
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	a1 f4       	brne	.+40     	; 0xcc4 <GPIO_vidSetPinDirection+0x18e>
				SET_BIT(DDRD_REG, copy_u8pinID);
     c9c:	a1 e3       	ldi	r26, 0x31	; 49
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e1 e3       	ldi	r30, 0x31	; 49
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	48 2f       	mov	r20, r24
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	02 2e       	mov	r0, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <GPIO_vidSetPinDirection+0x184>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	0a 94       	dec	r0
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <GPIO_vidSetPinDirection+0x180>
     cbe:	84 2b       	or	r24, r20
     cc0:	8c 93       	st	X, r24
     cc2:	14 c0       	rjmp	.+40     	; 0xcec <GPIO_vidSetPinDirection+0x1b6>
			}
			else {
				CLR_BIT(DDRD_REG, copy_u8pinID);
     cc4:	a1 e3       	ldi	r26, 0x31	; 49
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e3       	ldi	r30, 0x31	; 49
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <GPIO_vidSetPinDirection+0x1ac>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <GPIO_vidSetPinDirection+0x1a8>
     ce6:	80 95       	com	r24
     ce8:	84 23       	and	r24, r20
     cea:	8c 93       	st	X, r24
			}
			break;
	}
}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <GPIO_vidSetPinValue>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_vidSetPinValue(u8_t copy_u8portID, u8_t copy_u8pinID, u8_t copy_u8pinValue)
{
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	00 d0       	rcall	.+0      	; 0xd02 <GPIO_vidSetPinValue+0x6>
     d02:	00 d0       	rcall	.+0      	; 0xd04 <GPIO_vidSetPinValue+0x8>
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	6a 83       	std	Y+2, r22	; 0x02
     d0e:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8portID)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3d 83       	std	Y+5, r19	; 0x05
     d18:	2c 83       	std	Y+4, r18	; 0x04
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <GPIO_vidSetPinValue+0x2a>
     d24:	43 c0       	rjmp	.+134    	; 0xdac <GPIO_vidSetPinValue+0xb0>
     d26:	2c 81       	ldd	r18, Y+4	; 0x04
     d28:	3d 81       	ldd	r19, Y+5	; 0x05
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	2c f4       	brge	.+10     	; 0xd3a <GPIO_vidSetPinValue+0x3e>
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	9d 81       	ldd	r25, Y+5	; 0x05
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	71 f0       	breq	.+28     	; 0xd54 <GPIO_vidSetPinValue+0x58>
     d38:	bc c0       	rjmp	.+376    	; 0xeb2 <GPIO_vidSetPinValue+0x1b6>
     d3a:	2c 81       	ldd	r18, Y+4	; 0x04
     d3c:	3d 81       	ldd	r19, Y+5	; 0x05
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <GPIO_vidSetPinValue+0x4a>
     d44:	5f c0       	rjmp	.+190    	; 0xe04 <GPIO_vidSetPinValue+0x108>
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	9d 81       	ldd	r25, Y+5	; 0x05
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <GPIO_vidSetPinValue+0x56>
     d50:	85 c0       	rjmp	.+266    	; 0xe5c <GPIO_vidSetPinValue+0x160>
     d52:	af c0       	rjmp	.+350    	; 0xeb2 <GPIO_vidSetPinValue+0x1b6>
	{
		case PORT_A:
			if(copy_u8pinValue == LOGIC_HIGH) {
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	a1 f4       	brne	.+40     	; 0xd82 <GPIO_vidSetPinValue+0x86>
				SET_BIT(PORTA_REG ,copy_u8pinID);
     d5a:	ab e3       	ldi	r26, 0x3B	; 59
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	eb e3       	ldi	r30, 0x3B	; 59
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <GPIO_vidSetPinValue+0x7c>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <GPIO_vidSetPinValue+0x78>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	98 c0       	rjmp	.+304    	; 0xeb2 <GPIO_vidSetPinValue+0x1b6>
			}
			else {
				CLR_BIT(PORTA_REG,copy_u8pinID);
     d82:	ab e3       	ldi	r26, 0x3B	; 59
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	eb e3       	ldi	r30, 0x3B	; 59
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <GPIO_vidSetPinValue+0xa4>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <GPIO_vidSetPinValue+0xa0>
     da4:	80 95       	com	r24
     da6:	84 23       	and	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	83 c0       	rjmp	.+262    	; 0xeb2 <GPIO_vidSetPinValue+0x1b6>
			}
			break;
		case PORT_B:
			if(copy_u8pinValue == LOGIC_HIGH) {
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	a1 f4       	brne	.+40     	; 0xdda <GPIO_vidSetPinValue+0xde>
				SET_BIT(PORTB_REG ,copy_u8pinID);
     db2:	a8 e3       	ldi	r26, 0x38	; 56
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e8 e3       	ldi	r30, 0x38	; 56
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_vidSetPinValue+0xd4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_vidSetPinValue+0xd0>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	6c c0       	rjmp	.+216    	; 0xeb2 <GPIO_vidSetPinValue+0x1b6>
			}
			else {
				CLR_BIT(PORTB_REG,copy_u8pinID);
     dda:	a8 e3       	ldi	r26, 0x38	; 56
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e8 e3       	ldi	r30, 0x38	; 56
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <GPIO_vidSetPinValue+0xfc>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <GPIO_vidSetPinValue+0xf8>
     dfc:	80 95       	com	r24
     dfe:	84 23       	and	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	57 c0       	rjmp	.+174    	; 0xeb2 <GPIO_vidSetPinValue+0x1b6>
			}
			break;
		case PORT_C:
			if(copy_u8pinValue == LOGIC_HIGH) {
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	a1 f4       	brne	.+40     	; 0xe32 <GPIO_vidSetPinValue+0x136>
				SET_BIT(PORTC_REG ,copy_u8pinID);
     e0a:	a5 e3       	ldi	r26, 0x35	; 53
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e3       	ldi	r30, 0x35	; 53
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_vidSetPinValue+0x12c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_vidSetPinValue+0x128>
     e2c:	84 2b       	or	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	40 c0       	rjmp	.+128    	; 0xeb2 <GPIO_vidSetPinValue+0x1b6>
			}
			else {
				CLR_BIT(PORTC_REG,copy_u8pinID);
     e32:	a5 e3       	ldi	r26, 0x35	; 53
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e5 e3       	ldi	r30, 0x35	; 53
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <GPIO_vidSetPinValue+0x154>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <GPIO_vidSetPinValue+0x150>
     e54:	80 95       	com	r24
     e56:	84 23       	and	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	2b c0       	rjmp	.+86     	; 0xeb2 <GPIO_vidSetPinValue+0x1b6>
			}
			break;
		case PORT_D:
			if(copy_u8pinValue == LOGIC_HIGH) {
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	a1 f4       	brne	.+40     	; 0xe8a <GPIO_vidSetPinValue+0x18e>
				SET_BIT(PORTD_REG ,copy_u8pinID);
     e62:	a2 e3       	ldi	r26, 0x32	; 50
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e2 e3       	ldi	r30, 0x32	; 50
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_vidSetPinValue+0x184>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_vidSetPinValue+0x180>
     e84:	84 2b       	or	r24, r20
     e86:	8c 93       	st	X, r24
     e88:	14 c0       	rjmp	.+40     	; 0xeb2 <GPIO_vidSetPinValue+0x1b6>
			}
			else {
				CLR_BIT(PORTD_REG,copy_u8pinID);
     e8a:	a2 e3       	ldi	r26, 0x32	; 50
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e2 e3       	ldi	r30, 0x32	; 50
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <GPIO_vidSetPinValue+0x1ac>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <GPIO_vidSetPinValue+0x1a8>
     eac:	80 95       	com	r24
     eae:	84 23       	and	r24, r20
     eb0:	8c 93       	st	X, r24
			}
			break;
	}
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <GPIO_u8GetPinValue>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
u8_t GPIO_u8GetPinValue(u8_t copy_u8portID, u8_t copy_u8pinID) {
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <GPIO_u8GetPinValue+0x6>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <GPIO_u8GetPinValue+0x8>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	8a 83       	std	Y+2, r24	; 0x02
     ed2:	6b 83       	std	Y+3, r22	; 0x03
	u8_t pin_value = LOGIC_LOW;
     ed4:	19 82       	std	Y+1, r1	; 0x01

	/* Read the pin value as required */
	switch(copy_u8portID) {
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3d 83       	std	Y+5, r19	; 0x05
     ede:	2c 83       	std	Y+4, r18	; 0x04
     ee0:	4c 81       	ldd	r20, Y+4	; 0x04
     ee2:	5d 81       	ldd	r21, Y+5	; 0x05
     ee4:	41 30       	cpi	r20, 0x01	; 1
     ee6:	51 05       	cpc	r21, r1
     ee8:	79 f1       	breq	.+94     	; 0xf48 <GPIO_u8GetPinValue+0x86>
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	91 05       	cpc	r25, r1
     ef2:	34 f4       	brge	.+12     	; 0xf00 <GPIO_u8GetPinValue+0x3e>
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	21 15       	cp	r18, r1
     efa:	31 05       	cpc	r19, r1
     efc:	69 f0       	breq	.+26     	; 0xf18 <GPIO_u8GetPinValue+0x56>
     efe:	6b c0       	rjmp	.+214    	; 0xfd6 <GPIO_u8GetPinValue+0x114>
     f00:	4c 81       	ldd	r20, Y+4	; 0x04
     f02:	5d 81       	ldd	r21, Y+5	; 0x05
     f04:	42 30       	cpi	r20, 0x02	; 2
     f06:	51 05       	cpc	r21, r1
     f08:	b9 f1       	breq	.+110    	; 0xf78 <GPIO_u8GetPinValue+0xb6>
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <GPIO_u8GetPinValue+0x54>
     f14:	49 c0       	rjmp	.+146    	; 0xfa8 <GPIO_u8GetPinValue+0xe6>
     f16:	5f c0       	rjmp	.+190    	; 0xfd6 <GPIO_u8GetPinValue+0x114>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA_REG, copy_u8pinID)) {
     f18:	e9 e3       	ldi	r30, 0x39	; 57
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	a9 01       	movw	r20, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <GPIO_u8GetPinValue+0x6e>
     f2c:	55 95       	asr	r21
     f2e:	47 95       	ror	r20
     f30:	8a 95       	dec	r24
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <GPIO_u8GetPinValue+0x6a>
     f34:	ca 01       	movw	r24, r20
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	88 23       	and	r24, r24
     f3c:	19 f0       	breq	.+6      	; 0xf44 <GPIO_u8GetPinValue+0x82>
				pin_value = LOGIC_HIGH;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	49 c0       	rjmp	.+146    	; 0xfd6 <GPIO_u8GetPinValue+0x114>
			}
			else {
				pin_value = LOGIC_LOW;
     f44:	19 82       	std	Y+1, r1	; 0x01
     f46:	47 c0       	rjmp	.+142    	; 0xfd6 <GPIO_u8GetPinValue+0x114>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB_REG,copy_u8pinID)) {
     f48:	e6 e3       	ldi	r30, 0x36	; 54
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_u8GetPinValue+0x9e>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_u8GetPinValue+0x9a>
     f64:	ca 01       	movw	r24, r20
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	88 23       	and	r24, r24
     f6c:	19 f0       	breq	.+6      	; 0xf74 <GPIO_u8GetPinValue+0xb2>
				pin_value = LOGIC_HIGH;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	31 c0       	rjmp	.+98     	; 0xfd6 <GPIO_u8GetPinValue+0x114>
			}
			else {
				pin_value = LOGIC_LOW;
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	2f c0       	rjmp	.+94     	; 0xfd6 <GPIO_u8GetPinValue+0x114>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC_REG,copy_u8pinID)) {
     f78:	e3 e3       	ldi	r30, 0x33	; 51
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_u8GetPinValue+0xce>
     f8c:	55 95       	asr	r21
     f8e:	47 95       	ror	r20
     f90:	8a 95       	dec	r24
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_u8GetPinValue+0xca>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	88 23       	and	r24, r24
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <GPIO_u8GetPinValue+0xe2>
				pin_value = LOGIC_HIGH;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	19 c0       	rjmp	.+50     	; 0xfd6 <GPIO_u8GetPinValue+0x114>
			}
			else {
				pin_value = LOGIC_LOW;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	17 c0       	rjmp	.+46     	; 0xfd6 <GPIO_u8GetPinValue+0x114>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND_REG,copy_u8pinID)) {
     fa8:	e0 e3       	ldi	r30, 0x30	; 48
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_u8GetPinValue+0xfe>
     fbc:	55 95       	asr	r21
     fbe:	47 95       	ror	r20
     fc0:	8a 95       	dec	r24
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_u8GetPinValue+0xfa>
     fc4:	ca 01       	movw	r24, r20
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	88 23       	and	r24, r24
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <GPIO_u8GetPinValue+0x112>
				pin_value = LOGIC_HIGH;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <GPIO_u8GetPinValue+0x114>
			}
			else {
				pin_value = LOGIC_LOW;
     fd4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	return pin_value;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <GPIO_vidTogglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
void GPIO_vidTogglePin(u8_t copy_u8portID, u8_t copy_u8pinID) {
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <GPIO_vidTogglePin+0x6>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <GPIO_vidTogglePin+0x8>
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8portID) {
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3c 83       	std	Y+4, r19	; 0x04
    1000:	2b 83       	std	Y+3, r18	; 0x03
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	91 05       	cpc	r25, r1
    100a:	49 f1       	breq	.+82     	; 0x105e <GPIO_vidTogglePin+0x76>
    100c:	2b 81       	ldd	r18, Y+3	; 0x03
    100e:	3c 81       	ldd	r19, Y+4	; 0x04
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	2c f4       	brge	.+10     	; 0x1020 <GPIO_vidTogglePin+0x38>
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	61 f0       	breq	.+24     	; 0x1036 <GPIO_vidTogglePin+0x4e>
    101e:	5a c0       	rjmp	.+180    	; 0x10d4 <GPIO_vidTogglePin+0xec>
    1020:	2b 81       	ldd	r18, Y+3	; 0x03
    1022:	3c 81       	ldd	r19, Y+4	; 0x04
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	71 f1       	breq	.+92     	; 0x1086 <GPIO_vidTogglePin+0x9e>
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	91 05       	cpc	r25, r1
    1032:	e9 f1       	breq	.+122    	; 0x10ae <GPIO_vidTogglePin+0xc6>
    1034:	4f c0       	rjmp	.+158    	; 0x10d4 <GPIO_vidTogglePin+0xec>
		case PORT_A:
			TOG_BIT(PORTA_REG, copy_u8pinID);
    1036:	ab e3       	ldi	r26, 0x3B	; 59
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	eb e3       	ldi	r30, 0x3B	; 59
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <GPIO_vidTogglePin+0x6c>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <GPIO_vidTogglePin+0x68>
    1058:	84 27       	eor	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	3b c0       	rjmp	.+118    	; 0x10d4 <GPIO_vidTogglePin+0xec>
			break;
		case PORT_B:
			TOG_BIT(PORTB_REG, copy_u8pinID);
    105e:	a8 e3       	ldi	r26, 0x38	; 56
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e3       	ldi	r30, 0x38	; 56
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <GPIO_vidTogglePin+0x94>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <GPIO_vidTogglePin+0x90>
    1080:	84 27       	eor	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	27 c0       	rjmp	.+78     	; 0x10d4 <GPIO_vidTogglePin+0xec>
			break;
		case PORT_C:
			TOG_BIT(PORTC_REG, copy_u8pinID);
    1086:	a5 e3       	ldi	r26, 0x35	; 53
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e5 e3       	ldi	r30, 0x35	; 53
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <GPIO_vidTogglePin+0xbc>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <GPIO_vidTogglePin+0xb8>
    10a8:	84 27       	eor	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	13 c0       	rjmp	.+38     	; 0x10d4 <GPIO_vidTogglePin+0xec>
			break;
		case PORT_D:
			TOG_BIT(PORTD_REG, copy_u8pinID);
    10ae:	a2 e3       	ldi	r26, 0x32	; 50
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e2 e3       	ldi	r30, 0x32	; 50
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <GPIO_vidTogglePin+0xe4>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <GPIO_vidTogglePin+0xe0>
    10d0:	84 27       	eor	r24, r20
    10d2:	8c 93       	st	X, r24
			break;
	}
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <GPIO_vidSetPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_vidSetPortDirection(u8_t copy_u8portID, u8_t copy_u8portDIR) {
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <GPIO_vidSetPortDirection+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <GPIO_vidSetPortDirection+0x8>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	6a 83       	std	Y+2, r22	; 0x02
	/* Setup the port direction as required */
	switch(copy_u8portID) {
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	3c 83       	std	Y+4, r19	; 0x04
    10fa:	2b 83       	std	Y+3, r18	; 0x03
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	91 05       	cpc	r25, r1
    1104:	d1 f0       	breq	.+52     	; 0x113a <GPIO_vidSetPortDirection+0x58>
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	3c 81       	ldd	r19, Y+4	; 0x04
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	2c f4       	brge	.+10     	; 0x111a <GPIO_vidSetPortDirection+0x38>
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	61 f0       	breq	.+24     	; 0x1130 <GPIO_vidSetPortDirection+0x4e>
    1118:	1e c0       	rjmp	.+60     	; 0x1156 <GPIO_vidSetPortDirection+0x74>
    111a:	2b 81       	ldd	r18, Y+3	; 0x03
    111c:	3c 81       	ldd	r19, Y+4	; 0x04
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	81 f0       	breq	.+32     	; 0x1144 <GPIO_vidSetPortDirection+0x62>
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	81 f0       	breq	.+32     	; 0x114e <GPIO_vidSetPortDirection+0x6c>
    112e:	13 c0       	rjmp	.+38     	; 0x1156 <GPIO_vidSetPortDirection+0x74>
		case PORT_A:
			DDRA_REG = copy_u8portDIR;
    1130:	ea e3       	ldi	r30, 0x3A	; 58
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	80 83       	st	Z, r24
    1138:	0e c0       	rjmp	.+28     	; 0x1156 <GPIO_vidSetPortDirection+0x74>
			break;
		case PORT_B:
			DDRB_REG = copy_u8portDIR;
    113a:	e7 e3       	ldi	r30, 0x37	; 55
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	80 83       	st	Z, r24
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <GPIO_vidSetPortDirection+0x74>
			break;
		case PORT_C:
			DDRC_REG = copy_u8portDIR;
    1144:	e4 e3       	ldi	r30, 0x34	; 52
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	80 83       	st	Z, r24
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <GPIO_vidSetPortDirection+0x74>
			break;
		case PORT_D:
			DDRD_REG = copy_u8portDIR;
    114e:	e1 e3       	ldi	r30, 0x31	; 49
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	80 83       	st	Z, r24
			break;
	}
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <GPIO_vidSetPortValue>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_vidSetPortValue(u8_t copy_u8portID, u8_t copy_u8portValue) {
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	00 d0       	rcall	.+0      	; 0x116a <GPIO_vidSetPortValue+0x6>
    116a:	00 d0       	rcall	.+0      	; 0x116c <GPIO_vidSetPortValue+0x8>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	6a 83       	std	Y+2, r22	; 0x02
	/* Setup the port direction as required */
	switch(copy_u8portID) {
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3c 83       	std	Y+4, r19	; 0x04
    117c:	2b 83       	std	Y+3, r18	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	91 05       	cpc	r25, r1
    1186:	d1 f0       	breq	.+52     	; 0x11bc <GPIO_vidSetPortValue+0x58>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	2c f4       	brge	.+10     	; 0x119c <GPIO_vidSetPortValue+0x38>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	61 f0       	breq	.+24     	; 0x11b2 <GPIO_vidSetPortValue+0x4e>
    119a:	1e c0       	rjmp	.+60     	; 0x11d8 <GPIO_vidSetPortValue+0x74>
    119c:	2b 81       	ldd	r18, Y+3	; 0x03
    119e:	3c 81       	ldd	r19, Y+4	; 0x04
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	81 f0       	breq	.+32     	; 0x11c6 <GPIO_vidSetPortValue+0x62>
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	91 05       	cpc	r25, r1
    11ae:	81 f0       	breq	.+32     	; 0x11d0 <GPIO_vidSetPortValue+0x6c>
    11b0:	13 c0       	rjmp	.+38     	; 0x11d8 <GPIO_vidSetPortValue+0x74>
		case PORT_A:
			PORTA_REG = copy_u8portValue;
    11b2:	eb e3       	ldi	r30, 0x3B	; 59
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	80 83       	st	Z, r24
    11ba:	0e c0       	rjmp	.+28     	; 0x11d8 <GPIO_vidSetPortValue+0x74>
			break;
		case PORT_B:
			PORTB_REG = copy_u8portValue;
    11bc:	e8 e3       	ldi	r30, 0x38	; 56
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <GPIO_vidSetPortValue+0x74>
			break;
		case PORT_C:
			PORTC_REG = copy_u8portValue;
    11c6:	e5 e3       	ldi	r30, 0x35	; 53
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	80 83       	st	Z, r24
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <GPIO_vidSetPortValue+0x74>
			break;
		case PORT_D:
			PORTD_REG = copy_u8portValue;
    11d0:	e2 e3       	ldi	r30, 0x32	; 50
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	80 83       	st	Z, r24
			break;
	}
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <GPIO_u8GetPortValue>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8_t GPIO_u8GetPortValue(u8_t copy_u8portID) {
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <GPIO_u8GetPortValue+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <GPIO_u8GetPortValue+0x8>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	8a 83       	std	Y+2, r24	; 0x02
	u8_t value = LOGIC_LOW;
    11f4:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8portID) {
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	3c 83       	std	Y+4, r19	; 0x04
    11fe:	2b 83       	std	Y+3, r18	; 0x03
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	91 05       	cpc	r25, r1
    1208:	d1 f0       	breq	.+52     	; 0x123e <GPIO_u8GetPortValue+0x58>
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	2c f4       	brge	.+10     	; 0x121e <GPIO_u8GetPortValue+0x38>
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	61 f0       	breq	.+24     	; 0x1234 <GPIO_u8GetPortValue+0x4e>
    121c:	1e c0       	rjmp	.+60     	; 0x125a <GPIO_u8GetPortValue+0x74>
    121e:	2b 81       	ldd	r18, Y+3	; 0x03
    1220:	3c 81       	ldd	r19, Y+4	; 0x04
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	81 f0       	breq	.+32     	; 0x1248 <GPIO_u8GetPortValue+0x62>
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	91 05       	cpc	r25, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <GPIO_u8GetPortValue+0x6c>
    1232:	13 c0       	rjmp	.+38     	; 0x125a <GPIO_u8GetPortValue+0x74>
		case PORT_A:
			// Why value equals PINA?
			value = PORTA_REG;
    1234:	eb e3       	ldi	r30, 0x3B	; 59
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	0e c0       	rjmp	.+28     	; 0x125a <GPIO_u8GetPortValue+0x74>
			break;
		case PORT_B:
			value = PORTB_REG;
    123e:	e8 e3       	ldi	r30, 0x38	; 56
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	09 c0       	rjmp	.+18     	; 0x125a <GPIO_u8GetPortValue+0x74>
			break;
		case PORT_C:
			value = PORTC_REG;
    1248:	e5 e3       	ldi	r30, 0x35	; 53
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	04 c0       	rjmp	.+8      	; 0x125a <GPIO_u8GetPortValue+0x74>
			break;
		case PORT_D:
			value = PORTD_REG;
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return value;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(u8_t copy_u8portID) {
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <SEGMENT_Init+0x6>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8_t SEGMENT_Driver_Checker = NULL;
    1276:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	18 f0       	brcs	.+6      	; 0x1284 <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	1f c0       	rjmp	.+62     	; 0x12c2 <SEGMENT_Init+0x58>
#elif (DIGITS_USED == 3)
		GPIO_vidSetPinDirection(COM_3_PORT, COM_3, PIN_OUTPUT);
		GPIO_vidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_vidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#elif (DIGITS_USED == 2)
		GPIO_vidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	62 e0       	ldi	r22, 0x02	; 2
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>
		GPIO_vidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	63 e0       	ldi	r22, 0x03	; 3
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>
		GPIO_vidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_vidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#endif

		/* These pins are for the BCD on the FARES Kit */
		GPIO_vidSetPinDirection(copy_u8portID, BCD_1, PIN_OUTPUT);
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>
		GPIO_vidSetPinDirection(copy_u8portID, BCD_2, PIN_OUTPUT);
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>
		GPIO_vidSetPinDirection(copy_u8portID, BCD_4, PIN_OUTPUT);
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	62 e0       	ldi	r22, 0x02	; 2
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>
		GPIO_vidSetPinDirection(copy_u8portID, BCD_8, PIN_OUTPUT);
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	64 e0       	ldi	r22, 0x04	; 4
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>

		SEGMENT_Driver_Checker = SEGMENT_OK;
    12c0:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <SEGMENT_DISPLAY>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
SEGMENT_Error_t SEGMENT_DISPLAY(u8_t copy_u8portID, u8_t copy_u8pinValue) {
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <SEGMENT_DISPLAY+0x6>
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <SEGMENT_DISPLAY+0x8>
    12d6:	0f 92       	push	r0
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	8a 83       	std	Y+2, r24	; 0x02
    12de:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8_t SEGMENT_Driver_Checker = NULL;
    12e0:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	84 30       	cpi	r24, 0x04	; 4
    12e6:	18 f0       	brcs	.+6      	; 0x12ee <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	24 c1       	rjmp	.+584    	; 0x1536 <SEGMENT_DISPLAY+0x268>
	}
	else if((copy_u8pinValue < 0 && copy_u8pinValue > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(copy_u8pinValue) {
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3d 83       	std	Y+5, r19	; 0x05
    12f6:	2c 83       	std	Y+4, r18	; 0x04
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	9d 81       	ldd	r25, Y+5	; 0x05
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	91 05       	cpc	r25, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <SEGMENT_DISPLAY+0x36>
    1302:	9b c0       	rjmp	.+310    	; 0x143a <SEGMENT_DISPLAY+0x16c>
    1304:	2c 81       	ldd	r18, Y+4	; 0x04
    1306:	3d 81       	ldd	r19, Y+5	; 0x05
    1308:	25 30       	cpi	r18, 0x05	; 5
    130a:	31 05       	cpc	r19, r1
    130c:	ec f4       	brge	.+58     	; 0x1348 <SEGMENT_DISPLAY+0x7a>
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	91 05       	cpc	r25, r1
    1316:	09 f4       	brne	.+2      	; 0x131a <SEGMENT_DISPLAY+0x4c>
    1318:	51 c0       	rjmp	.+162    	; 0x13bc <SEGMENT_DISPLAY+0xee>
    131a:	2c 81       	ldd	r18, Y+4	; 0x04
    131c:	3d 81       	ldd	r19, Y+5	; 0x05
    131e:	22 30       	cpi	r18, 0x02	; 2
    1320:	31 05       	cpc	r19, r1
    1322:	2c f4       	brge	.+10     	; 0x132e <SEGMENT_DISPLAY+0x60>
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	9d 81       	ldd	r25, Y+5	; 0x05
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	99 f1       	breq	.+102    	; 0x1392 <SEGMENT_DISPLAY+0xc4>
    132c:	03 c1       	rjmp	.+518    	; 0x1534 <SEGMENT_DISPLAY+0x266>
    132e:	2c 81       	ldd	r18, Y+4	; 0x04
    1330:	3d 81       	ldd	r19, Y+5	; 0x05
    1332:	22 30       	cpi	r18, 0x02	; 2
    1334:	31 05       	cpc	r19, r1
    1336:	09 f4       	brne	.+2      	; 0x133a <SEGMENT_DISPLAY+0x6c>
    1338:	56 c0       	rjmp	.+172    	; 0x13e6 <SEGMENT_DISPLAY+0x118>
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	91 05       	cpc	r25, r1
    1342:	09 f4       	brne	.+2      	; 0x1346 <SEGMENT_DISPLAY+0x78>
    1344:	65 c0       	rjmp	.+202    	; 0x1410 <SEGMENT_DISPLAY+0x142>
    1346:	f6 c0       	rjmp	.+492    	; 0x1534 <SEGMENT_DISPLAY+0x266>
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	27 30       	cpi	r18, 0x07	; 7
    134e:	31 05       	cpc	r19, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <SEGMENT_DISPLAY+0x86>
    1352:	b2 c0       	rjmp	.+356    	; 0x14b8 <SEGMENT_DISPLAY+0x1ea>
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	88 30       	cpi	r24, 0x08	; 8
    135a:	91 05       	cpc	r25, r1
    135c:	6c f4       	brge	.+26     	; 0x1378 <SEGMENT_DISPLAY+0xaa>
    135e:	2c 81       	ldd	r18, Y+4	; 0x04
    1360:	3d 81       	ldd	r19, Y+5	; 0x05
    1362:	25 30       	cpi	r18, 0x05	; 5
    1364:	31 05       	cpc	r19, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <SEGMENT_DISPLAY+0x9c>
    1368:	7d c0       	rjmp	.+250    	; 0x1464 <SEGMENT_DISPLAY+0x196>
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	86 30       	cpi	r24, 0x06	; 6
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <SEGMENT_DISPLAY+0xa8>
    1374:	8c c0       	rjmp	.+280    	; 0x148e <SEGMENT_DISPLAY+0x1c0>
    1376:	de c0       	rjmp	.+444    	; 0x1534 <SEGMENT_DISPLAY+0x266>
    1378:	2c 81       	ldd	r18, Y+4	; 0x04
    137a:	3d 81       	ldd	r19, Y+5	; 0x05
    137c:	28 30       	cpi	r18, 0x08	; 8
    137e:	31 05       	cpc	r19, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <SEGMENT_DISPLAY+0xb6>
    1382:	af c0       	rjmp	.+350    	; 0x14e2 <SEGMENT_DISPLAY+0x214>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	89 30       	cpi	r24, 0x09	; 9
    138a:	91 05       	cpc	r25, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <SEGMENT_DISPLAY+0xc2>
    138e:	be c0       	rjmp	.+380    	; 0x150c <SEGMENT_DISPLAY+0x23e>
    1390:	d1 c0       	rjmp	.+418    	; 0x1534 <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	62 e0       	ldi	r22, 0x02	; 2
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	64 e0       	ldi	r22, 0x04	; 4
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    13ba:	bc c0       	rjmp	.+376    	; 0x1534 <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	64 e0       	ldi	r22, 0x04	; 4
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    13e4:	a7 c0       	rjmp	.+334    	; 0x1534 <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	62 e0       	ldi	r22, 0x02	; 2
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	64 e0       	ldi	r22, 0x04	; 4
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    140e:	92 c0       	rjmp	.+292    	; 0x1534 <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	41 e0       	ldi	r20, 0x01	; 1
    1420:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	62 e0       	ldi	r22, 0x02	; 2
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	64 e0       	ldi	r22, 0x04	; 4
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    1438:	7d c0       	rjmp	.+250    	; 0x1534 <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	62 e0       	ldi	r22, 0x02	; 2
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	64 e0       	ldi	r22, 0x04	; 4
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    1462:	68 c0       	rjmp	.+208    	; 0x1534 <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	62 e0       	ldi	r22, 0x02	; 2
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	64 e0       	ldi	r22, 0x04	; 4
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    148c:	53 c0       	rjmp	.+166    	; 0x1534 <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	62 e0       	ldi	r22, 0x02	; 2
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	64 e0       	ldi	r22, 0x04	; 4
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    14b6:	3e c0       	rjmp	.+124    	; 0x1534 <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	62 e0       	ldi	r22, 0x02	; 2
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	64 e0       	ldi	r22, 0x04	; 4
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    14e0:	29 c0       	rjmp	.+82     	; 0x1534 <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	40 e0       	ldi	r20, 0x00	; 0
    14f2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	62 e0       	ldi	r22, 0x02	; 2
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	64 e0       	ldi	r22, 0x04	; 4
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_vidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	41 e0       	ldi	r20, 0x01	; 1
    1512:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	62 e0       	ldi	r22, 0x02	; 2
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				GPIO_vidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	64 e0       	ldi	r22, 0x04	; 4
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    1534:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1536:	89 81       	ldd	r24, Y+1	; 0x01
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(u8_t copy_u8portID, u8_t copy_u8pinID) {
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <LED_Init+0x6>
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	8a 83       	std	Y+2, r24	; 0x02
    1556:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8_t LED_Driver_Checker = NULL;
    1558:	19 82       	std	Y+1, r1	; 0x01
	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	88 30       	cpi	r24, 0x08	; 8
    155e:	18 f0       	brcs	.+6      	; 0x1566 <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	0c c0       	rjmp	.+24     	; 0x157e <LED_Init+0x36>
	}
	else if((copy_u8pinID >= NUM_OF_PORTS)) {
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	18 f0       	brcs	.+6      	; 0x1572 <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	06 c0       	rjmp	.+12     	; 0x157e <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_vidSetPinDirection(copy_u8portID, copy_u8pinID, PIN_OUTPUT);
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	6b 81       	ldd	r22, Y+3	; 0x03
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>
		LED_Driver_Checker = LED_OK;
    157c:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(u8_t copy_u8portID, u8_t copy_u8pinID) {
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <LED_On+0x6>
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	8a 83       	std	Y+2, r24	; 0x02
    159a:	6b 83       	std	Y+3, r22	; 0x03

	u8_t LED_Driver_Checker = NULL;
    159c:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	0c c0       	rjmp	.+24     	; 0x15c2 <LED_On+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	18 f0       	brcs	.+6      	; 0x15b6 <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <LED_On+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_vidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_vidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	6b 81       	ldd	r22, Y+3	; 0x03
    15ba:	41 e0       	ldi	r20, 0x01	; 1
    15bc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    15c0:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(u8_t copy_u8portID, u8_t copy_u8pinID) {
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <LED_Off+0x6>
    15d6:	0f 92       	push	r0
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	6b 83       	std	Y+3, r22	; 0x03

	u8_t LED_Driver_Checker = NULL;
    15e0:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	88 30       	cpi	r24, 0x08	; 8
    15e6:	18 f0       	brcs	.+6      	; 0x15ee <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	0c c0       	rjmp	.+24     	; 0x1606 <LED_Off+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	18 f0       	brcs	.+6      	; 0x15fa <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <LED_Off+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_vidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_vidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	6b 81       	ldd	r22, Y+3	; 0x03
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    1604:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1606:	89 81       	ldd	r24, Y+1	; 0x01
}
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <LED_Toggle>:

LED_Error_t LED_Toggle(u8_t copy_u8portID, u8_t copy_u8pinID) {
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <LED_Toggle+0x6>
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	6b 83       	std	Y+3, r22	; 0x03

	u8_t LED_Driver_Checker = NULL;
    1624:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 30       	cpi	r24, 0x08	; 8
    162a:	18 f0       	brcs	.+6      	; 0x1632 <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	0b c0       	rjmp	.+22     	; 0x1648 <LED_Toggle+0x34>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	18 f0       	brcs	.+6      	; 0x163e <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_vidTogglePin(copy_u8portID, copy_u8pinID);
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	6b 81       	ldd	r22, Y+3	; 0x03
    1642:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GPIO_vidTogglePin>
			LED_Driver_Checker = LED_OK;
    1646:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
}
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <LCD_vidInit>:

#include "LCD_INTERFACE.h"


// Initializes and enables the LCD Module to start functionality
void LCD_vidInit(void) {
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	e8 97       	sbiw	r28, 0x38	; 56
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 ef       	ldi	r26, 0xF0	; 240
    1670:	b1 e4       	ldi	r27, 0x41	; 65
    1672:	8d ab       	std	Y+53, r24	; 0x35
    1674:	9e ab       	std	Y+54, r25	; 0x36
    1676:	af ab       	std	Y+55, r26	; 0x37
    1678:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	6d a9       	ldd	r22, Y+53	; 0x35
    167c:	7e a9       	ldd	r23, Y+54	; 0x36
    167e:	8f a9       	ldd	r24, Y+55	; 0x37
    1680:	98 ad       	ldd	r25, Y+56	; 0x38
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a e7       	ldi	r20, 0x7A	; 122
    1688:	55 e4       	ldi	r21, 0x45	; 69
    168a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	89 ab       	std	Y+49, r24	; 0x31
    1694:	9a ab       	std	Y+50, r25	; 0x32
    1696:	ab ab       	std	Y+51, r26	; 0x33
    1698:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    169a:	69 a9       	ldd	r22, Y+49	; 0x31
    169c:	7a a9       	ldd	r23, Y+50	; 0x32
    169e:	8b a9       	ldd	r24, Y+51	; 0x33
    16a0:	9c a9       	ldd	r25, Y+52	; 0x34
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e8       	ldi	r20, 0x80	; 128
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16ae:	88 23       	and	r24, r24
    16b0:	2c f4       	brge	.+10     	; 0x16bc <LCD_vidInit+0x66>
		__ticks = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	98 ab       	std	Y+48, r25	; 0x30
    16b8:	8f a7       	std	Y+47, r24	; 0x2f
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <LCD_vidInit+0xe4>
	else if (__tmp > 65535)
    16bc:	69 a9       	ldd	r22, Y+49	; 0x31
    16be:	7a a9       	ldd	r23, Y+50	; 0x32
    16c0:	8b a9       	ldd	r24, Y+51	; 0x33
    16c2:	9c a9       	ldd	r25, Y+52	; 0x34
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	4c f5       	brge	.+82     	; 0x1726 <LCD_vidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	6d a9       	ldd	r22, Y+53	; 0x35
    16d6:	7e a9       	ldd	r23, Y+54	; 0x36
    16d8:	8f a9       	ldd	r24, Y+55	; 0x37
    16da:	98 ad       	ldd	r25, Y+56	; 0x38
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	98 ab       	std	Y+48, r25	; 0x30
    16fa:	8f a7       	std	Y+47, r24	; 0x2f
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <LCD_vidInit+0xc6>
    16fe:	80 e9       	ldi	r24, 0x90	; 144
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	9e a7       	std	Y+46, r25	; 0x2e
    1704:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1706:	8d a5       	ldd	r24, Y+45	; 0x2d
    1708:	9e a5       	ldd	r25, Y+46	; 0x2e
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LCD_vidInit+0xb4>
    170e:	9e a7       	std	Y+46, r25	; 0x2e
    1710:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1712:	8f a5       	ldd	r24, Y+47	; 0x2f
    1714:	98 a9       	ldd	r25, Y+48	; 0x30
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	98 ab       	std	Y+48, r25	; 0x30
    171a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	8f a5       	ldd	r24, Y+47	; 0x2f
    171e:	98 a9       	ldd	r25, Y+48	; 0x30
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	69 f7       	brne	.-38     	; 0x16fe <LCD_vidInit+0xa8>
    1724:	14 c0       	rjmp	.+40     	; 0x174e <LCD_vidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1726:	69 a9       	ldd	r22, Y+49	; 0x31
    1728:	7a a9       	ldd	r23, Y+50	; 0x32
    172a:	8b a9       	ldd	r24, Y+51	; 0x33
    172c:	9c a9       	ldd	r25, Y+52	; 0x34
    172e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	98 ab       	std	Y+48, r25	; 0x30
    1738:	8f a7       	std	Y+47, r24	; 0x2f
    173a:	8f a5       	ldd	r24, Y+47	; 0x2f
    173c:	98 a9       	ldd	r25, Y+48	; 0x30
    173e:	9c a7       	std	Y+44, r25	; 0x2c
    1740:	8b a7       	std	Y+43, r24	; 0x2b
    1742:	8b a5       	ldd	r24, Y+43	; 0x2b
    1744:	9c a5       	ldd	r25, Y+44	; 0x2c
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_vidInit+0xf0>
    174a:	9c a7       	std	Y+44, r25	; 0x2c
    174c:	8b a7       	std	Y+43, r24	; 0x2b
	// LCD Power On Internal Delay is 15 mS
	_delay_ms(30);

	// Initialize RS Pin
	GPIO_vidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	63 e0       	ldi	r22, 0x03	; 3
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>

	// Initialize Enable Pin
	GPIO_vidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	62 e0       	ldi	r22, 0x02	; 2
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>


	// Setup the port and pins for the data pins inside the LCD
	GPIO_vidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>
	GPIO_vidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>
	GPIO_vidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	62 e0       	ldi	r22, 0x02	; 2
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>
	GPIO_vidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	64 e0       	ldi	r22, 0x04	; 4
    1784:	41 e0       	ldi	r20, 0x01	; 1
    1786:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_vidSetPinDirection>


	LCD_vidSendCommand(0x20);
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
	LCD_vidSendCommand(0x20);
    1790:	80 e2       	ldi	r24, 0x20	; 32
    1792:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
	LCD_vidSendCommand(0x80);
    1796:	80 e8       	ldi	r24, 0x80	; 128
    1798:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 e0       	ldi	r26, 0x00	; 0
    17a2:	b0 e4       	ldi	r27, 0x40	; 64
    17a4:	8f a3       	std	Y+39, r24	; 0x27
    17a6:	98 a7       	std	Y+40, r25	; 0x28
    17a8:	a9 a7       	std	Y+41, r26	; 0x29
    17aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ac:	6f a1       	ldd	r22, Y+39	; 0x27
    17ae:	78 a5       	ldd	r23, Y+40	; 0x28
    17b0:	89 a5       	ldd	r24, Y+41	; 0x29
    17b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	4a e7       	ldi	r20, 0x7A	; 122
    17ba:	55 e4       	ldi	r21, 0x45	; 69
    17bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8b a3       	std	Y+35, r24	; 0x23
    17c6:	9c a3       	std	Y+36, r25	; 0x24
    17c8:	ad a3       	std	Y+37, r26	; 0x25
    17ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17cc:	6b a1       	ldd	r22, Y+35	; 0x23
    17ce:	7c a1       	ldd	r23, Y+36	; 0x24
    17d0:	8d a1       	ldd	r24, Y+37	; 0x25
    17d2:	9e a1       	ldd	r25, Y+38	; 0x26
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e8       	ldi	r20, 0x80	; 128
    17da:	5f e3       	ldi	r21, 0x3F	; 63
    17dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17e0:	88 23       	and	r24, r24
    17e2:	2c f4       	brge	.+10     	; 0x17ee <LCD_vidInit+0x198>
		__ticks = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9a a3       	std	Y+34, r25	; 0x22
    17ea:	89 a3       	std	Y+33, r24	; 0x21
    17ec:	3f c0       	rjmp	.+126    	; 0x186c <LCD_vidInit+0x216>
	else if (__tmp > 65535)
    17ee:	6b a1       	ldd	r22, Y+35	; 0x23
    17f0:	7c a1       	ldd	r23, Y+36	; 0x24
    17f2:	8d a1       	ldd	r24, Y+37	; 0x25
    17f4:	9e a1       	ldd	r25, Y+38	; 0x26
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	3f ef       	ldi	r19, 0xFF	; 255
    17fa:	4f e7       	ldi	r20, 0x7F	; 127
    17fc:	57 e4       	ldi	r21, 0x47	; 71
    17fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1802:	18 16       	cp	r1, r24
    1804:	4c f5       	brge	.+82     	; 0x1858 <LCD_vidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1806:	6f a1       	ldd	r22, Y+39	; 0x27
    1808:	78 a5       	ldd	r23, Y+40	; 0x28
    180a:	89 a5       	ldd	r24, Y+41	; 0x29
    180c:	9a a5       	ldd	r25, Y+42	; 0x2a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9a a3       	std	Y+34, r25	; 0x22
    182c:	89 a3       	std	Y+33, r24	; 0x21
    182e:	0f c0       	rjmp	.+30     	; 0x184e <LCD_vidInit+0x1f8>
    1830:	80 e9       	ldi	r24, 0x90	; 144
    1832:	91 e0       	ldi	r25, 0x01	; 1
    1834:	98 a3       	std	Y+32, r25	; 0x20
    1836:	8f 8f       	std	Y+31, r24	; 0x1f
    1838:	8f 8d       	ldd	r24, Y+31	; 0x1f
    183a:	98 a1       	ldd	r25, Y+32	; 0x20
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_vidInit+0x1e6>
    1840:	98 a3       	std	Y+32, r25	; 0x20
    1842:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	89 a1       	ldd	r24, Y+33	; 0x21
    1846:	9a a1       	ldd	r25, Y+34	; 0x22
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	9a a3       	std	Y+34, r25	; 0x22
    184c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184e:	89 a1       	ldd	r24, Y+33	; 0x21
    1850:	9a a1       	ldd	r25, Y+34	; 0x22
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	69 f7       	brne	.-38     	; 0x1830 <LCD_vidInit+0x1da>
    1856:	14 c0       	rjmp	.+40     	; 0x1880 <LCD_vidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1858:	6b a1       	ldd	r22, Y+35	; 0x23
    185a:	7c a1       	ldd	r23, Y+36	; 0x24
    185c:	8d a1       	ldd	r24, Y+37	; 0x25
    185e:	9e a1       	ldd	r25, Y+38	; 0x26
    1860:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9a a3       	std	Y+34, r25	; 0x22
    186a:	89 a3       	std	Y+33, r24	; 0x21
    186c:	89 a1       	ldd	r24, Y+33	; 0x21
    186e:	9a a1       	ldd	r25, Y+34	; 0x22
    1870:	9e 8f       	std	Y+30, r25	; 0x1e
    1872:	8d 8f       	std	Y+29, r24	; 0x1d
    1874:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1876:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <LCD_vidInit+0x222>
    187c:	9e 8f       	std	Y+30, r25	; 0x1e
    187e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(2);

	LCD_vidSendCommand(0x00);
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
	LCD_vidSendCommand(0xC0);
    1886:	80 ec       	ldi	r24, 0xC0	; 192
    1888:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a0 e0       	ldi	r26, 0x00	; 0
    1892:	b0 e4       	ldi	r27, 0x40	; 64
    1894:	89 8f       	std	Y+25, r24	; 0x19
    1896:	9a 8f       	std	Y+26, r25	; 0x1a
    1898:	ab 8f       	std	Y+27, r26	; 0x1b
    189a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189c:	69 8d       	ldd	r22, Y+25	; 0x19
    189e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a e7       	ldi	r20, 0x7A	; 122
    18aa:	55 e4       	ldi	r21, 0x45	; 69
    18ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8d 8b       	std	Y+21, r24	; 0x15
    18b6:	9e 8b       	std	Y+22, r25	; 0x16
    18b8:	af 8b       	std	Y+23, r26	; 0x17
    18ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18bc:	6d 89       	ldd	r22, Y+21	; 0x15
    18be:	7e 89       	ldd	r23, Y+22	; 0x16
    18c0:	8f 89       	ldd	r24, Y+23	; 0x17
    18c2:	98 8d       	ldd	r25, Y+24	; 0x18
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	2c f4       	brge	.+10     	; 0x18de <LCD_vidInit+0x288>
		__ticks = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9c 8b       	std	Y+20, r25	; 0x14
    18da:	8b 8b       	std	Y+19, r24	; 0x13
    18dc:	3f c0       	rjmp	.+126    	; 0x195c <LCD_vidInit+0x306>
	else if (__tmp > 65535)
    18de:	6d 89       	ldd	r22, Y+21	; 0x15
    18e0:	7e 89       	ldd	r23, Y+22	; 0x16
    18e2:	8f 89       	ldd	r24, Y+23	; 0x17
    18e4:	98 8d       	ldd	r25, Y+24	; 0x18
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	4c f5       	brge	.+82     	; 0x1948 <LCD_vidInit+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f6:	69 8d       	ldd	r22, Y+25	; 0x19
    18f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e2       	ldi	r20, 0x20	; 32
    1904:	51 e4       	ldi	r21, 0x41	; 65
    1906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9c 8b       	std	Y+20, r25	; 0x14
    191c:	8b 8b       	std	Y+19, r24	; 0x13
    191e:	0f c0       	rjmp	.+30     	; 0x193e <LCD_vidInit+0x2e8>
    1920:	80 e9       	ldi	r24, 0x90	; 144
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	9a 8b       	std	Y+18, r25	; 0x12
    1926:	89 8b       	std	Y+17, r24	; 0x11
    1928:	89 89       	ldd	r24, Y+17	; 0x11
    192a:	9a 89       	ldd	r25, Y+18	; 0x12
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_vidInit+0x2d6>
    1930:	9a 8b       	std	Y+18, r25	; 0x12
    1932:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	8b 89       	ldd	r24, Y+19	; 0x13
    1936:	9c 89       	ldd	r25, Y+20	; 0x14
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	9c 8b       	std	Y+20, r25	; 0x14
    193c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	8b 89       	ldd	r24, Y+19	; 0x13
    1940:	9c 89       	ldd	r25, Y+20	; 0x14
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	69 f7       	brne	.-38     	; 0x1920 <LCD_vidInit+0x2ca>
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <LCD_vidInit+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	6d 89       	ldd	r22, Y+21	; 0x15
    194a:	7e 89       	ldd	r23, Y+22	; 0x16
    194c:	8f 89       	ldd	r24, Y+23	; 0x17
    194e:	98 8d       	ldd	r25, Y+24	; 0x18
    1950:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9c 8b       	std	Y+20, r25	; 0x14
    195a:	8b 8b       	std	Y+19, r24	; 0x13
    195c:	8b 89       	ldd	r24, Y+19	; 0x13
    195e:	9c 89       	ldd	r25, Y+20	; 0x14
    1960:	98 8b       	std	Y+16, r25	; 0x10
    1962:	8f 87       	std	Y+15, r24	; 0x0f
    1964:	8f 85       	ldd	r24, Y+15	; 0x0f
    1966:	98 89       	ldd	r25, Y+16	; 0x10
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <LCD_vidInit+0x312>
    196c:	98 8b       	std	Y+16, r25	; 0x10
    196e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	LCD_vidSendCommand(0x00);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
	LCD_vidSendCommand(0x10);
    1976:	80 e1       	ldi	r24, 0x10	; 16
    1978:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e0       	ldi	r26, 0x00	; 0
    1982:	b0 e4       	ldi	r27, 0x40	; 64
    1984:	8b 87       	std	Y+11, r24	; 0x0b
    1986:	9c 87       	std	Y+12, r25	; 0x0c
    1988:	ad 87       	std	Y+13, r26	; 0x0d
    198a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6b 85       	ldd	r22, Y+11	; 0x0b
    198e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1990:	8d 85       	ldd	r24, Y+13	; 0x0d
    1992:	9e 85       	ldd	r25, Y+14	; 0x0e
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a e7       	ldi	r20, 0x7A	; 122
    199a:	55 e4       	ldi	r21, 0x45	; 69
    199c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8f 83       	std	Y+7, r24	; 0x07
    19a6:	98 87       	std	Y+8, r25	; 0x08
    19a8:	a9 87       	std	Y+9, r26	; 0x09
    19aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ac:	6f 81       	ldd	r22, Y+7	; 0x07
    19ae:	78 85       	ldd	r23, Y+8	; 0x08
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_vidInit+0x378>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <LCD_vidInit+0x3f6>
	else if (__tmp > 65535)
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <LCD_vidInit+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_vidInit+0x3d8>
    1a10:	80 e9       	ldi	r24, 0x90	; 144
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	9c 83       	std	Y+4, r25	; 0x04
    1a16:	8b 83       	std	Y+3, r24	; 0x03
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_vidInit+0x3c6>
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	9e 81       	ldd	r25, Y+6	; 0x06
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	9e 83       	std	Y+6, r25	; 0x06
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <LCD_vidInit+0x3ba>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <LCD_vidInit+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	9a 83       	std	Y+2, r25	; 0x02
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_vidInit+0x402>
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01

	// Initializing Sending Commands
	//LCD_vidSendCommand(LCD_TWO_LINE_FOUR_BIT);
	//LCD_vidSendCommand(LCD_CURSOR_OFF);
	//LCD_vidSendCommand(LCD_CLEAR_DISPLAY);
}
    1a60:	e8 96       	adiw	r28, 0x38	; 56
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <LCD_vidSendCommand>:


// Sends a command to the LCD
void LCD_vidSendCommand(u8_t copy_u8Command) {
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	c5 55       	subi	r28, 0x55	; 85
    1a80:	d0 40       	sbci	r29, 0x00	; 0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	eb 5a       	subi	r30, 0xAB	; 171
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	80 83       	st	Z, r24

	// Set RS Pin to '0'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	63 e0       	ldi	r22, 0x03	; 3
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ef 5a       	subi	r30, 0xAF	; 175
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e8       	ldi	r26, 0x80	; 128
    1aaa:	bf e3       	ldi	r27, 0x3F	; 63
    1aac:	80 83       	st	Z, r24
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	a2 83       	std	Z+2, r26	; 0x02
    1ab2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	8e 01       	movw	r16, r28
    1ab6:	03 5b       	subi	r16, 0xB3	; 179
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	fe 01       	movw	r30, r28
    1abc:	ef 5a       	subi	r30, 0xAF	; 175
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a e7       	ldi	r20, 0x7A	; 122
    1ace:	55 e4       	ldi	r21, 0x45	; 69
    1ad0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	80 83       	st	Z, r24
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	a2 83       	std	Z+2, r26	; 0x02
    1ae0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e3 5b       	subi	r30, 0xB3	; 179
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	60 81       	ld	r22, Z
    1aea:	71 81       	ldd	r23, Z+1	; 0x01
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	44 f4       	brge	.+16     	; 0x1b10 <LCD_vidSendCommand+0x9e>
		__ticks = 1;
    1b00:	fe 01       	movw	r30, r28
    1b02:	e5 5b       	subi	r30, 0xB5	; 181
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	80 83       	st	Z, r24
    1b0e:	64 c0       	rjmp	.+200    	; 0x1bd8 <LCD_vidSendCommand+0x166>
	else if (__tmp > 65535)
    1b10:	fe 01       	movw	r30, r28
    1b12:	e3 5b       	subi	r30, 0xB3	; 179
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	0c f0       	brlt	.+2      	; 0x1b30 <LCD_vidSendCommand+0xbe>
    1b2e:	43 c0       	rjmp	.+134    	; 0x1bb6 <LCD_vidSendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	fe 01       	movw	r30, r28
    1b32:	ef 5a       	subi	r30, 0xAF	; 175
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	8e 01       	movw	r16, r28
    1b50:	05 5b       	subi	r16, 0xB5	; 181
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	f8 01       	movw	r30, r16
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
    1b66:	1f c0       	rjmp	.+62     	; 0x1ba6 <LCD_vidSendCommand+0x134>
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e7 5b       	subi	r30, 0xB7	; 183
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 e9       	ldi	r24, 0x90	; 144
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	80 83       	st	Z, r24
    1b76:	fe 01       	movw	r30, r28
    1b78:	e7 5b       	subi	r30, 0xB7	; 183
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_vidSendCommand+0x10e>
    1b84:	fe 01       	movw	r30, r28
    1b86:	e7 5b       	subi	r30, 0xB7	; 183
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	91 83       	std	Z+1, r25	; 0x01
    1b8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8e:	de 01       	movw	r26, r28
    1b90:	a5 5b       	subi	r26, 0xB5	; 181
    1b92:	bf 4f       	sbci	r27, 0xFF	; 255
    1b94:	fe 01       	movw	r30, r28
    1b96:	e5 5b       	subi	r30, 0xB5	; 181
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	91 81       	ldd	r25, Z+1	; 0x01
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	11 96       	adiw	r26, 0x01	; 1
    1ba2:	9c 93       	st	X, r25
    1ba4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	e5 5b       	subi	r30, 0xB5	; 181
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 81       	ld	r24, Z
    1bae:	91 81       	ldd	r25, Z+1	; 0x01
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	d1 f6       	brne	.-76     	; 0x1b68 <LCD_vidSendCommand+0xf6>
    1bb4:	27 c0       	rjmp	.+78     	; 0x1c04 <LCD_vidSendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	05 5b       	subi	r16, 0xB5	; 181
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e3 5b       	subi	r30, 0xB3	; 179
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
    1bd8:	de 01       	movw	r26, r28
    1bda:	a9 5b       	subi	r26, 0xB9	; 185
    1bdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bde:	fe 01       	movw	r30, r28
    1be0:	e5 5b       	subi	r30, 0xB5	; 181
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 81       	ld	r24, Z
    1be6:	91 81       	ldd	r25, Z+1	; 0x01
    1be8:	8d 93       	st	X+, r24
    1bea:	9c 93       	st	X, r25
    1bec:	fe 01       	movw	r30, r28
    1bee:	e9 5b       	subi	r30, 0xB9	; 185
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LCD_vidSendCommand+0x184>
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e9 5b       	subi	r30, 0xB9	; 185
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	91 83       	std	Z+1, r25	; 0x01
    1c02:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the command in the assigned PORT to be sent to the LCD
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
    1c04:	fe 01       	movw	r30, r28
    1c06:	eb 5a       	subi	r30, 0xAB	; 171
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	98 2f       	mov	r25, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	99 27       	eor	r25, r25
    1c12:	99 1f       	adc	r25, r25
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	64 e0       	ldi	r22, 0x04	; 4
    1c18:	49 2f       	mov	r20, r25
    1c1a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
    1c1e:	fe 01       	movw	r30, r28
    1c20:	eb 5a       	subi	r30, 0xAB	; 171
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	82 95       	swap	r24
    1c28:	86 95       	lsr	r24
    1c2a:	86 95       	lsr	r24
    1c2c:	83 70       	andi	r24, 0x03	; 3
    1c2e:	98 2f       	mov	r25, r24
    1c30:	91 70       	andi	r25, 0x01	; 1
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	62 e0       	ldi	r22, 0x02	; 2
    1c36:	49 2f       	mov	r20, r25
    1c38:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	eb 5a       	subi	r30, 0xAB	; 171
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	82 95       	swap	r24
    1c46:	86 95       	lsr	r24
    1c48:	87 70       	andi	r24, 0x07	; 7
    1c4a:	98 2f       	mov	r25, r24
    1c4c:	91 70       	andi	r25, 0x01	; 1
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	49 2f       	mov	r20, r25
    1c54:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
    1c58:	fe 01       	movw	r30, r28
    1c5a:	eb 5a       	subi	r30, 0xAB	; 171
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	82 95       	swap	r24
    1c62:	8f 70       	andi	r24, 0x0F	; 15
    1c64:	98 2f       	mov	r25, r24
    1c66:	91 70       	andi	r25, 0x01	; 1
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	49 2f       	mov	r20, r25
    1c6e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    1c72:	fe 01       	movw	r30, r28
    1c74:	ed 5b       	subi	r30, 0xBD	; 189
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e0       	ldi	r26, 0x00	; 0
    1c7e:	b0 e4       	ldi	r27, 0x40	; 64
    1c80:	80 83       	st	Z, r24
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	a2 83       	std	Z+2, r26	; 0x02
    1c86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	8e 01       	movw	r16, r28
    1c8a:	01 5c       	subi	r16, 0xC1	; 193
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ed 5b       	subi	r30, 0xBD	; 189
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a e7       	ldi	r20, 0x7A	; 122
    1ca2:	55 e4       	ldi	r21, 0x45	; 69
    1ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	f8 01       	movw	r30, r16
    1cae:	80 83       	st	Z, r24
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	a2 83       	std	Z+2, r26	; 0x02
    1cb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ff 96       	adiw	r30, 0x3f	; 63
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <LCD_vidSendCommand+0x26a>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9e af       	std	Y+62, r25	; 0x3e
    1cd8:	8d af       	std	Y+61, r24	; 0x3d
    1cda:	46 c0       	rjmp	.+140    	; 0x1d68 <LCD_vidSendCommand+0x2f6>
	else if (__tmp > 65535)
    1cdc:	fe 01       	movw	r30, r28
    1cde:	ff 96       	adiw	r30, 0x3f	; 63
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	64 f5       	brge	.+88     	; 0x1d50 <LCD_vidSendCommand+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	ed 5b       	subi	r30, 0xBD	; 189
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e af       	std	Y+62, r25	; 0x3e
    1d24:	8d af       	std	Y+61, r24	; 0x3d
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <LCD_vidSendCommand+0x2d4>
    1d28:	80 e9       	ldi	r24, 0x90	; 144
    1d2a:	91 e0       	ldi	r25, 0x01	; 1
    1d2c:	9c af       	std	Y+60, r25	; 0x3c
    1d2e:	8b af       	std	Y+59, r24	; 0x3b
    1d30:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d32:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_vidSendCommand+0x2c2>
    1d38:	9c af       	std	Y+60, r25	; 0x3c
    1d3a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9e af       	std	Y+62, r25	; 0x3e
    1d44:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d48:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <LCD_vidSendCommand+0x2b6>
    1d4e:	16 c0       	rjmp	.+44     	; 0x1d7c <LCD_vidSendCommand+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	fe 01       	movw	r30, r28
    1d52:	ff 96       	adiw	r30, 0x3f	; 63
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9e af       	std	Y+62, r25	; 0x3e
    1d66:	8d af       	std	Y+61, r24	; 0x3d
    1d68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d6c:	9a af       	std	Y+58, r25	; 0x3a
    1d6e:	89 af       	std	Y+57, r24	; 0x39
    1d70:	89 ad       	ldd	r24, Y+57	; 0x39
    1d72:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <LCD_vidSendCommand+0x302>
    1d78:	9a af       	std	Y+58, r25	; 0x3a
    1d7a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);

	// Set Enable Pin to '1'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 e0       	ldi	r26, 0x00	; 0
    1d8c:	b0 e4       	ldi	r27, 0x40	; 64
    1d8e:	8d ab       	std	Y+53, r24	; 0x35
    1d90:	9e ab       	std	Y+54, r25	; 0x36
    1d92:	af ab       	std	Y+55, r26	; 0x37
    1d94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d96:	6d a9       	ldd	r22, Y+53	; 0x35
    1d98:	7e a9       	ldd	r23, Y+54	; 0x36
    1d9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a e7       	ldi	r20, 0x7A	; 122
    1da4:	55 e4       	ldi	r21, 0x45	; 69
    1da6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	89 ab       	std	Y+49, r24	; 0x31
    1db0:	9a ab       	std	Y+50, r25	; 0x32
    1db2:	ab ab       	std	Y+51, r26	; 0x33
    1db4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1db6:	69 a9       	ldd	r22, Y+49	; 0x31
    1db8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dba:	8b a9       	ldd	r24, Y+51	; 0x33
    1dbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <LCD_vidSendCommand+0x366>
		__ticks = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	98 ab       	std	Y+48, r25	; 0x30
    1dd4:	8f a7       	std	Y+47, r24	; 0x2f
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <LCD_vidSendCommand+0x3e4>
	else if (__tmp > 65535)
    1dd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dda:	7a a9       	ldd	r23, Y+50	; 0x32
    1ddc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dde:	9c a9       	ldd	r25, Y+52	; 0x34
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f e7       	ldi	r20, 0x7F	; 127
    1de6:	57 e4       	ldi	r21, 0x47	; 71
    1de8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	4c f5       	brge	.+82     	; 0x1e42 <LCD_vidSendCommand+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	6d a9       	ldd	r22, Y+53	; 0x35
    1df2:	7e a9       	ldd	r23, Y+54	; 0x36
    1df4:	8f a9       	ldd	r24, Y+55	; 0x37
    1df6:	98 ad       	ldd	r25, Y+56	; 0x38
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	98 ab       	std	Y+48, r25	; 0x30
    1e16:	8f a7       	std	Y+47, r24	; 0x2f
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <LCD_vidSendCommand+0x3c6>
    1e1a:	80 e9       	ldi	r24, 0x90	; 144
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
    1e1e:	9e a7       	std	Y+46, r25	; 0x2e
    1e20:	8d a7       	std	Y+45, r24	; 0x2d
    1e22:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e24:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_vidSendCommand+0x3b4>
    1e2a:	9e a7       	std	Y+46, r25	; 0x2e
    1e2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e30:	98 a9       	ldd	r25, Y+48	; 0x30
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	98 ab       	std	Y+48, r25	; 0x30
    1e36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <LCD_vidSendCommand+0x3a8>
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <LCD_vidSendCommand+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	69 a9       	ldd	r22, Y+49	; 0x31
    1e44:	7a a9       	ldd	r23, Y+50	; 0x32
    1e46:	8b a9       	ldd	r24, Y+51	; 0x33
    1e48:	9c a9       	ldd	r25, Y+52	; 0x34
    1e4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	98 ab       	std	Y+48, r25	; 0x30
    1e54:	8f a7       	std	Y+47, r24	; 0x2f
    1e56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e58:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5a:	9c a7       	std	Y+44, r25	; 0x2c
    1e5c:	8b a7       	std	Y+43, r24	; 0x2b
    1e5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e60:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_vidSendCommand+0x3f0>
    1e66:	9c a7       	std	Y+44, r25	; 0x2c
    1e68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	// Set Enable Pin to '0'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e0       	ldi	r26, 0x00	; 0
    1e7a:	b0 e4       	ldi	r27, 0x40	; 64
    1e7c:	8f a3       	std	Y+39, r24	; 0x27
    1e7e:	98 a7       	std	Y+40, r25	; 0x28
    1e80:	a9 a7       	std	Y+41, r26	; 0x29
    1e82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	6f a1       	ldd	r22, Y+39	; 0x27
    1e86:	78 a5       	ldd	r23, Y+40	; 0x28
    1e88:	89 a5       	ldd	r24, Y+41	; 0x29
    1e8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a e7       	ldi	r20, 0x7A	; 122
    1e92:	55 e4       	ldi	r21, 0x45	; 69
    1e94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8b a3       	std	Y+35, r24	; 0x23
    1e9e:	9c a3       	std	Y+36, r25	; 0x24
    1ea0:	ad a3       	std	Y+37, r26	; 0x25
    1ea2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <LCD_vidSendCommand+0x454>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9a a3       	std	Y+34, r25	; 0x22
    1ec2:	89 a3       	std	Y+33, r24	; 0x21
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <LCD_vidSendCommand+0x4d2>
	else if (__tmp > 65535)
    1ec6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eca:	8d a1       	ldd	r24, Y+37	; 0x25
    1ecc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <LCD_vidSendCommand+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	6f a1       	ldd	r22, Y+39	; 0x27
    1ee0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ee2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ee4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9a a3       	std	Y+34, r25	; 0x22
    1f04:	89 a3       	std	Y+33, r24	; 0x21
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <LCD_vidSendCommand+0x4b4>
    1f08:	80 e9       	ldi	r24, 0x90	; 144
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	98 a3       	std	Y+32, r25	; 0x20
    1f0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1f10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f12:	98 a1       	ldd	r25, Y+32	; 0x20
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_vidSendCommand+0x4a2>
    1f18:	98 a3       	std	Y+32, r25	; 0x20
    1f1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	9a a3       	std	Y+34, r25	; 0x22
    1f24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	89 a1       	ldd	r24, Y+33	; 0x21
    1f28:	9a a1       	ldd	r25, Y+34	; 0x22
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <LCD_vidSendCommand+0x496>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <LCD_vidSendCommand+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	6b a1       	ldd	r22, Y+35	; 0x23
    1f32:	7c a1       	ldd	r23, Y+36	; 0x24
    1f34:	8d a1       	ldd	r24, Y+37	; 0x25
    1f36:	9e a1       	ldd	r25, Y+38	; 0x26
    1f38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9a a3       	std	Y+34, r25	; 0x22
    1f42:	89 a3       	std	Y+33, r24	; 0x21
    1f44:	89 a1       	ldd	r24, Y+33	; 0x21
    1f46:	9a a1       	ldd	r25, Y+34	; 0x22
    1f48:	9e 8f       	std	Y+30, r25	; 0x1e
    1f4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_vidSendCommand+0x4de>
    1f54:	9e 8f       	std	Y+30, r25	; 0x1e
    1f56:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
    1f58:	fe 01       	movw	r30, r28
    1f5a:	eb 5a       	subi	r30, 0xAB	; 171
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	80 81       	ld	r24, Z
    1f60:	86 95       	lsr	r24
    1f62:	86 95       	lsr	r24
    1f64:	86 95       	lsr	r24
    1f66:	98 2f       	mov	r25, r24
    1f68:	91 70       	andi	r25, 0x01	; 1
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	64 e0       	ldi	r22, 0x04	; 4
    1f6e:	49 2f       	mov	r20, r25
    1f70:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
    1f74:	fe 01       	movw	r30, r28
    1f76:	eb 5a       	subi	r30, 0xAB	; 171
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 81       	ld	r24, Z
    1f7c:	86 95       	lsr	r24
    1f7e:	86 95       	lsr	r24
    1f80:	98 2f       	mov	r25, r24
    1f82:	91 70       	andi	r25, 0x01	; 1
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	49 2f       	mov	r20, r25
    1f8a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
    1f8e:	fe 01       	movw	r30, r28
    1f90:	eb 5a       	subi	r30, 0xAB	; 171
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 81       	ld	r24, Z
    1f96:	86 95       	lsr	r24
    1f98:	98 2f       	mov	r25, r24
    1f9a:	91 70       	andi	r25, 0x01	; 1
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	61 e0       	ldi	r22, 0x01	; 1
    1fa0:	49 2f       	mov	r20, r25
    1fa2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	eb 5a       	subi	r30, 0xAB	; 171
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 81       	ld	r24, Z
    1fae:	98 2f       	mov	r25, r24
    1fb0:	91 70       	andi	r25, 0x01	; 1
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	49 2f       	mov	r20, r25
    1fb8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>

	// Set Enable Pin to '1'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	62 e0       	ldi	r22, 0x02	; 2
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 e0       	ldi	r26, 0x00	; 0
    1fcc:	b0 e4       	ldi	r27, 0x40	; 64
    1fce:	89 8f       	std	Y+25, r24	; 0x19
    1fd0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4a e7       	ldi	r20, 0x7A	; 122
    1fe4:	55 e4       	ldi	r21, 0x45	; 69
    1fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8d 8b       	std	Y+21, r24	; 0x15
    1ff0:	9e 8b       	std	Y+22, r25	; 0x16
    1ff2:	af 8b       	std	Y+23, r26	; 0x17
    1ff4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	2c f4       	brge	.+10     	; 0x2018 <LCD_vidSendCommand+0x5a6>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
    2016:	3f c0       	rjmp	.+126    	; 0x2096 <LCD_vidSendCommand+0x624>
	else if (__tmp > 65535)
    2018:	6d 89       	ldd	r22, Y+21	; 0x15
    201a:	7e 89       	ldd	r23, Y+22	; 0x16
    201c:	8f 89       	ldd	r24, Y+23	; 0x17
    201e:	98 8d       	ldd	r25, Y+24	; 0x18
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	4c f5       	brge	.+82     	; 0x2082 <LCD_vidSendCommand+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	69 8d       	ldd	r22, Y+25	; 0x19
    2032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9c 8b       	std	Y+20, r25	; 0x14
    2056:	8b 8b       	std	Y+19, r24	; 0x13
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <LCD_vidSendCommand+0x606>
    205a:	80 e9       	ldi	r24, 0x90	; 144
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	89 8b       	std	Y+17, r24	; 0x11
    2062:	89 89       	ldd	r24, Y+17	; 0x11
    2064:	9a 89       	ldd	r25, Y+18	; 0x12
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <LCD_vidSendCommand+0x5f4>
    206a:	9a 8b       	std	Y+18, r25	; 0x12
    206c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	8b 89       	ldd	r24, Y+19	; 0x13
    2070:	9c 89       	ldd	r25, Y+20	; 0x14
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9c 8b       	std	Y+20, r25	; 0x14
    2076:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <LCD_vidSendCommand+0x5e8>
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <LCD_vidSendCommand+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	6d 89       	ldd	r22, Y+21	; 0x15
    2084:	7e 89       	ldd	r23, Y+22	; 0x16
    2086:	8f 89       	ldd	r24, Y+23	; 0x17
    2088:	98 8d       	ldd	r25, Y+24	; 0x18
    208a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9c 8b       	std	Y+20, r25	; 0x14
    2094:	8b 8b       	std	Y+19, r24	; 0x13
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
    209e:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a0:	98 89       	ldd	r25, Y+16	; 0x10
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <LCD_vidSendCommand+0x630>
    20a6:	98 8b       	std	Y+16, r25	; 0x10
    20a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	// Set Enable Pin to '0'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	62 e0       	ldi	r22, 0x02	; 2
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a0 e0       	ldi	r26, 0x00	; 0
    20ba:	b0 e4       	ldi	r27, 0x40	; 64
    20bc:	8b 87       	std	Y+11, r24	; 0x0b
    20be:	9c 87       	std	Y+12, r25	; 0x0c
    20c0:	ad 87       	std	Y+13, r26	; 0x0d
    20c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a e7       	ldi	r20, 0x7A	; 122
    20d2:	55 e4       	ldi	r21, 0x45	; 69
    20d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8f 83       	std	Y+7, r24	; 0x07
    20de:	98 87       	std	Y+8, r25	; 0x08
    20e0:	a9 87       	std	Y+9, r26	; 0x09
    20e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e4:	6f 81       	ldd	r22, Y+7	; 0x07
    20e6:	78 85       	ldd	r23, Y+8	; 0x08
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e8       	ldi	r20, 0x80	; 128
    20f2:	5f e3       	ldi	r21, 0x3F	; 63
    20f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	2c f4       	brge	.+10     	; 0x2106 <LCD_vidSendCommand+0x694>
		__ticks = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	3f c0       	rjmp	.+126    	; 0x2184 <LCD_vidSendCommand+0x712>
	else if (__tmp > 65535)
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	4f e7       	ldi	r20, 0x7F	; 127
    2114:	57 e4       	ldi	r21, 0x47	; 71
    2116:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    211a:	18 16       	cp	r1, r24
    211c:	4c f5       	brge	.+82     	; 0x2170 <LCD_vidSendCommand+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2120:	7c 85       	ldd	r23, Y+12	; 0x0c
    2122:	8d 85       	ldd	r24, Y+13	; 0x0d
    2124:	9e 85       	ldd	r25, Y+14	; 0x0e
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e2       	ldi	r20, 0x20	; 32
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <LCD_vidSendCommand+0x6f4>
    2148:	80 e9       	ldi	r24, 0x90	; 144
    214a:	91 e0       	ldi	r25, 0x01	; 1
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <LCD_vidSendCommand+0x6e2>
    2158:	9c 83       	std	Y+4, r25	; 0x04
    215a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	69 f7       	brne	.-38     	; 0x2148 <LCD_vidSendCommand+0x6d6>
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <LCD_vidSendCommand+0x726>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2170:	6f 81       	ldd	r22, Y+7	; 0x07
    2172:	78 85       	ldd	r23, Y+8	; 0x08
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_vidSendCommand+0x71e>
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2198:	cb 5a       	subi	r28, 0xAB	; 171
    219a:	df 4f       	sbci	r29, 0xFF	; 255
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	08 95       	ret

000021b0 <LCD_vidDisplayCharacter>:


// Displays a character on the LCD
void LCD_vidDisplayCharacter(u8_t copy_u8data) {
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	c7 54       	subi	r28, 0x47	; 71
    21be:	d0 40       	sbci	r29, 0x00	; 0
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	fe 01       	movw	r30, r28
    21cc:	e9 5b       	subi	r30, 0xB9	; 185
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	63 e0       	ldi	r22, 0x03	; 3
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    21dc:	fe 01       	movw	r30, r28
    21de:	ed 5b       	subi	r30, 0xBD	; 189
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e0       	ldi	r26, 0x00	; 0
    21e8:	b0 e4       	ldi	r27, 0x40	; 64
    21ea:	80 83       	st	Z, r24
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	a2 83       	std	Z+2, r26	; 0x02
    21f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	8e 01       	movw	r16, r28
    21f4:	01 5c       	subi	r16, 0xC1	; 193
    21f6:	1f 4f       	sbci	r17, 0xFF	; 255
    21f8:	fe 01       	movw	r30, r28
    21fa:	ed 5b       	subi	r30, 0xBD	; 189
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a e7       	ldi	r20, 0x7A	; 122
    220c:	55 e4       	ldi	r21, 0x45	; 69
    220e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	f8 01       	movw	r30, r16
    2218:	80 83       	st	Z, r24
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	a2 83       	std	Z+2, r26	; 0x02
    221e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2220:	fe 01       	movw	r30, r28
    2222:	ff 96       	adiw	r30, 0x3f	; 63
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	93 81       	ldd	r25, Z+3	; 0x03
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <LCD_vidDisplayCharacter+0x96>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9e af       	std	Y+62, r25	; 0x3e
    2242:	8d af       	std	Y+61, r24	; 0x3d
    2244:	46 c0       	rjmp	.+140    	; 0x22d2 <LCD_vidDisplayCharacter+0x122>
	else if (__tmp > 65535)
    2246:	fe 01       	movw	r30, r28
    2248:	ff 96       	adiw	r30, 0x3f	; 63
    224a:	60 81       	ld	r22, Z
    224c:	71 81       	ldd	r23, Z+1	; 0x01
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	93 81       	ldd	r25, Z+3	; 0x03
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	3f ef       	ldi	r19, 0xFF	; 255
    2256:	4f e7       	ldi	r20, 0x7F	; 127
    2258:	57 e4       	ldi	r21, 0x47	; 71
    225a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    225e:	18 16       	cp	r1, r24
    2260:	64 f5       	brge	.+88     	; 0x22ba <LCD_vidDisplayCharacter+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2262:	fe 01       	movw	r30, r28
    2264:	ed 5b       	subi	r30, 0xBD	; 189
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9e af       	std	Y+62, r25	; 0x3e
    228e:	8d af       	std	Y+61, r24	; 0x3d
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_vidDisplayCharacter+0x100>
    2292:	80 e9       	ldi	r24, 0x90	; 144
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	9c af       	std	Y+60, r25	; 0x3c
    2298:	8b af       	std	Y+59, r24	; 0x3b
    229a:	8b ad       	ldd	r24, Y+59	; 0x3b
    229c:	9c ad       	ldd	r25, Y+60	; 0x3c
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_vidDisplayCharacter+0xee>
    22a2:	9c af       	std	Y+60, r25	; 0x3c
    22a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9e af       	std	Y+62, r25	; 0x3e
    22ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    22b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <LCD_vidDisplayCharacter+0xe2>
    22b8:	16 c0       	rjmp	.+44     	; 0x22e6 <LCD_vidDisplayCharacter+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	fe 01       	movw	r30, r28
    22bc:	ff 96       	adiw	r30, 0x3f	; 63
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9e af       	std	Y+62, r25	; 0x3e
    22d0:	8d af       	std	Y+61, r24	; 0x3d
    22d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    22d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    22d6:	9a af       	std	Y+58, r25	; 0x3a
    22d8:	89 af       	std	Y+57, r24	; 0x39
    22da:	89 ad       	ldd	r24, Y+57	; 0x39
    22dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <LCD_vidDisplayCharacter+0x12e>
    22e2:	9a af       	std	Y+58, r25	; 0x3a
    22e4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);

	// Inserts the data in the assigned PINS to be sent to the LCD
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
    22e6:	fe 01       	movw	r30, r28
    22e8:	e9 5b       	subi	r30, 0xB9	; 185
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 81       	ld	r24, Z
    22ee:	98 2f       	mov	r25, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	99 27       	eor	r25, r25
    22f4:	99 1f       	adc	r25, r25
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	64 e0       	ldi	r22, 0x04	; 4
    22fa:	49 2f       	mov	r20, r25
    22fc:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
    2300:	fe 01       	movw	r30, r28
    2302:	e9 5b       	subi	r30, 0xB9	; 185
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	82 95       	swap	r24
    230a:	86 95       	lsr	r24
    230c:	86 95       	lsr	r24
    230e:	83 70       	andi	r24, 0x03	; 3
    2310:	98 2f       	mov	r25, r24
    2312:	91 70       	andi	r25, 0x01	; 1
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	62 e0       	ldi	r22, 0x02	; 2
    2318:	49 2f       	mov	r20, r25
    231a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
    231e:	fe 01       	movw	r30, r28
    2320:	e9 5b       	subi	r30, 0xB9	; 185
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	80 81       	ld	r24, Z
    2326:	82 95       	swap	r24
    2328:	86 95       	lsr	r24
    232a:	87 70       	andi	r24, 0x07	; 7
    232c:	98 2f       	mov	r25, r24
    232e:	91 70       	andi	r25, 0x01	; 1
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	61 e0       	ldi	r22, 0x01	; 1
    2334:	49 2f       	mov	r20, r25
    2336:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
    233a:	fe 01       	movw	r30, r28
    233c:	e9 5b       	subi	r30, 0xB9	; 185
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	82 95       	swap	r24
    2344:	8f 70       	andi	r24, 0x0F	; 15
    2346:	98 2f       	mov	r25, r24
    2348:	91 70       	andi	r25, 0x01	; 1
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	49 2f       	mov	r20, r25
    2350:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>

	// Set Enable Pin to '1'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a0 e0       	ldi	r26, 0x00	; 0
    2364:	b0 e4       	ldi	r27, 0x40	; 64
    2366:	8d ab       	std	Y+53, r24	; 0x35
    2368:	9e ab       	std	Y+54, r25	; 0x36
    236a:	af ab       	std	Y+55, r26	; 0x37
    236c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236e:	6d a9       	ldd	r22, Y+53	; 0x35
    2370:	7e a9       	ldd	r23, Y+54	; 0x36
    2372:	8f a9       	ldd	r24, Y+55	; 0x37
    2374:	98 ad       	ldd	r25, Y+56	; 0x38
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	4a e7       	ldi	r20, 0x7A	; 122
    237c:	55 e4       	ldi	r21, 0x45	; 69
    237e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	89 ab       	std	Y+49, r24	; 0x31
    2388:	9a ab       	std	Y+50, r25	; 0x32
    238a:	ab ab       	std	Y+51, r26	; 0x33
    238c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    238e:	69 a9       	ldd	r22, Y+49	; 0x31
    2390:	7a a9       	ldd	r23, Y+50	; 0x32
    2392:	8b a9       	ldd	r24, Y+51	; 0x33
    2394:	9c a9       	ldd	r25, Y+52	; 0x34
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e8       	ldi	r20, 0x80	; 128
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	2c f4       	brge	.+10     	; 0x23b0 <LCD_vidDisplayCharacter+0x200>
		__ticks = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	98 ab       	std	Y+48, r25	; 0x30
    23ac:	8f a7       	std	Y+47, r24	; 0x2f
    23ae:	3f c0       	rjmp	.+126    	; 0x242e <LCD_vidDisplayCharacter+0x27e>
	else if (__tmp > 65535)
    23b0:	69 a9       	ldd	r22, Y+49	; 0x31
    23b2:	7a a9       	ldd	r23, Y+50	; 0x32
    23b4:	8b a9       	ldd	r24, Y+51	; 0x33
    23b6:	9c a9       	ldd	r25, Y+52	; 0x34
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	3f ef       	ldi	r19, 0xFF	; 255
    23bc:	4f e7       	ldi	r20, 0x7F	; 127
    23be:	57 e4       	ldi	r21, 0x47	; 71
    23c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23c4:	18 16       	cp	r1, r24
    23c6:	4c f5       	brge	.+82     	; 0x241a <LCD_vidDisplayCharacter+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ca:	7e a9       	ldd	r23, Y+54	; 0x36
    23cc:	8f a9       	ldd	r24, Y+55	; 0x37
    23ce:	98 ad       	ldd	r25, Y+56	; 0x38
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e2       	ldi	r20, 0x20	; 32
    23d6:	51 e4       	ldi	r21, 0x41	; 65
    23d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	98 ab       	std	Y+48, r25	; 0x30
    23ee:	8f a7       	std	Y+47, r24	; 0x2f
    23f0:	0f c0       	rjmp	.+30     	; 0x2410 <LCD_vidDisplayCharacter+0x260>
    23f2:	80 e9       	ldi	r24, 0x90	; 144
    23f4:	91 e0       	ldi	r25, 0x01	; 1
    23f6:	9e a7       	std	Y+46, r25	; 0x2e
    23f8:	8d a7       	std	Y+45, r24	; 0x2d
    23fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    23fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <LCD_vidDisplayCharacter+0x24e>
    2402:	9e a7       	std	Y+46, r25	; 0x2e
    2404:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2406:	8f a5       	ldd	r24, Y+47	; 0x2f
    2408:	98 a9       	ldd	r25, Y+48	; 0x30
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	98 ab       	std	Y+48, r25	; 0x30
    240e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2410:	8f a5       	ldd	r24, Y+47	; 0x2f
    2412:	98 a9       	ldd	r25, Y+48	; 0x30
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	69 f7       	brne	.-38     	; 0x23f2 <LCD_vidDisplayCharacter+0x242>
    2418:	14 c0       	rjmp	.+40     	; 0x2442 <LCD_vidDisplayCharacter+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241a:	69 a9       	ldd	r22, Y+49	; 0x31
    241c:	7a a9       	ldd	r23, Y+50	; 0x32
    241e:	8b a9       	ldd	r24, Y+51	; 0x33
    2420:	9c a9       	ldd	r25, Y+52	; 0x34
    2422:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	98 ab       	std	Y+48, r25	; 0x30
    242c:	8f a7       	std	Y+47, r24	; 0x2f
    242e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2430:	98 a9       	ldd	r25, Y+48	; 0x30
    2432:	9c a7       	std	Y+44, r25	; 0x2c
    2434:	8b a7       	std	Y+43, r24	; 0x2b
    2436:	8b a5       	ldd	r24, Y+43	; 0x2b
    2438:	9c a5       	ldd	r25, Y+44	; 0x2c
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <LCD_vidDisplayCharacter+0x28a>
    243e:	9c a7       	std	Y+44, r25	; 0x2c
    2440:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);

	// Set Enable Pin to '0'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	62 e0       	ldi	r22, 0x02	; 2
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e0       	ldi	r26, 0x00	; 0
    2452:	b0 e4       	ldi	r27, 0x40	; 64
    2454:	8f a3       	std	Y+39, r24	; 0x27
    2456:	98 a7       	std	Y+40, r25	; 0x28
    2458:	a9 a7       	std	Y+41, r26	; 0x29
    245a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245c:	6f a1       	ldd	r22, Y+39	; 0x27
    245e:	78 a5       	ldd	r23, Y+40	; 0x28
    2460:	89 a5       	ldd	r24, Y+41	; 0x29
    2462:	9a a5       	ldd	r25, Y+42	; 0x2a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a e7       	ldi	r20, 0x7A	; 122
    246a:	55 e4       	ldi	r21, 0x45	; 69
    246c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	8b a3       	std	Y+35, r24	; 0x23
    2476:	9c a3       	std	Y+36, r25	; 0x24
    2478:	ad a3       	std	Y+37, r26	; 0x25
    247a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    247c:	6b a1       	ldd	r22, Y+35	; 0x23
    247e:	7c a1       	ldd	r23, Y+36	; 0x24
    2480:	8d a1       	ldd	r24, Y+37	; 0x25
    2482:	9e a1       	ldd	r25, Y+38	; 0x26
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	2c f4       	brge	.+10     	; 0x249e <LCD_vidDisplayCharacter+0x2ee>
		__ticks = 1;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9a a3       	std	Y+34, r25	; 0x22
    249a:	89 a3       	std	Y+33, r24	; 0x21
    249c:	3f c0       	rjmp	.+126    	; 0x251c <LCD_vidDisplayCharacter+0x36c>
	else if (__tmp > 65535)
    249e:	6b a1       	ldd	r22, Y+35	; 0x23
    24a0:	7c a1       	ldd	r23, Y+36	; 0x24
    24a2:	8d a1       	ldd	r24, Y+37	; 0x25
    24a4:	9e a1       	ldd	r25, Y+38	; 0x26
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	4c f5       	brge	.+82     	; 0x2508 <LCD_vidDisplayCharacter+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b6:	6f a1       	ldd	r22, Y+39	; 0x27
    24b8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ba:	89 a5       	ldd	r24, Y+41	; 0x29
    24bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9a a3       	std	Y+34, r25	; 0x22
    24dc:	89 a3       	std	Y+33, r24	; 0x21
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <LCD_vidDisplayCharacter+0x34e>
    24e0:	80 e9       	ldi	r24, 0x90	; 144
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	98 a3       	std	Y+32, r25	; 0x20
    24e6:	8f 8f       	std	Y+31, r24	; 0x1f
    24e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ea:	98 a1       	ldd	r25, Y+32	; 0x20
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <LCD_vidDisplayCharacter+0x33c>
    24f0:	98 a3       	std	Y+32, r25	; 0x20
    24f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f4:	89 a1       	ldd	r24, Y+33	; 0x21
    24f6:	9a a1       	ldd	r25, Y+34	; 0x22
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	9a a3       	std	Y+34, r25	; 0x22
    24fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2500:	9a a1       	ldd	r25, Y+34	; 0x22
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	69 f7       	brne	.-38     	; 0x24e0 <LCD_vidDisplayCharacter+0x330>
    2506:	14 c0       	rjmp	.+40     	; 0x2530 <LCD_vidDisplayCharacter+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2508:	6b a1       	ldd	r22, Y+35	; 0x23
    250a:	7c a1       	ldd	r23, Y+36	; 0x24
    250c:	8d a1       	ldd	r24, Y+37	; 0x25
    250e:	9e a1       	ldd	r25, Y+38	; 0x26
    2510:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	9a a3       	std	Y+34, r25	; 0x22
    251a:	89 a3       	std	Y+33, r24	; 0x21
    251c:	89 a1       	ldd	r24, Y+33	; 0x21
    251e:	9a a1       	ldd	r25, Y+34	; 0x22
    2520:	9e 8f       	std	Y+30, r25	; 0x1e
    2522:	8d 8f       	std	Y+29, r24	; 0x1d
    2524:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2526:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <LCD_vidDisplayCharacter+0x378>
    252c:	9e 8f       	std	Y+30, r25	; 0x1e
    252e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
    2530:	fe 01       	movw	r30, r28
    2532:	e9 5b       	subi	r30, 0xB9	; 185
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 81       	ld	r24, Z
    2538:	86 95       	lsr	r24
    253a:	86 95       	lsr	r24
    253c:	86 95       	lsr	r24
    253e:	98 2f       	mov	r25, r24
    2540:	91 70       	andi	r25, 0x01	; 1
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	64 e0       	ldi	r22, 0x04	; 4
    2546:	49 2f       	mov	r20, r25
    2548:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
    254c:	fe 01       	movw	r30, r28
    254e:	e9 5b       	subi	r30, 0xB9	; 185
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	86 95       	lsr	r24
    2556:	86 95       	lsr	r24
    2558:	98 2f       	mov	r25, r24
    255a:	91 70       	andi	r25, 0x01	; 1
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	62 e0       	ldi	r22, 0x02	; 2
    2560:	49 2f       	mov	r20, r25
    2562:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
    2566:	fe 01       	movw	r30, r28
    2568:	e9 5b       	subi	r30, 0xB9	; 185
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	86 95       	lsr	r24
    2570:	98 2f       	mov	r25, r24
    2572:	91 70       	andi	r25, 0x01	; 1
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	61 e0       	ldi	r22, 0x01	; 1
    2578:	49 2f       	mov	r20, r25
    257a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
	GPIO_vidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
    257e:	fe 01       	movw	r30, r28
    2580:	e9 5b       	subi	r30, 0xB9	; 185
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	98 2f       	mov	r25, r24
    2588:	91 70       	andi	r25, 0x01	; 1
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	49 2f       	mov	r20, r25
    2590:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>

	// Set Enable Pin to '1'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	62 e0       	ldi	r22, 0x02	; 2
    2598:	41 e0       	ldi	r20, 0x01	; 1
    259a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a0 e0       	ldi	r26, 0x00	; 0
    25a4:	b0 e4       	ldi	r27, 0x40	; 64
    25a6:	89 8f       	std	Y+25, r24	; 0x19
    25a8:	9a 8f       	std	Y+26, r25	; 0x1a
    25aa:	ab 8f       	std	Y+27, r26	; 0x1b
    25ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	69 8d       	ldd	r22, Y+25	; 0x19
    25b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a e7       	ldi	r20, 0x7A	; 122
    25bc:	55 e4       	ldi	r21, 0x45	; 69
    25be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8d 8b       	std	Y+21, r24	; 0x15
    25c8:	9e 8b       	std	Y+22, r25	; 0x16
    25ca:	af 8b       	std	Y+23, r26	; 0x17
    25cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ce:	6d 89       	ldd	r22, Y+21	; 0x15
    25d0:	7e 89       	ldd	r23, Y+22	; 0x16
    25d2:	8f 89       	ldd	r24, Y+23	; 0x17
    25d4:	98 8d       	ldd	r25, Y+24	; 0x18
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <LCD_vidDisplayCharacter+0x440>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	9c 8b       	std	Y+20, r25	; 0x14
    25ec:	8b 8b       	std	Y+19, r24	; 0x13
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <LCD_vidDisplayCharacter+0x4be>
	else if (__tmp > 65535)
    25f0:	6d 89       	ldd	r22, Y+21	; 0x15
    25f2:	7e 89       	ldd	r23, Y+22	; 0x16
    25f4:	8f 89       	ldd	r24, Y+23	; 0x17
    25f6:	98 8d       	ldd	r25, Y+24	; 0x18
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <LCD_vidDisplayCharacter+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	69 8d       	ldd	r22, Y+25	; 0x19
    260a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	9c 8b       	std	Y+20, r25	; 0x14
    262e:	8b 8b       	std	Y+19, r24	; 0x13
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <LCD_vidDisplayCharacter+0x4a0>
    2632:	80 e9       	ldi	r24, 0x90	; 144
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	9a 8b       	std	Y+18, r25	; 0x12
    2638:	89 8b       	std	Y+17, r24	; 0x11
    263a:	89 89       	ldd	r24, Y+17	; 0x11
    263c:	9a 89       	ldd	r25, Y+18	; 0x12
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_vidDisplayCharacter+0x48e>
    2642:	9a 8b       	std	Y+18, r25	; 0x12
    2644:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	8b 89       	ldd	r24, Y+19	; 0x13
    2648:	9c 89       	ldd	r25, Y+20	; 0x14
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	8b 89       	ldd	r24, Y+19	; 0x13
    2652:	9c 89       	ldd	r25, Y+20	; 0x14
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <LCD_vidDisplayCharacter+0x482>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <LCD_vidDisplayCharacter+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	6d 89       	ldd	r22, Y+21	; 0x15
    265c:	7e 89       	ldd	r23, Y+22	; 0x16
    265e:	8f 89       	ldd	r24, Y+23	; 0x17
    2660:	98 8d       	ldd	r25, Y+24	; 0x18
    2662:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9c 8b       	std	Y+20, r25	; 0x14
    266c:	8b 8b       	std	Y+19, r24	; 0x13
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	98 8b       	std	Y+16, r25	; 0x10
    2674:	8f 87       	std	Y+15, r24	; 0x0f
    2676:	8f 85       	ldd	r24, Y+15	; 0x0f
    2678:	98 89       	ldd	r25, Y+16	; 0x10
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_vidDisplayCharacter+0x4ca>
    267e:	98 8b       	std	Y+16, r25	; 0x10
    2680:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	// Set Enable Pin to '0'
	GPIO_vidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	62 e0       	ldi	r22, 0x02	; 2
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	0e 94 7e 06 	call	0xcfc	; 0xcfc <GPIO_vidSetPinValue>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e0       	ldi	r26, 0x00	; 0
    2692:	b0 e4       	ldi	r27, 0x40	; 64
    2694:	8b 87       	std	Y+11, r24	; 0x0b
    2696:	9c 87       	std	Y+12, r25	; 0x0c
    2698:	ad 87       	std	Y+13, r26	; 0x0d
    269a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	6b 85       	ldd	r22, Y+11	; 0x0b
    269e:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a e7       	ldi	r20, 0x7A	; 122
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8f 83       	std	Y+7, r24	; 0x07
    26b6:	98 87       	std	Y+8, r25	; 0x08
    26b8:	a9 87       	std	Y+9, r26	; 0x09
    26ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <LCD_vidDisplayCharacter+0x52e>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9e 83       	std	Y+6, r25	; 0x06
    26da:	8d 83       	std	Y+5, r24	; 0x05
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <LCD_vidDisplayCharacter+0x5ac>
	else if (__tmp > 65535)
    26de:	6f 81       	ldd	r22, Y+7	; 0x07
    26e0:	78 85       	ldd	r23, Y+8	; 0x08
    26e2:	89 85       	ldd	r24, Y+9	; 0x09
    26e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <LCD_vidDisplayCharacter+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	0f c0       	rjmp	.+30     	; 0x273e <LCD_vidDisplayCharacter+0x58e>
    2720:	80 e9       	ldi	r24, 0x90	; 144
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	9c 83       	std	Y+4, r25	; 0x04
    2726:	8b 83       	std	Y+3, r24	; 0x03
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	9c 81       	ldd	r25, Y+4	; 0x04
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_vidDisplayCharacter+0x57c>
    2730:	9c 83       	std	Y+4, r25	; 0x04
    2732:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8d 81       	ldd	r24, Y+5	; 0x05
    2736:	9e 81       	ldd	r25, Y+6	; 0x06
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <LCD_vidDisplayCharacter+0x570>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <LCD_vidDisplayCharacter+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6f 81       	ldd	r22, Y+7	; 0x07
    274a:	78 85       	ldd	r23, Y+8	; 0x08
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	9e 81       	ldd	r25, Y+6	; 0x06
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <LCD_vidDisplayCharacter+0x5b8>
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2770:	c9 5b       	subi	r28, 0xB9	; 185
    2772:	df 4f       	sbci	r29, 0xFF	; 255
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	1f 91       	pop	r17
    2784:	0f 91       	pop	r16
    2786:	08 95       	ret

00002788 <LCD_vidDisplayString>:


// Displays a string on the LCD
void LCD_vidDisplayString(cu8_t *str, u8_t copy_u8row, u8_t copy_u8_col) {
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <LCD_vidDisplayString+0x6>
    278e:	00 d0       	rcall	.+0      	; 0x2790 <LCD_vidDisplayString+0x8>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	9b 83       	std	Y+3, r25	; 0x03
    2798:	8a 83       	std	Y+2, r24	; 0x02
    279a:	6c 83       	std	Y+4, r22	; 0x04
    279c:	4d 83       	std	Y+5, r20	; 0x05
	u8_t i = 0;
    279e:	19 82       	std	Y+1, r1	; 0x01
	LCD_vidMoveCursor(copy_u8row, copy_u8_col);
    27a0:	8c 81       	ldd	r24, Y+4	; 0x04
    27a2:	6d 81       	ldd	r22, Y+5	; 0x05
    27a4:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_vidMoveCursor>
    27a8:	20 c0       	rjmp	.+64     	; 0x27ea <LCD_vidDisplayString+0x62>

	while(str[i] != '\0') {
		LCD_vidDisplayCharacter(str[i]);
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	9b 81       	ldd	r25, Y+3	; 0x03
    27b4:	fc 01       	movw	r30, r24
    27b6:	e2 0f       	add	r30, r18
    27b8:	f3 1f       	adc	r31, r19
    27ba:	80 81       	ld	r24, Z
    27bc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_vidDisplayCharacter>
		i++;
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	8f 5f       	subi	r24, 0xFF	; 255
    27c4:	89 83       	std	Y+1, r24	; 0x01
		copy_u8_col++;
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	8d 83       	std	Y+5, r24	; 0x05
		if (copy_u8_col >= LCD_COL_MAXSIZE) {
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	84 31       	cpi	r24, 0x14	; 20
    27d0:	60 f0       	brcs	.+24     	; 0x27ea <LCD_vidDisplayString+0x62>
			copy_u8_col = 0;
    27d2:	1d 82       	std	Y+5, r1	; 0x05
			copy_u8row++;
    27d4:	8c 81       	ldd	r24, Y+4	; 0x04
    27d6:	8f 5f       	subi	r24, 0xFF	; 255
    27d8:	8c 83       	std	Y+4, r24	; 0x04
			if (copy_u8row >= LCD_ROW_MAXSIZE) {
    27da:	8c 81       	ldd	r24, Y+4	; 0x04
    27dc:	84 30       	cpi	r24, 0x04	; 4
    27de:	28 f0       	brcs	.+10     	; 0x27ea <LCD_vidDisplayString+0x62>
				copy_u8row = 0;
    27e0:	1c 82       	std	Y+4, r1	; 0x04
				LCD_vidMoveCursor(copy_u8row, copy_u8_col);
    27e2:	8c 81       	ldd	r24, Y+4	; 0x04
    27e4:	6d 81       	ldd	r22, Y+5	; 0x05
    27e6:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_vidMoveCursor>
// Displays a string on the LCD
void LCD_vidDisplayString(cu8_t *str, u8_t copy_u8row, u8_t copy_u8_col) {
	u8_t i = 0;
	LCD_vidMoveCursor(copy_u8row, copy_u8_col);

	while(str[i] != '\0') {
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	9b 81       	ldd	r25, Y+3	; 0x03
    27f4:	fc 01       	movw	r30, r24
    27f6:	e2 0f       	add	r30, r18
    27f8:	f3 1f       	adc	r31, r19
    27fa:	80 81       	ld	r24, Z
    27fc:	88 23       	and	r24, r24
    27fe:	a9 f6       	brne	.-86     	; 0x27aa <LCD_vidDisplayString+0x22>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <LCD_vidMoveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_vidMoveCursor(u8_t copy_u8row, u8_t copy_u8_col) {
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	00 d0       	rcall	.+0      	; 0x2816 <LCD_vidMoveCursor+0x6>
    2816:	00 d0       	rcall	.+0      	; 0x2818 <LCD_vidMoveCursor+0x8>
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	6a 83       	std	Y+2, r22	; 0x02

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(copy_u8row) {
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	3c 83       	std	Y+4, r19	; 0x04
    2828:	2b 83       	std	Y+3, r18	; 0x03
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	81 30       	cpi	r24, 0x01	; 1
    2830:	91 05       	cpc	r25, r1
    2832:	d1 f0       	breq	.+52     	; 0x2868 <LCD_vidMoveCursor+0x58>
    2834:	2b 81       	ldd	r18, Y+3	; 0x03
    2836:	3c 81       	ldd	r19, Y+4	; 0x04
    2838:	22 30       	cpi	r18, 0x02	; 2
    283a:	31 05       	cpc	r19, r1
    283c:	2c f4       	brge	.+10     	; 0x2848 <LCD_vidMoveCursor+0x38>
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	9c 81       	ldd	r25, Y+4	; 0x04
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	61 f0       	breq	.+24     	; 0x285e <LCD_vidMoveCursor+0x4e>
    2846:	1e c0       	rjmp	.+60     	; 0x2884 <LCD_vidMoveCursor+0x74>
    2848:	2b 81       	ldd	r18, Y+3	; 0x03
    284a:	3c 81       	ldd	r19, Y+4	; 0x04
    284c:	22 30       	cpi	r18, 0x02	; 2
    284e:	31 05       	cpc	r19, r1
    2850:	81 f0       	breq	.+32     	; 0x2872 <LCD_vidMoveCursor+0x62>
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	83 30       	cpi	r24, 0x03	; 3
    2858:	91 05       	cpc	r25, r1
    285a:	81 f0       	breq	.+32     	; 0x287c <LCD_vidMoveCursor+0x6c>
    285c:	13 c0       	rjmp	.+38     	; 0x2884 <LCD_vidMoveCursor+0x74>
		case 0:
			LCD_vidSendCommand(copy_u8_col | 0x80);
    285e:	8a 81       	ldd	r24, Y+2	; 0x02
    2860:	80 68       	ori	r24, 0x80	; 128
    2862:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
    2866:	0e c0       	rjmp	.+28     	; 0x2884 <LCD_vidMoveCursor+0x74>
				break;
		case 1:
			LCD_vidSendCommand(copy_u8_col + 0xc0);
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	80 54       	subi	r24, 0x40	; 64
    286c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
    2870:	09 c0       	rjmp	.+18     	; 0x2884 <LCD_vidMoveCursor+0x74>
				break;
		case 2:
			LCD_vidSendCommand(copy_u8_col + 0x94);
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	8c 56       	subi	r24, 0x6C	; 108
    2876:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <LCD_vidMoveCursor+0x74>
				break;
		case 3:
			LCD_vidSendCommand(copy_u8_col + 0xd4);
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	8c 52       	subi	r24, 0x2C	; 44
    2880:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
				break;
	}
	/* Move the LCD cursor to this specific address */
}
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <LCD_vidDisplayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_vidDisplayStringRowColumn(u8_t copy_u8row,
		u8_t copy_u8_col,
		cu8_t *copy_cu8Str) {
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <LCD_vidDisplayStringRowColumn+0x6>
    2898:	00 d0       	rcall	.+0      	; 0x289a <LCD_vidDisplayStringRowColumn+0x8>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	6a 83       	std	Y+2, r22	; 0x02
    28a2:	5c 83       	std	Y+4, r21	; 0x04
    28a4:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_vidMoveCursor(copy_u8row, copy_u8_col);
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	6a 81       	ldd	r22, Y+2	; 0x02
    28aa:	0e 94 08 14 	call	0x2810	; 0x2810 <LCD_vidMoveCursor>

	// Display the string from the cursor
	LCD_vidDisplayString(*copy_cu8Str, copy_u8row, copy_u8_col);
    28ae:	eb 81       	ldd	r30, Y+3	; 0x03
    28b0:	fc 81       	ldd	r31, Y+4	; 0x04
    28b2:	80 81       	ld	r24, Z
    28b4:	88 2f       	mov	r24, r24
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	69 81       	ldd	r22, Y+1	; 0x01
    28ba:	4a 81       	ldd	r20, Y+2	; 0x02
    28bc:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_vidDisplayString>
}
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <LCD_vidIntgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_vidIntgerToString(u32_t copy_u32data, u8_t copy_u8row, u8_t copy_u8_col) {
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	66 97       	sbiw	r28, 0x16	; 22
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	69 8b       	std	Y+17, r22	; 0x11
    28e4:	7a 8b       	std	Y+18, r23	; 0x12
    28e6:	8b 8b       	std	Y+19, r24	; 0x13
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	4d 8b       	std	Y+21, r20	; 0x15
    28ec:	2e 8b       	std	Y+22, r18	; 0x16
	// A string to hold the ASCII values
	cu8_t buffer[16];

	// Converts data to its ASCII
	itoa(copy_u32data, buffer, 10);
    28ee:	89 89       	ldd	r24, Y+17	; 0x11
    28f0:	9a 89       	ldd	r25, Y+18	; 0x12
    28f2:	ab 89       	ldd	r26, Y+19	; 0x13
    28f4:	bc 89       	ldd	r27, Y+20	; 0x14
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	9e 01       	movw	r18, r28
    28fc:	2f 5f       	subi	r18, 0xFF	; 255
    28fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2900:	a9 01       	movw	r20, r18
    2902:	2a e0       	ldi	r18, 0x0A	; 10
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	0e 94 df 14 	call	0x29be	; 0x29be <itoa>

	// Display string with the results in the buffer
	LCD_vidDisplayString(buffer, copy_u8row, copy_u8_col);
    290a:	ce 01       	movw	r24, r28
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	6d 89       	ldd	r22, Y+21	; 0x15
    2910:	4e 89       	ldd	r20, Y+22	; 0x16
    2912:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_vidDisplayString>
}
    2916:	66 96       	adiw	r28, 0x16	; 22
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <LCD_vidClearScreen>:

// Clears the LCD from any garbage
void LCD_vidClearScreen(void) {
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_vidSendCommand(LCD_CLEAR_DISPLAY);
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <LCD_vidSendCommand>
}
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <main>:

/*******************************************************************************
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void) {
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
	LCD_vidInit();
    2944:	0e 94 2b 0b 	call	0x1656	; 0x1656 <LCD_vidInit>
	LCD_vidDisplayCharacter('F');
    2948:	86 e4       	ldi	r24, 0x46	; 70
    294a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_vidDisplayCharacter>
    294e:	ff cf       	rjmp	.-2      	; 0x294e <main+0x12>

00002950 <__prologue_saves__>:
    2950:	2f 92       	push	r2
    2952:	3f 92       	push	r3
    2954:	4f 92       	push	r4
    2956:	5f 92       	push	r5
    2958:	6f 92       	push	r6
    295a:	7f 92       	push	r7
    295c:	8f 92       	push	r8
    295e:	9f 92       	push	r9
    2960:	af 92       	push	r10
    2962:	bf 92       	push	r11
    2964:	cf 92       	push	r12
    2966:	df 92       	push	r13
    2968:	ef 92       	push	r14
    296a:	ff 92       	push	r15
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	ca 1b       	sub	r28, r26
    297a:	db 0b       	sbc	r29, r27
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	09 94       	ijmp

00002988 <__epilogue_restores__>:
    2988:	2a 88       	ldd	r2, Y+18	; 0x12
    298a:	39 88       	ldd	r3, Y+17	; 0x11
    298c:	48 88       	ldd	r4, Y+16	; 0x10
    298e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2990:	6e 84       	ldd	r6, Y+14	; 0x0e
    2992:	7d 84       	ldd	r7, Y+13	; 0x0d
    2994:	8c 84       	ldd	r8, Y+12	; 0x0c
    2996:	9b 84       	ldd	r9, Y+11	; 0x0b
    2998:	aa 84       	ldd	r10, Y+10	; 0x0a
    299a:	b9 84       	ldd	r11, Y+9	; 0x09
    299c:	c8 84       	ldd	r12, Y+8	; 0x08
    299e:	df 80       	ldd	r13, Y+7	; 0x07
    29a0:	ee 80       	ldd	r14, Y+6	; 0x06
    29a2:	fd 80       	ldd	r15, Y+5	; 0x05
    29a4:	0c 81       	ldd	r16, Y+4	; 0x04
    29a6:	1b 81       	ldd	r17, Y+3	; 0x03
    29a8:	aa 81       	ldd	r26, Y+2	; 0x02
    29aa:	b9 81       	ldd	r27, Y+1	; 0x01
    29ac:	ce 0f       	add	r28, r30
    29ae:	d1 1d       	adc	r29, r1
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	ed 01       	movw	r28, r26
    29bc:	08 95       	ret

000029be <itoa>:
    29be:	fb 01       	movw	r30, r22
    29c0:	9f 01       	movw	r18, r30
    29c2:	e8 94       	clt
    29c4:	42 30       	cpi	r20, 0x02	; 2
    29c6:	c4 f0       	brlt	.+48     	; 0x29f8 <itoa+0x3a>
    29c8:	45 32       	cpi	r20, 0x25	; 37
    29ca:	b4 f4       	brge	.+44     	; 0x29f8 <itoa+0x3a>
    29cc:	4a 30       	cpi	r20, 0x0A	; 10
    29ce:	29 f4       	brne	.+10     	; 0x29da <itoa+0x1c>
    29d0:	97 fb       	bst	r25, 7
    29d2:	1e f4       	brtc	.+6      	; 0x29da <itoa+0x1c>
    29d4:	90 95       	com	r25
    29d6:	81 95       	neg	r24
    29d8:	9f 4f       	sbci	r25, 0xFF	; 255
    29da:	64 2f       	mov	r22, r20
    29dc:	77 27       	eor	r23, r23
    29de:	0e 94 10 15 	call	0x2a20	; 0x2a20 <__udivmodhi4>
    29e2:	80 5d       	subi	r24, 0xD0	; 208
    29e4:	8a 33       	cpi	r24, 0x3A	; 58
    29e6:	0c f0       	brlt	.+2      	; 0x29ea <itoa+0x2c>
    29e8:	89 5d       	subi	r24, 0xD9	; 217
    29ea:	81 93       	st	Z+, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	a1 f7       	brne	.-24     	; 0x29da <itoa+0x1c>
    29f2:	16 f4       	brtc	.+4      	; 0x29f8 <itoa+0x3a>
    29f4:	5d e2       	ldi	r21, 0x2D	; 45
    29f6:	51 93       	st	Z+, r21
    29f8:	10 82       	st	Z, r1
    29fa:	c9 01       	movw	r24, r18
    29fc:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <strrev>

00002a00 <strrev>:
    2a00:	dc 01       	movw	r26, r24
    2a02:	fc 01       	movw	r30, r24
    2a04:	67 2f       	mov	r22, r23
    2a06:	71 91       	ld	r23, Z+
    2a08:	77 23       	and	r23, r23
    2a0a:	e1 f7       	brne	.-8      	; 0x2a04 <strrev+0x4>
    2a0c:	32 97       	sbiw	r30, 0x02	; 2
    2a0e:	04 c0       	rjmp	.+8      	; 0x2a18 <strrev+0x18>
    2a10:	7c 91       	ld	r23, X
    2a12:	6d 93       	st	X+, r22
    2a14:	70 83       	st	Z, r23
    2a16:	62 91       	ld	r22, -Z
    2a18:	ae 17       	cp	r26, r30
    2a1a:	bf 07       	cpc	r27, r31
    2a1c:	c8 f3       	brcs	.-14     	; 0x2a10 <strrev+0x10>
    2a1e:	08 95       	ret

00002a20 <__udivmodhi4>:
    2a20:	aa 1b       	sub	r26, r26
    2a22:	bb 1b       	sub	r27, r27
    2a24:	51 e1       	ldi	r21, 0x11	; 17
    2a26:	07 c0       	rjmp	.+14     	; 0x2a36 <__udivmodhi4_ep>

00002a28 <__udivmodhi4_loop>:
    2a28:	aa 1f       	adc	r26, r26
    2a2a:	bb 1f       	adc	r27, r27
    2a2c:	a6 17       	cp	r26, r22
    2a2e:	b7 07       	cpc	r27, r23
    2a30:	10 f0       	brcs	.+4      	; 0x2a36 <__udivmodhi4_ep>
    2a32:	a6 1b       	sub	r26, r22
    2a34:	b7 0b       	sbc	r27, r23

00002a36 <__udivmodhi4_ep>:
    2a36:	88 1f       	adc	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	5a 95       	dec	r21
    2a3c:	a9 f7       	brne	.-22     	; 0x2a28 <__udivmodhi4_loop>
    2a3e:	80 95       	com	r24
    2a40:	90 95       	com	r25
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	08 95       	ret

00002a48 <_exit>:
    2a48:	f8 94       	cli

00002a4a <__stop_program>:
    2a4a:	ff cf       	rjmp	.-2      	; 0x2a4a <__stop_program>
