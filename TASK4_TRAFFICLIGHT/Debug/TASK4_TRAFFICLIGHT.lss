
TASK4_TRAFFICLIGHT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001db6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001db6  00001e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000204c  00000000  00000000  00001e34  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000158c  00000000  00000000  00003e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000540c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000554c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000056bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007305  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000081f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000938d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009b5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <main>
      7a:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_voidSetPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPinDirection(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinDIR) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_voidSetPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <GPIO_voidSetPinDirection+0x8>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <GPIO_voidSetPinDirection+0xa>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	6b 83       	std	Y+3, r22	; 0x03
     b48:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
     b4a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	88 30       	cpi	r24, 0x08	; 8
     b50:	18 f0       	brcs	.+6      	; 0xb58 <GPIO_voidSetPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	e1 c0       	rjmp	.+450    	; 0xd1a <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	84 30       	cpi	r24, 0x04	; 4
     b5c:	18 f0       	brcs	.+6      	; 0xb64 <GPIO_voidSetPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	db c0       	rjmp	.+438    	; 0xd1a <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	88 23       	and	r24, r24
     b68:	31 f0       	breq	.+12     	; 0xb76 <GPIO_voidSetPinDirection+0x40>
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	19 f0       	breq	.+6      	; 0xb76 <GPIO_voidSetPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	d2 c0       	rjmp	.+420    	; 0xd1a <GPIO_voidSetPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	3e 83       	std	Y+6, r19	; 0x06
     b7e:	2d 83       	std	Y+5, r18	; 0x05
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	9e 81       	ldd	r25, Y+6	; 0x06
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <GPIO_voidSetPinDirection+0x56>
     b8a:	43 c0       	rjmp	.+134    	; 0xc12 <GPIO_voidSetPinDirection+0xdc>
     b8c:	2d 81       	ldd	r18, Y+5	; 0x05
     b8e:	3e 81       	ldd	r19, Y+6	; 0x06
     b90:	22 30       	cpi	r18, 0x02	; 2
     b92:	31 05       	cpc	r19, r1
     b94:	2c f4       	brge	.+10     	; 0xba0 <GPIO_voidSetPinDirection+0x6a>
     b96:	8d 81       	ldd	r24, Y+5	; 0x05
     b98:	9e 81       	ldd	r25, Y+6	; 0x06
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	71 f0       	breq	.+28     	; 0xbba <GPIO_voidSetPinDirection+0x84>
     b9e:	bc c0       	rjmp	.+376    	; 0xd18 <GPIO_voidSetPinDirection+0x1e2>
     ba0:	2d 81       	ldd	r18, Y+5	; 0x05
     ba2:	3e 81       	ldd	r19, Y+6	; 0x06
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_voidSetPinDirection+0x76>
     baa:	5f c0       	rjmp	.+190    	; 0xc6a <GPIO_voidSetPinDirection+0x134>
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	9e 81       	ldd	r25, Y+6	; 0x06
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	91 05       	cpc	r25, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <GPIO_voidSetPinDirection+0x82>
     bb6:	85 c0       	rjmp	.+266    	; 0xcc2 <GPIO_voidSetPinDirection+0x18c>
     bb8:	af c0       	rjmp	.+350    	; 0xd18 <GPIO_voidSetPinDirection+0x1e2>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	a1 f4       	brne	.+40     	; 0xbe8 <GPIO_voidSetPinDirection+0xb2>
					SET_BIT(DDRA_REG, copy_u8pinID);
     bc0:	aa e3       	ldi	r26, 0x3A	; 58
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	ea e3       	ldi	r30, 0x3A	; 58
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 2e       	mov	r0, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <GPIO_voidSetPinDirection+0xa8>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <GPIO_voidSetPinDirection+0xa4>
     be2:	84 2b       	or	r24, r20
     be4:	8c 93       	st	X, r24
     be6:	98 c0       	rjmp	.+304    	; 0xd18 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
     be8:	aa e3       	ldi	r26, 0x3A	; 58
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea e3       	ldi	r30, 0x3A	; 58
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	48 2f       	mov	r20, r24
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 2e       	mov	r0, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <GPIO_voidSetPinDirection+0xd0>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <GPIO_voidSetPinDirection+0xcc>
     c0a:	80 95       	com	r24
     c0c:	84 23       	and	r24, r20
     c0e:	8c 93       	st	X, r24
     c10:	83 c0       	rjmp	.+262    	; 0xd18 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     c12:	8c 81       	ldd	r24, Y+4	; 0x04
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	a1 f4       	brne	.+40     	; 0xc40 <GPIO_voidSetPinDirection+0x10a>
					SET_BIT(DDRB_REG, copy_u8pinID);
     c18:	a7 e3       	ldi	r26, 0x37	; 55
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e7 e3       	ldi	r30, 0x37	; 55
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <GPIO_voidSetPinDirection+0x100>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <GPIO_voidSetPinDirection+0xfc>
     c3a:	84 2b       	or	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	6c c0       	rjmp	.+216    	; 0xd18 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
     c40:	a7 e3       	ldi	r26, 0x37	; 55
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e7 e3       	ldi	r30, 0x37	; 55
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <GPIO_voidSetPinDirection+0x128>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <GPIO_voidSetPinDirection+0x124>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	57 c0       	rjmp	.+174    	; 0xd18 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     c6a:	8c 81       	ldd	r24, Y+4	; 0x04
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	a1 f4       	brne	.+40     	; 0xc98 <GPIO_voidSetPinDirection+0x162>
					SET_BIT(DDRC_REG, copy_u8pinID);
     c70:	a4 e3       	ldi	r26, 0x34	; 52
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e4 e3       	ldi	r30, 0x34	; 52
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	48 2f       	mov	r20, r24
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 2e       	mov	r0, r18
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <GPIO_voidSetPinDirection+0x158>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <GPIO_voidSetPinDirection+0x154>
     c92:	84 2b       	or	r24, r20
     c94:	8c 93       	st	X, r24
     c96:	40 c0       	rjmp	.+128    	; 0xd18 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
     c98:	a4 e3       	ldi	r26, 0x34	; 52
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e4 e3       	ldi	r30, 0x34	; 52
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 2e       	mov	r0, r18
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <GPIO_voidSetPinDirection+0x180>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <GPIO_voidSetPinDirection+0x17c>
     cba:	80 95       	com	r24
     cbc:	84 23       	and	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	2b c0       	rjmp	.+86     	; 0xd18 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	a1 f4       	brne	.+40     	; 0xcf0 <GPIO_voidSetPinDirection+0x1ba>
					SET_BIT(DDRD_REG, copy_u8pinID);
     cc8:	a1 e3       	ldi	r26, 0x31	; 49
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e1 e3       	ldi	r30, 0x31	; 49
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <GPIO_voidSetPinDirection+0x1b0>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <GPIO_voidSetPinDirection+0x1ac>
     cea:	84 2b       	or	r24, r20
     cec:	8c 93       	st	X, r24
     cee:	14 c0       	rjmp	.+40     	; 0xd18 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
     cf0:	a1 e3       	ldi	r26, 0x31	; 49
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e1 e3       	ldi	r30, 0x31	; 49
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	48 2f       	mov	r20, r24
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 2e       	mov	r0, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <GPIO_voidSetPinDirection+0x1d8>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <GPIO_voidSetPinDirection+0x1d4>
     d12:	80 95       	com	r24
     d14:	84 23       	and	r24, r20
     d16:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
     d18:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d1c:	26 96       	adiw	r28, 0x06	; 6
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <GPIO_voidSetPinValue>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_voidSetPinValue(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinValue)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <GPIO_voidSetPinValue+0x6>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <GPIO_voidSetPinValue+0x8>
     d36:	00 d0       	rcall	.+0      	; 0xd38 <GPIO_voidSetPinValue+0xa>
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	8a 83       	std	Y+2, r24	; 0x02
     d3e:	6b 83       	std	Y+3, r22	; 0x03
     d40:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
     d42:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	88 30       	cpi	r24, 0x08	; 8
     d48:	18 f0       	brcs	.+6      	; 0xd50 <GPIO_voidSetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	e1 c0       	rjmp	.+450    	; 0xf12 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	84 30       	cpi	r24, 0x04	; 4
     d54:	18 f0       	brcs	.+6      	; 0xd5c <GPIO_voidSetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	db c0       	rjmp	.+438    	; 0xf12 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	31 f0       	breq	.+12     	; 0xd6e <GPIO_voidSetPinValue+0x40>
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	88 23       	and	r24, r24
     d66:	19 f0       	breq	.+6      	; 0xd6e <GPIO_voidSetPinValue+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	d2 c0       	rjmp	.+420    	; 0xf12 <GPIO_voidSetPinValue+0x1e4>
	}
	else {
		switch(copy_u8portID)
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	3e 83       	std	Y+6, r19	; 0x06
     d76:	2d 83       	std	Y+5, r18	; 0x05
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	9e 81       	ldd	r25, Y+6	; 0x06
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	91 05       	cpc	r25, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <GPIO_voidSetPinValue+0x56>
     d82:	43 c0       	rjmp	.+134    	; 0xe0a <GPIO_voidSetPinValue+0xdc>
     d84:	2d 81       	ldd	r18, Y+5	; 0x05
     d86:	3e 81       	ldd	r19, Y+6	; 0x06
     d88:	22 30       	cpi	r18, 0x02	; 2
     d8a:	31 05       	cpc	r19, r1
     d8c:	2c f4       	brge	.+10     	; 0xd98 <GPIO_voidSetPinValue+0x6a>
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	71 f0       	breq	.+28     	; 0xdb2 <GPIO_voidSetPinValue+0x84>
     d96:	bc c0       	rjmp	.+376    	; 0xf10 <GPIO_voidSetPinValue+0x1e2>
     d98:	2d 81       	ldd	r18, Y+5	; 0x05
     d9a:	3e 81       	ldd	r19, Y+6	; 0x06
     d9c:	22 30       	cpi	r18, 0x02	; 2
     d9e:	31 05       	cpc	r19, r1
     da0:	09 f4       	brne	.+2      	; 0xda4 <GPIO_voidSetPinValue+0x76>
     da2:	5f c0       	rjmp	.+190    	; 0xe62 <GPIO_voidSetPinValue+0x134>
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	83 30       	cpi	r24, 0x03	; 3
     daa:	91 05       	cpc	r25, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <GPIO_voidSetPinValue+0x82>
     dae:	85 c0       	rjmp	.+266    	; 0xeba <GPIO_voidSetPinValue+0x18c>
     db0:	af c0       	rjmp	.+350    	; 0xf10 <GPIO_voidSetPinValue+0x1e2>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	a1 f4       	brne	.+40     	; 0xde0 <GPIO_voidSetPinValue+0xb2>
					SET_BIT(PORTA_REG ,copy_u8pinID);
     db8:	ab e3       	ldi	r26, 0x3B	; 59
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	eb e3       	ldi	r30, 0x3B	; 59
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <GPIO_voidSetPinValue+0xa8>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <GPIO_voidSetPinValue+0xa4>
     dda:	84 2b       	or	r24, r20
     ddc:	8c 93       	st	X, r24
     dde:	98 c0       	rjmp	.+304    	; 0xf10 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
     de0:	ab e3       	ldi	r26, 0x3B	; 59
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	eb e3       	ldi	r30, 0x3B	; 59
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <GPIO_voidSetPinValue+0xd0>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <GPIO_voidSetPinValue+0xcc>
     e02:	80 95       	com	r24
     e04:	84 23       	and	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	83 c0       	rjmp	.+262    	; 0xf10 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <GPIO_voidSetPinValue+0x10a>
					SET_BIT(PORTB_REG ,copy_u8pinID);
     e10:	a8 e3       	ldi	r26, 0x38	; 56
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e8 e3       	ldi	r30, 0x38	; 56
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <GPIO_voidSetPinValue+0x100>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <GPIO_voidSetPinValue+0xfc>
     e32:	84 2b       	or	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	6c c0       	rjmp	.+216    	; 0xf10 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
     e38:	a8 e3       	ldi	r26, 0x38	; 56
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e8 e3       	ldi	r30, 0x38	; 56
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <GPIO_voidSetPinValue+0x128>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <GPIO_voidSetPinValue+0x124>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	57 c0       	rjmp	.+174    	; 0xf10 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	a1 f4       	brne	.+40     	; 0xe90 <GPIO_voidSetPinValue+0x162>
					SET_BIT(PORTC_REG ,copy_u8pinID);
     e68:	a5 e3       	ldi	r26, 0x35	; 53
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e3       	ldi	r30, 0x35	; 53
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <GPIO_voidSetPinValue+0x158>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <GPIO_voidSetPinValue+0x154>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	40 c0       	rjmp	.+128    	; 0xf10 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
     e90:	a5 e3       	ldi	r26, 0x35	; 53
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e3       	ldi	r30, 0x35	; 53
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <GPIO_voidSetPinValue+0x180>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <GPIO_voidSetPinValue+0x17c>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	2b c0       	rjmp	.+86     	; 0xf10 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	a1 f4       	brne	.+40     	; 0xee8 <GPIO_voidSetPinValue+0x1ba>
					SET_BIT(PORTD_REG ,copy_u8pinID);
     ec0:	a2 e3       	ldi	r26, 0x32	; 50
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e2 e3       	ldi	r30, 0x32	; 50
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <GPIO_voidSetPinValue+0x1b0>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <GPIO_voidSetPinValue+0x1ac>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	14 c0       	rjmp	.+40     	; 0xf10 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
     ee8:	a2 e3       	ldi	r26, 0x32	; 50
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e2 e3       	ldi	r30, 0x32	; 50
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <GPIO_voidSetPinValue+0x1d8>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <GPIO_voidSetPinValue+0x1d4>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
     f10:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	26 96       	adiw	r28, 0x06	; 6
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <GPIO_u8GetPinValue>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
u8 GPIO_u8GetPinValue(u8 copy_u8portID, u8 copy_u8pinID) {
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <GPIO_u8GetPinValue+0x6>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <GPIO_u8GetPinValue+0x8>
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <GPIO_u8GetPinValue+0xa>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	8b 83       	std	Y+3, r24	; 0x03
     f36:	6c 83       	std	Y+4, r22	; 0x04
	u8 GPIO_Driver_Checker = 0;
     f38:	1a 82       	std	Y+2, r1	; 0x02
	u8 pin_value = LOGIC_LOW;
     f3a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
     f3c:	8c 81       	ldd	r24, Y+4	; 0x04
     f3e:	88 30       	cpi	r24, 0x08	; 8
     f40:	18 f0       	brcs	.+6      	; 0xf48 <GPIO_u8GetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	87 c0       	rjmp	.+270    	; 0x1056 <GPIO_u8GetPinValue+0x130>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	18 f0       	brcs	.+6      	; 0xf54 <GPIO_u8GetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	81 c0       	rjmp	.+258    	; 0x1056 <GPIO_u8GetPinValue+0x130>
	}
	else {
		/* Read the pin value as required */
		switch(copy_u8portID) {
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	3e 83       	std	Y+6, r19	; 0x06
     f5c:	2d 83       	std	Y+5, r18	; 0x05
     f5e:	4d 81       	ldd	r20, Y+5	; 0x05
     f60:	5e 81       	ldd	r21, Y+6	; 0x06
     f62:	41 30       	cpi	r20, 0x01	; 1
     f64:	51 05       	cpc	r21, r1
     f66:	79 f1       	breq	.+94     	; 0xfc6 <GPIO_u8GetPinValue+0xa0>
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	91 05       	cpc	r25, r1
     f70:	34 f4       	brge	.+12     	; 0xf7e <GPIO_u8GetPinValue+0x58>
     f72:	2d 81       	ldd	r18, Y+5	; 0x05
     f74:	3e 81       	ldd	r19, Y+6	; 0x06
     f76:	21 15       	cp	r18, r1
     f78:	31 05       	cpc	r19, r1
     f7a:	69 f0       	breq	.+26     	; 0xf96 <GPIO_u8GetPinValue+0x70>
     f7c:	6b c0       	rjmp	.+214    	; 0x1054 <GPIO_u8GetPinValue+0x12e>
     f7e:	4d 81       	ldd	r20, Y+5	; 0x05
     f80:	5e 81       	ldd	r21, Y+6	; 0x06
     f82:	42 30       	cpi	r20, 0x02	; 2
     f84:	51 05       	cpc	r21, r1
     f86:	b9 f1       	breq	.+110    	; 0xff6 <GPIO_u8GetPinValue+0xd0>
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <GPIO_u8GetPinValue+0x6e>
     f92:	49 c0       	rjmp	.+146    	; 0x1026 <GPIO_u8GetPinValue+0x100>
     f94:	5f c0       	rjmp	.+190    	; 0x1054 <GPIO_u8GetPinValue+0x12e>
			case PORT_A:
				// Checks if the bit equals '1' or not
				if(BIT_IS_SET(PINA_REG, copy_u8pinID)) {
     f96:	e9 e3       	ldi	r30, 0x39	; 57
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a9 01       	movw	r20, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <GPIO_u8GetPinValue+0x88>
     faa:	55 95       	asr	r21
     fac:	47 95       	ror	r20
     fae:	8a 95       	dec	r24
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <GPIO_u8GetPinValue+0x84>
     fb2:	ca 01       	movw	r24, r20
     fb4:	81 70       	andi	r24, 0x01	; 1
     fb6:	90 70       	andi	r25, 0x00	; 0
     fb8:	88 23       	and	r24, r24
     fba:	19 f0       	breq	.+6      	; 0xfc2 <GPIO_u8GetPinValue+0x9c>
					pin_value = LOGIC_HIGH;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	49 c0       	rjmp	.+146    	; 0x1054 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
     fc2:	19 82       	std	Y+1, r1	; 0x01
     fc4:	47 c0       	rjmp	.+142    	; 0x1054 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_B:
				if(BIT_IS_SET(PINB_REG,copy_u8pinID)) {
     fc6:	e6 e3       	ldi	r30, 0x36	; 54
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a9 01       	movw	r20, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <GPIO_u8GetPinValue+0xb8>
     fda:	55 95       	asr	r21
     fdc:	47 95       	ror	r20
     fde:	8a 95       	dec	r24
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <GPIO_u8GetPinValue+0xb4>
     fe2:	ca 01       	movw	r24, r20
     fe4:	81 70       	andi	r24, 0x01	; 1
     fe6:	90 70       	andi	r25, 0x00	; 0
     fe8:	88 23       	and	r24, r24
     fea:	19 f0       	breq	.+6      	; 0xff2 <GPIO_u8GetPinValue+0xcc>
					pin_value = LOGIC_HIGH;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	31 c0       	rjmp	.+98     	; 0x1054 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
     ff2:	19 82       	std	Y+1, r1	; 0x01
     ff4:	2f c0       	rjmp	.+94     	; 0x1054 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_C:
				if(BIT_IS_SET(PINC_REG,copy_u8pinID)) {
     ff6:	e3 e3       	ldi	r30, 0x33	; 51
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a9 01       	movw	r20, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <GPIO_u8GetPinValue+0xe8>
    100a:	55 95       	asr	r21
    100c:	47 95       	ror	r20
    100e:	8a 95       	dec	r24
    1010:	e2 f7       	brpl	.-8      	; 0x100a <GPIO_u8GetPinValue+0xe4>
    1012:	ca 01       	movw	r24, r20
    1014:	81 70       	andi	r24, 0x01	; 1
    1016:	90 70       	andi	r25, 0x00	; 0
    1018:	88 23       	and	r24, r24
    101a:	19 f0       	breq	.+6      	; 0x1022 <GPIO_u8GetPinValue+0xfc>
					pin_value = LOGIC_HIGH;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	19 c0       	rjmp	.+50     	; 0x1054 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1022:	19 82       	std	Y+1, r1	; 0x01
    1024:	17 c0       	rjmp	.+46     	; 0x1054 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_D:
				if(BIT_IS_SET(PIND_REG,copy_u8pinID)) {
    1026:	e0 e3       	ldi	r30, 0x30	; 48
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a9 01       	movw	r20, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_u8GetPinValue+0x118>
    103a:	55 95       	asr	r21
    103c:	47 95       	ror	r20
    103e:	8a 95       	dec	r24
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_u8GetPinValue+0x114>
    1042:	ca 01       	movw	r24, r20
    1044:	81 70       	andi	r24, 0x01	; 1
    1046:	90 70       	andi	r25, 0x00	; 0
    1048:	88 23       	and	r24, r24
    104a:	19 f0       	breq	.+6      	; 0x1052 <GPIO_u8GetPinValue+0x12c>
					pin_value = LOGIC_HIGH;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1052:	19 82       	std	Y+1, r1	; 0x01
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1054:	1a 82       	std	Y+2, r1	; 0x02
	}
	return pin_value;
    1056:	89 81       	ldd	r24, Y+1	; 0x01
}
    1058:	26 96       	adiw	r28, 0x06	; 6
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <GPIO_voidTogglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_voidTogglePin(u8 copy_u8portID, u8 copy_u8pinID) {
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <GPIO_voidTogglePin+0x6>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <GPIO_voidTogglePin+0x8>
    1072:	0f 92       	push	r0
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	8a 83       	std	Y+2, r24	; 0x02
    107a:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    107c:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	88 30       	cpi	r24, 0x08	; 8
    1082:	18 f0       	brcs	.+6      	; 0x108a <GPIO_voidTogglePin+0x20>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	75 c0       	rjmp	.+234    	; 0x1174 <GPIO_voidTogglePin+0x10a>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	84 30       	cpi	r24, 0x04	; 4
    108e:	18 f0       	brcs	.+6      	; 0x1096 <GPIO_voidTogglePin+0x2c>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	6f c0       	rjmp	.+222    	; 0x1174 <GPIO_voidTogglePin+0x10a>
	}
	else {
		switch(copy_u8portID) {
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3d 83       	std	Y+5, r19	; 0x05
    109e:	2c 83       	std	Y+4, r18	; 0x04
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	49 f1       	breq	.+82     	; 0x10fc <GPIO_voidTogglePin+0x92>
    10aa:	2c 81       	ldd	r18, Y+4	; 0x04
    10ac:	3d 81       	ldd	r19, Y+5	; 0x05
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	2c f4       	brge	.+10     	; 0x10be <GPIO_voidTogglePin+0x54>
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <GPIO_voidTogglePin+0x6a>
    10bc:	5a c0       	rjmp	.+180    	; 0x1172 <GPIO_voidTogglePin+0x108>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	71 f1       	breq	.+92     	; 0x1124 <GPIO_voidTogglePin+0xba>
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	91 05       	cpc	r25, r1
    10d0:	e9 f1       	breq	.+122    	; 0x114c <GPIO_voidTogglePin+0xe2>
    10d2:	4f c0       	rjmp	.+158    	; 0x1172 <GPIO_voidTogglePin+0x108>
			case PORT_A:
				TOG_BIT(PORTA_REG, copy_u8pinID);
    10d4:	ab e3       	ldi	r26, 0x3B	; 59
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	eb e3       	ldi	r30, 0x3B	; 59
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <GPIO_voidTogglePin+0x88>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <GPIO_voidTogglePin+0x84>
    10f6:	84 27       	eor	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	3b c0       	rjmp	.+118    	; 0x1172 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_B:
				TOG_BIT(PORTB_REG, copy_u8pinID);
    10fc:	a8 e3       	ldi	r26, 0x38	; 56
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e3       	ldi	r30, 0x38	; 56
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <GPIO_voidTogglePin+0xb0>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <GPIO_voidTogglePin+0xac>
    111e:	84 27       	eor	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	27 c0       	rjmp	.+78     	; 0x1172 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_C:
				TOG_BIT(PORTC_REG, copy_u8pinID);
    1124:	a5 e3       	ldi	r26, 0x35	; 53
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e3       	ldi	r30, 0x35	; 53
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <GPIO_voidTogglePin+0xd8>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <GPIO_voidTogglePin+0xd4>
    1146:	84 27       	eor	r24, r20
    1148:	8c 93       	st	X, r24
    114a:	13 c0       	rjmp	.+38     	; 0x1172 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_D:
				TOG_BIT(PORTD_REG, copy_u8pinID);
    114c:	a2 e3       	ldi	r26, 0x32	; 50
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e2 e3       	ldi	r30, 0x32	; 50
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <GPIO_voidTogglePin+0x100>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <GPIO_voidTogglePin+0xfc>
    116e:	84 27       	eor	r24, r20
    1170:	8c 93       	st	X, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1172:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <GPIO_voidSetPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortDirection(u8 copy_u8portID, u8 copy_u8portDIR) {
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <GPIO_voidSetPortDirection+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <GPIO_voidSetPortDirection+0x8>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    1198:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	18 f0       	brcs	.+6      	; 0x11a6 <GPIO_voidSetPortDirection+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	3c c0       	rjmp	.+120    	; 0x121e <GPIO_voidSetPortDirection+0x98>
	}
	else if((copy_u8portDIR != PORT_INPUT) && (copy_u8portDIR != PORT_OUTPUT)) {
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 23       	and	r24, r24
    11aa:	31 f0       	breq	.+12     	; 0x11b8 <GPIO_voidSetPortDirection+0x32>
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	8f 3f       	cpi	r24, 0xFF	; 255
    11b0:	19 f0       	breq	.+6      	; 0x11b8 <GPIO_voidSetPortDirection+0x32>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    11b2:	83 e0       	ldi	r24, 0x03	; 3
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	33 c0       	rjmp	.+102    	; 0x121e <GPIO_voidSetPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3d 83       	std	Y+5, r19	; 0x05
    11c0:	2c 83       	std	Y+4, r18	; 0x04
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	d1 f0       	breq	.+52     	; 0x1200 <GPIO_voidSetPortDirection+0x7a>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <GPIO_voidSetPortDirection+0x5a>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <GPIO_voidSetPortDirection+0x70>
    11de:	1e c0       	rjmp	.+60     	; 0x121c <GPIO_voidSetPortDirection+0x96>
    11e0:	2c 81       	ldd	r18, Y+4	; 0x04
    11e2:	3d 81       	ldd	r19, Y+5	; 0x05
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	81 f0       	breq	.+32     	; 0x120a <GPIO_voidSetPortDirection+0x84>
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	9d 81       	ldd	r25, Y+5	; 0x05
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	91 05       	cpc	r25, r1
    11f2:	81 f0       	breq	.+32     	; 0x1214 <GPIO_voidSetPortDirection+0x8e>
    11f4:	13 c0       	rjmp	.+38     	; 0x121c <GPIO_voidSetPortDirection+0x96>
			case PORT_A:
				DDRA_REG = copy_u8portDIR;
    11f6:	ea e3       	ldi	r30, 0x3A	; 58
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	80 83       	st	Z, r24
    11fe:	0e c0       	rjmp	.+28     	; 0x121c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_B:
				DDRB_REG = copy_u8portDIR;
    1200:	e7 e3       	ldi	r30, 0x37	; 55
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	80 83       	st	Z, r24
    1208:	09 c0       	rjmp	.+18     	; 0x121c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_C:
				DDRC_REG = copy_u8portDIR;
    120a:	e4 e3       	ldi	r30, 0x34	; 52
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	80 83       	st	Z, r24
    1212:	04 c0       	rjmp	.+8      	; 0x121c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_D:
				DDRD_REG = copy_u8portDIR;
    1214:	e1 e3       	ldi	r30, 0x31	; 49
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    121c:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    121e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <GPIO_voidSetPortValue>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortValue(u8 copy_u8portID, u8 copy_u8portValue) {
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <GPIO_voidSetPortValue+0x6>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <GPIO_voidSetPortValue+0x8>
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    1242:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	18 f0       	brcs	.+6      	; 0x1250 <GPIO_voidSetPortValue+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	33 c0       	rjmp	.+102    	; 0x12b6 <GPIO_voidSetPortValue+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3d 83       	std	Y+5, r19	; 0x05
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	d1 f0       	breq	.+52     	; 0x1298 <GPIO_voidSetPortValue+0x68>
    1264:	2c 81       	ldd	r18, Y+4	; 0x04
    1266:	3d 81       	ldd	r19, Y+5	; 0x05
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	2c f4       	brge	.+10     	; 0x1278 <GPIO_voidSetPortValue+0x48>
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	61 f0       	breq	.+24     	; 0x128e <GPIO_voidSetPortValue+0x5e>
    1276:	1e c0       	rjmp	.+60     	; 0x12b4 <GPIO_voidSetPortValue+0x84>
    1278:	2c 81       	ldd	r18, Y+4	; 0x04
    127a:	3d 81       	ldd	r19, Y+5	; 0x05
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <GPIO_voidSetPortValue+0x72>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	81 f0       	breq	.+32     	; 0x12ac <GPIO_voidSetPortValue+0x7c>
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <GPIO_voidSetPortValue+0x84>
			case PORT_A:
				PORTA_REG = copy_u8portValue;
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 83       	st	Z, r24
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_B:
				PORTB_REG = copy_u8portValue;
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_C:
				PORTC_REG = copy_u8portValue;
    12a2:	e5 e3       	ldi	r30, 0x35	; 53
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	80 83       	st	Z, r24
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_D:
				PORTD_REG = copy_u8portValue;
    12ac:	e2 e3       	ldi	r30, 0x32	; 50
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    12b4:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <GPIO_u8GetPortValue>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_u8GetPortValue(u8 copy_u8portID) {
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <GPIO_u8GetPortValue+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <GPIO_u8GetPortValue+0x8>
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	8b 83       	std	Y+3, r24	; 0x03
	u8 value = LOGIC_LOW;
    12d8:	1a 82       	std	Y+2, r1	; 0x02
	u8 GPIO_Driver_Checker = 0;
    12da:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	84 30       	cpi	r24, 0x04	; 4
    12e0:	18 f0       	brcs	.+6      	; 0x12e8 <GPIO_u8GetPortValue+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	33 c0       	rjmp	.+102    	; 0x134e <GPIO_u8GetPortValue+0x86>
	}
	else {
		switch(copy_u8portID) {
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	3d 83       	std	Y+5, r19	; 0x05
    12f0:	2c 83       	std	Y+4, r18	; 0x04
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	91 05       	cpc	r25, r1
    12fa:	d1 f0       	breq	.+52     	; 0x1330 <GPIO_u8GetPortValue+0x68>
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	2c f4       	brge	.+10     	; 0x1310 <GPIO_u8GetPortValue+0x48>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	61 f0       	breq	.+24     	; 0x1326 <GPIO_u8GetPortValue+0x5e>
    130e:	1e c0       	rjmp	.+60     	; 0x134c <GPIO_u8GetPortValue+0x84>
    1310:	2c 81       	ldd	r18, Y+4	; 0x04
    1312:	3d 81       	ldd	r19, Y+5	; 0x05
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	81 f0       	breq	.+32     	; 0x133a <GPIO_u8GetPortValue+0x72>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	91 05       	cpc	r25, r1
    1322:	81 f0       	breq	.+32     	; 0x1344 <GPIO_u8GetPortValue+0x7c>
    1324:	13 c0       	rjmp	.+38     	; 0x134c <GPIO_u8GetPortValue+0x84>
			case PORT_A:
				// Why value equals PINA?
				value = PORTA_REG;
    1326:	eb e3       	ldi	r30, 0x3B	; 59
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	8a 83       	std	Y+2, r24	; 0x02
    132e:	0e c0       	rjmp	.+28     	; 0x134c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_B:
				value = PORTB_REG;
    1330:	e8 e3       	ldi	r30, 0x38	; 56
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	09 c0       	rjmp	.+18     	; 0x134c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_C:
				value = PORTC_REG;
    133a:	e5 e3       	ldi	r30, 0x35	; 53
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8a 83       	std	Y+2, r24	; 0x02
    1342:	04 c0       	rjmp	.+8      	; 0x134c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_D:
				value = PORTD_REG;
    1344:	e2 e3       	ldi	r30, 0x32	; 50
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	8a 83       	std	Y+2, r24	; 0x02
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    134c:	19 82       	std	Y+1, r1	; 0x01
	}
	return value;
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <SEGMENT_voidInit>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_voidInit(u8 copy_u8portID) {
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <SEGMENT_voidInit+0x6>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 SEGMENT_Driver_Checker = 0;
    136c:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	18 f0       	brcs	.+6      	; 0x137a <SEGMENT_voidInit+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	1f c0       	rjmp	.+62     	; 0x13b8 <SEGMENT_voidInit+0x58>
#elif (DIGITS_USED == 3)
		GPIO_voidSetPinDirection(COM_3_PORT, COM_3, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#elif (DIGITS_USED == 2)
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	62 e0       	ldi	r22, 0x02	; 2
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	63 e0       	ldi	r22, 0x03	; 3
    1388:	41 e0       	ldi	r20, 0x01	; 1
    138a:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#endif

		/* These pins are for the BCD on the FARES Kit */
		GPIO_voidSetPinDirection(copy_u8portID, BCD_1, PIN_OUTPUT);
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_2, PIN_OUTPUT);
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_4, PIN_OUTPUT);
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	62 e0       	ldi	r22, 0x02	; 2
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_8, PIN_OUTPUT);
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	64 e0       	ldi	r22, 0x04	; 4
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_voidSetPinDirection>

		SEGMENT_Driver_Checker = SEGMENT_OK;
    13b6:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <SEGMENT_voidDisplay>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
SEGMENT_Error_t SEGMENT_voidDisplay(u8 copy_u8portID, u8 copy_u8pinValue) {
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <SEGMENT_voidDisplay+0x6>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <SEGMENT_voidDisplay+0x8>
    13cc:	0f 92       	push	r0
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	8a 83       	std	Y+2, r24	; 0x02
    13d4:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 SEGMENT_Driver_Checker = 0;
    13d6:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	84 30       	cpi	r24, 0x04	; 4
    13dc:	18 f0       	brcs	.+6      	; 0x13e4 <SEGMENT_voidDisplay+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	24 c1       	rjmp	.+584    	; 0x162c <SEGMENT_voidDisplay+0x268>
	}
	else if((copy_u8pinValue < 0 && copy_u8pinValue > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(copy_u8pinValue) {
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	3d 83       	std	Y+5, r19	; 0x05
    13ec:	2c 83       	std	Y+4, r18	; 0x04
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	91 05       	cpc	r25, r1
    13f6:	09 f4       	brne	.+2      	; 0x13fa <SEGMENT_voidDisplay+0x36>
    13f8:	9b c0       	rjmp	.+310    	; 0x1530 <SEGMENT_voidDisplay+0x16c>
    13fa:	2c 81       	ldd	r18, Y+4	; 0x04
    13fc:	3d 81       	ldd	r19, Y+5	; 0x05
    13fe:	25 30       	cpi	r18, 0x05	; 5
    1400:	31 05       	cpc	r19, r1
    1402:	ec f4       	brge	.+58     	; 0x143e <SEGMENT_voidDisplay+0x7a>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <SEGMENT_voidDisplay+0x4c>
    140e:	51 c0       	rjmp	.+162    	; 0x14b2 <SEGMENT_voidDisplay+0xee>
    1410:	2c 81       	ldd	r18, Y+4	; 0x04
    1412:	3d 81       	ldd	r19, Y+5	; 0x05
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	2c f4       	brge	.+10     	; 0x1424 <SEGMENT_voidDisplay+0x60>
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	9d 81       	ldd	r25, Y+5	; 0x05
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	99 f1       	breq	.+102    	; 0x1488 <SEGMENT_voidDisplay+0xc4>
    1422:	03 c1       	rjmp	.+518    	; 0x162a <SEGMENT_voidDisplay+0x266>
    1424:	2c 81       	ldd	r18, Y+4	; 0x04
    1426:	3d 81       	ldd	r19, Y+5	; 0x05
    1428:	22 30       	cpi	r18, 0x02	; 2
    142a:	31 05       	cpc	r19, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <SEGMENT_voidDisplay+0x6c>
    142e:	56 c0       	rjmp	.+172    	; 0x14dc <SEGMENT_voidDisplay+0x118>
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	91 05       	cpc	r25, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <SEGMENT_voidDisplay+0x78>
    143a:	65 c0       	rjmp	.+202    	; 0x1506 <SEGMENT_voidDisplay+0x142>
    143c:	f6 c0       	rjmp	.+492    	; 0x162a <SEGMENT_voidDisplay+0x266>
    143e:	2c 81       	ldd	r18, Y+4	; 0x04
    1440:	3d 81       	ldd	r19, Y+5	; 0x05
    1442:	27 30       	cpi	r18, 0x07	; 7
    1444:	31 05       	cpc	r19, r1
    1446:	09 f4       	brne	.+2      	; 0x144a <SEGMENT_voidDisplay+0x86>
    1448:	b2 c0       	rjmp	.+356    	; 0x15ae <SEGMENT_voidDisplay+0x1ea>
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	88 30       	cpi	r24, 0x08	; 8
    1450:	91 05       	cpc	r25, r1
    1452:	6c f4       	brge	.+26     	; 0x146e <SEGMENT_voidDisplay+0xaa>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	25 30       	cpi	r18, 0x05	; 5
    145a:	31 05       	cpc	r19, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <SEGMENT_voidDisplay+0x9c>
    145e:	7d c0       	rjmp	.+250    	; 0x155a <SEGMENT_voidDisplay+0x196>
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	86 30       	cpi	r24, 0x06	; 6
    1466:	91 05       	cpc	r25, r1
    1468:	09 f4       	brne	.+2      	; 0x146c <SEGMENT_voidDisplay+0xa8>
    146a:	8c c0       	rjmp	.+280    	; 0x1584 <SEGMENT_voidDisplay+0x1c0>
    146c:	de c0       	rjmp	.+444    	; 0x162a <SEGMENT_voidDisplay+0x266>
    146e:	2c 81       	ldd	r18, Y+4	; 0x04
    1470:	3d 81       	ldd	r19, Y+5	; 0x05
    1472:	28 30       	cpi	r18, 0x08	; 8
    1474:	31 05       	cpc	r19, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <SEGMENT_voidDisplay+0xb6>
    1478:	af c0       	rjmp	.+350    	; 0x15d8 <SEGMENT_voidDisplay+0x214>
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	89 30       	cpi	r24, 0x09	; 9
    1480:	91 05       	cpc	r25, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <SEGMENT_voidDisplay+0xc2>
    1484:	be c0       	rjmp	.+380    	; 0x1602 <SEGMENT_voidDisplay+0x23e>
    1486:	d1 c0       	rjmp	.+418    	; 0x162a <SEGMENT_voidDisplay+0x266>
			case 0:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	62 e0       	ldi	r22, 0x02	; 2
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	64 e0       	ldi	r22, 0x04	; 4
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    14b0:	bc c0       	rjmp	.+376    	; 0x162a <SEGMENT_voidDisplay+0x266>
				break;
			case 1:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	41 e0       	ldi	r20, 0x01	; 1
    14b8:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	62 e0       	ldi	r22, 0x02	; 2
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	64 e0       	ldi	r22, 0x04	; 4
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    14da:	a7 c0       	rjmp	.+334    	; 0x162a <SEGMENT_voidDisplay+0x266>
				break;
			case 2:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	62 e0       	ldi	r22, 0x02	; 2
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	64 e0       	ldi	r22, 0x04	; 4
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    1504:	92 c0       	rjmp	.+292    	; 0x162a <SEGMENT_voidDisplay+0x266>
				break;
			case 3:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	61 e0       	ldi	r22, 0x01	; 1
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	64 e0       	ldi	r22, 0x04	; 4
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    152e:	7d c0       	rjmp	.+250    	; 0x162a <SEGMENT_voidDisplay+0x266>
				break;
			case 4:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	61 e0       	ldi	r22, 0x01	; 1
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	64 e0       	ldi	r22, 0x04	; 4
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    1558:	68 c0       	rjmp	.+208    	; 0x162a <SEGMENT_voidDisplay+0x266>
				break;
			case 5:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	41 e0       	ldi	r20, 0x01	; 1
    1560:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	64 e0       	ldi	r22, 0x04	; 4
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    1582:	53 c0       	rjmp	.+166    	; 0x162a <SEGMENT_voidDisplay+0x266>
				break;
			case 6:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	62 e0       	ldi	r22, 0x02	; 2
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	64 e0       	ldi	r22, 0x04	; 4
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    15ac:	3e c0       	rjmp	.+124    	; 0x162a <SEGMENT_voidDisplay+0x266>
				break;
			case 7:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	62 e0       	ldi	r22, 0x02	; 2
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	64 e0       	ldi	r22, 0x04	; 4
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    15d6:	29 c0       	rjmp	.+82     	; 0x162a <SEGMENT_voidDisplay+0x266>
				break;
			case 8:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	62 e0       	ldi	r22, 0x02	; 2
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	64 e0       	ldi	r22, 0x04	; 4
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    1600:	14 c0       	rjmp	.+40     	; 0x162a <SEGMENT_voidDisplay+0x266>
				break;
			case 9:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	61 e0       	ldi	r22, 0x01	; 1
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	62 e0       	ldi	r22, 0x02	; 2
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	64 e0       	ldi	r22, 0x04	; 4
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    162a:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    162c:	89 81       	ldd	r24, Y+1	; 0x01
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <LED_voidInit>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_voidInit(u8 copy_u8portID, u8 copy_u8pinID) {
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <LED_voidInit+0x6>
    1644:	0f 92       	push	r0
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 LED_Driver_Checker = 0;
    164e:	19 82       	std	Y+1, r1	; 0x01
	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	88 30       	cpi	r24, 0x08	; 8
    1654:	18 f0       	brcs	.+6      	; 0x165c <LED_voidInit+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	0c c0       	rjmp	.+24     	; 0x1674 <LED_voidInit+0x36>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	84 30       	cpi	r24, 0x04	; 4
    1660:	18 f0       	brcs	.+6      	; 0x1668 <LED_voidInit+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	06 c0       	rjmp	.+12     	; 0x1674 <LED_voidInit+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_voidSetPinDirection(copy_u8portID, copy_u8pinID, PIN_OUTPUT);
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	6b 81       	ldd	r22, Y+3	; 0x03
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_voidSetPinDirection>
		LED_Driver_Checker = LED_OK;
    1672:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <LED_voidOn>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_voidOn(u8 copy_u8portID, u8 copy_u8pinID) {
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	00 d0       	rcall	.+0      	; 0x1688 <LED_voidOn+0x6>
    1688:	0f 92       	push	r0
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	6b 83       	std	Y+3, r22	; 0x03

	u8 LED_Driver_Checker = 0;
    1692:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	88 30       	cpi	r24, 0x08	; 8
    1698:	18 f0       	brcs	.+6      	; 0x16a0 <LED_voidOn+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	0c c0       	rjmp	.+24     	; 0x16b8 <LED_voidOn+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	84 30       	cpi	r24, 0x04	; 4
    16a4:	18 f0       	brcs	.+6      	; 0x16ac <LED_voidOn+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <LED_voidOn+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	6b 81       	ldd	r22, Y+3	; 0x03
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    16b6:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <LED_voidOff>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_voidOff(u8 copy_u8portID, u8 copy_u8pinID) {
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <LED_voidOff+0x6>
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	8a 83       	std	Y+2, r24	; 0x02
    16d4:	6b 83       	std	Y+3, r22	; 0x03

	u8 LED_Driver_Checker = 0;
    16d6:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	88 30       	cpi	r24, 0x08	; 8
    16dc:	18 f0       	brcs	.+6      	; 0x16e4 <LED_voidOff+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	89 83       	std	Y+1, r24	; 0x01
    16e2:	0c c0       	rjmp	.+24     	; 0x16fc <LED_voidOff+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	84 30       	cpi	r24, 0x04	; 4
    16e8:	18 f0       	brcs	.+6      	; 0x16f0 <LED_voidOff+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <LED_voidOff+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	6b 81       	ldd	r22, Y+3	; 0x03
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    16fa:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <LED_voidToggle>:

LED_Error_t LED_voidToggle(u8 copy_u8portID, u8 copy_u8pinID) {
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <LED_voidToggle+0x6>
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	8a 83       	std	Y+2, r24	; 0x02
    1718:	6b 83       	std	Y+3, r22	; 0x03

	u8 LED_Driver_Checker = 0;
    171a:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	88 30       	cpi	r24, 0x08	; 8
    1720:	18 f0       	brcs	.+6      	; 0x1728 <LED_voidToggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	0b c0       	rjmp	.+22     	; 0x173e <LED_voidToggle+0x34>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	18 f0       	brcs	.+6      	; 0x1734 <LED_voidToggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	05 c0       	rjmp	.+10     	; 0x173e <LED_voidToggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_voidTogglePin(copy_u8portID, copy_u8pinID);
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	6b 81       	ldd	r22, Y+3	; 0x03
    1738:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_voidTogglePin>
			LED_Driver_Checker = LED_OK;
    173c:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <funcInits>:

/*******************************************************************************
 *                              					 Application Libraries                      					  *
 *******************************************************************************/

void funcInits(void) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	LED_voidInit(PORT_B, LED_PORTB_KIT_RED);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	67 e0       	ldi	r22, 0x07	; 7
    1758:	0e 94 1f 0b 	call	0x163e	; 0x163e <LED_voidInit>
	LED_voidInit(PORT_A, LED_PORTA_KIT_YELLOW);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	66 e0       	ldi	r22, 0x06	; 6
    1760:	0e 94 1f 0b 	call	0x163e	; 0x163e <LED_voidInit>
	LED_voidInit(PORT_A, LED_PORTA_KIT_GREEN);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	64 e0       	ldi	r22, 0x04	; 4
    1768:	0e 94 1f 0b 	call	0x163e	; 0x163e <LED_voidInit>

	SEGMENT_voidInit(PORT_B);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	0e 94 b0 09 	call	0x1360	; 0x1360 <SEGMENT_voidInit>
}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <binaryLEDS>:

void binaryLEDS(u8 copy_u8pinValue) {
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <binaryLEDS+0x6>
    177e:	0f 92       	push	r0
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8pinValue) {
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	3b 83       	std	Y+3, r19	; 0x03
    178e:	2a 83       	std	Y+2, r18	; 0x02
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	9b 81       	ldd	r25, Y+3	; 0x03
    1794:	84 30       	cpi	r24, 0x04	; 4
    1796:	91 05       	cpc	r25, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <binaryLEDS+0x24>
    179a:	9b c0       	rjmp	.+310    	; 0x18d2 <binaryLEDS+0x15a>
    179c:	2a 81       	ldd	r18, Y+2	; 0x02
    179e:	3b 81       	ldd	r19, Y+3	; 0x03
    17a0:	25 30       	cpi	r18, 0x05	; 5
    17a2:	31 05       	cpc	r19, r1
    17a4:	ec f4       	brge	.+58     	; 0x17e0 <binaryLEDS+0x68>
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	91 05       	cpc	r25, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <binaryLEDS+0x3a>
    17b0:	51 c0       	rjmp	.+162    	; 0x1854 <binaryLEDS+0xdc>
    17b2:	2a 81       	ldd	r18, Y+2	; 0x02
    17b4:	3b 81       	ldd	r19, Y+3	; 0x03
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <binaryLEDS+0x4e>
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	9b 81       	ldd	r25, Y+3	; 0x03
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	99 f1       	breq	.+102    	; 0x182a <binaryLEDS+0xb2>
    17c4:	03 c1       	rjmp	.+518    	; 0x19cc <binaryLEDS+0x254>
    17c6:	2a 81       	ldd	r18, Y+2	; 0x02
    17c8:	3b 81       	ldd	r19, Y+3	; 0x03
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <binaryLEDS+0x5a>
    17d0:	56 c0       	rjmp	.+172    	; 0x187e <binaryLEDS+0x106>
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	9b 81       	ldd	r25, Y+3	; 0x03
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <binaryLEDS+0x66>
    17dc:	65 c0       	rjmp	.+202    	; 0x18a8 <binaryLEDS+0x130>
    17de:	f6 c0       	rjmp	.+492    	; 0x19cc <binaryLEDS+0x254>
    17e0:	2a 81       	ldd	r18, Y+2	; 0x02
    17e2:	3b 81       	ldd	r19, Y+3	; 0x03
    17e4:	27 30       	cpi	r18, 0x07	; 7
    17e6:	31 05       	cpc	r19, r1
    17e8:	09 f4       	brne	.+2      	; 0x17ec <binaryLEDS+0x74>
    17ea:	b2 c0       	rjmp	.+356    	; 0x1950 <binaryLEDS+0x1d8>
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	9b 81       	ldd	r25, Y+3	; 0x03
    17f0:	88 30       	cpi	r24, 0x08	; 8
    17f2:	91 05       	cpc	r25, r1
    17f4:	6c f4       	brge	.+26     	; 0x1810 <binaryLEDS+0x98>
    17f6:	2a 81       	ldd	r18, Y+2	; 0x02
    17f8:	3b 81       	ldd	r19, Y+3	; 0x03
    17fa:	25 30       	cpi	r18, 0x05	; 5
    17fc:	31 05       	cpc	r19, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <binaryLEDS+0x8a>
    1800:	7d c0       	rjmp	.+250    	; 0x18fc <binaryLEDS+0x184>
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	9b 81       	ldd	r25, Y+3	; 0x03
    1806:	86 30       	cpi	r24, 0x06	; 6
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <binaryLEDS+0x96>
    180c:	8c c0       	rjmp	.+280    	; 0x1926 <binaryLEDS+0x1ae>
    180e:	de c0       	rjmp	.+444    	; 0x19cc <binaryLEDS+0x254>
    1810:	2a 81       	ldd	r18, Y+2	; 0x02
    1812:	3b 81       	ldd	r19, Y+3	; 0x03
    1814:	28 30       	cpi	r18, 0x08	; 8
    1816:	31 05       	cpc	r19, r1
    1818:	09 f4       	brne	.+2      	; 0x181c <binaryLEDS+0xa4>
    181a:	af c0       	rjmp	.+350    	; 0x197a <binaryLEDS+0x202>
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	9b 81       	ldd	r25, Y+3	; 0x03
    1820:	89 30       	cpi	r24, 0x09	; 9
    1822:	91 05       	cpc	r25, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <binaryLEDS+0xb0>
    1826:	be c0       	rjmp	.+380    	; 0x19a4 <binaryLEDS+0x22c>
    1828:	d1 c0       	rjmp	.+418    	; 0x19cc <binaryLEDS+0x254>
		case 0:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	67 e0       	ldi	r22, 0x07	; 7
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	64 e0       	ldi	r22, 0x04	; 4
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	65 e0       	ldi	r22, 0x05	; 5
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	66 e0       	ldi	r22, 0x06	; 6
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    1852:	bc c0       	rjmp	.+376    	; 0x19cc <binaryLEDS+0x254>
			break;
		case 1:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	67 e0       	ldi	r22, 0x07	; 7
    1858:	41 e0       	ldi	r20, 0x01	; 1
    185a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	64 e0       	ldi	r22, 0x04	; 4
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	65 e0       	ldi	r22, 0x05	; 5
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	66 e0       	ldi	r22, 0x06	; 6
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    187c:	a7 c0       	rjmp	.+334    	; 0x19cc <binaryLEDS+0x254>
			break;
		case 2:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	67 e0       	ldi	r22, 0x07	; 7
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_HIGH);
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	64 e0       	ldi	r22, 0x04	; 4
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	65 e0       	ldi	r22, 0x05	; 5
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	66 e0       	ldi	r22, 0x06	; 6
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    18a6:	92 c0       	rjmp	.+292    	; 0x19cc <binaryLEDS+0x254>
			break;
		case 3:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	67 e0       	ldi	r22, 0x07	; 7
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_HIGH);
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	64 e0       	ldi	r22, 0x04	; 4
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	65 e0       	ldi	r22, 0x05	; 5
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	66 e0       	ldi	r22, 0x06	; 6
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    18d0:	7d c0       	rjmp	.+250    	; 0x19cc <binaryLEDS+0x254>
			break;
		case 4:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	67 e0       	ldi	r22, 0x07	; 7
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	64 e0       	ldi	r22, 0x04	; 4
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_HIGH);
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	65 e0       	ldi	r22, 0x05	; 5
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	66 e0       	ldi	r22, 0x06	; 6
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    18fa:	68 c0       	rjmp	.+208    	; 0x19cc <binaryLEDS+0x254>
			break;
		case 5:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	67 e0       	ldi	r22, 0x07	; 7
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	64 e0       	ldi	r22, 0x04	; 4
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_HIGH);
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	65 e0       	ldi	r22, 0x05	; 5
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	66 e0       	ldi	r22, 0x06	; 6
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    1924:	53 c0       	rjmp	.+166    	; 0x19cc <binaryLEDS+0x254>
			break;
		case 6:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	67 e0       	ldi	r22, 0x07	; 7
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_HIGH);
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	64 e0       	ldi	r22, 0x04	; 4
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_HIGH);
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	65 e0       	ldi	r22, 0x05	; 5
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	66 e0       	ldi	r22, 0x06	; 6
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    194e:	3e c0       	rjmp	.+124    	; 0x19cc <binaryLEDS+0x254>
			break;
		case 7:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	67 e0       	ldi	r22, 0x07	; 7
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_HIGH);
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	64 e0       	ldi	r22, 0x04	; 4
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_HIGH);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	65 e0       	ldi	r22, 0x05	; 5
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	66 e0       	ldi	r22, 0x06	; 6
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    1978:	29 c0       	rjmp	.+82     	; 0x19cc <binaryLEDS+0x254>
			break;
		case 8:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	67 e0       	ldi	r22, 0x07	; 7
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	64 e0       	ldi	r22, 0x04	; 4
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	65 e0       	ldi	r22, 0x05	; 5
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_HIGH);
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	66 e0       	ldi	r22, 0x06	; 6
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <binaryLEDS+0x254>
			break;
		case 9:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	67 e0       	ldi	r22, 0x07	; 7
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	64 e0       	ldi	r22, 0x04	; 4
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	65 e0       	ldi	r22, 0x05	; 5
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_HIGH);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	66 e0       	ldi	r22, 0x06	; 6
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_voidSetPinValue>
			break;
	}
}
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <TrafficLights>:


void TrafficLights(void) {
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	ab 97       	sbiw	r28, 0x2b	; 43
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
	u8 i = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	8b a7       	std	Y+43, r24	; 0x2b
	LED_voidOn(PORT_B, LED_PORTB_KIT_RED);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	67 e0       	ldi	r22, 0x07	; 7
    19f4:	0e 94 41 0b 	call	0x1682	; 0x1682 <LED_voidOn>
	for(i = 1 ; i < 4 ; i++)
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	8b a7       	std	Y+43, r24	; 0x2b
    19fc:	79 c0       	rjmp	.+242    	; 0x1af0 <TrafficLights+0x118>
	{
		SEGMENT_voidDisplay(PORT_B, i);
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	6b a5       	ldd	r22, Y+43	; 0x2b
    1a02:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <SEGMENT_voidDisplay>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	a8 e4       	ldi	r26, 0x48	; 72
    1a0c:	b4 e4       	ldi	r27, 0x44	; 68
    1a0e:	8f a3       	std	Y+39, r24	; 0x27
    1a10:	98 a7       	std	Y+40, r25	; 0x28
    1a12:	a9 a7       	std	Y+41, r26	; 0x29
    1a14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a16:	6f a1       	ldd	r22, Y+39	; 0x27
    1a18:	78 a5       	ldd	r23, Y+40	; 0x28
    1a1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	4a e7       	ldi	r20, 0x7A	; 122
    1a24:	53 e4       	ldi	r21, 0x43	; 67
    1a26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	8b a3       	std	Y+35, r24	; 0x23
    1a30:	9c a3       	std	Y+36, r25	; 0x24
    1a32:	ad a3       	std	Y+37, r26	; 0x25
    1a34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a36:	6b a1       	ldd	r22, Y+35	; 0x23
    1a38:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	5f e3       	ldi	r21, 0x3F	; 63
    1a46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a4a:	88 23       	and	r24, r24
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <TrafficLights+0x80>
		__ticks = 1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9a a3       	std	Y+34, r25	; 0x22
    1a54:	89 a3       	std	Y+33, r24	; 0x21
    1a56:	3f c0       	rjmp	.+126    	; 0x1ad6 <TrafficLights+0xfe>
	else if (__tmp > 65535)
    1a58:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	3f ef       	ldi	r19, 0xFF	; 255
    1a64:	4f e7       	ldi	r20, 0x7F	; 127
    1a66:	57 e4       	ldi	r21, 0x47	; 71
    1a68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a6c:	18 16       	cp	r1, r24
    1a6e:	4c f5       	brge	.+82     	; 0x1ac2 <TrafficLights+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	6f a1       	ldd	r22, Y+39	; 0x27
    1a72:	78 a5       	ldd	r23, Y+40	; 0x28
    1a74:	89 a5       	ldd	r24, Y+41	; 0x29
    1a76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e2       	ldi	r20, 0x20	; 32
    1a7e:	51 e4       	ldi	r21, 0x41	; 65
    1a80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	bc 01       	movw	r22, r24
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9a a3       	std	Y+34, r25	; 0x22
    1a96:	89 a3       	std	Y+33, r24	; 0x21
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <TrafficLights+0xe0>
    1a9a:	89 e1       	ldi	r24, 0x19	; 25
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	98 a3       	std	Y+32, r25	; 0x20
    1aa0:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aa4:	98 a1       	ldd	r25, Y+32	; 0x20
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <TrafficLights+0xce>
    1aaa:	98 a3       	std	Y+32, r25	; 0x20
    1aac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aae:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	9a a3       	std	Y+34, r25	; 0x22
    1ab6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aba:	9a a1       	ldd	r25, Y+34	; 0x22
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	69 f7       	brne	.-38     	; 0x1a9a <TrafficLights+0xc2>
    1ac0:	14 c0       	rjmp	.+40     	; 0x1aea <TrafficLights+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9a a3       	std	Y+34, r25	; 0x22
    1ad4:	89 a3       	std	Y+33, r24	; 0x21
    1ad6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad8:	9a a1       	ldd	r25, Y+34	; 0x22
    1ada:	9e 8f       	std	Y+30, r25	; 0x1e
    1adc:	8d 8f       	std	Y+29, r24	; 0x1d
    1ade:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ae0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <TrafficLights+0x10a>
    1ae6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae8:	8d 8f       	std	Y+29, r24	; 0x1d


void TrafficLights(void) {
	u8 i = 1;
	LED_voidOn(PORT_B, LED_PORTB_KIT_RED);
	for(i = 1 ; i < 4 ; i++)
    1aea:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aec:	8f 5f       	subi	r24, 0xFF	; 255
    1aee:	8b a7       	std	Y+43, r24	; 0x2b
    1af0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af2:	84 30       	cpi	r24, 0x04	; 4
    1af4:	08 f4       	brcc	.+2      	; 0x1af8 <TrafficLights+0x120>
    1af6:	83 cf       	rjmp	.-250    	; 0x19fe <TrafficLights+0x26>
	{
		SEGMENT_voidDisplay(PORT_B, i);
		_delay_ms(800);
	}
	LED_voidOff(PORT_B, LED_PORTB_KIT_RED);
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	67 e0       	ldi	r22, 0x07	; 7
    1afc:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LED_voidOff>

	LED_voidOn(PORT_A, LED_PORTA_KIT_YELLOW);
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	66 e0       	ldi	r22, 0x06	; 6
    1b04:	0e 94 41 0b 	call	0x1682	; 0x1682 <LED_voidOn>
	for(i = 1 ; i < 4 ; i++)
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	8b a7       	std	Y+43, r24	; 0x2b
    1b0c:	79 c0       	rjmp	.+242    	; 0x1c00 <TrafficLights+0x228>
	{
		SEGMENT_voidDisplay(PORT_B, i);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	6b a5       	ldd	r22, Y+43	; 0x2b
    1b12:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <SEGMENT_voidDisplay>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a8 e4       	ldi	r26, 0x48	; 72
    1b1c:	b4 e4       	ldi	r27, 0x44	; 68
    1b1e:	89 8f       	std	Y+25, r24	; 0x19
    1b20:	9a 8f       	std	Y+26, r25	; 0x1a
    1b22:	ab 8f       	std	Y+27, r26	; 0x1b
    1b24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	69 8d       	ldd	r22, Y+25	; 0x19
    1b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	4a e7       	ldi	r20, 0x7A	; 122
    1b34:	53 e4       	ldi	r21, 0x43	; 67
    1b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8d 8b       	std	Y+21, r24	; 0x15
    1b40:	9e 8b       	std	Y+22, r25	; 0x16
    1b42:	af 8b       	std	Y+23, r26	; 0x17
    1b44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b46:	6d 89       	ldd	r22, Y+21	; 0x15
    1b48:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <TrafficLights+0x190>
		__ticks = 1;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
    1b66:	3f c0       	rjmp	.+126    	; 0x1be6 <TrafficLights+0x20e>
	else if (__tmp > 65535)
    1b68:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b7c:	18 16       	cp	r1, r24
    1b7e:	4c f5       	brge	.+82     	; 0x1bd2 <TrafficLights+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b80:	69 8d       	ldd	r22, Y+25	; 0x19
    1b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e2       	ldi	r20, 0x20	; 32
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9c 8b       	std	Y+20, r25	; 0x14
    1ba6:	8b 8b       	std	Y+19, r24	; 0x13
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <TrafficLights+0x1f0>
    1baa:	89 e1       	ldi	r24, 0x19	; 25
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9a 8b       	std	Y+18, r25	; 0x12
    1bb0:	89 8b       	std	Y+17, r24	; 0x11
    1bb2:	89 89       	ldd	r24, Y+17	; 0x11
    1bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <TrafficLights+0x1de>
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	69 f7       	brne	.-38     	; 0x1baa <TrafficLights+0x1d2>
    1bd0:	14 c0       	rjmp	.+40     	; 0x1bfa <TrafficLights+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9c 8b       	std	Y+20, r25	; 0x14
    1be4:	8b 8b       	std	Y+19, r24	; 0x13
    1be6:	8b 89       	ldd	r24, Y+19	; 0x13
    1be8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bea:	98 8b       	std	Y+16, r25	; 0x10
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	98 89       	ldd	r25, Y+16	; 0x10
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <TrafficLights+0x21a>
    1bf6:	98 8b       	std	Y+16, r25	; 0x10
    1bf8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(800);
	}
	LED_voidOff(PORT_B, LED_PORTB_KIT_RED);

	LED_voidOn(PORT_A, LED_PORTA_KIT_YELLOW);
	for(i = 1 ; i < 4 ; i++)
    1bfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bfc:	8f 5f       	subi	r24, 0xFF	; 255
    1bfe:	8b a7       	std	Y+43, r24	; 0x2b
    1c00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c02:	84 30       	cpi	r24, 0x04	; 4
    1c04:	08 f4       	brcc	.+2      	; 0x1c08 <TrafficLights+0x230>
    1c06:	83 cf       	rjmp	.-250    	; 0x1b0e <TrafficLights+0x136>
	{
		SEGMENT_voidDisplay(PORT_B, i);
		_delay_ms(800);
	}
	LED_voidOff(PORT_A, LED_PORTA_KIT_YELLOW);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	66 e0       	ldi	r22, 0x06	; 6
    1c0c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LED_voidOff>

	LED_voidOn(PORT_A, LED_PORTA_KIT_GREEN);
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	64 e0       	ldi	r22, 0x04	; 4
    1c14:	0e 94 41 0b 	call	0x1682	; 0x1682 <LED_voidOn>
	for(i = 1 ; i < 4 ; i++)
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	8b a7       	std	Y+43, r24	; 0x2b
    1c1c:	79 c0       	rjmp	.+242    	; 0x1d10 <TrafficLights+0x338>
	{
		SEGMENT_voidDisplay(PORT_B, i);
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	6b a5       	ldd	r22, Y+43	; 0x2b
    1c22:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <SEGMENT_voidDisplay>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a8 e4       	ldi	r26, 0x48	; 72
    1c2c:	b4 e4       	ldi	r27, 0x44	; 68
    1c2e:	8b 87       	std	Y+11, r24	; 0x0b
    1c30:	9c 87       	std	Y+12, r25	; 0x0c
    1c32:	ad 87       	std	Y+13, r26	; 0x0d
    1c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a e7       	ldi	r20, 0x7A	; 122
    1c44:	53 e4       	ldi	r21, 0x43	; 67
    1c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8f 83       	std	Y+7, r24	; 0x07
    1c50:	98 87       	std	Y+8, r25	; 0x08
    1c52:	a9 87       	std	Y+9, r26	; 0x09
    1c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c56:	6f 81       	ldd	r22, Y+7	; 0x07
    1c58:	78 85       	ldd	r23, Y+8	; 0x08
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <TrafficLights+0x2a0>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <TrafficLights+0x31e>
	else if (__tmp > 65535)
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <TrafficLights+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <TrafficLights+0x300>
    1cba:	89 e1       	ldi	r24, 0x19	; 25
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <TrafficLights+0x2ee>
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9e 83       	std	Y+6, r25	; 0x06
    1cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <TrafficLights+0x2e2>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <TrafficLights+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce4:	78 85       	ldd	r23, Y+8	; 0x08
    1ce6:	89 85       	ldd	r24, Y+9	; 0x09
    1ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <TrafficLights+0x32a>
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(800);
	}
	LED_voidOff(PORT_A, LED_PORTA_KIT_YELLOW);

	LED_voidOn(PORT_A, LED_PORTA_KIT_GREEN);
	for(i = 1 ; i < 4 ; i++)
    1d0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	8b a7       	std	Y+43, r24	; 0x2b
    1d10:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d12:	84 30       	cpi	r24, 0x04	; 4
    1d14:	08 f4       	brcc	.+2      	; 0x1d18 <TrafficLights+0x340>
    1d16:	83 cf       	rjmp	.-250    	; 0x1c1e <TrafficLights+0x246>
	{
		SEGMENT_voidDisplay(PORT_B, i);
		_delay_ms(800);
	}
	LED_voidOff(PORT_A, LED_PORTA_KIT_GREEN);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	64 e0       	ldi	r22, 0x04	; 4
    1d1c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LED_voidOff>
}
    1d20:	ab 96       	adiw	r28, 0x2b	; 43
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <main>:

/*******************************************************************************
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void) {
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62

	funcInits();
    1d3a:	0e 94 a6 0b 	call	0x174c	; 0x174c <funcInits>

	while (1)
	{
		TrafficLights();
    1d3e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <TrafficLights>
    1d42:	fd cf       	rjmp	.-6      	; 0x1d3e <main+0xc>

00001d44 <__prologue_saves__>:
    1d44:	2f 92       	push	r2
    1d46:	3f 92       	push	r3
    1d48:	4f 92       	push	r4
    1d4a:	5f 92       	push	r5
    1d4c:	6f 92       	push	r6
    1d4e:	7f 92       	push	r7
    1d50:	8f 92       	push	r8
    1d52:	9f 92       	push	r9
    1d54:	af 92       	push	r10
    1d56:	bf 92       	push	r11
    1d58:	cf 92       	push	r12
    1d5a:	df 92       	push	r13
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	ca 1b       	sub	r28, r26
    1d6e:	db 0b       	sbc	r29, r27
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	09 94       	ijmp

00001d7c <__epilogue_restores__>:
    1d7c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d7e:	39 88       	ldd	r3, Y+17	; 0x11
    1d80:	48 88       	ldd	r4, Y+16	; 0x10
    1d82:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d84:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d86:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d88:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d8e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d90:	c8 84       	ldd	r12, Y+8	; 0x08
    1d92:	df 80       	ldd	r13, Y+7	; 0x07
    1d94:	ee 80       	ldd	r14, Y+6	; 0x06
    1d96:	fd 80       	ldd	r15, Y+5	; 0x05
    1d98:	0c 81       	ldd	r16, Y+4	; 0x04
    1d9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d9c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1da0:	ce 0f       	add	r28, r30
    1da2:	d1 1d       	adc	r29, r1
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	ed 01       	movw	r28, r26
    1db0:	08 95       	ret

00001db2 <_exit>:
    1db2:	f8 94       	cli

00001db4 <__stop_program>:
    1db4:	ff cf       	rjmp	.-2      	; 0x1db4 <__stop_program>
