
TASK14_INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00003a90  00003b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800090  00800090  00003b54  2**0
                  ALLOC
  3 .stab         00004098  00000000  00000000  00003b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002117  00000000  00000000  00007bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d894  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dc81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e44f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_1>
       8:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_2>
       c:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 1c 	call	0x3986	; 0x3986 <main>
      8a:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_voidSetPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPinDirection(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinDIR) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_voidSetPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_voidSetPinDirection+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <GPIO_voidSetPinDirection+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
     b58:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
     b5a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	88 30       	cpi	r24, 0x08	; 8
     b60:	18 f0       	brcs	.+6      	; 0xb68 <GPIO_voidSetPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	e1 c0       	rjmp	.+450    	; 0xd2a <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	84 30       	cpi	r24, 0x04	; 4
     b6c:	18 f0       	brcs	.+6      	; 0xb74 <GPIO_voidSetPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	db c0       	rjmp	.+438    	; 0xd2a <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	88 23       	and	r24, r24
     b78:	31 f0       	breq	.+12     	; 0xb86 <GPIO_voidSetPinDirection+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	19 f0       	breq	.+6      	; 0xb86 <GPIO_voidSetPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	d2 c0       	rjmp	.+420    	; 0xd2a <GPIO_voidSetPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	3e 83       	std	Y+6, r19	; 0x06
     b8e:	2d 83       	std	Y+5, r18	; 0x05
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_voidSetPinDirection+0x56>
     b9a:	43 c0       	rjmp	.+134    	; 0xc22 <GPIO_voidSetPinDirection+0xdc>
     b9c:	2d 81       	ldd	r18, Y+5	; 0x05
     b9e:	3e 81       	ldd	r19, Y+6	; 0x06
     ba0:	22 30       	cpi	r18, 0x02	; 2
     ba2:	31 05       	cpc	r19, r1
     ba4:	2c f4       	brge	.+10     	; 0xbb0 <GPIO_voidSetPinDirection+0x6a>
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	9e 81       	ldd	r25, Y+6	; 0x06
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	71 f0       	breq	.+28     	; 0xbca <GPIO_voidSetPinDirection+0x84>
     bae:	bc c0       	rjmp	.+376    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
     bb0:	2d 81       	ldd	r18, Y+5	; 0x05
     bb2:	3e 81       	ldd	r19, Y+6	; 0x06
     bb4:	22 30       	cpi	r18, 0x02	; 2
     bb6:	31 05       	cpc	r19, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <GPIO_voidSetPinDirection+0x76>
     bba:	5f c0       	rjmp	.+190    	; 0xc7a <GPIO_voidSetPinDirection+0x134>
     bbc:	8d 81       	ldd	r24, Y+5	; 0x05
     bbe:	9e 81       	ldd	r25, Y+6	; 0x06
     bc0:	83 30       	cpi	r24, 0x03	; 3
     bc2:	91 05       	cpc	r25, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <GPIO_voidSetPinDirection+0x82>
     bc6:	85 c0       	rjmp	.+266    	; 0xcd2 <GPIO_voidSetPinDirection+0x18c>
     bc8:	af c0       	rjmp	.+350    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     bca:	8c 81       	ldd	r24, Y+4	; 0x04
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	a1 f4       	brne	.+40     	; 0xbf8 <GPIO_voidSetPinDirection+0xb2>
					SET_BIT(DDRA_REG, copy_u8pinID);
     bd0:	aa e3       	ldi	r26, 0x3A	; 58
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ea e3       	ldi	r30, 0x3A	; 58
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	48 2f       	mov	r20, r24
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	02 2e       	mov	r0, r18
     be8:	02 c0       	rjmp	.+4      	; 0xbee <GPIO_voidSetPinDirection+0xa8>
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <GPIO_voidSetPinDirection+0xa4>
     bf2:	84 2b       	or	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	98 c0       	rjmp	.+304    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
     bf8:	aa e3       	ldi	r26, 0x3A	; 58
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ea e3       	ldi	r30, 0x3A	; 58
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	02 2e       	mov	r0, r18
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <GPIO_voidSetPinDirection+0xd0>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	0a 94       	dec	r0
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <GPIO_voidSetPinDirection+0xcc>
     c1a:	80 95       	com	r24
     c1c:	84 23       	and	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	83 c0       	rjmp	.+262    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     c22:	8c 81       	ldd	r24, Y+4	; 0x04
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	a1 f4       	brne	.+40     	; 0xc50 <GPIO_voidSetPinDirection+0x10a>
					SET_BIT(DDRB_REG, copy_u8pinID);
     c28:	a7 e3       	ldi	r26, 0x37	; 55
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e7 e3       	ldi	r30, 0x37	; 55
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 2e       	mov	r0, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <GPIO_voidSetPinDirection+0x100>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <GPIO_voidSetPinDirection+0xfc>
     c4a:	84 2b       	or	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	6c c0       	rjmp	.+216    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
     c50:	a7 e3       	ldi	r26, 0x37	; 55
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e7 e3       	ldi	r30, 0x37	; 55
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	48 2f       	mov	r20, r24
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 2e       	mov	r0, r18
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <GPIO_voidSetPinDirection+0x128>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <GPIO_voidSetPinDirection+0x124>
     c72:	80 95       	com	r24
     c74:	84 23       	and	r24, r20
     c76:	8c 93       	st	X, r24
     c78:	57 c0       	rjmp	.+174    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	a1 f4       	brne	.+40     	; 0xca8 <GPIO_voidSetPinDirection+0x162>
					SET_BIT(DDRC_REG, copy_u8pinID);
     c80:	a4 e3       	ldi	r26, 0x34	; 52
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e4 e3       	ldi	r30, 0x34	; 52
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	48 2f       	mov	r20, r24
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 2e       	mov	r0, r18
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <GPIO_voidSetPinDirection+0x158>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	0a 94       	dec	r0
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <GPIO_voidSetPinDirection+0x154>
     ca2:	84 2b       	or	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	40 c0       	rjmp	.+128    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
     ca8:	a4 e3       	ldi	r26, 0x34	; 52
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e4 e3       	ldi	r30, 0x34	; 52
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	48 2f       	mov	r20, r24
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 2e       	mov	r0, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <GPIO_voidSetPinDirection+0x180>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <GPIO_voidSetPinDirection+0x17c>
     cca:	80 95       	com	r24
     ccc:	84 23       	and	r24, r20
     cce:	8c 93       	st	X, r24
     cd0:	2b c0       	rjmp	.+86     	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	a1 f4       	brne	.+40     	; 0xd00 <GPIO_voidSetPinDirection+0x1ba>
					SET_BIT(DDRD_REG, copy_u8pinID);
     cd8:	a1 e3       	ldi	r26, 0x31	; 49
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e1 e3       	ldi	r30, 0x31	; 49
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 2e       	mov	r0, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <GPIO_voidSetPinDirection+0x1b0>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <GPIO_voidSetPinDirection+0x1ac>
     cfa:	84 2b       	or	r24, r20
     cfc:	8c 93       	st	X, r24
     cfe:	14 c0       	rjmp	.+40     	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
     d00:	a1 e3       	ldi	r26, 0x31	; 49
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e1 e3       	ldi	r30, 0x31	; 49
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <GPIO_voidSetPinDirection+0x1d8>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <GPIO_voidSetPinDirection+0x1d4>
     d22:	80 95       	com	r24
     d24:	84 23       	and	r24, r20
     d26:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
     d28:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d2c:	26 96       	adiw	r28, 0x06	; 6
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <GPIO_voidSetPinValue>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_voidSetPinValue(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinValue)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <GPIO_voidSetPinValue+0x6>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <GPIO_voidSetPinValue+0x8>
     d46:	00 d0       	rcall	.+0      	; 0xd48 <GPIO_voidSetPinValue+0xa>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	8a 83       	std	Y+2, r24	; 0x02
     d4e:	6b 83       	std	Y+3, r22	; 0x03
     d50:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
     d52:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 30       	cpi	r24, 0x08	; 8
     d58:	18 f0       	brcs	.+6      	; 0xd60 <GPIO_voidSetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	e1 c0       	rjmp	.+450    	; 0xf22 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	18 f0       	brcs	.+6      	; 0xd6c <GPIO_voidSetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	db c0       	rjmp	.+438    	; 0xf22 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	31 f0       	breq	.+12     	; 0xd7e <GPIO_voidSetPinValue+0x40>
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	88 23       	and	r24, r24
     d76:	19 f0       	breq	.+6      	; 0xd7e <GPIO_voidSetPinValue+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	d2 c0       	rjmp	.+420    	; 0xf22 <GPIO_voidSetPinValue+0x1e4>
	}
	else {
		switch(copy_u8portID)
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	3e 83       	std	Y+6, r19	; 0x06
     d86:	2d 83       	std	Y+5, r18	; 0x05
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	91 05       	cpc	r25, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <GPIO_voidSetPinValue+0x56>
     d92:	43 c0       	rjmp	.+134    	; 0xe1a <GPIO_voidSetPinValue+0xdc>
     d94:	2d 81       	ldd	r18, Y+5	; 0x05
     d96:	3e 81       	ldd	r19, Y+6	; 0x06
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	2c f4       	brge	.+10     	; 0xda8 <GPIO_voidSetPinValue+0x6a>
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	71 f0       	breq	.+28     	; 0xdc2 <GPIO_voidSetPinValue+0x84>
     da6:	bc c0       	rjmp	.+376    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
     da8:	2d 81       	ldd	r18, Y+5	; 0x05
     daa:	3e 81       	ldd	r19, Y+6	; 0x06
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <GPIO_voidSetPinValue+0x76>
     db2:	5f c0       	rjmp	.+190    	; 0xe72 <GPIO_voidSetPinValue+0x134>
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	91 05       	cpc	r25, r1
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <GPIO_voidSetPinValue+0x82>
     dbe:	85 c0       	rjmp	.+266    	; 0xeca <GPIO_voidSetPinValue+0x18c>
     dc0:	af c0       	rjmp	.+350    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <GPIO_voidSetPinValue+0xb2>
					SET_BIT(PORTA_REG ,copy_u8pinID);
     dc8:	ab e3       	ldi	r26, 0x3B	; 59
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	eb e3       	ldi	r30, 0x3B	; 59
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <GPIO_voidSetPinValue+0xa8>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <GPIO_voidSetPinValue+0xa4>
     dea:	84 2b       	or	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	98 c0       	rjmp	.+304    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
     df0:	ab e3       	ldi	r26, 0x3B	; 59
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	eb e3       	ldi	r30, 0x3B	; 59
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <GPIO_voidSetPinValue+0xd0>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <GPIO_voidSetPinValue+0xcc>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	83 c0       	rjmp	.+262    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	a1 f4       	brne	.+40     	; 0xe48 <GPIO_voidSetPinValue+0x10a>
					SET_BIT(PORTB_REG ,copy_u8pinID);
     e20:	a8 e3       	ldi	r26, 0x38	; 56
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e8 e3       	ldi	r30, 0x38	; 56
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_voidSetPinValue+0x100>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_voidSetPinValue+0xfc>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	6c c0       	rjmp	.+216    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
     e48:	a8 e3       	ldi	r26, 0x38	; 56
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 e3       	ldi	r30, 0x38	; 56
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <GPIO_voidSetPinValue+0x128>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <GPIO_voidSetPinValue+0x124>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	57 c0       	rjmp	.+174    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	a1 f4       	brne	.+40     	; 0xea0 <GPIO_voidSetPinValue+0x162>
					SET_BIT(PORTC_REG ,copy_u8pinID);
     e78:	a5 e3       	ldi	r26, 0x35	; 53
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e5 e3       	ldi	r30, 0x35	; 53
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <GPIO_voidSetPinValue+0x158>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <GPIO_voidSetPinValue+0x154>
     e9a:	84 2b       	or	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	40 c0       	rjmp	.+128    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
     ea0:	a5 e3       	ldi	r26, 0x35	; 53
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e5 e3       	ldi	r30, 0x35	; 53
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_voidSetPinValue+0x180>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_voidSetPinValue+0x17c>
     ec2:	80 95       	com	r24
     ec4:	84 23       	and	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	2b c0       	rjmp	.+86     	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	a1 f4       	brne	.+40     	; 0xef8 <GPIO_voidSetPinValue+0x1ba>
					SET_BIT(PORTD_REG ,copy_u8pinID);
     ed0:	a2 e3       	ldi	r26, 0x32	; 50
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e2 e3       	ldi	r30, 0x32	; 50
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <GPIO_voidSetPinValue+0x1b0>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <GPIO_voidSetPinValue+0x1ac>
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	14 c0       	rjmp	.+40     	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
     ef8:	a2 e3       	ldi	r26, 0x32	; 50
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e2 e3       	ldi	r30, 0x32	; 50
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <GPIO_voidSetPinValue+0x1d8>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <GPIO_voidSetPinValue+0x1d4>
     f1a:	80 95       	com	r24
     f1c:	84 23       	and	r24, r20
     f1e:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
     f20:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
}
     f24:	26 96       	adiw	r28, 0x06	; 6
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <GPIO_u8GetPinValue>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
u8 GPIO_u8GetPinValue(u8 copy_u8portID, u8 copy_u8pinID) {
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <GPIO_u8GetPinValue+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <GPIO_u8GetPinValue+0x8>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <GPIO_u8GetPinValue+0xa>
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	8b 83       	std	Y+3, r24	; 0x03
     f46:	6c 83       	std	Y+4, r22	; 0x04
	u8 GPIO_Driver_Checker = 0;
     f48:	1a 82       	std	Y+2, r1	; 0x02
	u8 pin_value = LOGIC_LOW;
     f4a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	88 30       	cpi	r24, 0x08	; 8
     f50:	18 f0       	brcs	.+6      	; 0xf58 <GPIO_u8GetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	87 c0       	rjmp	.+270    	; 0x1066 <GPIO_u8GetPinValue+0x130>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	18 f0       	brcs	.+6      	; 0xf64 <GPIO_u8GetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	81 c0       	rjmp	.+258    	; 0x1066 <GPIO_u8GetPinValue+0x130>
	}
	else {
		/* Read the pin value as required */
		switch(copy_u8portID) {
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3e 83       	std	Y+6, r19	; 0x06
     f6c:	2d 83       	std	Y+5, r18	; 0x05
     f6e:	4d 81       	ldd	r20, Y+5	; 0x05
     f70:	5e 81       	ldd	r21, Y+6	; 0x06
     f72:	41 30       	cpi	r20, 0x01	; 1
     f74:	51 05       	cpc	r21, r1
     f76:	79 f1       	breq	.+94     	; 0xfd6 <GPIO_u8GetPinValue+0xa0>
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	91 05       	cpc	r25, r1
     f80:	34 f4       	brge	.+12     	; 0xf8e <GPIO_u8GetPinValue+0x58>
     f82:	2d 81       	ldd	r18, Y+5	; 0x05
     f84:	3e 81       	ldd	r19, Y+6	; 0x06
     f86:	21 15       	cp	r18, r1
     f88:	31 05       	cpc	r19, r1
     f8a:	69 f0       	breq	.+26     	; 0xfa6 <GPIO_u8GetPinValue+0x70>
     f8c:	6b c0       	rjmp	.+214    	; 0x1064 <GPIO_u8GetPinValue+0x12e>
     f8e:	4d 81       	ldd	r20, Y+5	; 0x05
     f90:	5e 81       	ldd	r21, Y+6	; 0x06
     f92:	42 30       	cpi	r20, 0x02	; 2
     f94:	51 05       	cpc	r21, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <GPIO_u8GetPinValue+0xd0>
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <GPIO_u8GetPinValue+0x6e>
     fa2:	49 c0       	rjmp	.+146    	; 0x1036 <GPIO_u8GetPinValue+0x100>
     fa4:	5f c0       	rjmp	.+190    	; 0x1064 <GPIO_u8GetPinValue+0x12e>
			case PORT_A:
				// Checks if the bit equals '1' or not
				if(BIT_IS_SET(PINA_REG, copy_u8pinID)) {
     fa6:	e9 e3       	ldi	r30, 0x39	; 57
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	a9 01       	movw	r20, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_u8GetPinValue+0x88>
     fba:	55 95       	asr	r21
     fbc:	47 95       	ror	r20
     fbe:	8a 95       	dec	r24
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_u8GetPinValue+0x84>
     fc2:	ca 01       	movw	r24, r20
     fc4:	81 70       	andi	r24, 0x01	; 1
     fc6:	90 70       	andi	r25, 0x00	; 0
     fc8:	88 23       	and	r24, r24
     fca:	19 f0       	breq	.+6      	; 0xfd2 <GPIO_u8GetPinValue+0x9c>
					pin_value = LOGIC_HIGH;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	49 c0       	rjmp	.+146    	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	47 c0       	rjmp	.+142    	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_B:
				if(BIT_IS_SET(PINB_REG,copy_u8pinID)) {
     fd6:	e6 e3       	ldi	r30, 0x36	; 54
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <GPIO_u8GetPinValue+0xb8>
     fea:	55 95       	asr	r21
     fec:	47 95       	ror	r20
     fee:	8a 95       	dec	r24
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <GPIO_u8GetPinValue+0xb4>
     ff2:	ca 01       	movw	r24, r20
     ff4:	81 70       	andi	r24, 0x01	; 1
     ff6:	90 70       	andi	r25, 0x00	; 0
     ff8:	88 23       	and	r24, r24
     ffa:	19 f0       	breq	.+6      	; 0x1002 <GPIO_u8GetPinValue+0xcc>
					pin_value = LOGIC_HIGH;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	31 c0       	rjmp	.+98     	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1002:	19 82       	std	Y+1, r1	; 0x01
    1004:	2f c0       	rjmp	.+94     	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_C:
				if(BIT_IS_SET(PINC_REG,copy_u8pinID)) {
    1006:	e3 e3       	ldi	r30, 0x33	; 51
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_u8GetPinValue+0xe8>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_u8GetPinValue+0xe4>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	88 23       	and	r24, r24
    102a:	19 f0       	breq	.+6      	; 0x1032 <GPIO_u8GetPinValue+0xfc>
					pin_value = LOGIC_HIGH;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	19 c0       	rjmp	.+50     	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1032:	19 82       	std	Y+1, r1	; 0x01
    1034:	17 c0       	rjmp	.+46     	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_D:
				if(BIT_IS_SET(PIND_REG,copy_u8pinID)) {
    1036:	e0 e3       	ldi	r30, 0x30	; 48
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a9 01       	movw	r20, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_u8GetPinValue+0x118>
    104a:	55 95       	asr	r21
    104c:	47 95       	ror	r20
    104e:	8a 95       	dec	r24
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_u8GetPinValue+0x114>
    1052:	ca 01       	movw	r24, r20
    1054:	81 70       	andi	r24, 0x01	; 1
    1056:	90 70       	andi	r25, 0x00	; 0
    1058:	88 23       	and	r24, r24
    105a:	19 f0       	breq	.+6      	; 0x1062 <GPIO_u8GetPinValue+0x12c>
					pin_value = LOGIC_HIGH;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1062:	19 82       	std	Y+1, r1	; 0x01
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1064:	1a 82       	std	Y+2, r1	; 0x02
	}
	return pin_value;
    1066:	89 81       	ldd	r24, Y+1	; 0x01
}
    1068:	26 96       	adiw	r28, 0x06	; 6
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <GPIO_voidTogglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_voidTogglePin(u8 copy_u8portID, u8 copy_u8pinID) {
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <GPIO_voidTogglePin+0x6>
    1080:	00 d0       	rcall	.+0      	; 0x1082 <GPIO_voidTogglePin+0x8>
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	8a 83       	std	Y+2, r24	; 0x02
    108a:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    108c:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	88 30       	cpi	r24, 0x08	; 8
    1092:	18 f0       	brcs	.+6      	; 0x109a <GPIO_voidTogglePin+0x20>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	75 c0       	rjmp	.+234    	; 0x1184 <GPIO_voidTogglePin+0x10a>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	84 30       	cpi	r24, 0x04	; 4
    109e:	18 f0       	brcs	.+6      	; 0x10a6 <GPIO_voidTogglePin+0x2c>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	6f c0       	rjmp	.+222    	; 0x1184 <GPIO_voidTogglePin+0x10a>
	}
	else {
		switch(copy_u8portID) {
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3d 83       	std	Y+5, r19	; 0x05
    10ae:	2c 83       	std	Y+4, r18	; 0x04
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	49 f1       	breq	.+82     	; 0x110c <GPIO_voidTogglePin+0x92>
    10ba:	2c 81       	ldd	r18, Y+4	; 0x04
    10bc:	3d 81       	ldd	r19, Y+5	; 0x05
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <GPIO_voidTogglePin+0x54>
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <GPIO_voidTogglePin+0x6a>
    10cc:	5a c0       	rjmp	.+180    	; 0x1182 <GPIO_voidTogglePin+0x108>
    10ce:	2c 81       	ldd	r18, Y+4	; 0x04
    10d0:	3d 81       	ldd	r19, Y+5	; 0x05
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	71 f1       	breq	.+92     	; 0x1134 <GPIO_voidTogglePin+0xba>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	e9 f1       	breq	.+122    	; 0x115c <GPIO_voidTogglePin+0xe2>
    10e2:	4f c0       	rjmp	.+158    	; 0x1182 <GPIO_voidTogglePin+0x108>
			case PORT_A:
				TOG_BIT(PORTA_REG, copy_u8pinID);
    10e4:	ab e3       	ldi	r26, 0x3B	; 59
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	eb e3       	ldi	r30, 0x3B	; 59
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_voidTogglePin+0x88>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_voidTogglePin+0x84>
    1106:	84 27       	eor	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	3b c0       	rjmp	.+118    	; 0x1182 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_B:
				TOG_BIT(PORTB_REG, copy_u8pinID);
    110c:	a8 e3       	ldi	r26, 0x38	; 56
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e3       	ldi	r30, 0x38	; 56
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_voidTogglePin+0xb0>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_voidTogglePin+0xac>
    112e:	84 27       	eor	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	27 c0       	rjmp	.+78     	; 0x1182 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_C:
				TOG_BIT(PORTC_REG, copy_u8pinID);
    1134:	a5 e3       	ldi	r26, 0x35	; 53
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_voidTogglePin+0xd8>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_voidTogglePin+0xd4>
    1156:	84 27       	eor	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	13 c0       	rjmp	.+38     	; 0x1182 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_D:
				TOG_BIT(PORTD_REG, copy_u8pinID);
    115c:	a2 e3       	ldi	r26, 0x32	; 50
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e2 e3       	ldi	r30, 0x32	; 50
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <GPIO_voidTogglePin+0x100>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <GPIO_voidTogglePin+0xfc>
    117e:	84 27       	eor	r24, r20
    1180:	8c 93       	st	X, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1182:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <GPIO_voidSetPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortDirection(u8 copy_u8portID, u8 copy_u8portDIR) {
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <GPIO_voidSetPortDirection+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <GPIO_voidSetPortDirection+0x8>
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	8a 83       	std	Y+2, r24	; 0x02
    11a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    11a8:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	18 f0       	brcs	.+6      	; 0x11b6 <GPIO_voidSetPortDirection+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	3c c0       	rjmp	.+120    	; 0x122e <GPIO_voidSetPortDirection+0x98>
	}
	else if((copy_u8portDIR != PORT_INPUT) && (copy_u8portDIR != PORT_OUTPUT)) {
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 23       	and	r24, r24
    11ba:	31 f0       	breq	.+12     	; 0x11c8 <GPIO_voidSetPortDirection+0x32>
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <GPIO_voidSetPortDirection+0x32>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	33 c0       	rjmp	.+102    	; 0x122e <GPIO_voidSetPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	3d 83       	std	Y+5, r19	; 0x05
    11d0:	2c 83       	std	Y+4, r18	; 0x04
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	9d 81       	ldd	r25, Y+5	; 0x05
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	91 05       	cpc	r25, r1
    11da:	d1 f0       	breq	.+52     	; 0x1210 <GPIO_voidSetPortDirection+0x7a>
    11dc:	2c 81       	ldd	r18, Y+4	; 0x04
    11de:	3d 81       	ldd	r19, Y+5	; 0x05
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <GPIO_voidSetPortDirection+0x5a>
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	61 f0       	breq	.+24     	; 0x1206 <GPIO_voidSetPortDirection+0x70>
    11ee:	1e c0       	rjmp	.+60     	; 0x122c <GPIO_voidSetPortDirection+0x96>
    11f0:	2c 81       	ldd	r18, Y+4	; 0x04
    11f2:	3d 81       	ldd	r19, Y+5	; 0x05
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	81 f0       	breq	.+32     	; 0x121a <GPIO_voidSetPortDirection+0x84>
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	81 f0       	breq	.+32     	; 0x1224 <GPIO_voidSetPortDirection+0x8e>
    1204:	13 c0       	rjmp	.+38     	; 0x122c <GPIO_voidSetPortDirection+0x96>
			case PORT_A:
				DDRA_REG = copy_u8portDIR;
    1206:	ea e3       	ldi	r30, 0x3A	; 58
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	80 83       	st	Z, r24
    120e:	0e c0       	rjmp	.+28     	; 0x122c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_B:
				DDRB_REG = copy_u8portDIR;
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	80 83       	st	Z, r24
    1218:	09 c0       	rjmp	.+18     	; 0x122c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_C:
				DDRC_REG = copy_u8portDIR;
    121a:	e4 e3       	ldi	r30, 0x34	; 52
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	80 83       	st	Z, r24
    1222:	04 c0       	rjmp	.+8      	; 0x122c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_D:
				DDRD_REG = copy_u8portDIR;
    1224:	e1 e3       	ldi	r30, 0x31	; 49
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    122c:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <GPIO_voidSetPortValue>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortValue(u8 copy_u8portID, u8 copy_u8portValue) {
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <GPIO_voidSetPortValue+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <GPIO_voidSetPortValue+0x8>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	8a 83       	std	Y+2, r24	; 0x02
    1250:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    1252:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	18 f0       	brcs	.+6      	; 0x1260 <GPIO_voidSetPortValue+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	33 c0       	rjmp	.+102    	; 0x12c6 <GPIO_voidSetPortValue+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3d 83       	std	Y+5, r19	; 0x05
    1268:	2c 83       	std	Y+4, r18	; 0x04
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	91 05       	cpc	r25, r1
    1272:	d1 f0       	breq	.+52     	; 0x12a8 <GPIO_voidSetPortValue+0x68>
    1274:	2c 81       	ldd	r18, Y+4	; 0x04
    1276:	3d 81       	ldd	r19, Y+5	; 0x05
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	2c f4       	brge	.+10     	; 0x1288 <GPIO_voidSetPortValue+0x48>
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	61 f0       	breq	.+24     	; 0x129e <GPIO_voidSetPortValue+0x5e>
    1286:	1e c0       	rjmp	.+60     	; 0x12c4 <GPIO_voidSetPortValue+0x84>
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <GPIO_voidSetPortValue+0x72>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	81 f0       	breq	.+32     	; 0x12bc <GPIO_voidSetPortValue+0x7c>
    129c:	13 c0       	rjmp	.+38     	; 0x12c4 <GPIO_voidSetPortValue+0x84>
			case PORT_A:
				PORTA_REG = copy_u8portValue;
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	80 83       	st	Z, r24
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_B:
				PORTB_REG = copy_u8portValue;
    12a8:	e8 e3       	ldi	r30, 0x38	; 56
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	80 83       	st	Z, r24
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_C:
				PORTC_REG = copy_u8portValue;
    12b2:	e5 e3       	ldi	r30, 0x35	; 53
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	80 83       	st	Z, r24
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_D:
				PORTD_REG = copy_u8portValue;
    12bc:	e2 e3       	ldi	r30, 0x32	; 50
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    12c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <GPIO_u8GetPortValue>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_u8GetPortValue(u8 copy_u8portID) {
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <GPIO_u8GetPortValue+0x6>
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <GPIO_u8GetPortValue+0x8>
    12e0:	0f 92       	push	r0
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	8b 83       	std	Y+3, r24	; 0x03
	u8 value = LOGIC_LOW;
    12e8:	1a 82       	std	Y+2, r1	; 0x02
	u8 GPIO_Driver_Checker = 0;
    12ea:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	18 f0       	brcs	.+6      	; 0x12f8 <GPIO_u8GetPortValue+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	33 c0       	rjmp	.+102    	; 0x135e <GPIO_u8GetPortValue+0x86>
	}
	else {
		switch(copy_u8portID) {
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	3d 83       	std	Y+5, r19	; 0x05
    1300:	2c 83       	std	Y+4, r18	; 0x04
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	91 05       	cpc	r25, r1
    130a:	d1 f0       	breq	.+52     	; 0x1340 <GPIO_u8GetPortValue+0x68>
    130c:	2c 81       	ldd	r18, Y+4	; 0x04
    130e:	3d 81       	ldd	r19, Y+5	; 0x05
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	2c f4       	brge	.+10     	; 0x1320 <GPIO_u8GetPortValue+0x48>
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	61 f0       	breq	.+24     	; 0x1336 <GPIO_u8GetPortValue+0x5e>
    131e:	1e c0       	rjmp	.+60     	; 0x135c <GPIO_u8GetPortValue+0x84>
    1320:	2c 81       	ldd	r18, Y+4	; 0x04
    1322:	3d 81       	ldd	r19, Y+5	; 0x05
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	81 f0       	breq	.+32     	; 0x134a <GPIO_u8GetPortValue+0x72>
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	91 05       	cpc	r25, r1
    1332:	81 f0       	breq	.+32     	; 0x1354 <GPIO_u8GetPortValue+0x7c>
    1334:	13 c0       	rjmp	.+38     	; 0x135c <GPIO_u8GetPortValue+0x84>
			case PORT_A:
				// Why value equals PINA?
				value = PORTA_REG;
    1336:	eb e3       	ldi	r30, 0x3B	; 59
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	8a 83       	std	Y+2, r24	; 0x02
    133e:	0e c0       	rjmp	.+28     	; 0x135c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_B:
				value = PORTB_REG;
    1340:	e8 e3       	ldi	r30, 0x38	; 56
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	09 c0       	rjmp	.+18     	; 0x135c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_C:
				value = PORTC_REG;
    134a:	e5 e3       	ldi	r30, 0x35	; 53
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8a 83       	std	Y+2, r24	; 0x02
    1352:	04 c0       	rjmp	.+8      	; 0x135c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_D:
				value = PORTD_REG;
    1354:	e2 e3       	ldi	r30, 0x32	; 50
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8a 83       	std	Y+2, r24	; 0x02
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    135c:	19 82       	std	Y+1, r1	; 0x01
	}
	return value;
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <GLOBAL_INTERRUPT_voidEnable>:

#include "GLOBAL_INTERRUPT_INTERFACE.h"


// Initialize External Interrupt
void GLOBAL_INTERRUPT_voidEnable(void) {
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, SREG_I_BIT);
    1378:	af e5       	ldi	r26, 0x5F	; 95
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ef e5       	ldi	r30, 0x5F	; 95
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 68       	ori	r24, 0x80	; 128
    1384:	8c 93       	st	X, r24
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <GLOBAL_INTERRUPT_voidDisable>:

void GLOBAL_INTERRUPT_voidDisable(void) {
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, SREG_I_BIT);
    1394:	af e5       	ldi	r26, 0x5F	; 95
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ef e5       	ldi	r30, 0x5F	; 95
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8f 77       	andi	r24, 0x7F	; 127
    13a0:	8c 93       	st	X, r24
}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <EXT_INTERRUPT_Sense_voidINTx>:
void (*CallBackPtr_INT1) (void);
void (*CallBackPtr_INT2) (void);


// Enable External Interrupt INT0 & INT1 & INT2
void EXT_INTERRUPT_Sense_voidINTx(u8 copyINTx, u8 CopySense) {
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <EXT_INTERRUPT_Sense_voidINTx+0x6>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <EXT_INTERRUPT_Sense_voidINTx+0x8>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3c 83       	std	Y+4, r19	; 0x04
    13c0:	2b 83       	std	Y+3, r18	; 0x03
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <EXT_INTERRUPT_Sense_voidINTx+0x26>
    13cc:	55 c0       	rjmp	.+170    	; 0x1478 <EXT_INTERRUPT_Sense_voidINTx+0xd0>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	23 30       	cpi	r18, 0x03	; 3
    13d4:	31 05       	cpc	r19, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <EXT_INTERRUPT_Sense_voidINTx+0x32>
    13d8:	97 c0       	rjmp	.+302    	; 0x1508 <EXT_INTERRUPT_Sense_voidINTx+0x160>
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <EXT_INTERRUPT_Sense_voidINTx+0x3e>
    13e4:	a6 c0       	rjmp	.+332    	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
	case EXT_INT0:
		if(CopySense == EXT_INTERRUPT_Low_Level) {
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	88 23       	and	r24, r24
    13ea:	79 f4       	brne	.+30     	; 0x140a <EXT_INTERRUPT_Sense_voidINTx+0x62>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    13ec:	a5 e5       	ldi	r26, 0x55	; 85
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e5       	ldi	r30, 0x55	; 85
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8d 7f       	andi	r24, 0xFD	; 253
    13f8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8e 7f       	andi	r24, 0xFE	; 254
    1406:	8c 93       	st	X, r24
    1408:	94 c0       	rjmp	.+296    	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
		}
		else if(CopySense == EXT_INTERRUPT_Logical_Change) {
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	79 f4       	brne	.+30     	; 0x142e <EXT_INTERRUPT_Sense_voidINTx+0x86>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    1410:	a5 e5       	ldi	r26, 0x55	; 85
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e5       	ldi	r30, 0x55	; 85
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8d 7f       	andi	r24, 0xFD	; 253
    141c:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    141e:	a5 e5       	ldi	r26, 0x55	; 85
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e5       	ldi	r30, 0x55	; 85
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	81 60       	ori	r24, 0x01	; 1
    142a:	8c 93       	st	X, r24
    142c:	82 c0       	rjmp	.+260    	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
		}
		else if(CopySense == EXT_INTERRUPT_Falling_Edge) {
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	79 f4       	brne	.+30     	; 0x1452 <EXT_INTERRUPT_Sense_voidINTx+0xaa>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    1434:	a5 e5       	ldi	r26, 0x55	; 85
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e5       	ldi	r30, 0x55	; 85
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	82 60       	ori	r24, 0x02	; 2
    1440:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    1442:	a5 e5       	ldi	r26, 0x55	; 85
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e5       	ldi	r30, 0x55	; 85
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	8e 7f       	andi	r24, 0xFE	; 254
    144e:	8c 93       	st	X, r24
    1450:	70 c0       	rjmp	.+224    	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
		}
		else if(CopySense == EXT_INTERRUPT_Rising_Edge) {
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	09 f0       	breq	.+2      	; 0x145a <EXT_INTERRUPT_Sense_voidINTx+0xb2>
    1458:	6c c0       	rjmp	.+216    	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    145a:	a5 e5       	ldi	r26, 0x55	; 85
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e5       	ldi	r30, 0x55	; 85
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    1468:	a5 e5       	ldi	r26, 0x55	; 85
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e5       	ldi	r30, 0x55	; 85
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	8c 93       	st	X, r24
    1476:	5d c0       	rjmp	.+186    	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
		}
		break;
	case EXT_INT1:
		if(CopySense == EXT_INTERRUPT_Low_Level) {
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	88 23       	and	r24, r24
    147c:	79 f4       	brne	.+30     	; 0x149c <EXT_INTERRUPT_Sense_voidINTx+0xf4>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    147e:	a5 e5       	ldi	r26, 0x55	; 85
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e5       	ldi	r30, 0x55	; 85
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	87 7f       	andi	r24, 0xF7	; 247
    148a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    148c:	a5 e5       	ldi	r26, 0x55	; 85
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e5       	ldi	r30, 0x55	; 85
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8b 7f       	andi	r24, 0xFB	; 251
    1498:	8c 93       	st	X, r24
    149a:	4b c0       	rjmp	.+150    	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
		}
		else if(CopySense == EXT_INTERRUPT_Logical_Change) {
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	79 f4       	brne	.+30     	; 0x14c0 <EXT_INTERRUPT_Sense_voidINTx+0x118>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    14a2:	a5 e5       	ldi	r26, 0x55	; 85
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e5 e5       	ldi	r30, 0x55	; 85
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	87 7f       	andi	r24, 0xF7	; 247
    14ae:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    14b0:	a5 e5       	ldi	r26, 0x55	; 85
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e5 e5       	ldi	r30, 0x55	; 85
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	84 60       	ori	r24, 0x04	; 4
    14bc:	8c 93       	st	X, r24
    14be:	39 c0       	rjmp	.+114    	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
		}
		else if(CopySense == EXT_INTERRUPT_Falling_Edge) {
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	79 f4       	brne	.+30     	; 0x14e4 <EXT_INTERRUPT_Sense_voidINTx+0x13c>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	88 60       	ori	r24, 0x08	; 8
    14d2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    14d4:	a5 e5       	ldi	r26, 0x55	; 85
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e5       	ldi	r30, 0x55	; 85
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8b 7f       	andi	r24, 0xFB	; 251
    14e0:	8c 93       	st	X, r24
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
		}
		else if(CopySense == EXT_INTERRUPT_Rising_Edge) {
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	21 f5       	brne	.+72     	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    14ea:	a5 e5       	ldi	r26, 0x55	; 85
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e5       	ldi	r30, 0x55	; 85
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    14f8:	a5 e5       	ldi	r26, 0x55	; 85
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e5       	ldi	r30, 0x55	; 85
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	84 60       	ori	r24, 0x04	; 4
    1504:	8c 93       	st	X, r24
    1506:	15 c0       	rjmp	.+42     	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
		}
		break;
	case EXT_INT2:
		if(CopySense == EXT_INTERRUPT_INT2_Falling_Edge) {
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	88 23       	and	r24, r24
    150c:	41 f4       	brne	.+16     	; 0x151e <EXT_INTERRUPT_Sense_voidINTx+0x176>
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2);
    150e:	a4 e5       	ldi	r26, 0x54	; 84
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e4 e5       	ldi	r30, 0x54	; 84
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8f 7b       	andi	r24, 0xBF	; 191
    151a:	8c 93       	st	X, r24
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
		}
		else if(CopySense == EXT_INTERRUPT_INT2_Rising_Edge) {
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	39 f4       	brne	.+14     	; 0x1532 <EXT_INTERRUPT_Sense_voidINTx+0x18a>
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2);
    1524:	a4 e5       	ldi	r26, 0x54	; 84
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e4 e5       	ldi	r30, 0x54	; 84
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 64       	ori	r24, 0x40	; 64
    1530:	8c 93       	st	X, r24
		}
		break;
	}
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <EXT_INTERRUPT_Enable_voidINTx>:

// Enable External Interrupt INT0 & INT1 & INT2
void EXT_INTERRUPT_Enable_voidINTx(u8 copyINTx, void (*copy_PtrtoFunc) (void)) {
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <EXT_INTERRUPT_Enable_voidINTx+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <EXT_INTERRUPT_Enable_voidINTx+0x8>
    1548:	0f 92       	push	r0
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	7b 83       	std	Y+3, r23	; 0x03
    1552:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3d 83       	std	Y+5, r19	; 0x05
    155c:	2c 83       	std	Y+4, r18	; 0x04
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	9d 81       	ldd	r25, Y+5	; 0x05
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	91 05       	cpc	r25, r1
    1566:	c1 f0       	breq	.+48     	; 0x1598 <EXT_INTERRUPT_Enable_voidINTx+0x58>
    1568:	2c 81       	ldd	r18, Y+4	; 0x04
    156a:	3d 81       	ldd	r19, Y+5	; 0x05
    156c:	23 30       	cpi	r18, 0x03	; 3
    156e:	31 05       	cpc	r19, r1
    1570:	09 f1       	breq	.+66     	; 0x15b4 <EXT_INTERRUPT_Enable_voidINTx+0x74>
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	51 f5       	brne	.+84     	; 0x15d0 <EXT_INTERRUPT_Enable_voidINTx+0x90>
	case EXT_INT0:
		SET_BIT(GICR_REG, GICR_INT0);
    157c:	ab e5       	ldi	r26, 0x5B	; 91
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	eb e5       	ldi	r30, 0x5B	; 91
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 64       	ori	r24, 0x40	; 64
    1588:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	90 93 93 00 	sts	0x0093, r25
    1592:	80 93 92 00 	sts	0x0092, r24
    1596:	29 c0       	rjmp	.+82     	; 0x15ea <EXT_INTERRUPT_Enable_voidINTx+0xaa>
		break;
	case EXT_INT1:
		SET_BIT(GICR_REG, GICR_INT1);
    1598:	ab e5       	ldi	r26, 0x5B	; 91
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e5       	ldi	r30, 0x5B	; 91
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 68       	ori	r24, 0x80	; 128
    15a4:	8c 93       	st	X, r24
		CallBackPtr_INT1 = copy_PtrtoFunc;
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	9b 81       	ldd	r25, Y+3	; 0x03
    15aa:	90 93 95 00 	sts	0x0095, r25
    15ae:	80 93 94 00 	sts	0x0094, r24
    15b2:	1b c0       	rjmp	.+54     	; 0x15ea <EXT_INTERRUPT_Enable_voidINTx+0xaa>
		break;
	case EXT_INT2:
		SET_BIT(GICR_REG, GICR_INT2);
    15b4:	ab e5       	ldi	r26, 0x5B	; 91
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	eb e5       	ldi	r30, 0x5B	; 91
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 62       	ori	r24, 0x20	; 32
    15c0:	8c 93       	st	X, r24
		CallBackPtr_INT2 = copy_PtrtoFunc;
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	9b 81       	ldd	r25, Y+3	; 0x03
    15c6:	90 93 91 00 	sts	0x0091, r25
    15ca:	80 93 90 00 	sts	0x0090, r24
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <EXT_INTERRUPT_Enable_voidINTx+0xaa>
		break;
	default:
		SET_BIT(GICR_REG, GICR_INT0);
    15d0:	ab e5       	ldi	r26, 0x5B	; 91
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	eb e5       	ldi	r30, 0x5B	; 91
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	80 64       	ori	r24, 0x40	; 64
    15dc:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	9b 81       	ldd	r25, Y+3	; 0x03
    15e2:	90 93 93 00 	sts	0x0093, r25
    15e6:	80 93 92 00 	sts	0x0092, r24
		break;
	}
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <EXT_INTERRUPT_Disable_voidINTx>:

// Enable External Interrupt INT0 & INT1 & INT2
void EXT_INTERRUPT_Disable_voidINTx(u8 copyINTx) {
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <EXT_INTERRUPT_Disable_voidINTx+0x6>
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
	switch(copyINTx) {
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3b 83       	std	Y+3, r19	; 0x03
    1610:	2a 83       	std	Y+2, r18	; 0x02
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	9b 81       	ldd	r25, Y+3	; 0x03
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	91 05       	cpc	r25, r1
    161a:	91 f0       	breq	.+36     	; 0x1640 <EXT_INTERRUPT_Disable_voidINTx+0x46>
    161c:	2a 81       	ldd	r18, Y+2	; 0x02
    161e:	3b 81       	ldd	r19, Y+3	; 0x03
    1620:	23 30       	cpi	r18, 0x03	; 3
    1622:	31 05       	cpc	r19, r1
    1624:	a9 f0       	breq	.+42     	; 0x1650 <EXT_INTERRUPT_Disable_voidINTx+0x56>
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	9b 81       	ldd	r25, Y+3	; 0x03
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	c1 f4       	brne	.+48     	; 0x1660 <EXT_INTERRUPT_Disable_voidINTx+0x66>
	case EXT_INT0:
		CLR_BIT(GICR_REG, GICR_INT0);
    1630:	ab e5       	ldi	r26, 0x5B	; 91
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	eb e5       	ldi	r30, 0x5B	; 91
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8f 7b       	andi	r24, 0xBF	; 191
    163c:	8c 93       	st	X, r24
    163e:	17 c0       	rjmp	.+46     	; 0x166e <EXT_INTERRUPT_Disable_voidINTx+0x74>
		break;
	case EXT_INT1:
		CLR_BIT(GICR_REG, GICR_INT1);
    1640:	ab e5       	ldi	r26, 0x5B	; 91
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	eb e5       	ldi	r30, 0x5B	; 91
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8f 77       	andi	r24, 0x7F	; 127
    164c:	8c 93       	st	X, r24
    164e:	0f c0       	rjmp	.+30     	; 0x166e <EXT_INTERRUPT_Disable_voidINTx+0x74>
		break;
	case EXT_INT2:
		CLR_BIT(GICR_REG, GICR_INT2);
    1650:	ab e5       	ldi	r26, 0x5B	; 91
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	eb e5       	ldi	r30, 0x5B	; 91
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 7d       	andi	r24, 0xDF	; 223
    165c:	8c 93       	st	X, r24
    165e:	07 c0       	rjmp	.+14     	; 0x166e <EXT_INTERRUPT_Disable_voidINTx+0x74>
		break;
	default:
		CLR_BIT(GICR_REG, GICR_INT0);
    1660:	ab e5       	ldi	r26, 0x5B	; 91
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	eb e5       	ldi	r30, 0x5B	; 91
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 7b       	andi	r24, 0xBF	; 191
    166c:	8c 93       	st	X, r24
		break;
	}
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <__vector_1>:

// Previous prototype __attribute__((signal, used));
// is to tell the compiler that I will use this function
// but not now, so don't optimize and delete it.
void __vector_1(void) __attribute__((signal, used));
void __vector_1(void) {
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT0 != NULL) {
    16a4:	80 91 92 00 	lds	r24, 0x0092
    16a8:	90 91 93 00 	lds	r25, 0x0093
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	29 f0       	breq	.+10     	; 0x16ba <__vector_1+0x40>
		CallBackPtr_INT0();
    16b0:	e0 91 92 00 	lds	r30, 0x0092
    16b4:	f0 91 93 00 	lds	r31, 0x0093
    16b8:	09 95       	icall
	}
}
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_2>:

void __vector_2(void) __attribute__((signal, used));
void __vector_2(void) {
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	2f 93       	push	r18
    16ec:	3f 93       	push	r19
    16ee:	4f 93       	push	r20
    16f0:	5f 93       	push	r21
    16f2:	6f 93       	push	r22
    16f4:	7f 93       	push	r23
    16f6:	8f 93       	push	r24
    16f8:	9f 93       	push	r25
    16fa:	af 93       	push	r26
    16fc:	bf 93       	push	r27
    16fe:	ef 93       	push	r30
    1700:	ff 93       	push	r31
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT1 != NULL) {
    170a:	80 91 94 00 	lds	r24, 0x0094
    170e:	90 91 95 00 	lds	r25, 0x0095
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	29 f0       	breq	.+10     	; 0x1720 <__vector_2+0x40>
		CallBackPtr_INT1();
    1716:	e0 91 94 00 	lds	r30, 0x0094
    171a:	f0 91 95 00 	lds	r31, 0x0095
    171e:	09 95       	icall
	}
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <__vector_3>:

void __vector_3(void) __attribute__((signal, used));
void __vector_3(void) {
    1746:	1f 92       	push	r1
    1748:	0f 92       	push	r0
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	0f 92       	push	r0
    174e:	11 24       	eor	r1, r1
    1750:	2f 93       	push	r18
    1752:	3f 93       	push	r19
    1754:	4f 93       	push	r20
    1756:	5f 93       	push	r21
    1758:	6f 93       	push	r22
    175a:	7f 93       	push	r23
    175c:	8f 93       	push	r24
    175e:	9f 93       	push	r25
    1760:	af 93       	push	r26
    1762:	bf 93       	push	r27
    1764:	ef 93       	push	r30
    1766:	ff 93       	push	r31
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT2 != NULL) {
    1770:	80 91 90 00 	lds	r24, 0x0090
    1774:	90 91 91 00 	lds	r25, 0x0091
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	29 f0       	breq	.+10     	; 0x1786 <__vector_3+0x40>
		CallBackPtr_INT2();
    177c:	e0 91 90 00 	lds	r30, 0x0090
    1780:	f0 91 91 00 	lds	r31, 0x0091
    1784:	09 95       	icall
	}
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <SEGMENT_voidInit>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_voidInit(u8 copy_u8portID) {
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <SEGMENT_voidInit+0x6>
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 SEGMENT_Driver_Checker = 0;
    17b8:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	84 30       	cpi	r24, 0x04	; 4
    17be:	18 f0       	brcs	.+6      	; 0x17c6 <SEGMENT_voidInit+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	1f c0       	rjmp	.+62     	; 0x1804 <SEGMENT_voidInit+0x58>
#elif (DIGITS_USED == 3)
		GPIO_voidSetPinDirection(COM_3_PORT, COM_3, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#elif (DIGITS_USED == 2)
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	62 e0       	ldi	r22, 0x02	; 2
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	63 e0       	ldi	r22, 0x03	; 3
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#endif

		/* These pins are for the BCD on the FARES Kit */
		GPIO_voidSetPinDirection(copy_u8portID, BCD_1, PIN_OUTPUT);
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_2, PIN_OUTPUT);
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_4, PIN_OUTPUT);
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_8, PIN_OUTPUT);
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	64 e0       	ldi	r22, 0x04	; 4
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>

		SEGMENT_Driver_Checker = SEGMENT_OK;
    1802:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <SEGMENT_voidDisplay>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
SEGMENT_Error_t SEGMENT_voidDisplay(u8 copy_u8portID, u8 copy_u8pinValue) {
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <SEGMENT_voidDisplay+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <SEGMENT_voidDisplay+0x8>
    1818:	0f 92       	push	r0
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	8a 83       	std	Y+2, r24	; 0x02
    1820:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 SEGMENT_Driver_Checker = 0;
    1822:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	84 30       	cpi	r24, 0x04	; 4
    1828:	18 f0       	brcs	.+6      	; 0x1830 <SEGMENT_voidDisplay+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	24 c1       	rjmp	.+584    	; 0x1a78 <SEGMENT_voidDisplay+0x268>
	}
	else if((copy_u8pinValue < 0 && copy_u8pinValue > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(copy_u8pinValue) {
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	3d 83       	std	Y+5, r19	; 0x05
    1838:	2c 83       	std	Y+4, r18	; 0x04
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	91 05       	cpc	r25, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <SEGMENT_voidDisplay+0x36>
    1844:	9b c0       	rjmp	.+310    	; 0x197c <SEGMENT_voidDisplay+0x16c>
    1846:	2c 81       	ldd	r18, Y+4	; 0x04
    1848:	3d 81       	ldd	r19, Y+5	; 0x05
    184a:	25 30       	cpi	r18, 0x05	; 5
    184c:	31 05       	cpc	r19, r1
    184e:	ec f4       	brge	.+58     	; 0x188a <SEGMENT_voidDisplay+0x7a>
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	9d 81       	ldd	r25, Y+5	; 0x05
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	91 05       	cpc	r25, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <SEGMENT_voidDisplay+0x4c>
    185a:	51 c0       	rjmp	.+162    	; 0x18fe <SEGMENT_voidDisplay+0xee>
    185c:	2c 81       	ldd	r18, Y+4	; 0x04
    185e:	3d 81       	ldd	r19, Y+5	; 0x05
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	2c f4       	brge	.+10     	; 0x1870 <SEGMENT_voidDisplay+0x60>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	99 f1       	breq	.+102    	; 0x18d4 <SEGMENT_voidDisplay+0xc4>
    186e:	03 c1       	rjmp	.+518    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
    1870:	2c 81       	ldd	r18, Y+4	; 0x04
    1872:	3d 81       	ldd	r19, Y+5	; 0x05
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <SEGMENT_voidDisplay+0x6c>
    187a:	56 c0       	rjmp	.+172    	; 0x1928 <SEGMENT_voidDisplay+0x118>
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	9d 81       	ldd	r25, Y+5	; 0x05
    1880:	83 30       	cpi	r24, 0x03	; 3
    1882:	91 05       	cpc	r25, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <SEGMENT_voidDisplay+0x78>
    1886:	65 c0       	rjmp	.+202    	; 0x1952 <SEGMENT_voidDisplay+0x142>
    1888:	f6 c0       	rjmp	.+492    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	27 30       	cpi	r18, 0x07	; 7
    1890:	31 05       	cpc	r19, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <SEGMENT_voidDisplay+0x86>
    1894:	b2 c0       	rjmp	.+356    	; 0x19fa <SEGMENT_voidDisplay+0x1ea>
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	88 30       	cpi	r24, 0x08	; 8
    189c:	91 05       	cpc	r25, r1
    189e:	6c f4       	brge	.+26     	; 0x18ba <SEGMENT_voidDisplay+0xaa>
    18a0:	2c 81       	ldd	r18, Y+4	; 0x04
    18a2:	3d 81       	ldd	r19, Y+5	; 0x05
    18a4:	25 30       	cpi	r18, 0x05	; 5
    18a6:	31 05       	cpc	r19, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <SEGMENT_voidDisplay+0x9c>
    18aa:	7d c0       	rjmp	.+250    	; 0x19a6 <SEGMENT_voidDisplay+0x196>
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	86 30       	cpi	r24, 0x06	; 6
    18b2:	91 05       	cpc	r25, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <SEGMENT_voidDisplay+0xa8>
    18b6:	8c c0       	rjmp	.+280    	; 0x19d0 <SEGMENT_voidDisplay+0x1c0>
    18b8:	de c0       	rjmp	.+444    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
    18ba:	2c 81       	ldd	r18, Y+4	; 0x04
    18bc:	3d 81       	ldd	r19, Y+5	; 0x05
    18be:	28 30       	cpi	r18, 0x08	; 8
    18c0:	31 05       	cpc	r19, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <SEGMENT_voidDisplay+0xb6>
    18c4:	af c0       	rjmp	.+350    	; 0x1a24 <SEGMENT_voidDisplay+0x214>
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	89 30       	cpi	r24, 0x09	; 9
    18cc:	91 05       	cpc	r25, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <SEGMENT_voidDisplay+0xc2>
    18d0:	be c0       	rjmp	.+380    	; 0x1a4e <SEGMENT_voidDisplay+0x23e>
    18d2:	d1 c0       	rjmp	.+418    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
			case 0:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	62 e0       	ldi	r22, 0x02	; 2
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	64 e0       	ldi	r22, 0x04	; 4
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    18fc:	bc c0       	rjmp	.+376    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
				break;
			case 1:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	41 e0       	ldi	r20, 0x01	; 1
    1904:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	62 e0       	ldi	r22, 0x02	; 2
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	64 e0       	ldi	r22, 0x04	; 4
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1926:	a7 c0       	rjmp	.+334    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
				break;
			case 2:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	61 e0       	ldi	r22, 0x01	; 1
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	64 e0       	ldi	r22, 0x04	; 4
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1950:	92 c0       	rjmp	.+292    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
				break;
			case 3:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	62 e0       	ldi	r22, 0x02	; 2
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	64 e0       	ldi	r22, 0x04	; 4
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    197a:	7d c0       	rjmp	.+250    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
				break;
			case 4:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	62 e0       	ldi	r22, 0x02	; 2
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	64 e0       	ldi	r22, 0x04	; 4
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    19a4:	68 c0       	rjmp	.+208    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
				break;
			case 5:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	62 e0       	ldi	r22, 0x02	; 2
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	64 e0       	ldi	r22, 0x04	; 4
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    19ce:	53 c0       	rjmp	.+166    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
				break;
			case 6:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	61 e0       	ldi	r22, 0x01	; 1
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	64 e0       	ldi	r22, 0x04	; 4
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    19f8:	3e c0       	rjmp	.+124    	; 0x1a76 <SEGMENT_voidDisplay+0x266>
				break;
			case 7:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	62 e0       	ldi	r22, 0x02	; 2
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	64 e0       	ldi	r22, 0x04	; 4
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1a22:	29 c0       	rjmp	.+82     	; 0x1a76 <SEGMENT_voidDisplay+0x266>
				break;
			case 8:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	62 e0       	ldi	r22, 0x02	; 2
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	64 e0       	ldi	r22, 0x04	; 4
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <SEGMENT_voidDisplay+0x266>
				break;
			case 9:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	41 e0       	ldi	r20, 0x01	; 1
    1a54:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	64 e0       	ldi	r22, 0x04	; 4
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    1a76:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <LED_voidInit>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_voidInit(u8 copy_u8portID, u8 copy_u8pinID) {
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <LED_voidInit+0x6>
    1a90:	0f 92       	push	r0
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	8a 83       	std	Y+2, r24	; 0x02
    1a98:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 LED_Driver_Checker = 0;
    1a9a:	19 82       	std	Y+1, r1	; 0x01
	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	18 f0       	brcs	.+6      	; 0x1aa8 <LED_voidInit+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	0c c0       	rjmp	.+24     	; 0x1ac0 <LED_voidInit+0x36>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	84 30       	cpi	r24, 0x04	; 4
    1aac:	18 f0       	brcs	.+6      	; 0x1ab4 <LED_voidInit+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	06 c0       	rjmp	.+12     	; 0x1ac0 <LED_voidInit+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_voidSetPinDirection(copy_u8portID, copy_u8pinID, PIN_OUTPUT);
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	6b 81       	ldd	r22, Y+3	; 0x03
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		LED_Driver_Checker = LED_OK;
    1abe:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <LED_voidOn>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_voidOn(u8 copy_u8portID, u8 copy_u8pinID) {
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <LED_voidOn+0x6>
    1ad4:	0f 92       	push	r0
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	8a 83       	std	Y+2, r24	; 0x02
    1adc:	6b 83       	std	Y+3, r22	; 0x03

	u8 LED_Driver_Checker = 0;
    1ade:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 30       	cpi	r24, 0x08	; 8
    1ae4:	18 f0       	brcs	.+6      	; 0x1aec <LED_voidOn+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	0c c0       	rjmp	.+24     	; 0x1b04 <LED_voidOn+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	84 30       	cpi	r24, 0x04	; 4
    1af0:	18 f0       	brcs	.+6      	; 0x1af8 <LED_voidOn+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	06 c0       	rjmp	.+12     	; 0x1b04 <LED_voidOn+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	6b 81       	ldd	r22, Y+3	; 0x03
    1afc:	41 e0       	ldi	r20, 0x01	; 1
    1afe:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    1b02:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <LED_voidOff>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_voidOff(u8 copy_u8portID, u8 copy_u8pinID) {
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <LED_voidOff+0x6>
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	8a 83       	std	Y+2, r24	; 0x02
    1b20:	6b 83       	std	Y+3, r22	; 0x03

	u8 LED_Driver_Checker = 0;
    1b22:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	88 30       	cpi	r24, 0x08	; 8
    1b28:	18 f0       	brcs	.+6      	; 0x1b30 <LED_voidOff+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	0c c0       	rjmp	.+24     	; 0x1b48 <LED_voidOff+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	18 f0       	brcs	.+6      	; 0x1b3c <LED_voidOff+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	06 c0       	rjmp	.+12     	; 0x1b48 <LED_voidOff+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    1b46:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <LED_voidToggle>:

LED_Error_t LED_voidToggle(u8 copy_u8portID, u8 copy_u8pinID) {
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <LED_voidToggle+0x6>
    1b5c:	0f 92       	push	r0
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	8a 83       	std	Y+2, r24	; 0x02
    1b64:	6b 83       	std	Y+3, r22	; 0x03

	u8 LED_Driver_Checker = 0;
    1b66:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	88 30       	cpi	r24, 0x08	; 8
    1b6c:	18 f0       	brcs	.+6      	; 0x1b74 <LED_voidToggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	0b c0       	rjmp	.+22     	; 0x1b8a <LED_voidToggle+0x34>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	84 30       	cpi	r24, 0x04	; 4
    1b78:	18 f0       	brcs	.+6      	; 0x1b80 <LED_voidToggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	05 c0       	rjmp	.+10     	; 0x1b8a <LED_voidToggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_voidTogglePin(copy_u8portID, copy_u8pinID);
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	6b 81       	ldd	r22, Y+3	; 0x03
    1b84:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_voidTogglePin>
			LED_Driver_Checker = LED_OK;
    1b88:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <LCD_voidInit>:

#include "LCD_INTERFACE.h"


// Initializes and enables the LCD Module to start functionality
void LCD_voidInit(void) {
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	6c 97       	sbiw	r28, 0x1c	; 28
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	63 e0       	ldi	r22, 0x03	; 3
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>

	// Initialize Enable Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	62 e0       	ldi	r22, 0x02	; 2
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 ea       	ldi	r26, 0xA0	; 160
    1bc6:	b1 e4       	ldi	r27, 0x41	; 65
    1bc8:	89 8f       	std	Y+25, r24	; 0x19
    1bca:	9a 8f       	std	Y+26, r25	; 0x1a
    1bcc:	ab 8f       	std	Y+27, r26	; 0x1b
    1bce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a e7       	ldi	r20, 0x7A	; 122
    1bde:	55 e4       	ldi	r21, 0x45	; 69
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8d 8b       	std	Y+21, r24	; 0x15
    1bea:	9e 8b       	std	Y+22, r25	; 0x16
    1bec:	af 8b       	std	Y+23, r26	; 0x17
    1bee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <LCD_voidInit+0x7a>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9c 8b       	std	Y+20, r25	; 0x14
    1c0e:	8b 8b       	std	Y+19, r24	; 0x13
    1c10:	3f c0       	rjmp	.+126    	; 0x1c90 <LCD_voidInit+0xf8>
	else if (__tmp > 65535)
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	4c f5       	brge	.+82     	; 0x1c7c <LCD_voidInit+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9c 8b       	std	Y+20, r25	; 0x14
    1c50:	8b 8b       	std	Y+19, r24	; 0x13
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <LCD_voidInit+0xda>
    1c54:	80 e9       	ldi	r24, 0x90	; 144
    1c56:	91 e0       	ldi	r25, 0x01	; 1
    1c58:	9a 8b       	std	Y+18, r25	; 0x12
    1c5a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c5c:	89 89       	ldd	r24, Y+17	; 0x11
    1c5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_voidInit+0xc8>
    1c64:	9a 8b       	std	Y+18, r25	; 0x12
    1c66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c68:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	9c 8b       	std	Y+20, r25	; 0x14
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	8b 89       	ldd	r24, Y+19	; 0x13
    1c74:	9c 89       	ldd	r25, Y+20	; 0x14
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <LCD_voidInit+0xbc>
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <LCD_voidInit+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c80:	8f 89       	ldd	r24, Y+23	; 0x17
    1c82:	98 8d       	ldd	r25, Y+24	; 0x18
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
    1c8e:	8b 8b       	std	Y+19, r24	; 0x13
    1c90:	8b 89       	ldd	r24, Y+19	; 0x13
    1c92:	9c 89       	ldd	r25, Y+20	; 0x14
    1c94:	98 8b       	std	Y+16, r25	; 0x10
    1c96:	8f 87       	std	Y+15, r24	; 0x0f
    1c98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9a:	98 89       	ldd	r25, Y+16	; 0x10
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <LCD_voidInit+0x104>
    1ca0:	98 8b       	std	Y+16, r25	; 0x10
    1ca2:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_voidSetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);

		LCD_voidSendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}
	else {
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	41 e0       	ldi	r20, 0x01	; 1
    1caa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	61 e0       	ldi	r22, 0x01	; 1
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	62 e0       	ldi	r22, 0x02	; 2
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	64 e0       	ldi	r22, 0x04	; 4
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>

		LCD_voidSendCommand(LCD_TWO_LINE_FOUR_BIT_MODE);
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_TWO_LINE_FOUR_BIT);
    1cd2:	88 e2       	ldi	r24, 0x28	; 40
    1cd4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>

//		LCD_voidSendCommand(LCD_TWO_LINE_FOUR_BIT_INIT1);
//		LCD_voidSendCommand(LCD_TWO_LINE_FOUR_BIT_INIT2);
	}

	LCD_voidSendCommand(LCD_CURSOR_OFF);
    1cd8:	8c e0       	ldi	r24, 0x0C	; 12
    1cda:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e0       	ldi	r26, 0x00	; 0
    1cea:	b0 e4       	ldi	r27, 0x40	; 64
    1cec:	8b 87       	std	Y+11, r24	; 0x0b
    1cee:	9c 87       	std	Y+12, r25	; 0x0c
    1cf0:	ad 87       	std	Y+13, r26	; 0x0d
    1cf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a e7       	ldi	r20, 0x7A	; 122
    1d02:	55 e4       	ldi	r21, 0x45	; 69
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8f 83       	std	Y+7, r24	; 0x07
    1d0e:	98 87       	std	Y+8, r25	; 0x08
    1d10:	a9 87       	std	Y+9, r26	; 0x09
    1d12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5f e3       	ldi	r21, 0x3F	; 63
    1d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <LCD_voidInit+0x19e>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <LCD_voidInit+0x21c>
	else if (__tmp > 65535)
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	3f ef       	ldi	r19, 0xFF	; 255
    1d42:	4f e7       	ldi	r20, 0x7F	; 127
    1d44:	57 e4       	ldi	r21, 0x47	; 71
    1d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	4c f5       	brge	.+82     	; 0x1da0 <LCD_voidInit+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e2       	ldi	r20, 0x20	; 32
    1d5c:	51 e4       	ldi	r21, 0x41	; 65
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <LCD_voidInit+0x1fe>
    1d78:	80 e9       	ldi	r24, 0x90	; 144
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	9c 83       	std	Y+4, r25	; 0x04
    1d7e:	8b 83       	std	Y+3, r24	; 0x03
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_voidInit+0x1ec>
    1d88:	9c 83       	std	Y+4, r25	; 0x04
    1d8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	69 f7       	brne	.-38     	; 0x1d78 <LCD_voidInit+0x1e0>
    1d9e:	14 c0       	rjmp	.+40     	; 0x1dc8 <LCD_voidInit+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_voidInit+0x228>
    1dc4:	9a 83       	std	Y+2, r25	; 0x02
    1dc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCommand(LCD_ENTRY_MODE);
    1dc8:	86 e0       	ldi	r24, 0x06	; 6
    1dca:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>
//	_delay_ms(2);

//	LCD_vidSendCommand(0x00);
//	LCD_vidSendCommand(0x60);

}
    1dce:	6c 96       	adiw	r28, 0x1c	; 28
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <LCD_voidSendCommand>:


// Sends a command to the LCD
void LCD_voidSendCommand(u8 copy_u8Command) {
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	c3 56       	subi	r28, 0x63	; 99
    1dee:	d0 40       	sbci	r29, 0x00	; 0
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	ed 59       	subi	r30, 0x9D	; 157
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 83       	st	Z, r24

	// Set RS Pin to '0'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	63 e0       	ldi	r22, 0x03	; 3
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e1 5a       	subi	r30, 0xA1	; 161
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a0 e8       	ldi	r26, 0x80	; 128
    1e18:	bf e3       	ldi	r27, 0x3F	; 63
    1e1a:	80 83       	st	Z, r24
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	a2 83       	std	Z+2, r26	; 0x02
    1e20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e22:	8e 01       	movw	r16, r28
    1e24:	05 5a       	subi	r16, 0xA5	; 165
    1e26:	1f 4f       	sbci	r17, 0xFF	; 255
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e1 5a       	subi	r30, 0xA1	; 161
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	4a e7       	ldi	r20, 0x7A	; 122
    1e3c:	55 e4       	ldi	r21, 0x45	; 69
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	f8 01       	movw	r30, r16
    1e48:	80 83       	st	Z, r24
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	a2 83       	std	Z+2, r26	; 0x02
    1e4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e50:	fe 01       	movw	r30, r28
    1e52:	e5 5a       	subi	r30, 0xA5	; 165
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	60 81       	ld	r22, Z
    1e58:	71 81       	ldd	r23, Z+1	; 0x01
    1e5a:	82 81       	ldd	r24, Z+2	; 0x02
    1e5c:	93 81       	ldd	r25, Z+3	; 0x03
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	44 f4       	brge	.+16     	; 0x1e7e <LCD_voidSendCommand+0x9e>
		__ticks = 1;
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e7 5a       	subi	r30, 0xA7	; 167
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	64 c0       	rjmp	.+200    	; 0x1f46 <LCD_voidSendCommand+0x166>
	else if (__tmp > 65535)
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e5 5a       	subi	r30, 0xA5	; 165
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	60 81       	ld	r22, Z
    1e86:	71 81       	ldd	r23, Z+1	; 0x01
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	3f ef       	ldi	r19, 0xFF	; 255
    1e90:	4f e7       	ldi	r20, 0x7F	; 127
    1e92:	57 e4       	ldi	r21, 0x47	; 71
    1e94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e98:	18 16       	cp	r1, r24
    1e9a:	0c f0       	brlt	.+2      	; 0x1e9e <LCD_voidSendCommand+0xbe>
    1e9c:	43 c0       	rjmp	.+134    	; 0x1f24 <LCD_voidSendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e1 5a       	subi	r30, 0xA1	; 161
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e2       	ldi	r20, 0x20	; 32
    1eb2:	51 e4       	ldi	r21, 0x41	; 65
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8e 01       	movw	r16, r28
    1ebe:	07 5a       	subi	r16, 0xA7	; 167
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	f8 01       	movw	r30, r16
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	80 83       	st	Z, r24
    1ed4:	1f c0       	rjmp	.+62     	; 0x1f14 <LCD_voidSendCommand+0x134>
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e9 5a       	subi	r30, 0xA9	; 169
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 e9       	ldi	r24, 0x90	; 144
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	80 83       	st	Z, r24
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e9 5a       	subi	r30, 0xA9	; 169
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_voidSendCommand+0x10e>
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e9 5a       	subi	r30, 0xA9	; 169
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efc:	de 01       	movw	r26, r28
    1efe:	a7 5a       	subi	r26, 0xA7	; 167
    1f00:	bf 4f       	sbci	r27, 0xFF	; 255
    1f02:	fe 01       	movw	r30, r28
    1f04:	e7 5a       	subi	r30, 0xA7	; 167
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	11 96       	adiw	r26, 0x01	; 1
    1f10:	9c 93       	st	X, r25
    1f12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	fe 01       	movw	r30, r28
    1f16:	e7 5a       	subi	r30, 0xA7	; 167
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 81       	ld	r24, Z
    1f1c:	91 81       	ldd	r25, Z+1	; 0x01
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	d1 f6       	brne	.-76     	; 0x1ed6 <LCD_voidSendCommand+0xf6>
    1f22:	27 c0       	rjmp	.+78     	; 0x1f72 <LCD_voidSendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	8e 01       	movw	r16, r28
    1f26:	07 5a       	subi	r16, 0xA7	; 167
    1f28:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	e5 5a       	subi	r30, 0xA5	; 165
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	f8 01       	movw	r30, r16
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	80 83       	st	Z, r24
    1f46:	de 01       	movw	r26, r28
    1f48:	ab 5a       	subi	r26, 0xAB	; 171
    1f4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e7 5a       	subi	r30, 0xA7	; 167
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 81       	ld	r24, Z
    1f54:	91 81       	ldd	r25, Z+1	; 0x01
    1f56:	8d 93       	st	X+, r24
    1f58:	9c 93       	st	X, r25
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	eb 5a       	subi	r30, 0xAB	; 171
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <LCD_voidSendCommand+0x184>
    1f68:	fe 01       	movw	r30, r28
    1f6a:	eb 5a       	subi	r30, 0xAB	; 171
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	62 e0       	ldi	r22, 0x02	; 2
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ef 5a       	subi	r30, 0xAF	; 175
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a0 e0       	ldi	r26, 0x00	; 0
    1f88:	b0 e4       	ldi	r27, 0x40	; 64
    1f8a:	80 83       	st	Z, r24
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	a2 83       	std	Z+2, r26	; 0x02
    1f90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f92:	8e 01       	movw	r16, r28
    1f94:	03 5b       	subi	r16, 0xB3	; 179
    1f96:	1f 4f       	sbci	r17, 0xFF	; 255
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ef 5a       	subi	r30, 0xAF	; 175
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a e7       	ldi	r20, 0x7A	; 122
    1fac:	55 e4       	ldi	r21, 0x45	; 69
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	f8 01       	movw	r30, r16
    1fb8:	80 83       	st	Z, r24
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	a2 83       	std	Z+2, r26	; 0x02
    1fbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e3 5b       	subi	r30, 0xB3	; 179
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	44 f4       	brge	.+16     	; 0x1fee <LCD_voidSendCommand+0x20e>
		__ticks = 1;
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e5 5b       	subi	r30, 0xB5	; 181
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
    1fec:	64 c0       	rjmp	.+200    	; 0x20b6 <LCD_voidSendCommand+0x2d6>
	else if (__tmp > 65535)
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e3 5b       	subi	r30, 0xB3	; 179
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	0c f0       	brlt	.+2      	; 0x200e <LCD_voidSendCommand+0x22e>
    200c:	43 c0       	rjmp	.+134    	; 0x2094 <LCD_voidSendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	fe 01       	movw	r30, r28
    2010:	ef 5a       	subi	r30, 0xAF	; 175
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8e 01       	movw	r16, r28
    202e:	05 5b       	subi	r16, 0xB5	; 181
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	f8 01       	movw	r30, r16
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	80 83       	st	Z, r24
    2044:	1f c0       	rjmp	.+62     	; 0x2084 <LCD_voidSendCommand+0x2a4>
    2046:	fe 01       	movw	r30, r28
    2048:	e7 5b       	subi	r30, 0xB7	; 183
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 e9       	ldi	r24, 0x90	; 144
    204e:	91 e0       	ldi	r25, 0x01	; 1
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	fe 01       	movw	r30, r28
    2056:	e7 5b       	subi	r30, 0xB7	; 183
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <LCD_voidSendCommand+0x27e>
    2062:	fe 01       	movw	r30, r28
    2064:	e7 5b       	subi	r30, 0xB7	; 183
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	de 01       	movw	r26, r28
    206e:	a5 5b       	subi	r26, 0xB5	; 181
    2070:	bf 4f       	sbci	r27, 0xFF	; 255
    2072:	fe 01       	movw	r30, r28
    2074:	e5 5b       	subi	r30, 0xB5	; 181
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	11 96       	adiw	r26, 0x01	; 1
    2080:	9c 93       	st	X, r25
    2082:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2084:	fe 01       	movw	r30, r28
    2086:	e5 5b       	subi	r30, 0xB5	; 181
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	d1 f6       	brne	.-76     	; 0x2046 <LCD_voidSendCommand+0x266>
    2092:	27 c0       	rjmp	.+78     	; 0x20e2 <LCD_voidSendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2094:	8e 01       	movw	r16, r28
    2096:	05 5b       	subi	r16, 0xB5	; 181
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	fe 01       	movw	r30, r28
    209c:	e3 5b       	subi	r30, 0xB3	; 179
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	f8 01       	movw	r30, r16
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
    20b6:	de 01       	movw	r26, r28
    20b8:	a9 5b       	subi	r26, 0xB9	; 185
    20ba:	bf 4f       	sbci	r27, 0xFF	; 255
    20bc:	fe 01       	movw	r30, r28
    20be:	e5 5b       	subi	r30, 0xB5	; 181
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	8d 93       	st	X+, r24
    20c8:	9c 93       	st	X, r25
    20ca:	fe 01       	movw	r30, r28
    20cc:	e9 5b       	subi	r30, 0xB9	; 185
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_voidSendCommand+0x2f4>
    20d8:	fe 01       	movw	r30, r28
    20da:	e9 5b       	subi	r30, 0xB9	; 185
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
	}
	else {
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
    20e2:	fe 01       	movw	r30, r28
    20e4:	ed 59       	subi	r30, 0x9D	; 157
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	82 95       	swap	r24
    20ec:	8f 70       	andi	r24, 0x0F	; 15
    20ee:	98 2f       	mov	r25, r24
    20f0:	91 70       	andi	r25, 0x01	; 1
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	49 2f       	mov	r20, r25
    20f8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
    20fc:	fe 01       	movw	r30, r28
    20fe:	ed 59       	subi	r30, 0x9D	; 157
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	82 95       	swap	r24
    2106:	86 95       	lsr	r24
    2108:	87 70       	andi	r24, 0x07	; 7
    210a:	98 2f       	mov	r25, r24
    210c:	91 70       	andi	r25, 0x01	; 1
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	49 2f       	mov	r20, r25
    2114:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
    2118:	fe 01       	movw	r30, r28
    211a:	ed 59       	subi	r30, 0x9D	; 157
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	82 95       	swap	r24
    2122:	86 95       	lsr	r24
    2124:	86 95       	lsr	r24
    2126:	83 70       	andi	r24, 0x03	; 3
    2128:	98 2f       	mov	r25, r24
    212a:	91 70       	andi	r25, 0x01	; 1
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	62 e0       	ldi	r22, 0x02	; 2
    2130:	49 2f       	mov	r20, r25
    2132:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
    2136:	fe 01       	movw	r30, r28
    2138:	ed 59       	subi	r30, 0x9D	; 157
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	80 81       	ld	r24, Z
    213e:	98 2f       	mov	r25, r24
    2140:	99 1f       	adc	r25, r25
    2142:	99 27       	eor	r25, r25
    2144:	99 1f       	adc	r25, r25
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	64 e0       	ldi	r22, 0x04	; 4
    214a:	49 2f       	mov	r20, r25
    214c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2150:	fe 01       	movw	r30, r28
    2152:	ed 5b       	subi	r30, 0xBD	; 189
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 e0       	ldi	r26, 0x00	; 0
    215c:	b0 e4       	ldi	r27, 0x40	; 64
    215e:	80 83       	st	Z, r24
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	a2 83       	std	Z+2, r26	; 0x02
    2164:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2166:	8e 01       	movw	r16, r28
    2168:	01 5c       	subi	r16, 0xC1	; 193
    216a:	1f 4f       	sbci	r17, 0xFF	; 255
    216c:	fe 01       	movw	r30, r28
    216e:	ed 5b       	subi	r30, 0xBD	; 189
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a e7       	ldi	r20, 0x7A	; 122
    2180:	55 e4       	ldi	r21, 0x45	; 69
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	f8 01       	movw	r30, r16
    218c:	80 83       	st	Z, r24
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	a2 83       	std	Z+2, r26	; 0x02
    2192:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2194:	fe 01       	movw	r30, r28
    2196:	ff 96       	adiw	r30, 0x3f	; 63
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	2c f4       	brge	.+10     	; 0x21ba <LCD_voidSendCommand+0x3da>
		__ticks = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	9e af       	std	Y+62, r25	; 0x3e
    21b6:	8d af       	std	Y+61, r24	; 0x3d
    21b8:	46 c0       	rjmp	.+140    	; 0x2246 <LCD_voidSendCommand+0x466>
	else if (__tmp > 65535)
    21ba:	fe 01       	movw	r30, r28
    21bc:	ff 96       	adiw	r30, 0x3f	; 63
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	64 f5       	brge	.+88     	; 0x222e <LCD_voidSendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	fe 01       	movw	r30, r28
    21d8:	ed 5b       	subi	r30, 0xBD	; 189
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e2       	ldi	r20, 0x20	; 32
    21ea:	51 e4       	ldi	r21, 0x41	; 65
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	bc 01       	movw	r22, r24
    21f6:	cd 01       	movw	r24, r26
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e af       	std	Y+62, r25	; 0x3e
    2202:	8d af       	std	Y+61, r24	; 0x3d
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <LCD_voidSendCommand+0x444>
    2206:	80 e9       	ldi	r24, 0x90	; 144
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	9c af       	std	Y+60, r25	; 0x3c
    220c:	8b af       	std	Y+59, r24	; 0x3b
    220e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2210:	9c ad       	ldd	r25, Y+60	; 0x3c
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_voidSendCommand+0x432>
    2216:	9c af       	std	Y+60, r25	; 0x3c
    2218:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	8d ad       	ldd	r24, Y+61	; 0x3d
    221c:	9e ad       	ldd	r25, Y+62	; 0x3e
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	9e af       	std	Y+62, r25	; 0x3e
    2222:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	8d ad       	ldd	r24, Y+61	; 0x3d
    2226:	9e ad       	ldd	r25, Y+62	; 0x3e
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	69 f7       	brne	.-38     	; 0x2206 <LCD_voidSendCommand+0x426>
    222c:	16 c0       	rjmp	.+44     	; 0x225a <LCD_voidSendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	fe 01       	movw	r30, r28
    2230:	ff 96       	adiw	r30, 0x3f	; 63
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	9e af       	std	Y+62, r25	; 0x3e
    2244:	8d af       	std	Y+61, r24	; 0x3d
    2246:	8d ad       	ldd	r24, Y+61	; 0x3d
    2248:	9e ad       	ldd	r25, Y+62	; 0x3e
    224a:	9a af       	std	Y+58, r25	; 0x3a
    224c:	89 af       	std	Y+57, r24	; 0x39
    224e:	89 ad       	ldd	r24, Y+57	; 0x39
    2250:	9a ad       	ldd	r25, Y+58	; 0x3a
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_voidSendCommand+0x472>
    2256:	9a af       	std	Y+58, r25	; 0x3a
    2258:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2);

		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	62 e0       	ldi	r22, 0x02	; 2
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e0       	ldi	r26, 0x00	; 0
    226a:	b0 e4       	ldi	r27, 0x40	; 64
    226c:	8d ab       	std	Y+53, r24	; 0x35
    226e:	9e ab       	std	Y+54, r25	; 0x36
    2270:	af ab       	std	Y+55, r26	; 0x37
    2272:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	6d a9       	ldd	r22, Y+53	; 0x35
    2276:	7e a9       	ldd	r23, Y+54	; 0x36
    2278:	8f a9       	ldd	r24, Y+55	; 0x37
    227a:	98 ad       	ldd	r25, Y+56	; 0x38
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a e7       	ldi	r20, 0x7A	; 122
    2282:	55 e4       	ldi	r21, 0x45	; 69
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	89 ab       	std	Y+49, r24	; 0x31
    228e:	9a ab       	std	Y+50, r25	; 0x32
    2290:	ab ab       	std	Y+51, r26	; 0x33
    2292:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2294:	69 a9       	ldd	r22, Y+49	; 0x31
    2296:	7a a9       	ldd	r23, Y+50	; 0x32
    2298:	8b a9       	ldd	r24, Y+51	; 0x33
    229a:	9c a9       	ldd	r25, Y+52	; 0x34
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <LCD_voidSendCommand+0x4d6>
		__ticks = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	98 ab       	std	Y+48, r25	; 0x30
    22b2:	8f a7       	std	Y+47, r24	; 0x2f
    22b4:	3f c0       	rjmp	.+126    	; 0x2334 <LCD_voidSendCommand+0x554>
	else if (__tmp > 65535)
    22b6:	69 a9       	ldd	r22, Y+49	; 0x31
    22b8:	7a a9       	ldd	r23, Y+50	; 0x32
    22ba:	8b a9       	ldd	r24, Y+51	; 0x33
    22bc:	9c a9       	ldd	r25, Y+52	; 0x34
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	4c f5       	brge	.+82     	; 0x2320 <LCD_voidSendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	6d a9       	ldd	r22, Y+53	; 0x35
    22d0:	7e a9       	ldd	r23, Y+54	; 0x36
    22d2:	8f a9       	ldd	r24, Y+55	; 0x37
    22d4:	98 ad       	ldd	r25, Y+56	; 0x38
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	98 ab       	std	Y+48, r25	; 0x30
    22f4:	8f a7       	std	Y+47, r24	; 0x2f
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <LCD_voidSendCommand+0x536>
    22f8:	80 e9       	ldi	r24, 0x90	; 144
    22fa:	91 e0       	ldi	r25, 0x01	; 1
    22fc:	9e a7       	std	Y+46, r25	; 0x2e
    22fe:	8d a7       	std	Y+45, r24	; 0x2d
    2300:	8d a5       	ldd	r24, Y+45	; 0x2d
    2302:	9e a5       	ldd	r25, Y+46	; 0x2e
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_voidSendCommand+0x524>
    2308:	9e a7       	std	Y+46, r25	; 0x2e
    230a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	8f a5       	ldd	r24, Y+47	; 0x2f
    230e:	98 a9       	ldd	r25, Y+48	; 0x30
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	98 ab       	std	Y+48, r25	; 0x30
    2314:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	8f a5       	ldd	r24, Y+47	; 0x2f
    2318:	98 a9       	ldd	r25, Y+48	; 0x30
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	69 f7       	brne	.-38     	; 0x22f8 <LCD_voidSendCommand+0x518>
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <LCD_voidSendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	69 a9       	ldd	r22, Y+49	; 0x31
    2322:	7a a9       	ldd	r23, Y+50	; 0x32
    2324:	8b a9       	ldd	r24, Y+51	; 0x33
    2326:	9c a9       	ldd	r25, Y+52	; 0x34
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	98 ab       	std	Y+48, r25	; 0x30
    2332:	8f a7       	std	Y+47, r24	; 0x2f
    2334:	8f a5       	ldd	r24, Y+47	; 0x2f
    2336:	98 a9       	ldd	r25, Y+48	; 0x30
    2338:	9c a7       	std	Y+44, r25	; 0x2c
    233a:	8b a7       	std	Y+43, r24	; 0x2b
    233c:	8b a5       	ldd	r24, Y+43	; 0x2b
    233e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <LCD_voidSendCommand+0x560>
    2344:	9c a7       	std	Y+44, r25	; 0x2c
    2346:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	62 e0       	ldi	r22, 0x02	; 2
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e4       	ldi	r27, 0x40	; 64
    235a:	8f a3       	std	Y+39, r24	; 0x27
    235c:	98 a7       	std	Y+40, r25	; 0x28
    235e:	a9 a7       	std	Y+41, r26	; 0x29
    2360:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2362:	6f a1       	ldd	r22, Y+39	; 0x27
    2364:	78 a5       	ldd	r23, Y+40	; 0x28
    2366:	89 a5       	ldd	r24, Y+41	; 0x29
    2368:	9a a5       	ldd	r25, Y+42	; 0x2a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	4a e7       	ldi	r20, 0x7A	; 122
    2370:	55 e4       	ldi	r21, 0x45	; 69
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8b a3       	std	Y+35, r24	; 0x23
    237c:	9c a3       	std	Y+36, r25	; 0x24
    237e:	ad a3       	std	Y+37, r26	; 0x25
    2380:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2382:	6b a1       	ldd	r22, Y+35	; 0x23
    2384:	7c a1       	ldd	r23, Y+36	; 0x24
    2386:	8d a1       	ldd	r24, Y+37	; 0x25
    2388:	9e a1       	ldd	r25, Y+38	; 0x26
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	2c f4       	brge	.+10     	; 0x23a4 <LCD_voidSendCommand+0x5c4>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9a a3       	std	Y+34, r25	; 0x22
    23a0:	89 a3       	std	Y+33, r24	; 0x21
    23a2:	3f c0       	rjmp	.+126    	; 0x2422 <LCD_voidSendCommand+0x642>
	else if (__tmp > 65535)
    23a4:	6b a1       	ldd	r22, Y+35	; 0x23
    23a6:	7c a1       	ldd	r23, Y+36	; 0x24
    23a8:	8d a1       	ldd	r24, Y+37	; 0x25
    23aa:	9e a1       	ldd	r25, Y+38	; 0x26
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	3f ef       	ldi	r19, 0xFF	; 255
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	57 e4       	ldi	r21, 0x47	; 71
    23b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	4c f5       	brge	.+82     	; 0x240e <LCD_voidSendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	6f a1       	ldd	r22, Y+39	; 0x27
    23be:	78 a5       	ldd	r23, Y+40	; 0x28
    23c0:	89 a5       	ldd	r24, Y+41	; 0x29
    23c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9a a3       	std	Y+34, r25	; 0x22
    23e2:	89 a3       	std	Y+33, r24	; 0x21
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <LCD_voidSendCommand+0x624>
    23e6:	80 e9       	ldi	r24, 0x90	; 144
    23e8:	91 e0       	ldi	r25, 0x01	; 1
    23ea:	98 a3       	std	Y+32, r25	; 0x20
    23ec:	8f 8f       	std	Y+31, r24	; 0x1f
    23ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23f0:	98 a1       	ldd	r25, Y+32	; 0x20
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_voidSendCommand+0x612>
    23f6:	98 a3       	std	Y+32, r25	; 0x20
    23f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fa:	89 a1       	ldd	r24, Y+33	; 0x21
    23fc:	9a a1       	ldd	r25, Y+34	; 0x22
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	9a a3       	std	Y+34, r25	; 0x22
    2402:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	89 a1       	ldd	r24, Y+33	; 0x21
    2406:	9a a1       	ldd	r25, Y+34	; 0x22
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f7       	brne	.-38     	; 0x23e6 <LCD_voidSendCommand+0x606>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <LCD_voidSendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	6b a1       	ldd	r22, Y+35	; 0x23
    2410:	7c a1       	ldd	r23, Y+36	; 0x24
    2412:	8d a1       	ldd	r24, Y+37	; 0x25
    2414:	9e a1       	ldd	r25, Y+38	; 0x26
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9a a3       	std	Y+34, r25	; 0x22
    2420:	89 a3       	std	Y+33, r24	; 0x21
    2422:	89 a1       	ldd	r24, Y+33	; 0x21
    2424:	9a a1       	ldd	r25, Y+34	; 0x22
    2426:	9e 8f       	std	Y+30, r25	; 0x1e
    2428:	8d 8f       	std	Y+29, r24	; 0x1d
    242a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    242c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_voidSendCommand+0x64e>
    2432:	9e 8f       	std	Y+30, r25	; 0x1e
    2434:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
    2436:	fe 01       	movw	r30, r28
    2438:	ed 59       	subi	r30, 0x9D	; 157
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	98 2f       	mov	r25, r24
    2440:	91 70       	andi	r25, 0x01	; 1
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	49 2f       	mov	r20, r25
    2448:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
    244c:	fe 01       	movw	r30, r28
    244e:	ed 59       	subi	r30, 0x9D	; 157
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	86 95       	lsr	r24
    2456:	98 2f       	mov	r25, r24
    2458:	91 70       	andi	r25, 0x01	; 1
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	61 e0       	ldi	r22, 0x01	; 1
    245e:	49 2f       	mov	r20, r25
    2460:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
    2464:	fe 01       	movw	r30, r28
    2466:	ed 59       	subi	r30, 0x9D	; 157
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	86 95       	lsr	r24
    246e:	86 95       	lsr	r24
    2470:	98 2f       	mov	r25, r24
    2472:	91 70       	andi	r25, 0x01	; 1
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	62 e0       	ldi	r22, 0x02	; 2
    2478:	49 2f       	mov	r20, r25
    247a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
    247e:	fe 01       	movw	r30, r28
    2480:	ed 59       	subi	r30, 0x9D	; 157
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	86 95       	lsr	r24
    2488:	86 95       	lsr	r24
    248a:	86 95       	lsr	r24
    248c:	98 2f       	mov	r25, r24
    248e:	91 70       	andi	r25, 0x01	; 1
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	64 e0       	ldi	r22, 0x04	; 4
    2494:	49 2f       	mov	r20, r25
    2496:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	a0 e0       	ldi	r26, 0x00	; 0
    24a0:	b0 e4       	ldi	r27, 0x40	; 64
    24a2:	89 8f       	std	Y+25, r24	; 0x19
    24a4:	9a 8f       	std	Y+26, r25	; 0x1a
    24a6:	ab 8f       	std	Y+27, r26	; 0x1b
    24a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24aa:	69 8d       	ldd	r22, Y+25	; 0x19
    24ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a e7       	ldi	r20, 0x7A	; 122
    24b8:	55 e4       	ldi	r21, 0x45	; 69
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	8d 8b       	std	Y+21, r24	; 0x15
    24c4:	9e 8b       	std	Y+22, r25	; 0x16
    24c6:	af 8b       	std	Y+23, r26	; 0x17
    24c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ca:	6d 89       	ldd	r22, Y+21	; 0x15
    24cc:	7e 89       	ldd	r23, Y+22	; 0x16
    24ce:	8f 89       	ldd	r24, Y+23	; 0x17
    24d0:	98 8d       	ldd	r25, Y+24	; 0x18
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	2c f4       	brge	.+10     	; 0x24ec <LCD_voidSendCommand+0x70c>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9c 8b       	std	Y+20, r25	; 0x14
    24e8:	8b 8b       	std	Y+19, r24	; 0x13
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <LCD_voidSendCommand+0x78a>
	else if (__tmp > 65535)
    24ec:	6d 89       	ldd	r22, Y+21	; 0x15
    24ee:	7e 89       	ldd	r23, Y+22	; 0x16
    24f0:	8f 89       	ldd	r24, Y+23	; 0x17
    24f2:	98 8d       	ldd	r25, Y+24	; 0x18
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	4c f5       	brge	.+82     	; 0x2556 <LCD_voidSendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	69 8d       	ldd	r22, Y+25	; 0x19
    2506:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2508:	8b 8d       	ldd	r24, Y+27	; 0x1b
    250a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9c 8b       	std	Y+20, r25	; 0x14
    252a:	8b 8b       	std	Y+19, r24	; 0x13
    252c:	0f c0       	rjmp	.+30     	; 0x254c <LCD_voidSendCommand+0x76c>
    252e:	80 e9       	ldi	r24, 0x90	; 144
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	9a 8b       	std	Y+18, r25	; 0x12
    2534:	89 8b       	std	Y+17, r24	; 0x11
    2536:	89 89       	ldd	r24, Y+17	; 0x11
    2538:	9a 89       	ldd	r25, Y+18	; 0x12
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <LCD_voidSendCommand+0x75a>
    253e:	9a 8b       	std	Y+18, r25	; 0x12
    2540:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	8b 89       	ldd	r24, Y+19	; 0x13
    2544:	9c 89       	ldd	r25, Y+20	; 0x14
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	9c 8b       	std	Y+20, r25	; 0x14
    254a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	8b 89       	ldd	r24, Y+19	; 0x13
    254e:	9c 89       	ldd	r25, Y+20	; 0x14
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f7       	brne	.-38     	; 0x252e <LCD_voidSendCommand+0x74e>
    2554:	14 c0       	rjmp	.+40     	; 0x257e <LCD_voidSendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	6d 89       	ldd	r22, Y+21	; 0x15
    2558:	7e 89       	ldd	r23, Y+22	; 0x16
    255a:	8f 89       	ldd	r24, Y+23	; 0x17
    255c:	98 8d       	ldd	r25, Y+24	; 0x18
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9c 8b       	std	Y+20, r25	; 0x14
    2568:	8b 8b       	std	Y+19, r24	; 0x13
    256a:	8b 89       	ldd	r24, Y+19	; 0x13
    256c:	9c 89       	ldd	r25, Y+20	; 0x14
    256e:	98 8b       	std	Y+16, r25	; 0x10
    2570:	8f 87       	std	Y+15, r24	; 0x0f
    2572:	8f 85       	ldd	r24, Y+15	; 0x0f
    2574:	98 89       	ldd	r25, Y+16	; 0x10
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <LCD_voidSendCommand+0x796>
    257a:	98 8b       	std	Y+16, r25	; 0x10
    257c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);

		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	62 e0       	ldi	r22, 0x02	; 2
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a0 e0       	ldi	r26, 0x00	; 0
    258e:	b0 e4       	ldi	r27, 0x40	; 64
    2590:	8b 87       	std	Y+11, r24	; 0x0b
    2592:	9c 87       	std	Y+12, r25	; 0x0c
    2594:	ad 87       	std	Y+13, r26	; 0x0d
    2596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	4a e7       	ldi	r20, 0x7A	; 122
    25a6:	55 e4       	ldi	r21, 0x45	; 69
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8f 83       	std	Y+7, r24	; 0x07
    25b2:	98 87       	std	Y+8, r25	; 0x08
    25b4:	a9 87       	std	Y+9, r26	; 0x09
    25b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ba:	78 85       	ldd	r23, Y+8	; 0x08
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	2c f4       	brge	.+10     	; 0x25da <LCD_voidSendCommand+0x7fa>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <LCD_voidSendCommand+0x878>
	else if (__tmp > 65535)
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	3f ef       	ldi	r19, 0xFF	; 255
    25e6:	4f e7       	ldi	r20, 0x7F	; 127
    25e8:	57 e4       	ldi	r21, 0x47	; 71
    25ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	4c f5       	brge	.+82     	; 0x2644 <LCD_voidSendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e2       	ldi	r20, 0x20	; 32
    2600:	51 e4       	ldi	r21, 0x41	; 65
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	0f c0       	rjmp	.+30     	; 0x263a <LCD_voidSendCommand+0x85a>
    261c:	80 e9       	ldi	r24, 0x90	; 144
    261e:	91 e0       	ldi	r25, 0x01	; 1
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	8b 83       	std	Y+3, r24	; 0x03
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_voidSendCommand+0x848>
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	69 f7       	brne	.-38     	; 0x261c <LCD_voidSendCommand+0x83c>
    2642:	14 c0       	rjmp	.+40     	; 0x266c <LCD_voidSendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_voidSendCommand+0x884>
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
}
    266c:	cd 59       	subi	r28, 0x9D	; 157
    266e:	df 4f       	sbci	r29, 0xFF	; 255
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <LCD_voidDisplayCharacter>:


// Displays a character on the LCD
void LCD_voidDisplayCharacter(u8 copy_u8data) {
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	c3 56       	subi	r28, 0x63	; 99
    2692:	d0 40       	sbci	r29, 0x00	; 0
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	fe 01       	movw	r30, r28
    26a0:	ed 59       	subi	r30, 0x9D	; 157
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 83       	st	Z, r24

	// Set RS Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	63 e0       	ldi	r22, 0x03	; 3
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    26b0:	fe 01       	movw	r30, r28
    26b2:	e1 5a       	subi	r30, 0xA1	; 161
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	a0 e8       	ldi	r26, 0x80	; 128
    26bc:	bf e3       	ldi	r27, 0x3F	; 63
    26be:	80 83       	st	Z, r24
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	a2 83       	std	Z+2, r26	; 0x02
    26c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c6:	8e 01       	movw	r16, r28
    26c8:	05 5a       	subi	r16, 0xA5	; 165
    26ca:	1f 4f       	sbci	r17, 0xFF	; 255
    26cc:	fe 01       	movw	r30, r28
    26ce:	e1 5a       	subi	r30, 0xA1	; 161
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	4a e7       	ldi	r20, 0x7A	; 122
    26e0:	55 e4       	ldi	r21, 0x45	; 69
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	f8 01       	movw	r30, r16
    26ec:	80 83       	st	Z, r24
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	a2 83       	std	Z+2, r26	; 0x02
    26f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f4:	fe 01       	movw	r30, r28
    26f6:	e5 5a       	subi	r30, 0xA5	; 165
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	60 81       	ld	r22, Z
    26fc:	71 81       	ldd	r23, Z+1	; 0x01
    26fe:	82 81       	ldd	r24, Z+2	; 0x02
    2700:	93 81       	ldd	r25, Z+3	; 0x03
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270e:	88 23       	and	r24, r24
    2710:	44 f4       	brge	.+16     	; 0x2722 <LCD_voidDisplayCharacter+0x9e>
		__ticks = 1;
    2712:	fe 01       	movw	r30, r28
    2714:	e7 5a       	subi	r30, 0xA7	; 167
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	91 83       	std	Z+1, r25	; 0x01
    271e:	80 83       	st	Z, r24
    2720:	64 c0       	rjmp	.+200    	; 0x27ea <LCD_voidDisplayCharacter+0x166>
	else if (__tmp > 65535)
    2722:	fe 01       	movw	r30, r28
    2724:	e5 5a       	subi	r30, 0xA5	; 165
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	60 81       	ld	r22, Z
    272a:	71 81       	ldd	r23, Z+1	; 0x01
    272c:	82 81       	ldd	r24, Z+2	; 0x02
    272e:	93 81       	ldd	r25, Z+3	; 0x03
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	0c f0       	brlt	.+2      	; 0x2742 <LCD_voidDisplayCharacter+0xbe>
    2740:	43 c0       	rjmp	.+134    	; 0x27c8 <LCD_voidDisplayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2742:	fe 01       	movw	r30, r28
    2744:	e1 5a       	subi	r30, 0xA1	; 161
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e2       	ldi	r20, 0x20	; 32
    2756:	51 e4       	ldi	r21, 0x41	; 65
    2758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	8e 01       	movw	r16, r28
    2762:	07 5a       	subi	r16, 0xA7	; 167
    2764:	1f 4f       	sbci	r17, 0xFF	; 255
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	f8 01       	movw	r30, r16
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
    2778:	1f c0       	rjmp	.+62     	; 0x27b8 <LCD_voidDisplayCharacter+0x134>
    277a:	fe 01       	movw	r30, r28
    277c:	e9 5a       	subi	r30, 0xA9	; 169
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 e9       	ldi	r24, 0x90	; 144
    2782:	91 e0       	ldi	r25, 0x01	; 1
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	80 83       	st	Z, r24
    2788:	fe 01       	movw	r30, r28
    278a:	e9 5a       	subi	r30, 0xA9	; 169
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCD_voidDisplayCharacter+0x10e>
    2796:	fe 01       	movw	r30, r28
    2798:	e9 5a       	subi	r30, 0xA9	; 169
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a0:	de 01       	movw	r26, r28
    27a2:	a7 5a       	subi	r26, 0xA7	; 167
    27a4:	bf 4f       	sbci	r27, 0xFF	; 255
    27a6:	fe 01       	movw	r30, r28
    27a8:	e7 5a       	subi	r30, 0xA7	; 167
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	11 96       	adiw	r26, 0x01	; 1
    27b4:	9c 93       	st	X, r25
    27b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b8:	fe 01       	movw	r30, r28
    27ba:	e7 5a       	subi	r30, 0xA7	; 167
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	91 81       	ldd	r25, Z+1	; 0x01
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	d1 f6       	brne	.-76     	; 0x277a <LCD_voidDisplayCharacter+0xf6>
    27c6:	27 c0       	rjmp	.+78     	; 0x2816 <LCD_voidDisplayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c8:	8e 01       	movw	r16, r28
    27ca:	07 5a       	subi	r16, 0xA7	; 167
    27cc:	1f 4f       	sbci	r17, 0xFF	; 255
    27ce:	fe 01       	movw	r30, r28
    27d0:	e5 5a       	subi	r30, 0xA5	; 165
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	60 81       	ld	r22, Z
    27d6:	71 81       	ldd	r23, Z+1	; 0x01
    27d8:	82 81       	ldd	r24, Z+2	; 0x02
    27da:	93 81       	ldd	r25, Z+3	; 0x03
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	f8 01       	movw	r30, r16
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
    27ea:	de 01       	movw	r26, r28
    27ec:	ab 5a       	subi	r26, 0xAB	; 171
    27ee:	bf 4f       	sbci	r27, 0xFF	; 255
    27f0:	fe 01       	movw	r30, r28
    27f2:	e7 5a       	subi	r30, 0xA7	; 167
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	8d 93       	st	X+, r24
    27fc:	9c 93       	st	X, r25
    27fe:	fe 01       	movw	r30, r28
    2800:	eb 5a       	subi	r30, 0xAB	; 171
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <LCD_voidDisplayCharacter+0x184>
    280c:	fe 01       	movw	r30, r28
    280e:	eb 5a       	subi	r30, 0xAB	; 171
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	62 e0       	ldi	r22, 0x02	; 2
    281a:	41 e0       	ldi	r20, 0x01	; 1
    281c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2820:	fe 01       	movw	r30, r28
    2822:	ef 5a       	subi	r30, 0xAF	; 175
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	a0 e0       	ldi	r26, 0x00	; 0
    282c:	b0 e4       	ldi	r27, 0x40	; 64
    282e:	80 83       	st	Z, r24
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	a2 83       	std	Z+2, r26	; 0x02
    2834:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2836:	8e 01       	movw	r16, r28
    2838:	03 5b       	subi	r16, 0xB3	; 179
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	ef 5a       	subi	r30, 0xAF	; 175
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4a e7       	ldi	r20, 0x7A	; 122
    2850:	55 e4       	ldi	r21, 0x45	; 69
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	f8 01       	movw	r30, r16
    285c:	80 83       	st	Z, r24
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	a2 83       	std	Z+2, r26	; 0x02
    2862:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2864:	fe 01       	movw	r30, r28
    2866:	e3 5b       	subi	r30, 0xB3	; 179
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	60 81       	ld	r22, Z
    286c:	71 81       	ldd	r23, Z+1	; 0x01
    286e:	82 81       	ldd	r24, Z+2	; 0x02
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287e:	88 23       	and	r24, r24
    2880:	44 f4       	brge	.+16     	; 0x2892 <LCD_voidDisplayCharacter+0x20e>
		__ticks = 1;
    2882:	fe 01       	movw	r30, r28
    2884:	e5 5b       	subi	r30, 0xB5	; 181
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	91 83       	std	Z+1, r25	; 0x01
    288e:	80 83       	st	Z, r24
    2890:	64 c0       	rjmp	.+200    	; 0x295a <LCD_voidDisplayCharacter+0x2d6>
	else if (__tmp > 65535)
    2892:	fe 01       	movw	r30, r28
    2894:	e3 5b       	subi	r30, 0xB3	; 179
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	3f ef       	ldi	r19, 0xFF	; 255
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	57 e4       	ldi	r21, 0x47	; 71
    28a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	0c f0       	brlt	.+2      	; 0x28b2 <LCD_voidDisplayCharacter+0x22e>
    28b0:	43 c0       	rjmp	.+134    	; 0x2938 <LCD_voidDisplayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b2:	fe 01       	movw	r30, r28
    28b4:	ef 5a       	subi	r30, 0xAF	; 175
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	60 81       	ld	r22, Z
    28ba:	71 81       	ldd	r23, Z+1	; 0x01
    28bc:	82 81       	ldd	r24, Z+2	; 0x02
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e2       	ldi	r20, 0x20	; 32
    28c6:	51 e4       	ldi	r21, 0x41	; 65
    28c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	8e 01       	movw	r16, r28
    28d2:	05 5b       	subi	r16, 0xB5	; 181
    28d4:	1f 4f       	sbci	r17, 0xFF	; 255
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	f8 01       	movw	r30, r16
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	1f c0       	rjmp	.+62     	; 0x2928 <LCD_voidDisplayCharacter+0x2a4>
    28ea:	fe 01       	movw	r30, r28
    28ec:	e7 5b       	subi	r30, 0xB7	; 183
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 e9       	ldi	r24, 0x90	; 144
    28f2:	91 e0       	ldi	r25, 0x01	; 1
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	80 83       	st	Z, r24
    28f8:	fe 01       	movw	r30, r28
    28fa:	e7 5b       	subi	r30, 0xB7	; 183
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	80 81       	ld	r24, Z
    2900:	91 81       	ldd	r25, Z+1	; 0x01
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <LCD_voidDisplayCharacter+0x27e>
    2906:	fe 01       	movw	r30, r28
    2908:	e7 5b       	subi	r30, 0xB7	; 183
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2910:	de 01       	movw	r26, r28
    2912:	a5 5b       	subi	r26, 0xB5	; 181
    2914:	bf 4f       	sbci	r27, 0xFF	; 255
    2916:	fe 01       	movw	r30, r28
    2918:	e5 5b       	subi	r30, 0xB5	; 181
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	11 96       	adiw	r26, 0x01	; 1
    2924:	9c 93       	st	X, r25
    2926:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	fe 01       	movw	r30, r28
    292a:	e5 5b       	subi	r30, 0xB5	; 181
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 81       	ld	r24, Z
    2930:	91 81       	ldd	r25, Z+1	; 0x01
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	d1 f6       	brne	.-76     	; 0x28ea <LCD_voidDisplayCharacter+0x266>
    2936:	27 c0       	rjmp	.+78     	; 0x2986 <LCD_voidDisplayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2938:	8e 01       	movw	r16, r28
    293a:	05 5b       	subi	r16, 0xB5	; 181
    293c:	1f 4f       	sbci	r17, 0xFF	; 255
    293e:	fe 01       	movw	r30, r28
    2940:	e3 5b       	subi	r30, 0xB3	; 179
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	f8 01       	movw	r30, r16
    2956:	91 83       	std	Z+1, r25	; 0x01
    2958:	80 83       	st	Z, r24
    295a:	de 01       	movw	r26, r28
    295c:	a9 5b       	subi	r26, 0xB9	; 185
    295e:	bf 4f       	sbci	r27, 0xFF	; 255
    2960:	fe 01       	movw	r30, r28
    2962:	e5 5b       	subi	r30, 0xB5	; 181
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	91 81       	ldd	r25, Z+1	; 0x01
    296a:	8d 93       	st	X+, r24
    296c:	9c 93       	st	X, r25
    296e:	fe 01       	movw	r30, r28
    2970:	e9 5b       	subi	r30, 0xB9	; 185
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	91 81       	ldd	r25, Z+1	; 0x01
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_voidDisplayCharacter+0x2f4>
    297c:	fe 01       	movw	r30, r28
    297e:	e9 5b       	subi	r30, 0xB9	; 185
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	80 83       	st	Z, r24
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
	}
	else {
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
    2986:	fe 01       	movw	r30, r28
    2988:	ed 59       	subi	r30, 0x9D	; 157
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	82 95       	swap	r24
    2990:	8f 70       	andi	r24, 0x0F	; 15
    2992:	98 2f       	mov	r25, r24
    2994:	91 70       	andi	r25, 0x01	; 1
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	49 2f       	mov	r20, r25
    299c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
    29a0:	fe 01       	movw	r30, r28
    29a2:	ed 59       	subi	r30, 0x9D	; 157
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	82 95       	swap	r24
    29aa:	86 95       	lsr	r24
    29ac:	87 70       	andi	r24, 0x07	; 7
    29ae:	98 2f       	mov	r25, r24
    29b0:	91 70       	andi	r25, 0x01	; 1
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	61 e0       	ldi	r22, 0x01	; 1
    29b6:	49 2f       	mov	r20, r25
    29b8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
    29bc:	fe 01       	movw	r30, r28
    29be:	ed 59       	subi	r30, 0x9D	; 157
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	80 81       	ld	r24, Z
    29c4:	82 95       	swap	r24
    29c6:	86 95       	lsr	r24
    29c8:	86 95       	lsr	r24
    29ca:	83 70       	andi	r24, 0x03	; 3
    29cc:	98 2f       	mov	r25, r24
    29ce:	91 70       	andi	r25, 0x01	; 1
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	62 e0       	ldi	r22, 0x02	; 2
    29d4:	49 2f       	mov	r20, r25
    29d6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
    29da:	fe 01       	movw	r30, r28
    29dc:	ed 59       	subi	r30, 0x9D	; 157
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	98 2f       	mov	r25, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	99 27       	eor	r25, r25
    29e8:	99 1f       	adc	r25, r25
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	64 e0       	ldi	r22, 0x04	; 4
    29ee:	49 2f       	mov	r20, r25
    29f0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    29f4:	fe 01       	movw	r30, r28
    29f6:	ed 5b       	subi	r30, 0xBD	; 189
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a0 e0       	ldi	r26, 0x00	; 0
    2a00:	b0 e4       	ldi	r27, 0x40	; 64
    2a02:	80 83       	st	Z, r24
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	a2 83       	std	Z+2, r26	; 0x02
    2a08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0a:	8e 01       	movw	r16, r28
    2a0c:	01 5c       	subi	r16, 0xC1	; 193
    2a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a10:	fe 01       	movw	r30, r28
    2a12:	ed 5b       	subi	r30, 0xBD	; 189
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	60 81       	ld	r22, Z
    2a18:	71 81       	ldd	r23, Z+1	; 0x01
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4a e7       	ldi	r20, 0x7A	; 122
    2a24:	55 e4       	ldi	r21, 0x45	; 69
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	f8 01       	movw	r30, r16
    2a30:	80 83       	st	Z, r24
    2a32:	91 83       	std	Z+1, r25	; 0x01
    2a34:	a2 83       	std	Z+2, r26	; 0x02
    2a36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ff 96       	adiw	r30, 0x3f	; 63
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <LCD_voidDisplayCharacter+0x3da>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9e af       	std	Y+62, r25	; 0x3e
    2a5a:	8d af       	std	Y+61, r24	; 0x3d
    2a5c:	46 c0       	rjmp	.+140    	; 0x2aea <LCD_voidDisplayCharacter+0x466>
	else if (__tmp > 65535)
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ff 96       	adiw	r30, 0x3f	; 63
    2a62:	60 81       	ld	r22, Z
    2a64:	71 81       	ldd	r23, Z+1	; 0x01
    2a66:	82 81       	ldd	r24, Z+2	; 0x02
    2a68:	93 81       	ldd	r25, Z+3	; 0x03
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	3f ef       	ldi	r19, 0xFF	; 255
    2a6e:	4f e7       	ldi	r20, 0x7F	; 127
    2a70:	57 e4       	ldi	r21, 0x47	; 71
    2a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a76:	18 16       	cp	r1, r24
    2a78:	64 f5       	brge	.+88     	; 0x2ad2 <LCD_voidDisplayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ed 5b       	subi	r30, 0xBD	; 189
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e2       	ldi	r20, 0x20	; 32
    2a8e:	51 e4       	ldi	r21, 0x41	; 65
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9e af       	std	Y+62, r25	; 0x3e
    2aa6:	8d af       	std	Y+61, r24	; 0x3d
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <LCD_voidDisplayCharacter+0x444>
    2aaa:	80 e9       	ldi	r24, 0x90	; 144
    2aac:	91 e0       	ldi	r25, 0x01	; 1
    2aae:	9c af       	std	Y+60, r25	; 0x3c
    2ab0:	8b af       	std	Y+59, r24	; 0x3b
    2ab2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ab4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <LCD_voidDisplayCharacter+0x432>
    2aba:	9c af       	std	Y+60, r25	; 0x3c
    2abc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ac0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	9e af       	std	Y+62, r25	; 0x3e
    2ac6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aca:	9e ad       	ldd	r25, Y+62	; 0x3e
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	69 f7       	brne	.-38     	; 0x2aaa <LCD_voidDisplayCharacter+0x426>
    2ad0:	16 c0       	rjmp	.+44     	; 0x2afe <LCD_voidDisplayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	ff 96       	adiw	r30, 0x3f	; 63
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9e af       	std	Y+62, r25	; 0x3e
    2ae8:	8d af       	std	Y+61, r24	; 0x3d
    2aea:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aec:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aee:	9a af       	std	Y+58, r25	; 0x3a
    2af0:	89 af       	std	Y+57, r24	; 0x39
    2af2:	89 ad       	ldd	r24, Y+57	; 0x39
    2af4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	f1 f7       	brne	.-4      	; 0x2af6 <LCD_voidDisplayCharacter+0x472>
    2afa:	9a af       	std	Y+58, r25	; 0x3a
    2afc:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2);

		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	62 e0       	ldi	r22, 0x02	; 2
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e0       	ldi	r26, 0x00	; 0
    2b0e:	b0 e4       	ldi	r27, 0x40	; 64
    2b10:	8d ab       	std	Y+53, r24	; 0x35
    2b12:	9e ab       	std	Y+54, r25	; 0x36
    2b14:	af ab       	std	Y+55, r26	; 0x37
    2b16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b18:	6d a9       	ldd	r22, Y+53	; 0x35
    2b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4a e7       	ldi	r20, 0x7A	; 122
    2b26:	55 e4       	ldi	r21, 0x45	; 69
    2b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	89 ab       	std	Y+49, r24	; 0x31
    2b32:	9a ab       	std	Y+50, r25	; 0x32
    2b34:	ab ab       	std	Y+51, r26	; 0x33
    2b36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b38:	69 a9       	ldd	r22, Y+49	; 0x31
    2b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e8       	ldi	r20, 0x80	; 128
    2b46:	5f e3       	ldi	r21, 0x3F	; 63
    2b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b4c:	88 23       	and	r24, r24
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <LCD_voidDisplayCharacter+0x4d6>
		__ticks = 1;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	98 ab       	std	Y+48, r25	; 0x30
    2b56:	8f a7       	std	Y+47, r24	; 0x2f
    2b58:	3f c0       	rjmp	.+126    	; 0x2bd8 <LCD_voidDisplayCharacter+0x554>
	else if (__tmp > 65535)
    2b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b60:	9c a9       	ldd	r25, Y+52	; 0x34
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	3f ef       	ldi	r19, 0xFF	; 255
    2b66:	4f e7       	ldi	r20, 0x7F	; 127
    2b68:	57 e4       	ldi	r21, 0x47	; 71
    2b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6e:	18 16       	cp	r1, r24
    2b70:	4c f5       	brge	.+82     	; 0x2bc4 <LCD_voidDisplayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b72:	6d a9       	ldd	r22, Y+53	; 0x35
    2b74:	7e a9       	ldd	r23, Y+54	; 0x36
    2b76:	8f a9       	ldd	r24, Y+55	; 0x37
    2b78:	98 ad       	ldd	r25, Y+56	; 0x38
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e2       	ldi	r20, 0x20	; 32
    2b80:	51 e4       	ldi	r21, 0x41	; 65
    2b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	98 ab       	std	Y+48, r25	; 0x30
    2b98:	8f a7       	std	Y+47, r24	; 0x2f
    2b9a:	0f c0       	rjmp	.+30     	; 0x2bba <LCD_voidDisplayCharacter+0x536>
    2b9c:	80 e9       	ldi	r24, 0x90	; 144
    2b9e:	91 e0       	ldi	r25, 0x01	; 1
    2ba0:	9e a7       	std	Y+46, r25	; 0x2e
    2ba2:	8d a7       	std	Y+45, r24	; 0x2d
    2ba4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ba6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <LCD_voidDisplayCharacter+0x524>
    2bac:	9e a7       	std	Y+46, r25	; 0x2e
    2bae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	98 ab       	std	Y+48, r25	; 0x30
    2bb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bbc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	69 f7       	brne	.-38     	; 0x2b9c <LCD_voidDisplayCharacter+0x518>
    2bc2:	14 c0       	rjmp	.+40     	; 0x2bec <LCD_voidDisplayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc4:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc6:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc8:	8b a9       	ldd	r24, Y+51	; 0x33
    2bca:	9c a9       	ldd	r25, Y+52	; 0x34
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	98 ab       	std	Y+48, r25	; 0x30
    2bd6:	8f a7       	std	Y+47, r24	; 0x2f
    2bd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bda:	98 a9       	ldd	r25, Y+48	; 0x30
    2bdc:	9c a7       	std	Y+44, r25	; 0x2c
    2bde:	8b a7       	std	Y+43, r24	; 0x2b
    2be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2be2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <LCD_voidDisplayCharacter+0x560>
    2be8:	9c a7       	std	Y+44, r25	; 0x2c
    2bea:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	62 e0       	ldi	r22, 0x02	; 2
    2bf0:	41 e0       	ldi	r20, 0x01	; 1
    2bf2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a0 e0       	ldi	r26, 0x00	; 0
    2bfc:	b0 e4       	ldi	r27, 0x40	; 64
    2bfe:	8f a3       	std	Y+39, r24	; 0x27
    2c00:	98 a7       	std	Y+40, r25	; 0x28
    2c02:	a9 a7       	std	Y+41, r26	; 0x29
    2c04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c06:	6f a1       	ldd	r22, Y+39	; 0x27
    2c08:	78 a5       	ldd	r23, Y+40	; 0x28
    2c0a:	89 a5       	ldd	r24, Y+41	; 0x29
    2c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	4a e7       	ldi	r20, 0x7A	; 122
    2c14:	55 e4       	ldi	r21, 0x45	; 69
    2c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	8b a3       	std	Y+35, r24	; 0x23
    2c20:	9c a3       	std	Y+36, r25	; 0x24
    2c22:	ad a3       	std	Y+37, r26	; 0x25
    2c24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c26:	6b a1       	ldd	r22, Y+35	; 0x23
    2c28:	7c a1       	ldd	r23, Y+36	; 0x24
    2c2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e8       	ldi	r20, 0x80	; 128
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	2c f4       	brge	.+10     	; 0x2c48 <LCD_voidDisplayCharacter+0x5c4>
		__ticks = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	9a a3       	std	Y+34, r25	; 0x22
    2c44:	89 a3       	std	Y+33, r24	; 0x21
    2c46:	3f c0       	rjmp	.+126    	; 0x2cc6 <LCD_voidDisplayCharacter+0x642>
	else if (__tmp > 65535)
    2c48:	6b a1       	ldd	r22, Y+35	; 0x23
    2c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	3f ef       	ldi	r19, 0xFF	; 255
    2c54:	4f e7       	ldi	r20, 0x7F	; 127
    2c56:	57 e4       	ldi	r21, 0x47	; 71
    2c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c5c:	18 16       	cp	r1, r24
    2c5e:	4c f5       	brge	.+82     	; 0x2cb2 <LCD_voidDisplayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c60:	6f a1       	ldd	r22, Y+39	; 0x27
    2c62:	78 a5       	ldd	r23, Y+40	; 0x28
    2c64:	89 a5       	ldd	r24, Y+41	; 0x29
    2c66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e2       	ldi	r20, 0x20	; 32
    2c6e:	51 e4       	ldi	r21, 0x41	; 65
    2c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9a a3       	std	Y+34, r25	; 0x22
    2c86:	89 a3       	std	Y+33, r24	; 0x21
    2c88:	0f c0       	rjmp	.+30     	; 0x2ca8 <LCD_voidDisplayCharacter+0x624>
    2c8a:	80 e9       	ldi	r24, 0x90	; 144
    2c8c:	91 e0       	ldi	r25, 0x01	; 1
    2c8e:	98 a3       	std	Y+32, r25	; 0x20
    2c90:	8f 8f       	std	Y+31, r24	; 0x1f
    2c92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c94:	98 a1       	ldd	r25, Y+32	; 0x20
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_voidDisplayCharacter+0x612>
    2c9a:	98 a3       	std	Y+32, r25	; 0x20
    2c9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	9a a3       	std	Y+34, r25	; 0x22
    2ca6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    2caa:	9a a1       	ldd	r25, Y+34	; 0x22
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	69 f7       	brne	.-38     	; 0x2c8a <LCD_voidDisplayCharacter+0x606>
    2cb0:	14 c0       	rjmp	.+40     	; 0x2cda <LCD_voidDisplayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9a a3       	std	Y+34, r25	; 0x22
    2cc4:	89 a3       	std	Y+33, r24	; 0x21
    2cc6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cca:	9e 8f       	std	Y+30, r25	; 0x1e
    2ccc:	8d 8f       	std	Y+29, r24	; 0x1d
    2cce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <LCD_voidDisplayCharacter+0x64e>
    2cd6:	9e 8f       	std	Y+30, r25	; 0x1e
    2cd8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
    2cda:	fe 01       	movw	r30, r28
    2cdc:	ed 59       	subi	r30, 0x9D	; 157
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	98 2f       	mov	r25, r24
    2ce4:	91 70       	andi	r25, 0x01	; 1
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	49 2f       	mov	r20, r25
    2cec:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ed 59       	subi	r30, 0x9D	; 157
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	86 95       	lsr	r24
    2cfa:	98 2f       	mov	r25, r24
    2cfc:	91 70       	andi	r25, 0x01	; 1
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	61 e0       	ldi	r22, 0x01	; 1
    2d02:	49 2f       	mov	r20, r25
    2d04:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ed 59       	subi	r30, 0x9D	; 157
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	80 81       	ld	r24, Z
    2d10:	86 95       	lsr	r24
    2d12:	86 95       	lsr	r24
    2d14:	98 2f       	mov	r25, r24
    2d16:	91 70       	andi	r25, 0x01	; 1
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	62 e0       	ldi	r22, 0x02	; 2
    2d1c:	49 2f       	mov	r20, r25
    2d1e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
    2d22:	fe 01       	movw	r30, r28
    2d24:	ed 59       	subi	r30, 0x9D	; 157
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	86 95       	lsr	r24
    2d2c:	86 95       	lsr	r24
    2d2e:	86 95       	lsr	r24
    2d30:	98 2f       	mov	r25, r24
    2d32:	91 70       	andi	r25, 0x01	; 1
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	64 e0       	ldi	r22, 0x04	; 4
    2d38:	49 2f       	mov	r20, r25
    2d3a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	a0 e0       	ldi	r26, 0x00	; 0
    2d44:	b0 e4       	ldi	r27, 0x40	; 64
    2d46:	89 8f       	std	Y+25, r24	; 0x19
    2d48:	9a 8f       	std	Y+26, r25	; 0x1a
    2d4a:	ab 8f       	std	Y+27, r26	; 0x1b
    2d4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	4a e7       	ldi	r20, 0x7A	; 122
    2d5c:	55 e4       	ldi	r21, 0x45	; 69
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8d 8b       	std	Y+21, r24	; 0x15
    2d68:	9e 8b       	std	Y+22, r25	; 0x16
    2d6a:	af 8b       	std	Y+23, r26	; 0x17
    2d6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d70:	7e 89       	ldd	r23, Y+22	; 0x16
    2d72:	8f 89       	ldd	r24, Y+23	; 0x17
    2d74:	98 8d       	ldd	r25, Y+24	; 0x18
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e8       	ldi	r20, 0x80	; 128
    2d7c:	5f e3       	ldi	r21, 0x3F	; 63
    2d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d82:	88 23       	and	r24, r24
    2d84:	2c f4       	brge	.+10     	; 0x2d90 <LCD_voidDisplayCharacter+0x70c>
		__ticks = 1;
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	9c 8b       	std	Y+20, r25	; 0x14
    2d8c:	8b 8b       	std	Y+19, r24	; 0x13
    2d8e:	3f c0       	rjmp	.+126    	; 0x2e0e <LCD_voidDisplayCharacter+0x78a>
	else if (__tmp > 65535)
    2d90:	6d 89       	ldd	r22, Y+21	; 0x15
    2d92:	7e 89       	ldd	r23, Y+22	; 0x16
    2d94:	8f 89       	ldd	r24, Y+23	; 0x17
    2d96:	98 8d       	ldd	r25, Y+24	; 0x18
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	3f ef       	ldi	r19, 0xFF	; 255
    2d9c:	4f e7       	ldi	r20, 0x7F	; 127
    2d9e:	57 e4       	ldi	r21, 0x47	; 71
    2da0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2da4:	18 16       	cp	r1, r24
    2da6:	4c f5       	brge	.+82     	; 0x2dfa <LCD_voidDisplayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da8:	69 8d       	ldd	r22, Y+25	; 0x19
    2daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e2       	ldi	r20, 0x20	; 32
    2db6:	51 e4       	ldi	r21, 0x41	; 65
    2db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	bc 01       	movw	r22, r24
    2dc2:	cd 01       	movw	r24, r26
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	9c 8b       	std	Y+20, r25	; 0x14
    2dce:	8b 8b       	std	Y+19, r24	; 0x13
    2dd0:	0f c0       	rjmp	.+30     	; 0x2df0 <LCD_voidDisplayCharacter+0x76c>
    2dd2:	80 e9       	ldi	r24, 0x90	; 144
    2dd4:	91 e0       	ldi	r25, 0x01	; 1
    2dd6:	9a 8b       	std	Y+18, r25	; 0x12
    2dd8:	89 8b       	std	Y+17, r24	; 0x11
    2dda:	89 89       	ldd	r24, Y+17	; 0x11
    2ddc:	9a 89       	ldd	r25, Y+18	; 0x12
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <LCD_voidDisplayCharacter+0x75a>
    2de2:	9a 8b       	std	Y+18, r25	; 0x12
    2de4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de6:	8b 89       	ldd	r24, Y+19	; 0x13
    2de8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	9c 8b       	std	Y+20, r25	; 0x14
    2dee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df0:	8b 89       	ldd	r24, Y+19	; 0x13
    2df2:	9c 89       	ldd	r25, Y+20	; 0x14
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	69 f7       	brne	.-38     	; 0x2dd2 <LCD_voidDisplayCharacter+0x74e>
    2df8:	14 c0       	rjmp	.+40     	; 0x2e22 <LCD_voidDisplayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2e00:	98 8d       	ldd	r25, Y+24	; 0x18
    2e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	9c 8b       	std	Y+20, r25	; 0x14
    2e0c:	8b 8b       	std	Y+19, r24	; 0x13
    2e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e10:	9c 89       	ldd	r25, Y+20	; 0x14
    2e12:	98 8b       	std	Y+16, r25	; 0x10
    2e14:	8f 87       	std	Y+15, r24	; 0x0f
    2e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e18:	98 89       	ldd	r25, Y+16	; 0x10
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <LCD_voidDisplayCharacter+0x796>
    2e1e:	98 8b       	std	Y+16, r25	; 0x10
    2e20:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);

		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	62 e0       	ldi	r22, 0x02	; 2
    2e26:	40 e0       	ldi	r20, 0x00	; 0
    2e28:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	a0 e0       	ldi	r26, 0x00	; 0
    2e32:	b0 e4       	ldi	r27, 0x40	; 64
    2e34:	8b 87       	std	Y+11, r24	; 0x0b
    2e36:	9c 87       	std	Y+12, r25	; 0x0c
    2e38:	ad 87       	std	Y+13, r26	; 0x0d
    2e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a e7       	ldi	r20, 0x7A	; 122
    2e4a:	55 e4       	ldi	r21, 0x45	; 69
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8f 83       	std	Y+7, r24	; 0x07
    2e56:	98 87       	std	Y+8, r25	; 0x08
    2e58:	a9 87       	std	Y+9, r26	; 0x09
    2e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5e:	78 85       	ldd	r23, Y+8	; 0x08
    2e60:	89 85       	ldd	r24, Y+9	; 0x09
    2e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e8       	ldi	r20, 0x80	; 128
    2e6a:	5f e3       	ldi	r21, 0x3F	; 63
    2e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e70:	88 23       	and	r24, r24
    2e72:	2c f4       	brge	.+10     	; 0x2e7e <LCD_voidDisplayCharacter+0x7fa>
		__ticks = 1;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	3f c0       	rjmp	.+126    	; 0x2efc <LCD_voidDisplayCharacter+0x878>
	else if (__tmp > 65535)
    2e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e80:	78 85       	ldd	r23, Y+8	; 0x08
    2e82:	89 85       	ldd	r24, Y+9	; 0x09
    2e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	3f ef       	ldi	r19, 0xFF	; 255
    2e8a:	4f e7       	ldi	r20, 0x7F	; 127
    2e8c:	57 e4       	ldi	r21, 0x47	; 71
    2e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e92:	18 16       	cp	r1, r24
    2e94:	4c f5       	brge	.+82     	; 0x2ee8 <LCD_voidDisplayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e2       	ldi	r20, 0x20	; 32
    2ea4:	51 e4       	ldi	r21, 0x41	; 65
    2ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <LCD_voidDisplayCharacter+0x85a>
    2ec0:	80 e9       	ldi	r24, 0x90	; 144
    2ec2:	91 e0       	ldi	r25, 0x01	; 1
    2ec4:	9c 83       	std	Y+4, r25	; 0x04
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <LCD_voidDisplayCharacter+0x848>
    2ed0:	9c 83       	std	Y+4, r25	; 0x04
    2ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	9e 83       	std	Y+6, r25	; 0x06
    2edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	69 f7       	brne	.-38     	; 0x2ec0 <LCD_voidDisplayCharacter+0x83c>
    2ee6:	14 c0       	rjmp	.+40     	; 0x2f10 <LCD_voidDisplayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eea:	78 85       	ldd	r23, Y+8	; 0x08
    2eec:	89 85       	ldd	r24, Y+9	; 0x09
    2eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9e 83       	std	Y+6, r25	; 0x06
    2efa:	8d 83       	std	Y+5, r24	; 0x05
    2efc:	8d 81       	ldd	r24, Y+5	; 0x05
    2efe:	9e 81       	ldd	r25, Y+6	; 0x06
    2f00:	9a 83       	std	Y+2, r25	; 0x02
    2f02:	89 83       	std	Y+1, r24	; 0x01
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	9a 81       	ldd	r25, Y+2	; 0x02
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <LCD_voidDisplayCharacter+0x884>
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
}
    2f10:	cd 59       	subi	r28, 0x9D	; 157
    2f12:	df 4f       	sbci	r29, 0xFF	; 255
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	cf 91       	pop	r28
    2f20:	df 91       	pop	r29
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	08 95       	ret

00002f28 <LCD_voidDisplayString>:


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str, u8 copy_u8row, u8 copy_u8_col) {
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <LCD_voidDisplayString+0x6>
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <LCD_voidDisplayString+0x8>
    2f30:	0f 92       	push	r0
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	9b 83       	std	Y+3, r25	; 0x03
    2f38:	8a 83       	std	Y+2, r24	; 0x02
    2f3a:	6c 83       	std	Y+4, r22	; 0x04
    2f3c:	4d 83       	std	Y+5, r20	; 0x05
	u8 i = 0;
    2f3e:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidMoveCursor(copy_u8row, copy_u8_col);
    2f40:	8c 81       	ldd	r24, Y+4	; 0x04
    2f42:	6d 81       	ldd	r22, Y+5	; 0x05
    2f44:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_voidMoveCursor>
    2f48:	20 c0       	rjmp	.+64     	; 0x2f8a <LCD_voidDisplayString+0x62>

	while(str[i] != '\0') {
		LCD_voidDisplayCharacter(str[i]);
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	fc 01       	movw	r30, r24
    2f56:	e2 0f       	add	r30, r18
    2f58:	f3 1f       	adc	r31, r19
    2f5a:	80 81       	ld	r24, Z
    2f5c:	0e 94 42 13 	call	0x2684	; 0x2684 <LCD_voidDisplayCharacter>
		i++;
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	89 83       	std	Y+1, r24	; 0x01
		copy_u8_col++;
    2f66:	8d 81       	ldd	r24, Y+5	; 0x05
    2f68:	8f 5f       	subi	r24, 0xFF	; 255
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
		if (copy_u8_col == LCD_MAXCOL_SIZE) {
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	84 31       	cpi	r24, 0x14	; 20
    2f70:	61 f4       	brne	.+24     	; 0x2f8a <LCD_voidDisplayString+0x62>
			copy_u8_col = 0;
    2f72:	1d 82       	std	Y+5, r1	; 0x05
			copy_u8row++;
    2f74:	8c 81       	ldd	r24, Y+4	; 0x04
    2f76:	8f 5f       	subi	r24, 0xFF	; 255
    2f78:	8c 83       	std	Y+4, r24	; 0x04
			if (copy_u8row == LCD_MAXROW_SIZE) {
    2f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7c:	84 30       	cpi	r24, 0x04	; 4
    2f7e:	29 f4       	brne	.+10     	; 0x2f8a <LCD_voidDisplayString+0x62>
				copy_u8row = 0;
    2f80:	1c 82       	std	Y+4, r1	; 0x04
				LCD_voidMoveCursor(copy_u8row, copy_u8_col);
    2f82:	8c 81       	ldd	r24, Y+4	; 0x04
    2f84:	6d 81       	ldd	r22, Y+5	; 0x05
    2f86:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_voidMoveCursor>
// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str, u8 copy_u8row, u8 copy_u8_col) {
	u8 i = 0;
	LCD_voidMoveCursor(copy_u8row, copy_u8_col);

	while(str[i] != '\0') {
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	9b 81       	ldd	r25, Y+3	; 0x03
    2f94:	fc 01       	movw	r30, r24
    2f96:	e2 0f       	add	r30, r18
    2f98:	f3 1f       	adc	r31, r19
    2f9a:	80 81       	ld	r24, Z
    2f9c:	88 23       	and	r24, r24
    2f9e:	a9 f6       	brne	.-86     	; 0x2f4a <LCD_voidDisplayString+0x22>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	08 95       	ret

00002fb0 <LCD_voidMoveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_voidMoveCursor(u8 copy_u8row, u8 copy_u8_col) {
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	00 d0       	rcall	.+0      	; 0x2fb6 <LCD_voidMoveCursor+0x6>
    2fb6:	00 d0       	rcall	.+0      	; 0x2fb8 <LCD_voidMoveCursor+0x8>
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	6a 83       	std	Y+2, r22	; 0x02

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	//if(copy_u8row < LCD_MAXROW_SIZE && copy_u8_col < LCD_MAXCOL_SIZE) {
		switch(copy_u8row) {
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	28 2f       	mov	r18, r24
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	3c 83       	std	Y+4, r19	; 0x04
    2fc8:	2b 83       	std	Y+3, r18	; 0x03
    2fca:	8b 81       	ldd	r24, Y+3	; 0x03
    2fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fce:	81 30       	cpi	r24, 0x01	; 1
    2fd0:	91 05       	cpc	r25, r1
    2fd2:	d1 f0       	breq	.+52     	; 0x3008 <LCD_voidMoveCursor+0x58>
    2fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    2fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    2fd8:	22 30       	cpi	r18, 0x02	; 2
    2fda:	31 05       	cpc	r19, r1
    2fdc:	2c f4       	brge	.+10     	; 0x2fe8 <LCD_voidMoveCursor+0x38>
    2fde:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	61 f0       	breq	.+24     	; 0x2ffe <LCD_voidMoveCursor+0x4e>
    2fe6:	1f c0       	rjmp	.+62     	; 0x3026 <LCD_voidMoveCursor+0x76>
    2fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fea:	3c 81       	ldd	r19, Y+4	; 0x04
    2fec:	22 30       	cpi	r18, 0x02	; 2
    2fee:	31 05       	cpc	r19, r1
    2ff0:	81 f0       	breq	.+32     	; 0x3012 <LCD_voidMoveCursor+0x62>
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff6:	83 30       	cpi	r24, 0x03	; 3
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	81 f0       	breq	.+32     	; 0x301c <LCD_voidMoveCursor+0x6c>
    2ffc:	14 c0       	rjmp	.+40     	; 0x3026 <LCD_voidMoveCursor+0x76>
			case 0:
				LCD_voidSendCommand(0x80 + copy_u8_col);
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	80 58       	subi	r24, 0x80	; 128
    3002:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>
    3006:	15 c0       	rjmp	.+42     	; 0x3032 <LCD_voidMoveCursor+0x82>
					break;
			case 1:
				LCD_voidSendCommand(0xC0 + copy_u8_col);
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	80 54       	subi	r24, 0x40	; 64
    300c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>
    3010:	10 c0       	rjmp	.+32     	; 0x3032 <LCD_voidMoveCursor+0x82>
					break;
			case 2:
				LCD_voidSendCommand(0x94 + copy_u8_col);
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	8c 56       	subi	r24, 0x6C	; 108
    3016:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>
    301a:	0b c0       	rjmp	.+22     	; 0x3032 <LCD_voidMoveCursor+0x82>
					break;
			case 3:
				LCD_voidSendCommand(0xd4 + copy_u8_col);
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	8c 52       	subi	r24, 0x2C	; 44
    3020:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>
    3024:	06 c0       	rjmp	.+12     	; 0x3032 <LCD_voidMoveCursor+0x82>
					break;
			default:
				LCD_voidDisplayString("default", 0, 0);
    3026:	80 e6       	ldi	r24, 0x60	; 96
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	60 e0       	ldi	r22, 0x00	; 0
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_voidDisplayString>
				break;
		}
}
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <LCD_voidIntgerToString>:


// LCD only understands ASCII, so this converts Int to a string
void LCD_voidIntgerToString(u32 copy_u32data, u8 copy_u8row, u8 copy_u8_col) {
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	66 97       	sbiw	r28, 0x16	; 22
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	69 8b       	std	Y+17, r22	; 0x11
    3056:	7a 8b       	std	Y+18, r23	; 0x12
    3058:	8b 8b       	std	Y+19, r24	; 0x13
    305a:	9c 8b       	std	Y+20, r25	; 0x14
    305c:	4d 8b       	std	Y+21, r20	; 0x15
    305e:	2e 8b       	std	Y+22, r18	; 0x16
	// A string to hold the ASCII values
	cu8 buffer[16];

	// Converts data to its ASCII
	itoa(copy_u32data, buffer, 10);
    3060:	89 89       	ldd	r24, Y+17	; 0x11
    3062:	9a 89       	ldd	r25, Y+18	; 0x12
    3064:	ab 89       	ldd	r26, Y+19	; 0x13
    3066:	bc 89       	ldd	r27, Y+20	; 0x14
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	9e 01       	movw	r18, r28
    306e:	2f 5f       	subi	r18, 0xFF	; 255
    3070:	3f 4f       	sbci	r19, 0xFF	; 255
    3072:	a9 01       	movw	r20, r18
    3074:	2a e0       	ldi	r18, 0x0A	; 10
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <itoa>

	// Display string with the results in the buffer
	LCD_voidDisplayString(buffer, copy_u8row, copy_u8_col);
    307c:	ce 01       	movw	r24, r28
    307e:	01 96       	adiw	r24, 0x01	; 1
    3080:	6d 89       	ldd	r22, Y+21	; 0x15
    3082:	4e 89       	ldd	r20, Y+22	; 0x16
    3084:	0e 94 94 17 	call	0x2f28	; 0x2f28 <LCD_voidDisplayString>
}
    3088:	66 96       	adiw	r28, 0x16	; 22
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <LCD_voidClearScreen>:

// Clears the LCD from any garbage
void LCD_voidClearScreen(void) {
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_voidSendCommand>
}
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <KEYPAD_voidInit>:
u8 KPD_COL_PIN_VAL [] = KPD_ARR_COL_PIN;

u8 KPD_DATA [KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VALUES;


void KEYPAD_voidInit(void) {
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <KEYPAD_voidInit+0x6>
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    30b8:	1a 82       	std	Y+2, r1	; 0x02
    30ba:	29 c0       	rjmp	.+82     	; 0x310e <KEYPAD_voidInit+0x60>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	88 2f       	mov	r24, r24
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	fc 01       	movw	r30, r24
    30c4:	e0 59       	subi	r30, 0x90	; 144
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	20 81       	ld	r18, Z
    30ca:	8a 81       	ldd	r24, Y+2	; 0x02
    30cc:	88 2f       	mov	r24, r24
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	fc 01       	movw	r30, r24
    30d2:	ec 58       	subi	r30, 0x8C	; 140
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	90 81       	ld	r25, Z
    30d8:	82 2f       	mov	r24, r18
    30da:	69 2f       	mov	r22, r25
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	88 2f       	mov	r24, r24
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	fc 01       	movw	r30, r24
    30ea:	e0 59       	subi	r30, 0x90	; 144
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	20 81       	ld	r18, Z
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	88 2f       	mov	r24, r24
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	fc 01       	movw	r30, r24
    30f8:	ec 58       	subi	r30, 0x8C	; 140
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	90 81       	ld	r25, Z
    30fe:	82 2f       	mov	r24, r18
    3100:	69 2f       	mov	r22, r25
    3102:	41 e0       	ldi	r20, 0x01	; 1
    3104:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>

void KEYPAD_voidInit(void) {
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	8f 5f       	subi	r24, 0xFF	; 255
    310c:	8a 83       	std	Y+2, r24	; 0x02
    310e:	8a 81       	ldd	r24, Y+2	; 0x02
    3110:	84 30       	cpi	r24, 0x04	; 4
    3112:	a0 f2       	brcs	.-88     	; 0x30bc <KEYPAD_voidInit+0xe>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    3114:	19 82       	std	Y+1, r1	; 0x01
    3116:	16 c0       	rjmp	.+44     	; 0x3144 <KEYPAD_voidInit+0x96>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	88 2f       	mov	r24, r24
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	fc 01       	movw	r30, r24
    3120:	e8 58       	subi	r30, 0x88	; 136
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	20 81       	ld	r18, Z
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	88 2f       	mov	r24, r24
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	fc 01       	movw	r30, r24
    312e:	e4 58       	subi	r30, 0x84	; 132
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	90 81       	ld	r25, Z
    3134:	82 2f       	mov	r24, r18
    3136:	69 2f       	mov	r22, r25
    3138:	40 e0       	ldi	r20, 0x00	; 0
    313a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	8f 5f       	subi	r24, 0xFF	; 255
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	84 30       	cpi	r24, 0x04	; 4
    3148:	38 f3       	brcs	.-50     	; 0x3118 <KEYPAD_voidInit+0x6a>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
	}
}
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <KEYPAD_u8getPressedKey>:


u8 KEYPAD_u8getPressedKey(void) {
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	00 d0       	rcall	.+0      	; 0x315a <KEYPAD_u8getPressedKey+0x6>
    315a:	0f 92       	push	r0
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
	u8 row, col, dataValue = 0xff;
    3160:	8f ef       	ldi	r24, 0xFF	; 255
    3162:	89 83       	std	Y+1, r24	; 0x01
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    3164:	1b 82       	std	Y+3, r1	; 0x03
    3166:	6a c0       	rjmp	.+212    	; 0x323c <KEYPAD_u8getPressedKey+0xe8>

			// I set the pin by '1' for the row, and will iterate
			GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], PIN_OUTPUT);
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	88 2f       	mov	r24, r24
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	fc 01       	movw	r30, r24
    3170:	e0 59       	subi	r30, 0x90	; 144
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	20 81       	ld	r18, Z
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	88 2f       	mov	r24, r24
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	fc 01       	movw	r30, r24
    317e:	ec 58       	subi	r30, 0x8C	; 140
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	90 81       	ld	r25, Z
    3184:	82 2f       	mov	r24, r18
    3186:	69 2f       	mov	r22, r25
    3188:	41 e0       	ldi	r20, 0x01	; 1
    318a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	88 2f       	mov	r24, r24
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	fc 01       	movw	r30, r24
    3196:	e0 59       	subi	r30, 0x90	; 144
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	20 81       	ld	r18, Z
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	88 2f       	mov	r24, r24
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	fc 01       	movw	r30, r24
    31a4:	ec 58       	subi	r30, 0x8C	; 140
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	90 81       	ld	r25, Z
    31aa:	82 2f       	mov	r24, r18
    31ac:	69 2f       	mov	r22, r25
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    31b4:	1a 82       	std	Y+2, r1	; 0x02
    31b6:	29 c0       	rjmp	.+82     	; 0x320a <KEYPAD_u8getPressedKey+0xb6>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
    31b8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ba:	88 2f       	mov	r24, r24
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	fc 01       	movw	r30, r24
    31c0:	e8 58       	subi	r30, 0x88	; 136
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	20 81       	ld	r18, Z
    31c6:	8a 81       	ldd	r24, Y+2	; 0x02
    31c8:	88 2f       	mov	r24, r24
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	fc 01       	movw	r30, r24
    31ce:	e4 58       	subi	r30, 0x84	; 132
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	90 81       	ld	r25, Z
    31d4:	82 2f       	mov	r24, r18
    31d6:	69 2f       	mov	r22, r25
    31d8:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_u8GetPinValue>
    31dc:	88 23       	and	r24, r24
    31de:	91 f4       	brne	.+36     	; 0x3204 <KEYPAD_u8getPressedKey+0xb0>
					dataValue = KPD_DATA[row][col];
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	48 2f       	mov	r20, r24
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	28 2f       	mov	r18, r24
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	ca 01       	movw	r24, r20
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	82 0f       	add	r24, r18
    31f8:	93 1f       	adc	r25, r19
    31fa:	fc 01       	movw	r30, r24
    31fc:	e0 58       	subi	r30, 0x80	; 128
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	80 81       	ld	r24, Z
    3202:	89 83       	std	Y+1, r24	; 0x01

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	8a 83       	std	Y+2, r24	; 0x02
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	84 30       	cpi	r24, 0x04	; 4
    320e:	a0 f2       	brcs	.-88     	; 0x31b8 <KEYPAD_u8getPressedKey+0x64>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
					dataValue = KPD_DATA[row][col];
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	88 2f       	mov	r24, r24
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	fc 01       	movw	r30, r24
    3218:	e0 59       	subi	r30, 0x90	; 144
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	20 81       	ld	r18, Z
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	88 2f       	mov	r24, r24
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	fc 01       	movw	r30, r24
    3226:	ec 58       	subi	r30, 0x8C	; 140
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	90 81       	ld	r25, Z
    322c:	82 2f       	mov	r24, r18
    322e:	69 2f       	mov	r22, r25
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>


u8 KEYPAD_u8getPressedKey(void) {
	u8 row, col, dataValue = 0xff;
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	8f 5f       	subi	r24, 0xFF	; 255
    323a:	8b 83       	std	Y+3, r24	; 0x03
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	84 30       	cpi	r24, 0x04	; 4
    3240:	08 f4       	brcc	.+2      	; 0x3244 <KEYPAD_u8getPressedKey+0xf0>
    3242:	92 cf       	rjmp	.-220    	; 0x3168 <KEYPAD_u8getPressedKey+0x14>
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
		//}
	}
	return dataValue;
    3244:	89 81       	ldd	r24, Y+1	; 0x01
}
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	08 95       	ret

00003252 <systemInit>:

/*******************************************************************************
 *                              					 Application Libraries                      					  *
 *******************************************************************************/

void systemInit(void) {
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
	//LED_voidInit(PORT_A, LED_PORTA_KIT_GREEN);
	//LCD_voidInit();
	//KEYPAD_voidInit();
	//SEGMENT_voidInit(PORT_B);

	LED_voidInit(PORT_B, LED_PORTB_KIT_RED);
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	67 e0       	ldi	r22, 0x07	; 7
    325e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <LED_voidInit>
	EXT_INTERRUPT_Enable_voidINTx(EXT_INT0, INT_Function);
    3262:	2a e4       	ldi	r18, 0x4A	; 74
    3264:	39 e1       	ldi	r19, 0x19	; 25
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	b9 01       	movw	r22, r18
    326a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <EXT_INTERRUPT_Enable_voidINTx>
	EXT_INTERRUPT_Sense_voidINTx(EXT_INT0, EXT_INTERRUPT_Falling_Edge);
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	62 e0       	ldi	r22, 0x02	; 2
    3272:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <EXT_INTERRUPT_Sense_voidINTx>
	GLOBAL_INTERRUPT_voidEnable();
    3276:	0e 94 b8 09 	call	0x1370	; 0x1370 <GLOBAL_INTERRUPT_voidEnable>

	GPIO_voidSetPinDirection(PORT_C, PIN_2, PIN_OUTPUT);
    327a:	82 e0       	ldi	r24, 0x02	; 2
    327c:	62 e0       	ldi	r22, 0x02	; 2
    327e:	41 e0       	ldi	r20, 0x01	; 1
    3280:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORT_D, PIN_3, PIN_INPUT);
    3284:	83 e0       	ldi	r24, 0x03	; 3
    3286:	63 e0       	ldi	r22, 0x03	; 3
    3288:	40 e0       	ldi	r20, 0x00	; 0
    328a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
}
    328e:	cf 91       	pop	r28
    3290:	df 91       	pop	r29
    3292:	08 95       	ret

00003294 <INT_Function>:

void INT_Function(void) {
    3294:	df 93       	push	r29
    3296:	cf 93       	push	r28
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	2e 97       	sbiw	r28, 0x0e	; 14
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	de bf       	out	0x3e, r29	; 62
    32a4:	0f be       	out	0x3f, r0	; 63
    32a6:	cd bf       	out	0x3d, r28	; 61
	LED_voidToggle(PORT_B, LED_PORTB_KIT_RED);
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	67 e0       	ldi	r22, 0x07	; 7
    32ac:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <LED_voidToggle>
    32b0:	80 e0       	ldi	r24, 0x00	; 0
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	a0 ef       	ldi	r26, 0xF0	; 240
    32b6:	b1 e4       	ldi	r27, 0x41	; 65
    32b8:	8b 87       	std	Y+11, r24	; 0x0b
    32ba:	9c 87       	std	Y+12, r25	; 0x0c
    32bc:	ad 87       	std	Y+13, r26	; 0x0d
    32be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	4a e7       	ldi	r20, 0x7A	; 122
    32ce:	55 e4       	ldi	r21, 0x45	; 69
    32d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	8f 83       	std	Y+7, r24	; 0x07
    32da:	98 87       	std	Y+8, r25	; 0x08
    32dc:	a9 87       	std	Y+9, r26	; 0x09
    32de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32e0:	6f 81       	ldd	r22, Y+7	; 0x07
    32e2:	78 85       	ldd	r23, Y+8	; 0x08
    32e4:	89 85       	ldd	r24, Y+9	; 0x09
    32e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e8       	ldi	r20, 0x80	; 128
    32ee:	5f e3       	ldi	r21, 0x3F	; 63
    32f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f4:	88 23       	and	r24, r24
    32f6:	2c f4       	brge	.+10     	; 0x3302 <INT_Function+0x6e>
		__ticks = 1;
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	9e 83       	std	Y+6, r25	; 0x06
    32fe:	8d 83       	std	Y+5, r24	; 0x05
    3300:	3f c0       	rjmp	.+126    	; 0x3380 <INT_Function+0xec>
	else if (__tmp > 65535)
    3302:	6f 81       	ldd	r22, Y+7	; 0x07
    3304:	78 85       	ldd	r23, Y+8	; 0x08
    3306:	89 85       	ldd	r24, Y+9	; 0x09
    3308:	9a 85       	ldd	r25, Y+10	; 0x0a
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	3f ef       	ldi	r19, 0xFF	; 255
    330e:	4f e7       	ldi	r20, 0x7F	; 127
    3310:	57 e4       	ldi	r21, 0x47	; 71
    3312:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3316:	18 16       	cp	r1, r24
    3318:	4c f5       	brge	.+82     	; 0x336c <INT_Function+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331a:	6b 85       	ldd	r22, Y+11	; 0x0b
    331c:	7c 85       	ldd	r23, Y+12	; 0x0c
    331e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3320:	9e 85       	ldd	r25, Y+14	; 0x0e
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e2       	ldi	r20, 0x20	; 32
    3328:	51 e4       	ldi	r21, 0x41	; 65
    332a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	bc 01       	movw	r22, r24
    3334:	cd 01       	movw	r24, r26
    3336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	9e 83       	std	Y+6, r25	; 0x06
    3340:	8d 83       	std	Y+5, r24	; 0x05
    3342:	0f c0       	rjmp	.+30     	; 0x3362 <INT_Function+0xce>
    3344:	80 e9       	ldi	r24, 0x90	; 144
    3346:	91 e0       	ldi	r25, 0x01	; 1
    3348:	9c 83       	std	Y+4, r25	; 0x04
    334a:	8b 83       	std	Y+3, r24	; 0x03
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	9c 81       	ldd	r25, Y+4	; 0x04
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <INT_Function+0xbc>
    3354:	9c 83       	std	Y+4, r25	; 0x04
    3356:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3358:	8d 81       	ldd	r24, Y+5	; 0x05
    335a:	9e 81       	ldd	r25, Y+6	; 0x06
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	9e 83       	std	Y+6, r25	; 0x06
    3360:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3362:	8d 81       	ldd	r24, Y+5	; 0x05
    3364:	9e 81       	ldd	r25, Y+6	; 0x06
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	69 f7       	brne	.-38     	; 0x3344 <INT_Function+0xb0>
    336a:	14 c0       	rjmp	.+40     	; 0x3394 <INT_Function+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336c:	6f 81       	ldd	r22, Y+7	; 0x07
    336e:	78 85       	ldd	r23, Y+8	; 0x08
    3370:	89 85       	ldd	r24, Y+9	; 0x09
    3372:	9a 85       	ldd	r25, Y+10	; 0x0a
    3374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	9e 83       	std	Y+6, r25	; 0x06
    337e:	8d 83       	std	Y+5, r24	; 0x05
    3380:	8d 81       	ldd	r24, Y+5	; 0x05
    3382:	9e 81       	ldd	r25, Y+6	; 0x06
    3384:	9a 83       	std	Y+2, r25	; 0x02
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	9a 81       	ldd	r25, Y+2	; 0x02
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <INT_Function+0xf8>
    3390:	9a 83       	std	Y+2, r25	; 0x02
    3392:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
}
    3394:	2e 96       	adiw	r28, 0x0e	; 14
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	08 95       	ret

000033a6 <binaryLEDS>:


	//LED_voidToggle(PORT_B, LED_PORTB_KIT_RED);


void binaryLEDS(u8 copy_u8pinValue) {
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	00 d0       	rcall	.+0      	; 0x33ac <binaryLEDS+0x6>
    33ac:	0f 92       	push	r0
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8pinValue) {
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	28 2f       	mov	r18, r24
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	3b 83       	std	Y+3, r19	; 0x03
    33bc:	2a 83       	std	Y+2, r18	; 0x02
    33be:	8a 81       	ldd	r24, Y+2	; 0x02
    33c0:	9b 81       	ldd	r25, Y+3	; 0x03
    33c2:	84 30       	cpi	r24, 0x04	; 4
    33c4:	91 05       	cpc	r25, r1
    33c6:	09 f4       	brne	.+2      	; 0x33ca <binaryLEDS+0x24>
    33c8:	9b c0       	rjmp	.+310    	; 0x3500 <binaryLEDS+0x15a>
    33ca:	2a 81       	ldd	r18, Y+2	; 0x02
    33cc:	3b 81       	ldd	r19, Y+3	; 0x03
    33ce:	25 30       	cpi	r18, 0x05	; 5
    33d0:	31 05       	cpc	r19, r1
    33d2:	ec f4       	brge	.+58     	; 0x340e <binaryLEDS+0x68>
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	9b 81       	ldd	r25, Y+3	; 0x03
    33d8:	81 30       	cpi	r24, 0x01	; 1
    33da:	91 05       	cpc	r25, r1
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <binaryLEDS+0x3a>
    33de:	51 c0       	rjmp	.+162    	; 0x3482 <binaryLEDS+0xdc>
    33e0:	2a 81       	ldd	r18, Y+2	; 0x02
    33e2:	3b 81       	ldd	r19, Y+3	; 0x03
    33e4:	22 30       	cpi	r18, 0x02	; 2
    33e6:	31 05       	cpc	r19, r1
    33e8:	2c f4       	brge	.+10     	; 0x33f4 <binaryLEDS+0x4e>
    33ea:	8a 81       	ldd	r24, Y+2	; 0x02
    33ec:	9b 81       	ldd	r25, Y+3	; 0x03
    33ee:	00 97       	sbiw	r24, 0x00	; 0
    33f0:	99 f1       	breq	.+102    	; 0x3458 <binaryLEDS+0xb2>
    33f2:	03 c1       	rjmp	.+518    	; 0x35fa <binaryLEDS+0x254>
    33f4:	2a 81       	ldd	r18, Y+2	; 0x02
    33f6:	3b 81       	ldd	r19, Y+3	; 0x03
    33f8:	22 30       	cpi	r18, 0x02	; 2
    33fa:	31 05       	cpc	r19, r1
    33fc:	09 f4       	brne	.+2      	; 0x3400 <binaryLEDS+0x5a>
    33fe:	56 c0       	rjmp	.+172    	; 0x34ac <binaryLEDS+0x106>
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	9b 81       	ldd	r25, Y+3	; 0x03
    3404:	83 30       	cpi	r24, 0x03	; 3
    3406:	91 05       	cpc	r25, r1
    3408:	09 f4       	brne	.+2      	; 0x340c <binaryLEDS+0x66>
    340a:	65 c0       	rjmp	.+202    	; 0x34d6 <binaryLEDS+0x130>
    340c:	f6 c0       	rjmp	.+492    	; 0x35fa <binaryLEDS+0x254>
    340e:	2a 81       	ldd	r18, Y+2	; 0x02
    3410:	3b 81       	ldd	r19, Y+3	; 0x03
    3412:	27 30       	cpi	r18, 0x07	; 7
    3414:	31 05       	cpc	r19, r1
    3416:	09 f4       	brne	.+2      	; 0x341a <binaryLEDS+0x74>
    3418:	b2 c0       	rjmp	.+356    	; 0x357e <binaryLEDS+0x1d8>
    341a:	8a 81       	ldd	r24, Y+2	; 0x02
    341c:	9b 81       	ldd	r25, Y+3	; 0x03
    341e:	88 30       	cpi	r24, 0x08	; 8
    3420:	91 05       	cpc	r25, r1
    3422:	6c f4       	brge	.+26     	; 0x343e <binaryLEDS+0x98>
    3424:	2a 81       	ldd	r18, Y+2	; 0x02
    3426:	3b 81       	ldd	r19, Y+3	; 0x03
    3428:	25 30       	cpi	r18, 0x05	; 5
    342a:	31 05       	cpc	r19, r1
    342c:	09 f4       	brne	.+2      	; 0x3430 <binaryLEDS+0x8a>
    342e:	7d c0       	rjmp	.+250    	; 0x352a <binaryLEDS+0x184>
    3430:	8a 81       	ldd	r24, Y+2	; 0x02
    3432:	9b 81       	ldd	r25, Y+3	; 0x03
    3434:	86 30       	cpi	r24, 0x06	; 6
    3436:	91 05       	cpc	r25, r1
    3438:	09 f4       	brne	.+2      	; 0x343c <binaryLEDS+0x96>
    343a:	8c c0       	rjmp	.+280    	; 0x3554 <binaryLEDS+0x1ae>
    343c:	de c0       	rjmp	.+444    	; 0x35fa <binaryLEDS+0x254>
    343e:	2a 81       	ldd	r18, Y+2	; 0x02
    3440:	3b 81       	ldd	r19, Y+3	; 0x03
    3442:	28 30       	cpi	r18, 0x08	; 8
    3444:	31 05       	cpc	r19, r1
    3446:	09 f4       	brne	.+2      	; 0x344a <binaryLEDS+0xa4>
    3448:	af c0       	rjmp	.+350    	; 0x35a8 <binaryLEDS+0x202>
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	9b 81       	ldd	r25, Y+3	; 0x03
    344e:	89 30       	cpi	r24, 0x09	; 9
    3450:	91 05       	cpc	r25, r1
    3452:	09 f4       	brne	.+2      	; 0x3456 <binaryLEDS+0xb0>
    3454:	be c0       	rjmp	.+380    	; 0x35d2 <binaryLEDS+0x22c>
    3456:	d1 c0       	rjmp	.+418    	; 0x35fa <binaryLEDS+0x254>
		case 0:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	67 e0       	ldi	r22, 0x07	; 7
    345c:	40 e0       	ldi	r20, 0x00	; 0
    345e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	64 e0       	ldi	r22, 0x04	; 4
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	65 e0       	ldi	r22, 0x05	; 5
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	66 e0       	ldi	r22, 0x06	; 6
    347a:	40 e0       	ldi	r20, 0x00	; 0
    347c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    3480:	bc c0       	rjmp	.+376    	; 0x35fa <binaryLEDS+0x254>
			break;
		case 1:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	67 e0       	ldi	r22, 0x07	; 7
    3486:	41 e0       	ldi	r20, 0x01	; 1
    3488:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	64 e0       	ldi	r22, 0x04	; 4
    3490:	40 e0       	ldi	r20, 0x00	; 0
    3492:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	65 e0       	ldi	r22, 0x05	; 5
    349a:	40 e0       	ldi	r20, 0x00	; 0
    349c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	66 e0       	ldi	r22, 0x06	; 6
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    34aa:	a7 c0       	rjmp	.+334    	; 0x35fa <binaryLEDS+0x254>
			break;
		case 2:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	67 e0       	ldi	r22, 0x07	; 7
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_HIGH);
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	64 e0       	ldi	r22, 0x04	; 4
    34ba:	41 e0       	ldi	r20, 0x01	; 1
    34bc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	65 e0       	ldi	r22, 0x05	; 5
    34c4:	40 e0       	ldi	r20, 0x00	; 0
    34c6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	66 e0       	ldi	r22, 0x06	; 6
    34ce:	40 e0       	ldi	r20, 0x00	; 0
    34d0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    34d4:	92 c0       	rjmp	.+292    	; 0x35fa <binaryLEDS+0x254>
			break;
		case 3:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	67 e0       	ldi	r22, 0x07	; 7
    34da:	41 e0       	ldi	r20, 0x01	; 1
    34dc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_HIGH);
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	64 e0       	ldi	r22, 0x04	; 4
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	65 e0       	ldi	r22, 0x05	; 5
    34ee:	40 e0       	ldi	r20, 0x00	; 0
    34f0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	66 e0       	ldi	r22, 0x06	; 6
    34f8:	40 e0       	ldi	r20, 0x00	; 0
    34fa:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    34fe:	7d c0       	rjmp	.+250    	; 0x35fa <binaryLEDS+0x254>
			break;
		case 4:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	67 e0       	ldi	r22, 0x07	; 7
    3504:	40 e0       	ldi	r20, 0x00	; 0
    3506:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	64 e0       	ldi	r22, 0x04	; 4
    350e:	40 e0       	ldi	r20, 0x00	; 0
    3510:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_HIGH);
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	65 e0       	ldi	r22, 0x05	; 5
    3518:	41 e0       	ldi	r20, 0x01	; 1
    351a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	66 e0       	ldi	r22, 0x06	; 6
    3522:	40 e0       	ldi	r20, 0x00	; 0
    3524:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    3528:	68 c0       	rjmp	.+208    	; 0x35fa <binaryLEDS+0x254>
			break;
		case 5:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	67 e0       	ldi	r22, 0x07	; 7
    352e:	41 e0       	ldi	r20, 0x01	; 1
    3530:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	64 e0       	ldi	r22, 0x04	; 4
    3538:	40 e0       	ldi	r20, 0x00	; 0
    353a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_HIGH);
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	65 e0       	ldi	r22, 0x05	; 5
    3542:	41 e0       	ldi	r20, 0x01	; 1
    3544:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	66 e0       	ldi	r22, 0x06	; 6
    354c:	40 e0       	ldi	r20, 0x00	; 0
    354e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    3552:	53 c0       	rjmp	.+166    	; 0x35fa <binaryLEDS+0x254>
			break;
		case 6:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	67 e0       	ldi	r22, 0x07	; 7
    3558:	40 e0       	ldi	r20, 0x00	; 0
    355a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_HIGH);
    355e:	80 e0       	ldi	r24, 0x00	; 0
    3560:	64 e0       	ldi	r22, 0x04	; 4
    3562:	41 e0       	ldi	r20, 0x01	; 1
    3564:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_HIGH);
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	65 e0       	ldi	r22, 0x05	; 5
    356c:	41 e0       	ldi	r20, 0x01	; 1
    356e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	66 e0       	ldi	r22, 0x06	; 6
    3576:	40 e0       	ldi	r20, 0x00	; 0
    3578:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    357c:	3e c0       	rjmp	.+124    	; 0x35fa <binaryLEDS+0x254>
			break;
		case 7:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	67 e0       	ldi	r22, 0x07	; 7
    3582:	41 e0       	ldi	r20, 0x01	; 1
    3584:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_HIGH);
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	64 e0       	ldi	r22, 0x04	; 4
    358c:	41 e0       	ldi	r20, 0x01	; 1
    358e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_HIGH);
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	65 e0       	ldi	r22, 0x05	; 5
    3596:	41 e0       	ldi	r20, 0x01	; 1
    3598:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_LOW);
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	66 e0       	ldi	r22, 0x06	; 6
    35a0:	40 e0       	ldi	r20, 0x00	; 0
    35a2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    35a6:	29 c0       	rjmp	.+82     	; 0x35fa <binaryLEDS+0x254>
			break;
		case 8:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_LOW);
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	67 e0       	ldi	r22, 0x07	; 7
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	64 e0       	ldi	r22, 0x04	; 4
    35b6:	40 e0       	ldi	r20, 0x00	; 0
    35b8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	65 e0       	ldi	r22, 0x05	; 5
    35c0:	40 e0       	ldi	r20, 0x00	; 0
    35c2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_HIGH);
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	66 e0       	ldi	r22, 0x06	; 6
    35ca:	41 e0       	ldi	r20, 0x01	; 1
    35cc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    35d0:	14 c0       	rjmp	.+40     	; 0x35fa <binaryLEDS+0x254>
			break;
		case 9:
			GPIO_voidSetPinValue(PORT_B, LED_PORTB_KIT_RED, LOGIC_HIGH);
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	67 e0       	ldi	r22, 0x07	; 7
    35d6:	41 e0       	ldi	r20, 0x01	; 1
    35d8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_GREEN, LOGIC_LOW);
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	64 e0       	ldi	r22, 0x04	; 4
    35e0:	40 e0       	ldi	r20, 0x00	; 0
    35e2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_BLUE, LOGIC_LOW);
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	65 e0       	ldi	r22, 0x05	; 5
    35ea:	40 e0       	ldi	r20, 0x00	; 0
    35ec:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			GPIO_voidSetPinValue(PORT_A, LED_PORTA_KIT_YELLOW, LOGIC_HIGH);
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	66 e0       	ldi	r22, 0x06	; 6
    35f4:	41 e0       	ldi	r20, 0x01	; 1
    35f6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			break;
	}
}
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	cf 91       	pop	r28
    3602:	df 91       	pop	r29
    3604:	08 95       	ret

00003606 <TrafficLights>:


void TrafficLights(void) {
    3606:	df 93       	push	r29
    3608:	cf 93       	push	r28
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	ab 97       	sbiw	r28, 0x2b	; 43
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
	u8 i = 1;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	8b a7       	std	Y+43, r24	; 0x2b
	LED_voidOn(PORT_B, LED_PORTB_KIT_RED);
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	67 e0       	ldi	r22, 0x07	; 7
    3622:	0e 94 67 0d 	call	0x1ace	; 0x1ace <LED_voidOn>
	for(i = 1 ; i < 4 ; i++)
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	8b a7       	std	Y+43, r24	; 0x2b
    362a:	79 c0       	rjmp	.+242    	; 0x371e <TrafficLights+0x118>
	{
		SEGMENT_voidDisplay(PORT_B, i);
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	6b a5       	ldd	r22, Y+43	; 0x2b
    3630:	0e 94 08 0c 	call	0x1810	; 0x1810 <SEGMENT_voidDisplay>
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	a8 e4       	ldi	r26, 0x48	; 72
    363a:	b4 e4       	ldi	r27, 0x44	; 68
    363c:	8f a3       	std	Y+39, r24	; 0x27
    363e:	98 a7       	std	Y+40, r25	; 0x28
    3640:	a9 a7       	std	Y+41, r26	; 0x29
    3642:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3644:	6f a1       	ldd	r22, Y+39	; 0x27
    3646:	78 a5       	ldd	r23, Y+40	; 0x28
    3648:	89 a5       	ldd	r24, Y+41	; 0x29
    364a:	9a a5       	ldd	r25, Y+42	; 0x2a
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	4a e7       	ldi	r20, 0x7A	; 122
    3652:	55 e4       	ldi	r21, 0x45	; 69
    3654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	8b a3       	std	Y+35, r24	; 0x23
    365e:	9c a3       	std	Y+36, r25	; 0x24
    3660:	ad a3       	std	Y+37, r26	; 0x25
    3662:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3664:	6b a1       	ldd	r22, Y+35	; 0x23
    3666:	7c a1       	ldd	r23, Y+36	; 0x24
    3668:	8d a1       	ldd	r24, Y+37	; 0x25
    366a:	9e a1       	ldd	r25, Y+38	; 0x26
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e8       	ldi	r20, 0x80	; 128
    3672:	5f e3       	ldi	r21, 0x3F	; 63
    3674:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3678:	88 23       	and	r24, r24
    367a:	2c f4       	brge	.+10     	; 0x3686 <TrafficLights+0x80>
		__ticks = 1;
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	9a a3       	std	Y+34, r25	; 0x22
    3682:	89 a3       	std	Y+33, r24	; 0x21
    3684:	3f c0       	rjmp	.+126    	; 0x3704 <TrafficLights+0xfe>
	else if (__tmp > 65535)
    3686:	6b a1       	ldd	r22, Y+35	; 0x23
    3688:	7c a1       	ldd	r23, Y+36	; 0x24
    368a:	8d a1       	ldd	r24, Y+37	; 0x25
    368c:	9e a1       	ldd	r25, Y+38	; 0x26
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	3f ef       	ldi	r19, 0xFF	; 255
    3692:	4f e7       	ldi	r20, 0x7F	; 127
    3694:	57 e4       	ldi	r21, 0x47	; 71
    3696:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    369a:	18 16       	cp	r1, r24
    369c:	4c f5       	brge	.+82     	; 0x36f0 <TrafficLights+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369e:	6f a1       	ldd	r22, Y+39	; 0x27
    36a0:	78 a5       	ldd	r23, Y+40	; 0x28
    36a2:	89 a5       	ldd	r24, Y+41	; 0x29
    36a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e2       	ldi	r20, 0x20	; 32
    36ac:	51 e4       	ldi	r21, 0x41	; 65
    36ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	9a a3       	std	Y+34, r25	; 0x22
    36c4:	89 a3       	std	Y+33, r24	; 0x21
    36c6:	0f c0       	rjmp	.+30     	; 0x36e6 <TrafficLights+0xe0>
    36c8:	80 e9       	ldi	r24, 0x90	; 144
    36ca:	91 e0       	ldi	r25, 0x01	; 1
    36cc:	98 a3       	std	Y+32, r25	; 0x20
    36ce:	8f 8f       	std	Y+31, r24	; 0x1f
    36d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36d2:	98 a1       	ldd	r25, Y+32	; 0x20
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	f1 f7       	brne	.-4      	; 0x36d4 <TrafficLights+0xce>
    36d8:	98 a3       	std	Y+32, r25	; 0x20
    36da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36dc:	89 a1       	ldd	r24, Y+33	; 0x21
    36de:	9a a1       	ldd	r25, Y+34	; 0x22
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	9a a3       	std	Y+34, r25	; 0x22
    36e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e6:	89 a1       	ldd	r24, Y+33	; 0x21
    36e8:	9a a1       	ldd	r25, Y+34	; 0x22
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	69 f7       	brne	.-38     	; 0x36c8 <TrafficLights+0xc2>
    36ee:	14 c0       	rjmp	.+40     	; 0x3718 <TrafficLights+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f0:	6b a1       	ldd	r22, Y+35	; 0x23
    36f2:	7c a1       	ldd	r23, Y+36	; 0x24
    36f4:	8d a1       	ldd	r24, Y+37	; 0x25
    36f6:	9e a1       	ldd	r25, Y+38	; 0x26
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	9a a3       	std	Y+34, r25	; 0x22
    3702:	89 a3       	std	Y+33, r24	; 0x21
    3704:	89 a1       	ldd	r24, Y+33	; 0x21
    3706:	9a a1       	ldd	r25, Y+34	; 0x22
    3708:	9e 8f       	std	Y+30, r25	; 0x1e
    370a:	8d 8f       	std	Y+29, r24	; 0x1d
    370c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    370e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <TrafficLights+0x10a>
    3714:	9e 8f       	std	Y+30, r25	; 0x1e
    3716:	8d 8f       	std	Y+29, r24	; 0x1d


void TrafficLights(void) {
	u8 i = 1;
	LED_voidOn(PORT_B, LED_PORTB_KIT_RED);
	for(i = 1 ; i < 4 ; i++)
    3718:	8b a5       	ldd	r24, Y+43	; 0x2b
    371a:	8f 5f       	subi	r24, 0xFF	; 255
    371c:	8b a7       	std	Y+43, r24	; 0x2b
    371e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3720:	84 30       	cpi	r24, 0x04	; 4
    3722:	08 f4       	brcc	.+2      	; 0x3726 <TrafficLights+0x120>
    3724:	83 cf       	rjmp	.-250    	; 0x362c <TrafficLights+0x26>
	{
		SEGMENT_voidDisplay(PORT_B, i);
		_delay_ms(800);
	}
	LED_voidOff(PORT_B, LED_PORTB_KIT_RED);
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	67 e0       	ldi	r22, 0x07	; 7
    372a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_voidOff>

	LED_voidOn(PORT_A, LED_PORTA_KIT_YELLOW);
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	66 e0       	ldi	r22, 0x06	; 6
    3732:	0e 94 67 0d 	call	0x1ace	; 0x1ace <LED_voidOn>
	for(i = 1 ; i < 4 ; i++)
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	8b a7       	std	Y+43, r24	; 0x2b
    373a:	79 c0       	rjmp	.+242    	; 0x382e <TrafficLights+0x228>
	{
		SEGMENT_voidDisplay(PORT_B, i);
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	6b a5       	ldd	r22, Y+43	; 0x2b
    3740:	0e 94 08 0c 	call	0x1810	; 0x1810 <SEGMENT_voidDisplay>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	a8 e4       	ldi	r26, 0x48	; 72
    374a:	b4 e4       	ldi	r27, 0x44	; 68
    374c:	89 8f       	std	Y+25, r24	; 0x19
    374e:	9a 8f       	std	Y+26, r25	; 0x1a
    3750:	ab 8f       	std	Y+27, r26	; 0x1b
    3752:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3754:	69 8d       	ldd	r22, Y+25	; 0x19
    3756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    375a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	4a e7       	ldi	r20, 0x7A	; 122
    3762:	55 e4       	ldi	r21, 0x45	; 69
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	8d 8b       	std	Y+21, r24	; 0x15
    376e:	9e 8b       	std	Y+22, r25	; 0x16
    3770:	af 8b       	std	Y+23, r26	; 0x17
    3772:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3774:	6d 89       	ldd	r22, Y+21	; 0x15
    3776:	7e 89       	ldd	r23, Y+22	; 0x16
    3778:	8f 89       	ldd	r24, Y+23	; 0x17
    377a:	98 8d       	ldd	r25, Y+24	; 0x18
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e8       	ldi	r20, 0x80	; 128
    3782:	5f e3       	ldi	r21, 0x3F	; 63
    3784:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3788:	88 23       	and	r24, r24
    378a:	2c f4       	brge	.+10     	; 0x3796 <TrafficLights+0x190>
		__ticks = 1;
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	9c 8b       	std	Y+20, r25	; 0x14
    3792:	8b 8b       	std	Y+19, r24	; 0x13
    3794:	3f c0       	rjmp	.+126    	; 0x3814 <TrafficLights+0x20e>
	else if (__tmp > 65535)
    3796:	6d 89       	ldd	r22, Y+21	; 0x15
    3798:	7e 89       	ldd	r23, Y+22	; 0x16
    379a:	8f 89       	ldd	r24, Y+23	; 0x17
    379c:	98 8d       	ldd	r25, Y+24	; 0x18
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	3f ef       	ldi	r19, 0xFF	; 255
    37a2:	4f e7       	ldi	r20, 0x7F	; 127
    37a4:	57 e4       	ldi	r21, 0x47	; 71
    37a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37aa:	18 16       	cp	r1, r24
    37ac:	4c f5       	brge	.+82     	; 0x3800 <TrafficLights+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ae:	69 8d       	ldd	r22, Y+25	; 0x19
    37b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e2       	ldi	r20, 0x20	; 32
    37bc:	51 e4       	ldi	r21, 0x41	; 65
    37be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	9c 8b       	std	Y+20, r25	; 0x14
    37d4:	8b 8b       	std	Y+19, r24	; 0x13
    37d6:	0f c0       	rjmp	.+30     	; 0x37f6 <TrafficLights+0x1f0>
    37d8:	80 e9       	ldi	r24, 0x90	; 144
    37da:	91 e0       	ldi	r25, 0x01	; 1
    37dc:	9a 8b       	std	Y+18, r25	; 0x12
    37de:	89 8b       	std	Y+17, r24	; 0x11
    37e0:	89 89       	ldd	r24, Y+17	; 0x11
    37e2:	9a 89       	ldd	r25, Y+18	; 0x12
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	f1 f7       	brne	.-4      	; 0x37e4 <TrafficLights+0x1de>
    37e8:	9a 8b       	std	Y+18, r25	; 0x12
    37ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ec:	8b 89       	ldd	r24, Y+19	; 0x13
    37ee:	9c 89       	ldd	r25, Y+20	; 0x14
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	9c 8b       	std	Y+20, r25	; 0x14
    37f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f6:	8b 89       	ldd	r24, Y+19	; 0x13
    37f8:	9c 89       	ldd	r25, Y+20	; 0x14
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	69 f7       	brne	.-38     	; 0x37d8 <TrafficLights+0x1d2>
    37fe:	14 c0       	rjmp	.+40     	; 0x3828 <TrafficLights+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3800:	6d 89       	ldd	r22, Y+21	; 0x15
    3802:	7e 89       	ldd	r23, Y+22	; 0x16
    3804:	8f 89       	ldd	r24, Y+23	; 0x17
    3806:	98 8d       	ldd	r25, Y+24	; 0x18
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	9c 8b       	std	Y+20, r25	; 0x14
    3812:	8b 8b       	std	Y+19, r24	; 0x13
    3814:	8b 89       	ldd	r24, Y+19	; 0x13
    3816:	9c 89       	ldd	r25, Y+20	; 0x14
    3818:	98 8b       	std	Y+16, r25	; 0x10
    381a:	8f 87       	std	Y+15, r24	; 0x0f
    381c:	8f 85       	ldd	r24, Y+15	; 0x0f
    381e:	98 89       	ldd	r25, Y+16	; 0x10
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <TrafficLights+0x21a>
    3824:	98 8b       	std	Y+16, r25	; 0x10
    3826:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(800);
	}
	LED_voidOff(PORT_B, LED_PORTB_KIT_RED);

	LED_voidOn(PORT_A, LED_PORTA_KIT_YELLOW);
	for(i = 1 ; i < 4 ; i++)
    3828:	8b a5       	ldd	r24, Y+43	; 0x2b
    382a:	8f 5f       	subi	r24, 0xFF	; 255
    382c:	8b a7       	std	Y+43, r24	; 0x2b
    382e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3830:	84 30       	cpi	r24, 0x04	; 4
    3832:	08 f4       	brcc	.+2      	; 0x3836 <TrafficLights+0x230>
    3834:	83 cf       	rjmp	.-250    	; 0x373c <TrafficLights+0x136>
	{
		SEGMENT_voidDisplay(PORT_B, i);
		_delay_ms(800);
	}
	LED_voidOff(PORT_A, LED_PORTA_KIT_YELLOW);
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	66 e0       	ldi	r22, 0x06	; 6
    383a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_voidOff>

	LED_voidOn(PORT_A, LED_PORTA_KIT_GREEN);
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	64 e0       	ldi	r22, 0x04	; 4
    3842:	0e 94 67 0d 	call	0x1ace	; 0x1ace <LED_voidOn>
	for(i = 1 ; i < 4 ; i++)
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	8b a7       	std	Y+43, r24	; 0x2b
    384a:	79 c0       	rjmp	.+242    	; 0x393e <TrafficLights+0x338>
	{
		SEGMENT_voidDisplay(PORT_B, i);
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	6b a5       	ldd	r22, Y+43	; 0x2b
    3850:	0e 94 08 0c 	call	0x1810	; 0x1810 <SEGMENT_voidDisplay>
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	a8 e4       	ldi	r26, 0x48	; 72
    385a:	b4 e4       	ldi	r27, 0x44	; 68
    385c:	8b 87       	std	Y+11, r24	; 0x0b
    385e:	9c 87       	std	Y+12, r25	; 0x0c
    3860:	ad 87       	std	Y+13, r26	; 0x0d
    3862:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3864:	6b 85       	ldd	r22, Y+11	; 0x0b
    3866:	7c 85       	ldd	r23, Y+12	; 0x0c
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	9e 85       	ldd	r25, Y+14	; 0x0e
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	4a e7       	ldi	r20, 0x7A	; 122
    3872:	55 e4       	ldi	r21, 0x45	; 69
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	8f 83       	std	Y+7, r24	; 0x07
    387e:	98 87       	std	Y+8, r25	; 0x08
    3880:	a9 87       	std	Y+9, r26	; 0x09
    3882:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3884:	6f 81       	ldd	r22, Y+7	; 0x07
    3886:	78 85       	ldd	r23, Y+8	; 0x08
    3888:	89 85       	ldd	r24, Y+9	; 0x09
    388a:	9a 85       	ldd	r25, Y+10	; 0x0a
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 e8       	ldi	r20, 0x80	; 128
    3892:	5f e3       	ldi	r21, 0x3F	; 63
    3894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3898:	88 23       	and	r24, r24
    389a:	2c f4       	brge	.+10     	; 0x38a6 <TrafficLights+0x2a0>
		__ticks = 1;
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	9e 83       	std	Y+6, r25	; 0x06
    38a2:	8d 83       	std	Y+5, r24	; 0x05
    38a4:	3f c0       	rjmp	.+126    	; 0x3924 <TrafficLights+0x31e>
	else if (__tmp > 65535)
    38a6:	6f 81       	ldd	r22, Y+7	; 0x07
    38a8:	78 85       	ldd	r23, Y+8	; 0x08
    38aa:	89 85       	ldd	r24, Y+9	; 0x09
    38ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	3f ef       	ldi	r19, 0xFF	; 255
    38b2:	4f e7       	ldi	r20, 0x7F	; 127
    38b4:	57 e4       	ldi	r21, 0x47	; 71
    38b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ba:	18 16       	cp	r1, r24
    38bc:	4c f5       	brge	.+82     	; 0x3910 <TrafficLights+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38be:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e2       	ldi	r20, 0x20	; 32
    38cc:	51 e4       	ldi	r21, 0x41	; 65
    38ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	bc 01       	movw	r22, r24
    38d8:	cd 01       	movw	r24, r26
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9e 83       	std	Y+6, r25	; 0x06
    38e4:	8d 83       	std	Y+5, r24	; 0x05
    38e6:	0f c0       	rjmp	.+30     	; 0x3906 <TrafficLights+0x300>
    38e8:	80 e9       	ldi	r24, 0x90	; 144
    38ea:	91 e0       	ldi	r25, 0x01	; 1
    38ec:	9c 83       	std	Y+4, r25	; 0x04
    38ee:	8b 83       	std	Y+3, r24	; 0x03
    38f0:	8b 81       	ldd	r24, Y+3	; 0x03
    38f2:	9c 81       	ldd	r25, Y+4	; 0x04
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <TrafficLights+0x2ee>
    38f8:	9c 83       	std	Y+4, r25	; 0x04
    38fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38fc:	8d 81       	ldd	r24, Y+5	; 0x05
    38fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	9e 83       	std	Y+6, r25	; 0x06
    3904:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3906:	8d 81       	ldd	r24, Y+5	; 0x05
    3908:	9e 81       	ldd	r25, Y+6	; 0x06
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	69 f7       	brne	.-38     	; 0x38e8 <TrafficLights+0x2e2>
    390e:	14 c0       	rjmp	.+40     	; 0x3938 <TrafficLights+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3910:	6f 81       	ldd	r22, Y+7	; 0x07
    3912:	78 85       	ldd	r23, Y+8	; 0x08
    3914:	89 85       	ldd	r24, Y+9	; 0x09
    3916:	9a 85       	ldd	r25, Y+10	; 0x0a
    3918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	9e 83       	std	Y+6, r25	; 0x06
    3922:	8d 83       	std	Y+5, r24	; 0x05
    3924:	8d 81       	ldd	r24, Y+5	; 0x05
    3926:	9e 81       	ldd	r25, Y+6	; 0x06
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	9a 81       	ldd	r25, Y+2	; 0x02
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <TrafficLights+0x32a>
    3934:	9a 83       	std	Y+2, r25	; 0x02
    3936:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(800);
	}
	LED_voidOff(PORT_A, LED_PORTA_KIT_YELLOW);

	LED_voidOn(PORT_A, LED_PORTA_KIT_GREEN);
	for(i = 1 ; i < 4 ; i++)
    3938:	8b a5       	ldd	r24, Y+43	; 0x2b
    393a:	8f 5f       	subi	r24, 0xFF	; 255
    393c:	8b a7       	std	Y+43, r24	; 0x2b
    393e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3940:	84 30       	cpi	r24, 0x04	; 4
    3942:	08 f4       	brcc	.+2      	; 0x3946 <TrafficLights+0x340>
    3944:	83 cf       	rjmp	.-250    	; 0x384c <TrafficLights+0x246>
	{
		SEGMENT_voidDisplay(PORT_B, i);
		_delay_ms(800);
	}
	LED_voidOff(PORT_A, LED_PORTA_KIT_GREEN);
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	64 e0       	ldi	r22, 0x04	; 4
    394a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LED_voidOff>
}
    394e:	ab 96       	adiw	r28, 0x2b	; 43
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <displayKEYPADLCD>:

void displayKEYPADLCD(void) {
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	0f 92       	push	r0
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
	u8 keyValue = KEYPAD_u8getPressedKey();
    396a:	0e 94 aa 18 	call	0x3154	; 0x3154 <KEYPAD_u8getPressedKey>
    396e:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidDisplayCharacter(keyValue);
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	0e 94 42 13 	call	0x2684	; 0x2684 <LCD_voidDisplayCharacter>
	LCD_voidMoveCursor(0,0);
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_voidMoveCursor>
}
    397e:	0f 90       	pop	r0
    3980:	cf 91       	pop	r28
    3982:	df 91       	pop	r29
    3984:	08 95       	ret

00003986 <main>:

/*******************************************************************************
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void) {
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
	systemInit();
    398e:	0e 94 29 19 	call	0x3252	; 0x3252 <systemInit>
    3992:	ff cf       	rjmp	.-2      	; 0x3992 <main+0xc>

00003994 <__prologue_saves__>:
    3994:	2f 92       	push	r2
    3996:	3f 92       	push	r3
    3998:	4f 92       	push	r4
    399a:	5f 92       	push	r5
    399c:	6f 92       	push	r6
    399e:	7f 92       	push	r7
    39a0:	8f 92       	push	r8
    39a2:	9f 92       	push	r9
    39a4:	af 92       	push	r10
    39a6:	bf 92       	push	r11
    39a8:	cf 92       	push	r12
    39aa:	df 92       	push	r13
    39ac:	ef 92       	push	r14
    39ae:	ff 92       	push	r15
    39b0:	0f 93       	push	r16
    39b2:	1f 93       	push	r17
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	ca 1b       	sub	r28, r26
    39be:	db 0b       	sbc	r29, r27
    39c0:	0f b6       	in	r0, 0x3f	; 63
    39c2:	f8 94       	cli
    39c4:	de bf       	out	0x3e, r29	; 62
    39c6:	0f be       	out	0x3f, r0	; 63
    39c8:	cd bf       	out	0x3d, r28	; 61
    39ca:	09 94       	ijmp

000039cc <__epilogue_restores__>:
    39cc:	2a 88       	ldd	r2, Y+18	; 0x12
    39ce:	39 88       	ldd	r3, Y+17	; 0x11
    39d0:	48 88       	ldd	r4, Y+16	; 0x10
    39d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    39d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    39d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    39d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    39da:	9b 84       	ldd	r9, Y+11	; 0x0b
    39dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    39de:	b9 84       	ldd	r11, Y+9	; 0x09
    39e0:	c8 84       	ldd	r12, Y+8	; 0x08
    39e2:	df 80       	ldd	r13, Y+7	; 0x07
    39e4:	ee 80       	ldd	r14, Y+6	; 0x06
    39e6:	fd 80       	ldd	r15, Y+5	; 0x05
    39e8:	0c 81       	ldd	r16, Y+4	; 0x04
    39ea:	1b 81       	ldd	r17, Y+3	; 0x03
    39ec:	aa 81       	ldd	r26, Y+2	; 0x02
    39ee:	b9 81       	ldd	r27, Y+1	; 0x01
    39f0:	ce 0f       	add	r28, r30
    39f2:	d1 1d       	adc	r29, r1
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
    39fe:	ed 01       	movw	r28, r26
    3a00:	08 95       	ret

00003a02 <itoa>:
    3a02:	fb 01       	movw	r30, r22
    3a04:	9f 01       	movw	r18, r30
    3a06:	e8 94       	clt
    3a08:	42 30       	cpi	r20, 0x02	; 2
    3a0a:	c4 f0       	brlt	.+48     	; 0x3a3c <itoa+0x3a>
    3a0c:	45 32       	cpi	r20, 0x25	; 37
    3a0e:	b4 f4       	brge	.+44     	; 0x3a3c <itoa+0x3a>
    3a10:	4a 30       	cpi	r20, 0x0A	; 10
    3a12:	29 f4       	brne	.+10     	; 0x3a1e <itoa+0x1c>
    3a14:	97 fb       	bst	r25, 7
    3a16:	1e f4       	brtc	.+6      	; 0x3a1e <itoa+0x1c>
    3a18:	90 95       	com	r25
    3a1a:	81 95       	neg	r24
    3a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1e:	64 2f       	mov	r22, r20
    3a20:	77 27       	eor	r23, r23
    3a22:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__udivmodhi4>
    3a26:	80 5d       	subi	r24, 0xD0	; 208
    3a28:	8a 33       	cpi	r24, 0x3A	; 58
    3a2a:	0c f0       	brlt	.+2      	; 0x3a2e <itoa+0x2c>
    3a2c:	89 5d       	subi	r24, 0xD9	; 217
    3a2e:	81 93       	st	Z+, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	00 97       	sbiw	r24, 0x00	; 0
    3a34:	a1 f7       	brne	.-24     	; 0x3a1e <itoa+0x1c>
    3a36:	16 f4       	brtc	.+4      	; 0x3a3c <itoa+0x3a>
    3a38:	5d e2       	ldi	r21, 0x2D	; 45
    3a3a:	51 93       	st	Z+, r21
    3a3c:	10 82       	st	Z, r1
    3a3e:	c9 01       	movw	r24, r18
    3a40:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <strrev>

00003a44 <strrev>:
    3a44:	dc 01       	movw	r26, r24
    3a46:	fc 01       	movw	r30, r24
    3a48:	67 2f       	mov	r22, r23
    3a4a:	71 91       	ld	r23, Z+
    3a4c:	77 23       	and	r23, r23
    3a4e:	e1 f7       	brne	.-8      	; 0x3a48 <strrev+0x4>
    3a50:	32 97       	sbiw	r30, 0x02	; 2
    3a52:	04 c0       	rjmp	.+8      	; 0x3a5c <strrev+0x18>
    3a54:	7c 91       	ld	r23, X
    3a56:	6d 93       	st	X+, r22
    3a58:	70 83       	st	Z, r23
    3a5a:	62 91       	ld	r22, -Z
    3a5c:	ae 17       	cp	r26, r30
    3a5e:	bf 07       	cpc	r27, r31
    3a60:	c8 f3       	brcs	.-14     	; 0x3a54 <strrev+0x10>
    3a62:	08 95       	ret

00003a64 <__udivmodhi4>:
    3a64:	aa 1b       	sub	r26, r26
    3a66:	bb 1b       	sub	r27, r27
    3a68:	51 e1       	ldi	r21, 0x11	; 17
    3a6a:	07 c0       	rjmp	.+14     	; 0x3a7a <__udivmodhi4_ep>

00003a6c <__udivmodhi4_loop>:
    3a6c:	aa 1f       	adc	r26, r26
    3a6e:	bb 1f       	adc	r27, r27
    3a70:	a6 17       	cp	r26, r22
    3a72:	b7 07       	cpc	r27, r23
    3a74:	10 f0       	brcs	.+4      	; 0x3a7a <__udivmodhi4_ep>
    3a76:	a6 1b       	sub	r26, r22
    3a78:	b7 0b       	sbc	r27, r23

00003a7a <__udivmodhi4_ep>:
    3a7a:	88 1f       	adc	r24, r24
    3a7c:	99 1f       	adc	r25, r25
    3a7e:	5a 95       	dec	r21
    3a80:	a9 f7       	brne	.-22     	; 0x3a6c <__udivmodhi4_loop>
    3a82:	80 95       	com	r24
    3a84:	90 95       	com	r25
    3a86:	bc 01       	movw	r22, r24
    3a88:	cd 01       	movw	r24, r26
    3a8a:	08 95       	ret

00003a8c <_exit>:
    3a8c:	f8 94       	cli

00003a8e <__stop_program>:
    3a8e:	ff cf       	rjmp	.-2      	; 0x3a8e <__stop_program>
