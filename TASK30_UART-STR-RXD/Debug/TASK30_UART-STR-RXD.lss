
TASK30_UART-STR-RXD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  00004a0e  00004aa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008001b0  008001b0  00004bf2  2**0
                  ALLOC
  3 .stab         00006348  00000000  00000000  00004bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004f3c  00000000  00000000  0000af3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000fe78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00010058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0001028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00012b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00014143  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00015524  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00015724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00015a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016489  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__vector_1>
       8:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__vector_2>
       c:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__vector_6>
      1c:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_7>
      20:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__vector_8>
      24:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_9>
      28:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__vector_10>
      2c:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 23 	call	0x4786	; 0x4786 <main>
      8a:	0c 94 05 25 	jmp	0x4a0a	; 0x4a0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 24 	jmp	0x4842	; 0x4842 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e8       	ldi	r26, 0x87	; 135
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 24 	jmp	0x487a	; 0x487a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 24 	jmp	0x4842	; 0x4842 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e8       	ldi	r24, 0x87	; 135
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 24 	jmp	0x487a	; 0x487a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 24 	jmp	0x4852	; 0x4852 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e8       	ldi	r22, 0x87	; 135
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 45 24 	jmp	0x488a	; 0x488a <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 2a 24 	jmp	0x4854	; 0x4854 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 46 24 	jmp	0x488c	; 0x488c <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 29 24 	jmp	0x4852	; 0x4852 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 45 24 	jmp	0x488a	; 0x488a <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e1 57       	subi	r30, 0x71	; 113
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <UART_Initialization>:

/*******************************************************************************
 *                              				FUNCTION IMPLEMENTATIONS				                   	   *
 *******************************************************************************/

void UART_Initialization(void) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	// When will this eqn be in -Ve? if the Fcpu is less than '1'
	// What does the -Ve UBBR mean? it means i can't use this baud rate @ this Fcpu
	// The Fcpu must be atleast 8 times larger than the Baud Rate!!!
	// So if my Fcpu = 16Mhz & Baud = 9600, then the UBBR = 207.
*/
	UCSRA_REG->U2X = UART_SPEED;
     f54:	eb e2       	ldi	r30, 0x2B	; 43
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	80 83       	st	Z, r24
	UCSRB_REG->TXEN = 1;
     f5e:	ea e2       	ldi	r30, 0x2A	; 42
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	80 83       	st	Z, r24
	UCSRB_REG->RXEN = 1;
     f68:	ea e2       	ldi	r30, 0x2A	; 42
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 61       	ori	r24, 0x10	; 16
     f70:	80 83       	st	Z, r24

	u8 UCSRC_Value = 0;
     f72:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRC_Value, UCSRC_URSEL);
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	80 68       	ori	r24, 0x80	; 128
     f78:	89 83       	std	Y+1, r24	; 0x01
#elif (UART_BITSIZE == UART_9_BITSIZE)
	SET_BIT(UCSRC_Value, UCSRC_UCSZ0);
	SET_BIT(UCSRC_Value, UCSRC_UCSZ1);
	SET_BIT(UCSRB_REG, UCSZ2);
#else
	SET_BIT(UCSRC_Value, UCSRC_UCSZ0);
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_Value, UCSRC_UCSZ1);
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	84 60       	ori	r24, 0x04	; 4
     f84:	89 83       	std	Y+1, r24	; 0x01
#endif
	UCSRC_REG = UCSRC_Value;
     f86:	e0 e4       	ldi	r30, 0x40	; 64
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	80 83       	st	Z, r24

	// For F_CPU: 16 MHz & Baud: 9600, My UBRR: 103
	UBRRL_REG = (u8)(UBRR_VAL);
     f8e:	e9 e2       	ldi	r30, 0x29	; 41
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	87 e6       	ldi	r24, 0x67	; 103
     f94:	80 83       	st	Z, r24
	UBRRH_REG = (u8)(UBRR_VAL >> 8);
     f96:	e0 e4       	ldi	r30, 0x40	; 64
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	10 82       	st	Z, r1
	UCSRB_REG->RXCIE = 1;
	UCSRB_REG->TXCIE = 1;
	UCSRB_REG->UDRIE = 1;
#endif

}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_voidSendByte_Polling>:


// Responsible for the USART to send a byte
void UART_voidSendByte_Polling(const u8 data) {
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
	while(UCSRA_REG->UDRE == 0);
     fb0:	eb e2       	ldi	r30, 0x2B	; 43
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 72       	andi	r24, 0x20	; 32
     fb8:	88 23       	and	r24, r24
     fba:	d1 f3       	breq	.-12     	; 0xfb0 <UART_voidSendByte_Polling+0xc>
	//UCSRA_REG->TXC = 1;

	UDR_REG = data;
     fbc:	ec e2       	ldi	r30, 0x2C	; 44
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	80 83       	st	Z, r24

	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	// This is waiting for the flag to be set to '0' to know that I received data
	*******************************************************************/
}
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <UART_voidReceiveByte_Polling>:


// Responsible for the USART to receive a byte
u8 UART_voidReceiveByte_Polling(void) {
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	// This is waiting for the flag to be set to '0' to know that I received data
	while(UCSRA_REG->RXC == 0);
     fd4:	eb e2       	ldi	r30, 0x2B	; 43
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 78       	andi	r24, 0x80	; 128
     fdc:	88 23       	and	r24, r24
     fde:	d1 f3       	breq	.-12     	; 0xfd4 <UART_voidReceiveByte_Polling+0x8>
	//UCSRA_REG->RXC = 1;

	return UDR_REG;		// When reading
     fe0:	ec e2       	ldi	r30, 0x2C	; 44
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <UART_voidSendString>:


// Responsible for the USART to send an array of bytes, a string
void UART_voidSendString(const u8 *str) {
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <UART_voidSendString+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <UART_voidSendString+0x8>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
	u16 i = 0;
     ffc:	1a 82       	std	Y+2, r1	; 0x02
     ffe:	19 82       	std	Y+1, r1	; 0x01
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <UART_voidSendString+0x34>
	while (str[i] != '\0') {
		UART_voidSendByte_Polling(str[i]);
    1002:	2b 81       	ldd	r18, Y+3	; 0x03
    1004:	3c 81       	ldd	r19, Y+4	; 0x04
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	f9 01       	movw	r30, r18
    100c:	e8 0f       	add	r30, r24
    100e:	f9 1f       	adc	r31, r25
    1010:	80 81       	ld	r24, Z
    1012:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <UART_voidSendByte_Polling>
		i++;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01


// Responsible for the USART to send an array of bytes, a string
void UART_voidSendString(const u8 *str) {
	u16 i = 0;
	while (str[i] != '\0') {
    1020:	2b 81       	ldd	r18, Y+3	; 0x03
    1022:	3c 81       	ldd	r19, Y+4	; 0x04
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	f9 01       	movw	r30, r18
    102a:	e8 0f       	add	r30, r24
    102c:	f9 1f       	adc	r31, r25
    102e:	80 81       	ld	r24, Z
    1030:	88 23       	and	r24, r24
    1032:	39 f7       	brne	.-50     	; 0x1002 <UART_voidSendString+0x16>
		UART_voidSendByte_Polling(str[i]);
		i++;
	}
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <USART_voidReceiveString>:


// Responsible for the USART to receive an array of bytes, a string
void USART_voidReceiveString(u8 *str) {
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <USART_voidReceiveString+0xa>
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9b 83       	std	Y+3, r25	; 0x03
    1054:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1056:	19 82       	std	Y+1, r1	; 0x01
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <USART_voidReceiveString+0x36>
	//str[i] = UART_voidReceiveByte_Polling();

	while (str[i] != '#') {
		i++;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_voidReceiveByte_Polling();
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	8c 01       	movw	r16, r24
    106c:	02 0f       	add	r16, r18
    106e:	13 1f       	adc	r17, r19
    1070:	0e 94 e6 07 	call	0xfcc	; 0xfcc <UART_voidReceiveByte_Polling>
    1074:	f8 01       	movw	r30, r16
    1076:	80 83       	st	Z, r24
// Responsible for the USART to receive an array of bytes, a string
void USART_voidReceiveString(u8 *str) {
	u8 i = 0;
	//str[i] = UART_voidReceiveByte_Polling();

	while (str[i] != '#') {
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	fc 01       	movw	r30, r24
    1084:	e2 0f       	add	r30, r18
    1086:	f3 1f       	adc	r31, r19
    1088:	80 81       	ld	r24, Z
    108a:	83 32       	cpi	r24, 0x23	; 35
    108c:	31 f7       	brne	.-52     	; 0x105a <USART_voidReceiveString+0x18>
		i++;
		str[i] = UART_voidReceiveByte_Polling();
	}
	str[i] = '\0'; // replacing the '#' with '\0'
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	9b 81       	ldd	r25, Y+3	; 0x03
    1098:	fc 01       	movw	r30, r24
    109a:	e2 0f       	add	r30, r18
    109c:	f3 1f       	adc	r31, r19
    109e:	10 82       	st	Z, r1
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	08 95       	ret

000010b0 <TIMER1_Initialization>:

/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

void TIMER1_Initialization(void) {
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG->WGM1x = 0b01;
	TCCR1B_REG->WGM1x = 0b10;
	TCCR1A_REG->COM1Bx 	= 0b10; // Non Inverting Mode
	TCCR1A_REG->COM1Ax 	= 0b10; // Non Inverting Mode
#elif (TIMER1_FASTPWM_MODE)
	TCCR1A_REG->FOC1A 	= 0;
    10b8:	ef e4       	ldi	r30, 0x4F	; 79
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	87 7f       	andi	r24, 0xF7	; 247
    10c0:	80 83       	st	Z, r24
	TCCR1A_REG->FOC1B 	= 0;
    10c2:	ef e4       	ldi	r30, 0x4F	; 79
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8b 7f       	andi	r24, 0xFB	; 251
    10ca:	80 83       	st	Z, r24
	TCCR1A_REG->WGM1x 	= 0b10;
    10cc:	ef e4       	ldi	r30, 0x4F	; 79
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8c 7f       	andi	r24, 0xFC	; 252
    10d4:	82 60       	ori	r24, 0x02	; 2
    10d6:	80 83       	st	Z, r24
	TCCR1B_REG->WGM1x 	= 0b11;
    10d8:	ee e4       	ldi	r30, 0x4E	; 78
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	88 61       	ori	r24, 0x18	; 24
    10e0:	80 83       	st	Z, r24
	TCCR1A_REG->COM1Bx 	= 0b10; // Non Inverting Mode
    10e2:	ef e4       	ldi	r30, 0x4F	; 79
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 7c       	andi	r24, 0xCF	; 207
    10ea:	80 62       	ori	r24, 0x20	; 32
    10ec:	80 83       	st	Z, r24
	TCCR1A_REG->COM1Ax 	= 0b10; // Non Inverting Mode
    10ee:	ef e4       	ldi	r30, 0x4F	; 79
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8f 73       	andi	r24, 0x3F	; 63
    10f6:	80 68       	ori	r24, 0x80	; 128
    10f8:	80 83       	st	Z, r24
#endif

	TCCR1B_REG->CS1x = TIMER1_PRESCALER;
    10fa:	ee e4       	ldi	r30, 0x4E	; 78
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	88 7f       	andi	r24, 0xF8	; 248
    1102:	82 60       	ori	r24, 0x02	; 2
    1104:	80 83       	st	Z, r24
	OCR1AL_REG = 500;
    1106:	ea e4       	ldi	r30, 0x4A	; 74
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	84 ef       	ldi	r24, 0xF4	; 244
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
	TIMSK_REG->TICIE1 = TIMER1_SET;
	TIMSK_REG->OCIE1A = TIMER1_SET;
	TIMSK_REG->OCIE1B = TIMER1_SET;
	TIMSK_REG->TOIE1 = TIMER1_SET;
#endif
}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <TIMER1_voidStart>:

void TIMER1_voidStart(void) {
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	//TCCR1B_REG->CS1x = TIMER1_PRESCALER;
}
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <TIMER1_voidStop>:


void TIMER1_voidStop(void) {
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	TCCR1B_REG->CS1x = TIMER1_NO_TIME;
    112e:	ee e4       	ldi	r30, 0x4E	; 78
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	88 7f       	andi	r24, 0xF8	; 248
    1136:	80 83       	st	Z, r24
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <TIMER1_voidSetPreload>:


void TIMER1_voidSetPreload(u8 copy_u8preloadValue) {
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01
	// Choose Timer PRESCALER
	TCNT1L_REG = copy_u8preloadValue;
    114a:	ec e4       	ldi	r30, 0x4C	; 76
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
}
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <TIMER1_u16GetTime>:


u16 TIMER1_u16GetTime(void) {
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	return (u16)TCNT1L_REG;
    1168:	ec e4       	ldi	r30, 0x4C	; 76
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <TIMER1A_SetCOMPAREMATCH_FASTPWM>:


u16 TIMER1A_SetCOMPAREMATCH_FASTPWM(u16 copy_u16CMP)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <TIMER1A_SetCOMPAREMATCH_FASTPWM+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <TIMER1A_SetCOMPAREMATCH_FASTPWM+0x8>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
	 u16 Value = copy_u16CMP;
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_D, PIN_5, PIN_OUTPUT);
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	65 e0       	ldi	r22, 0x05	; 5
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
	 OCR1AL_REG = copy_u16CMP;
    1198:	ea e4       	ldi	r30, 0x4A	; 74
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	80 83       	st	Z, r24
	 return Value;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <TIMER1A_SetTop_FASTPWM>:

void TIMER1A_SetTop_FASTPWM(u16 copy_u16ICRValue)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <TIMER1A_SetTop_FASTPWM+0x6>
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
	 ICR1L_REG = copy_u16ICRValue;
    11c4:	e6 e4       	ldi	r30, 0x46	; 70
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <TIMER1A_SetDutyCycle_FASTPWM>:

u16 TIMER1A_SetDutyCycle_FASTPWM(u8 copy_u8Duty)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <TIMER1A_SetDutyCycle_FASTPWM+0x6>
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	8b 83       	std	Y+3, r24	; 0x03
	 u16 PWMValue = (u16)(copy_u8Duty * 255) / 100;
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	48 2f       	mov	r20, r24
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	ca 01       	movw	r24, r20
    11f0:	9c 01       	movw	r18, r24
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	c9 01       	movw	r24, r18
    11f8:	96 95       	lsr	r25
    11fa:	98 2f       	mov	r25, r24
    11fc:	88 27       	eor	r24, r24
    11fe:	97 95       	ror	r25
    1200:	87 95       	ror	r24
    1202:	82 1b       	sub	r24, r18
    1204:	93 0b       	sbc	r25, r19
    1206:	84 0f       	add	r24, r20
    1208:	95 1f       	adc	r25, r21
    120a:	24 e6       	ldi	r18, 0x64	; 100
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	b9 01       	movw	r22, r18
    1210:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodhi4>
    1214:	cb 01       	movw	r24, r22
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_D, PIN_5, PIN_OUTPUT);
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	65 e0       	ldi	r22, 0x05	; 5
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
	 OCR1AL_REG = PWMValue;
    1224:	ea e4       	ldi	r30, 0x4A	; 74
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	80 83       	st	Z, r24
	 return PWMValue;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <TIMER1B_SetDutyCycle_FASTPWM>:

u16 TIMER1B_SetDutyCycle_FASTPWM(u8 copy_u8Duty)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <TIMER1B_SetDutyCycle_FASTPWM+0x6>
    1246:	0f 92       	push	r0
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	8b 83       	std	Y+3, r24	; 0x03
	 u16 PWMValue = (u16)(copy_u8Duty * 255) / 100;
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	48 2f       	mov	r20, r24
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	ca 01       	movw	r24, r20
    1256:	9c 01       	movw	r18, r24
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	c9 01       	movw	r24, r18
    125e:	96 95       	lsr	r25
    1260:	98 2f       	mov	r25, r24
    1262:	88 27       	eor	r24, r24
    1264:	97 95       	ror	r25
    1266:	87 95       	ror	r24
    1268:	82 1b       	sub	r24, r18
    126a:	93 0b       	sbc	r25, r19
    126c:	84 0f       	add	r24, r20
    126e:	95 1f       	adc	r25, r21
    1270:	24 e6       	ldi	r18, 0x64	; 100
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	b9 01       	movw	r22, r18
    1276:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodhi4>
    127a:	cb 01       	movw	r24, r22
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_D, PIN_4, PIN_OUTPUT);
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	64 e0       	ldi	r22, 0x04	; 4
    1284:	41 e0       	ldi	r20, 0x01	; 1
    1286:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
	 OCR1BL_REG = PWMValue;
    128a:	e8 e4       	ldi	r30, 0x48	; 72
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	80 83       	st	Z, r24
	 return PWMValue;
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <TIMER1A_setDelay_ms_CTC>:

void TIMER1A_setDelay_ms_CTC(u16 copy_u16Delay)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	28 97       	sbiw	r28, 0x08	; 8
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	98 87       	std	Y+8, r25	; 0x08
    12b8:	8f 83       	std	Y+7, r24	; 0x07
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0.001;
    12ba:	8f e6       	ldi	r24, 0x6F	; 111
    12bc:	92 e1       	ldi	r25, 0x12	; 18
    12be:	a3 e8       	ldi	r26, 0x83	; 131
    12c0:	ba e3       	ldi	r27, 0x3A	; 58
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	9c 83       	std	Y+4, r25	; 0x04
    12c6:	ad 83       	std	Y+5, r26	; 0x05
    12c8:	be 83       	std	Y+6, r27	; 0x06
			// This will set the Tick Time 1mS
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
    12ca:	6b 81       	ldd	r22, Y+3	; 0x03
    12cc:	7c 81       	ldd	r23, Y+4	; 0x04
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	34 e2       	ldi	r19, 0x24	; 36
    12d6:	44 e7       	ldi	r20, 0x74	; 116
    12d8:	5b e4       	ldi	r21, 0x4B	; 75
    12da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e4       	ldi	r20, 0x40	; 64
    12ec:	50 e4       	ldi	r21, 0x40	; 64
    12ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9a 83       	std	Y+2, r25	; 0x02
    1304:	89 83       	std	Y+1, r24	; 0x01
			TCNT1L_REG = compareValue;
    1306:	ec e4       	ldi	r30, 0x4C	; 76
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24
    1312:	10 c0       	rjmp	.+32     	; 0x1334 <TIMER1A_setDelay_ms_CTC+0x92>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
				// This condition is a Busy Wait
				while(TIFR_REG->OCF1A == TIMER1_NOTSET);
    1314:	e8 e5       	ldi	r30, 0x58	; 88
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	80 71       	andi	r24, 0x10	; 16
    131c:	88 23       	and	r24, r24
    131e:	d1 f3       	breq	.-12     	; 0x1314 <TIMER1A_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1A = TIMER1_SET;
    1320:	e8 e5       	ldi	r30, 0x58	; 88
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	80 61       	ori	r24, 0x10	; 16
    1328:	80 83       	st	Z, r24
				overFlowCounter++;
    132a:	80 91 b0 01 	lds	r24, 0x01B0
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	80 93 b0 01 	sts	0x01B0, r24
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
			TCNT1L_REG = compareValue;

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
    1334:	80 91 b0 01 	lds	r24, 0x01B0
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	8f 81       	ldd	r24, Y+7	; 0x07
    133e:	98 85       	ldd	r25, Y+8	; 0x08
    1340:	28 17       	cp	r18, r24
    1342:	39 07       	cpc	r19, r25
    1344:	39 f7       	brne	.-50     	; 0x1314 <TIMER1A_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1A = TIMER1_SET;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    1346:	10 92 b0 01 	sts	0x01B0, r1
}
    134a:	28 96       	adiw	r28, 0x08	; 8
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <TIMER1B_setDelay_ms_CTC>:

void TIMER1B_setDelay_ms_CTC(u16 copy_u16Delay)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	28 97       	sbiw	r28, 0x08	; 8
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	98 87       	std	Y+8, r25	; 0x08
    1372:	8f 83       	std	Y+7, r24	; 0x07
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0.001;
    1374:	8f e6       	ldi	r24, 0x6F	; 111
    1376:	92 e1       	ldi	r25, 0x12	; 18
    1378:	a3 e8       	ldi	r26, 0x83	; 131
    137a:	ba e3       	ldi	r27, 0x3A	; 58
    137c:	8b 83       	std	Y+3, r24	; 0x03
    137e:	9c 83       	std	Y+4, r25	; 0x04
    1380:	ad 83       	std	Y+5, r26	; 0x05
    1382:	be 83       	std	Y+6, r27	; 0x06
			// This will set the Tick Time 1mS
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
    1384:	6b 81       	ldd	r22, Y+3	; 0x03
    1386:	7c 81       	ldd	r23, Y+4	; 0x04
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	34 e2       	ldi	r19, 0x24	; 36
    1390:	44 e7       	ldi	r20, 0x74	; 116
    1392:	5b e4       	ldi	r21, 0x4B	; 75
    1394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e4       	ldi	r20, 0x40	; 64
    13a6:	50 e4       	ldi	r21, 0x40	; 64
    13a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
			TCNT1L_REG = compareValue;
    13c0:	ec e4       	ldi	r30, 0x4C	; 76
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
    13cc:	10 c0       	rjmp	.+32     	; 0x13ee <TIMER1B_setDelay_ms_CTC+0x92>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
				// This condition is a Busy Wait
				while(TIFR_REG->OCF1B == TIMER1_NOTSET);
    13ce:	e8 e5       	ldi	r30, 0x58	; 88
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	88 70       	andi	r24, 0x08	; 8
    13d6:	88 23       	and	r24, r24
    13d8:	d1 f3       	breq	.-12     	; 0x13ce <TIMER1B_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1B = TIMER1_SET;
    13da:	e8 e5       	ldi	r30, 0x58	; 88
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	88 60       	ori	r24, 0x08	; 8
    13e2:	80 83       	st	Z, r24
				overFlowCounter++;
    13e4:	80 91 b1 01 	lds	r24, 0x01B1
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 b1 01 	sts	0x01B1, r24
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
			TCNT1L_REG = compareValue;

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
    13ee:	80 91 b1 01 	lds	r24, 0x01B1
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8f 81       	ldd	r24, Y+7	; 0x07
    13f8:	98 85       	ldd	r25, Y+8	; 0x08
    13fa:	28 17       	cp	r18, r24
    13fc:	39 07       	cpc	r19, r25
    13fe:	39 f7       	brne	.-50     	; 0x13ce <TIMER1B_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1B = TIMER1_SET;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    1400:	10 92 b1 01 	sts	0x01B1, r1
}
    1404:	28 96       	adiw	r28, 0x08	; 8
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <TIMER1_setDelay_ms_OVF>:

void TIMER1_setDelay_ms_OVF(u16 copy_u16Delay)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	2e 97       	sbiw	r28, 0x0e	; 14
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	9e 87       	std	Y+14, r25	; 0x0e
    142c:	8d 87       	std	Y+13, r24	; 0x0d
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0;
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a0 e0       	ldi	r26, 0x00	; 0
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	89 87       	std	Y+9, r24	; 0x09
    1438:	9a 87       	std	Y+10, r25	; 0x0a
    143a:	ab 87       	std	Y+11, r26	; 0x0b
    143c:	bc 87       	std	Y+12, r27	; 0x0c
			Tick_Time = TIMER1_PRESCALER / (float)F_CPU;
    143e:	8d eb       	ldi	r24, 0xBD	; 189
    1440:	97 e3       	ldi	r25, 0x37	; 55
    1442:	a6 e0       	ldi	r26, 0x06	; 6
    1444:	b4 e3       	ldi	r27, 0x34	; 52
    1446:	89 87       	std	Y+9, r24	; 0x09
    1448:	9a 87       	std	Y+10, r25	; 0x0a
    144a:	ab 87       	std	Y+11, r26	; 0x0b
    144c:	bc 87       	std	Y+12, r27	; 0x0c
			float Time_Overflow = Tick_Time * TIMER1_SIZE;
    144e:	69 85       	ldd	r22, Y+9	; 0x09
    1450:	7a 85       	ldd	r23, Y+10	; 0x0a
    1452:	8b 85       	ldd	r24, Y+11	; 0x0b
    1454:	9c 85       	ldd	r25, Y+12	; 0x0c
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	53 e4       	ldi	r21, 0x43	; 67
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	af 83       	std	Y+7, r26	; 0x07
    146c:	b8 87       	std	Y+8, r27	; 0x08
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));
    146e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1470:	9e 85       	ldd	r25, Y+14	; 0x0e
    1472:	cc 01       	movw	r24, r24
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	bc 01       	movw	r22, r24
    1486:	cd 01       	movw	r24, r26
    1488:	2d 81       	ldd	r18, Y+5	; 0x05
    148a:	3e 81       	ldd	r19, Y+6	; 0x06
    148c:	4f 81       	ldd	r20, Y+7	; 0x07
    148e:	58 85       	ldd	r21, Y+8	; 0x08
    1490:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	bc 01       	movw	r22, r24
    149a:	cd 01       	movw	r24, r26
    149c:	0e 94 79 24 	call	0x48f2	; 0x48f2 <ceil>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	ab 83       	std	Y+3, r26	; 0x03
    14aa:	bc 83       	std	Y+4, r27	; 0x04
    14ac:	10 c0       	rjmp	.+32     	; 0x14ce <TIMER1_setDelay_ms_OVF+0xb8>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
				// This condition is a Busy Wait
				while(TIFR_REG->TOV1 == TIMER1_NOTSET);
    14ae:	e8 e5       	ldi	r30, 0x58	; 88
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	84 70       	andi	r24, 0x04	; 4
    14b6:	88 23       	and	r24, r24
    14b8:	d1 f3       	breq	.-12     	; 0x14ae <TIMER1_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV1 = TIMER1_SET;
    14ba:	e8 e5       	ldi	r30, 0x58	; 88
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	84 60       	ori	r24, 0x04	; 4
    14c2:	80 83       	st	Z, r24
				overFlowCounter++;
    14c4:	80 91 b2 01 	lds	r24, 0x01B2
    14c8:	8f 5f       	subi	r24, 0xFF	; 255
    14ca:	80 93 b2 01 	sts	0x01B2, r24
			float Time_Overflow = Tick_Time * TIMER1_SIZE;
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
    14ce:	80 91 b2 01 	lds	r24, 0x01B2
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	aa 27       	eor	r26, r26
    14d8:	97 fd       	sbrc	r25, 7
    14da:	a0 95       	com	r26
    14dc:	ba 2f       	mov	r27, r26
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	29 81       	ldd	r18, Y+1	; 0x01
    14f0:	3a 81       	ldd	r19, Y+2	; 0x02
    14f2:	4b 81       	ldd	r20, Y+3	; 0x03
    14f4:	5c 81       	ldd	r21, Y+4	; 0x04
    14f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    14fa:	88 23       	and	r24, r24
    14fc:	c1 f6       	brne	.-80     	; 0x14ae <TIMER1_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV1 = TIMER1_SET;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    14fe:	10 92 b2 01 	sts	0x01B2, r1
}
    1502:	2e 96       	adiw	r28, 0x0e	; 14
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <TIMER1_CallBackFunction_CAPT>:

void TIMER1_CallBackFunction_CAPT(void (*Ptr_TIMER)(void))
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <TIMER1_CallBackFunction_CAPT+0x6>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_CAPT = Ptr_TIMER;
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	90 93 c4 01 	sts	0x01C4, r25
    152a:	80 93 c3 01 	sts	0x01C3, r24
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <TIMER1_CallBackFunction_COMPA>:

void TIMER1_CallBackFunction_COMPA(void (*Ptr_TIMER)(void))
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <TIMER1_CallBackFunction_COMPA+0x6>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_COMPA = Ptr_TIMER;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	90 93 c6 01 	sts	0x01C6, r25
    154e:	80 93 c5 01 	sts	0x01C5, r24
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <TIMER1_CallBackFunction_COMPB>:

void TIMER1_CallBackFunction_COMPB(void (*Ptr_TIMER)(void))
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <TIMER1_CallBackFunction_COMPB+0x6>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_COMPB = Ptr_TIMER;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	90 93 c0 01 	sts	0x01C0, r25
    1572:	80 93 bf 01 	sts	0x01BF, r24
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <TIMER1_CallBackFunction_OVF>:

void TIMER1_CallBackFunction_OVF(void (*Ptr_TIMER)(void))
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <TIMER1_CallBackFunction_OVF+0x6>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_OVF = Ptr_TIMER;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	90 93 c2 01 	sts	0x01C2, r25
    1596:	80 93 c1 01 	sts	0x01C1, r24
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <__vector_6>:


void __vector_6(void) __attribute__((signal, used));
void __vector_6(void) {
    15a4:	1f 92       	push	r1
    15a6:	0f 92       	push	r0
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	0f 92       	push	r0
    15ac:	11 24       	eor	r1, r1
    15ae:	2f 93       	push	r18
    15b0:	3f 93       	push	r19
    15b2:	4f 93       	push	r20
    15b4:	5f 93       	push	r21
    15b6:	6f 93       	push	r22
    15b8:	7f 93       	push	r23
    15ba:	8f 93       	push	r24
    15bc:	9f 93       	push	r25
    15be:	af 93       	push	r26
    15c0:	bf 93       	push	r27
    15c2:	ef 93       	push	r30
    15c4:	ff 93       	push	r31
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_CAPT != NULL) {
    15ce:	80 91 c3 01 	lds	r24, 0x01C3
    15d2:	90 91 c4 01 	lds	r25, 0x01C4
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <__vector_6+0x40>
		CallBackPtr_TIMER1_CAPT();
    15da:	e0 91 c3 01 	lds	r30, 0x01C3
    15de:	f0 91 c4 01 	lds	r31, 0x01C4
    15e2:	09 95       	icall
	}
}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	ff 91       	pop	r31
    15ea:	ef 91       	pop	r30
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	7f 91       	pop	r23
    15f6:	6f 91       	pop	r22
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <__vector_7>:

void __vector_7(void) __attribute__((signal, used));
void __vector_7(void) {
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_COMPA != NULL) {
    1634:	80 91 c5 01 	lds	r24, 0x01C5
    1638:	90 91 c6 01 	lds	r25, 0x01C6
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	29 f0       	breq	.+10     	; 0x164a <__vector_7+0x40>
		CallBackPtr_TIMER1_COMPA();
    1640:	e0 91 c5 01 	lds	r30, 0x01C5
    1644:	f0 91 c6 01 	lds	r31, 0x01C6
    1648:	09 95       	icall
	}
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <__vector_8>:

void __vector_8(void) __attribute__((signal, used));
void __vector_8(void) {
    1670:	1f 92       	push	r1
    1672:	0f 92       	push	r0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	0f 92       	push	r0
    1678:	11 24       	eor	r1, r1
    167a:	2f 93       	push	r18
    167c:	3f 93       	push	r19
    167e:	4f 93       	push	r20
    1680:	5f 93       	push	r21
    1682:	6f 93       	push	r22
    1684:	7f 93       	push	r23
    1686:	8f 93       	push	r24
    1688:	9f 93       	push	r25
    168a:	af 93       	push	r26
    168c:	bf 93       	push	r27
    168e:	ef 93       	push	r30
    1690:	ff 93       	push	r31
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_COMPB != NULL) {
    169a:	80 91 bf 01 	lds	r24, 0x01BF
    169e:	90 91 c0 01 	lds	r25, 0x01C0
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	29 f0       	breq	.+10     	; 0x16b0 <__vector_8+0x40>
		CallBackPtr_TIMER1_COMPB();
    16a6:	e0 91 bf 01 	lds	r30, 0x01BF
    16aa:	f0 91 c0 01 	lds	r31, 0x01C0
    16ae:	09 95       	icall
	}
}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	ff 91       	pop	r31
    16b6:	ef 91       	pop	r30
    16b8:	bf 91       	pop	r27
    16ba:	af 91       	pop	r26
    16bc:	9f 91       	pop	r25
    16be:	8f 91       	pop	r24
    16c0:	7f 91       	pop	r23
    16c2:	6f 91       	pop	r22
    16c4:	5f 91       	pop	r21
    16c6:	4f 91       	pop	r20
    16c8:	3f 91       	pop	r19
    16ca:	2f 91       	pop	r18
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <__vector_9>:

void __vector_9(void) __attribute__((signal, used));
void __vector_9(void) {
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	2f 93       	push	r18
    16e2:	3f 93       	push	r19
    16e4:	4f 93       	push	r20
    16e6:	5f 93       	push	r21
    16e8:	6f 93       	push	r22
    16ea:	7f 93       	push	r23
    16ec:	8f 93       	push	r24
    16ee:	9f 93       	push	r25
    16f0:	af 93       	push	r26
    16f2:	bf 93       	push	r27
    16f4:	ef 93       	push	r30
    16f6:	ff 93       	push	r31
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_OVF != NULL) {
    1700:	80 91 c1 01 	lds	r24, 0x01C1
    1704:	90 91 c2 01 	lds	r25, 0x01C2
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	29 f0       	breq	.+10     	; 0x1716 <__vector_9+0x40>
		CallBackPtr_TIMER1_OVF();
    170c:	e0 91 c1 01 	lds	r30, 0x01C1
    1710:	f0 91 c2 01 	lds	r31, 0x01C2
    1714:	09 95       	icall
	}
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	ff 91       	pop	r31
    171c:	ef 91       	pop	r30
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	0f 90       	pop	r0
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	0f 90       	pop	r0
    1738:	1f 90       	pop	r1
    173a:	18 95       	reti

0000173c <TIMER0_INITIALIZATION>:

/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

void TIMER0_INITIALIZATION(void) {
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
#endif

#if (ISR_ENABLE)
	TIMSK_REG->TOIE0 = 1;
#endif
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <TIMER0_START>:


void TIMER0_START(void) {
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	TCCR0_REG->CS0x = TIMER0_PRESCALER;
    1752:	e3 e5       	ldi	r30, 0x53	; 83
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	88 7f       	andi	r24, 0xF8	; 248
    175a:	82 60       	ori	r24, 0x02	; 2
    175c:	80 83       	st	Z, r24
}
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <TIMER0_STOP>:


void TIMER0_STOP(void) {
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	TCCR0_REG->CS0x = NO_TIME;
    176c:	e3 e5       	ldi	r30, 0x53	; 83
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	88 7f       	andi	r24, 0xF8	; 248
    1774:	80 83       	st	Z, r24
}
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <TIMER0_setPreload>:


void TIMER0_setPreload(u8 preloadValue) {
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	89 83       	std	Y+1, r24	; 0x01
	// Choose Timer PRESCALER
	TCNT0_REG = preloadValue;
    1788:	e2 e5       	ldi	r30, 0x52	; 82
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	80 83       	st	Z, r24
}
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <TIMER0_getTime>:


u8 TIMER0_getTime(void) {
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	return TCNT0_REG;
    17a0:	e2 e5       	ldi	r30, 0x52	; 82
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
}
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <TIMER0_voidSetDutyCycle_FASTPWM>:

u8 TIMER0_voidSetDutyCycle_FASTPWM(u8 copy_u8Duty)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <TIMER0_voidSetDutyCycle_FASTPWM+0x6>
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	8a 83       	std	Y+2, r24	; 0x02
	 u8 pwmValue = (u16)(copy_u8Duty * 255) / 100;
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	48 2f       	mov	r20, r24
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	ca 01       	movw	r24, r20
    17c0:	9c 01       	movw	r18, r24
    17c2:	22 0f       	add	r18, r18
    17c4:	33 1f       	adc	r19, r19
    17c6:	c9 01       	movw	r24, r18
    17c8:	96 95       	lsr	r25
    17ca:	98 2f       	mov	r25, r24
    17cc:	88 27       	eor	r24, r24
    17ce:	97 95       	ror	r25
    17d0:	87 95       	ror	r24
    17d2:	82 1b       	sub	r24, r18
    17d4:	93 0b       	sbc	r25, r19
    17d6:	84 0f       	add	r24, r20
    17d8:	95 1f       	adc	r25, r21
    17da:	24 e6       	ldi	r18, 0x64	; 100
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	b9 01       	movw	r22, r18
    17e0:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodhi4>
    17e4:	cb 01       	movw	r24, r22
    17e6:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_B, PIN_3, PIN_OUTPUT);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	63 e0       	ldi	r22, 0x03	; 3
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
	 OCR0_REG = pwmValue;
    17f2:	ec e5       	ldi	r30, 0x5C	; 92
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	80 83       	st	Z, r24
	 return pwmValue;
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <TIMER0_setDelay_ms_CTC>:

void TIMER0_setDelay_ms_CTC(u16 copy_u16Delay)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	27 97       	sbiw	r28, 0x07	; 7
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	9f 83       	std	Y+7, r25	; 0x07
    181c:	8e 83       	std	Y+6, r24	; 0x06
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0.001;
    181e:	8f e6       	ldi	r24, 0x6F	; 111
    1820:	92 e1       	ldi	r25, 0x12	; 18
    1822:	a3 e8       	ldi	r26, 0x83	; 131
    1824:	ba e3       	ldi	r27, 0x3A	; 58
    1826:	8a 83       	std	Y+2, r24	; 0x02
    1828:	9b 83       	std	Y+3, r25	; 0x03
    182a:	ac 83       	std	Y+4, r26	; 0x04
    182c:	bd 83       	std	Y+5, r27	; 0x05
			// This will set the Tick Time 1mS
			u8 compareValue = (Tick_Time * (float)F_CPU) / TIMER0_PRESCALER_64;
    182e:	6a 81       	ldd	r22, Y+2	; 0x02
    1830:	7b 81       	ldd	r23, Y+3	; 0x03
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	9d 81       	ldd	r25, Y+5	; 0x05
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	34 e2       	ldi	r19, 0x24	; 36
    183a:	44 e7       	ldi	r20, 0x74	; 116
    183c:	5b e4       	ldi	r21, 0x4B	; 75
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e4       	ldi	r20, 0x40	; 64
    1850:	50 e4       	ldi	r21, 0x40	; 64
    1852:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	89 83       	std	Y+1, r24	; 0x01
			TCNT0_REG = compareValue;
    1868:	e2 e5       	ldi	r30, 0x52	; 82
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	80 83       	st	Z, r24
    1870:	10 c0       	rjmp	.+32     	; 0x1892 <TIMER0_setDelay_ms_CTC+0x8c>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
				// This condition is a Busy Wait
				while(TIFR_REG->OCF0 == 0);
    1872:	e8 e5       	ldi	r30, 0x58	; 88
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	82 70       	andi	r24, 0x02	; 2
    187a:	88 23       	and	r24, r24
    187c:	d1 f3       	breq	.-12     	; 0x1872 <TIMER0_setDelay_ms_CTC+0x6c>

				// Clear the overflow flag
				TIFR_REG->OCF0 = 1;
    187e:	e8 e5       	ldi	r30, 0x58	; 88
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	82 60       	ori	r24, 0x02	; 2
    1886:	80 83       	st	Z, r24
				overFlowCounter++;
    1888:	80 91 b3 01 	lds	r24, 0x01B3
    188c:	8f 5f       	subi	r24, 0xFF	; 255
    188e:	80 93 b3 01 	sts	0x01B3, r24
			u8 compareValue = (Tick_Time * (float)F_CPU) / TIMER0_PRESCALER_64;
			TCNT0_REG = compareValue;

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
    1892:	80 91 b3 01 	lds	r24, 0x01B3
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	8e 81       	ldd	r24, Y+6	; 0x06
    189c:	9f 81       	ldd	r25, Y+7	; 0x07
    189e:	28 17       	cp	r18, r24
    18a0:	39 07       	cpc	r19, r25
    18a2:	39 f7       	brne	.-50     	; 0x1872 <TIMER0_setDelay_ms_CTC+0x6c>

				// Clear the overflow flag
				TIFR_REG->OCF0 = 1;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    18a4:	10 92 b3 01 	sts	0x01B3, r1
}
    18a8:	27 96       	adiw	r28, 0x07	; 7
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <TIMER0_setDelay_ms_OVF>:


void TIMER0_setDelay_ms_OVF(u16 copy_u16Delay)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	2e 97       	sbiw	r28, 0x0e	; 14
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	9e 87       	std	Y+14, r25	; 0x0e
    18d0:	8d 87       	std	Y+13, r24	; 0x0d
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0;
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	a0 e0       	ldi	r26, 0x00	; 0
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	89 87       	std	Y+9, r24	; 0x09
    18dc:	9a 87       	std	Y+10, r25	; 0x0a
    18de:	ab 87       	std	Y+11, r26	; 0x0b
    18e0:	bc 87       	std	Y+12, r27	; 0x0c
			Tick_Time = TIMER0_PRESCALER / (float)F_CPU;
    18e2:	8d eb       	ldi	r24, 0xBD	; 189
    18e4:	97 e3       	ldi	r25, 0x37	; 55
    18e6:	a6 e0       	ldi	r26, 0x06	; 6
    18e8:	b4 e3       	ldi	r27, 0x34	; 52
    18ea:	89 87       	std	Y+9, r24	; 0x09
    18ec:	9a 87       	std	Y+10, r25	; 0x0a
    18ee:	ab 87       	std	Y+11, r26	; 0x0b
    18f0:	bc 87       	std	Y+12, r27	; 0x0c
			float Time_Overflow = Tick_Time * TIMER0_SIZE;
    18f2:	69 85       	ldd	r22, Y+9	; 0x09
    18f4:	7a 85       	ldd	r23, Y+10	; 0x0a
    18f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    18f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	53 e4       	ldi	r21, 0x43	; 67
    1902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8d 83       	std	Y+5, r24	; 0x05
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	af 83       	std	Y+7, r26	; 0x07
    1910:	b8 87       	std	Y+8, r27	; 0x08
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));
    1912:	8d 85       	ldd	r24, Y+13	; 0x0d
    1914:	9e 85       	ldd	r25, Y+14	; 0x0e
    1916:	cc 01       	movw	r24, r24
    1918:	a0 e0       	ldi	r26, 0x00	; 0
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	2d 81       	ldd	r18, Y+5	; 0x05
    192e:	3e 81       	ldd	r19, Y+6	; 0x06
    1930:	4f 81       	ldd	r20, Y+7	; 0x07
    1932:	58 85       	ldd	r21, Y+8	; 0x08
    1934:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 79 24 	call	0x48f2	; 0x48f2 <ceil>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	9a 83       	std	Y+2, r25	; 0x02
    194c:	ab 83       	std	Y+3, r26	; 0x03
    194e:	bc 83       	std	Y+4, r27	; 0x04
    1950:	10 c0       	rjmp	.+32     	; 0x1972 <TIMER0_setDelay_ms_OVF+0xb8>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
				// This condition is a Busy Wait
				while(TIFR_REG->TOV0 == 0);
    1952:	e8 e5       	ldi	r30, 0x58	; 88
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	88 23       	and	r24, r24
    195c:	d1 f3       	breq	.-12     	; 0x1952 <TIMER0_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV0 = 1;
    195e:	e8 e5       	ldi	r30, 0x58	; 88
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	81 60       	ori	r24, 0x01	; 1
    1966:	80 83       	st	Z, r24
				overFlowCounter++;
    1968:	80 91 b4 01 	lds	r24, 0x01B4
    196c:	8f 5f       	subi	r24, 0xFF	; 255
    196e:	80 93 b4 01 	sts	0x01B4, r24
			float Time_Overflow = Tick_Time * TIMER0_SIZE;
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
    1972:	80 91 b4 01 	lds	r24, 0x01B4
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	aa 27       	eor	r26, r26
    197c:	97 fd       	sbrc	r25, 7
    197e:	a0 95       	com	r26
    1980:	ba 2f       	mov	r27, r26
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	29 81       	ldd	r18, Y+1	; 0x01
    1994:	3a 81       	ldd	r19, Y+2	; 0x02
    1996:	4b 81       	ldd	r20, Y+3	; 0x03
    1998:	5c 81       	ldd	r21, Y+4	; 0x04
    199a:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    199e:	88 23       	and	r24, r24
    19a0:	c1 f6       	brne	.-80     	; 0x1952 <TIMER0_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV0 = 1;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    19a2:	10 92 b4 01 	sts	0x01B4, r1
}
    19a6:	2e 96       	adiw	r28, 0x0e	; 14
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <DutyCycle_ADC_Mapping>:

u16 DutyCycle_ADC_Mapping(u16 copy_u16Data)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <DutyCycle_ADC_Mapping+0x6>
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	9b 83       	std	Y+3, r25	; 0x03
    19c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 dutyCycleValue = ((u32)copy_u16Data * 100) / 1023;
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	9b 81       	ldd	r25, Y+3	; 0x03
    19cc:	cc 01       	movw	r24, r24
    19ce:	a0 e0       	ldi	r26, 0x00	; 0
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	24 e6       	ldi	r18, 0x64	; 100
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 cc 23 	call	0x4798	; 0x4798 <__mulsi3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	2f ef       	ldi	r18, 0xFF	; 255
    19e8:	33 e0       	ldi	r19, 0x03	; 3
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 ff 23 	call	0x47fe	; 0x47fe <__udivmodsi4>
    19f6:	da 01       	movw	r26, r20
    19f8:	c9 01       	movw	r24, r18
    19fa:	89 83       	std	Y+1, r24	; 0x01
	return  dutyCycleValue ;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <TIMER0_CallBackFunction_COMP>:

void TIMER0_CallBackFunction_COMP(void (*Ptr_TIMER)(void))
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <TIMER0_CallBackFunction_COMP+0x6>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER0_COMP = Ptr_TIMER;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	90 93 c8 01 	sts	0x01C8, r25
    1a24:	80 93 c7 01 	sts	0x01C7, r24
}
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <TIMER0_CallBackFunction_OVF>:

void TIMER0_CallBackFunction_OVF(void (*Ptr_TIMER)(void))
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <TIMER0_CallBackFunction_OVF+0x6>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER0_OVF = Ptr_TIMER;
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	90 93 ca 01 	sts	0x01CA, r25
    1a48:	80 93 c9 01 	sts	0x01C9, r24
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <__vector_10>:


void __vector_10(void) __attribute__((signal, used));
void __vector_10(void) {
    1a56:	1f 92       	push	r1
    1a58:	0f 92       	push	r0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	0f 92       	push	r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	6f 93       	push	r22
    1a6a:	7f 93       	push	r23
    1a6c:	8f 93       	push	r24
    1a6e:	9f 93       	push	r25
    1a70:	af 93       	push	r26
    1a72:	bf 93       	push	r27
    1a74:	ef 93       	push	r30
    1a76:	ff 93       	push	r31
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER0_COMP != NULL) {
    1a80:	80 91 c7 01 	lds	r24, 0x01C7
    1a84:	90 91 c8 01 	lds	r25, 0x01C8
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	29 f0       	breq	.+10     	; 0x1a96 <__vector_10+0x40>
		CallBackPtr_TIMER0_COMP();
    1a8c:	e0 91 c7 01 	lds	r30, 0x01C7
    1a90:	f0 91 c8 01 	lds	r31, 0x01C8
    1a94:	09 95       	icall
	}
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	ff 91       	pop	r31
    1a9c:	ef 91       	pop	r30
    1a9e:	bf 91       	pop	r27
    1aa0:	af 91       	pop	r26
    1aa2:	9f 91       	pop	r25
    1aa4:	8f 91       	pop	r24
    1aa6:	7f 91       	pop	r23
    1aa8:	6f 91       	pop	r22
    1aaa:	5f 91       	pop	r21
    1aac:	4f 91       	pop	r20
    1aae:	3f 91       	pop	r19
    1ab0:	2f 91       	pop	r18
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	0f 90       	pop	r0
    1ab8:	1f 90       	pop	r1
    1aba:	18 95       	reti

00001abc <__vector_11>:

void __vector_11(void) __attribute__((signal, used));
void __vector_11(void) {
    1abc:	1f 92       	push	r1
    1abe:	0f 92       	push	r0
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	0f 92       	push	r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	2f 93       	push	r18
    1ac8:	3f 93       	push	r19
    1aca:	4f 93       	push	r20
    1acc:	5f 93       	push	r21
    1ace:	6f 93       	push	r22
    1ad0:	7f 93       	push	r23
    1ad2:	8f 93       	push	r24
    1ad4:	9f 93       	push	r25
    1ad6:	af 93       	push	r26
    1ad8:	bf 93       	push	r27
    1ada:	ef 93       	push	r30
    1adc:	ff 93       	push	r31
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER0_OVF != NULL) {
    1ae6:	80 91 c9 01 	lds	r24, 0x01C9
    1aea:	90 91 ca 01 	lds	r25, 0x01CA
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	29 f0       	breq	.+10     	; 0x1afc <__vector_11+0x40>
		CallBackPtr_TIMER0_OVF();
    1af2:	e0 91 c9 01 	lds	r30, 0x01C9
    1af6:	f0 91 ca 01 	lds	r31, 0x01CA
    1afa:	09 95       	icall
	}
}
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	ff 91       	pop	r31
    1b02:	ef 91       	pop	r30
    1b04:	bf 91       	pop	r27
    1b06:	af 91       	pop	r26
    1b08:	9f 91       	pop	r25
    1b0a:	8f 91       	pop	r24
    1b0c:	7f 91       	pop	r23
    1b0e:	6f 91       	pop	r22
    1b10:	5f 91       	pop	r21
    1b12:	4f 91       	pop	r20
    1b14:	3f 91       	pop	r19
    1b16:	2f 91       	pop	r18
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	0f 90       	pop	r0
    1b1e:	1f 90       	pop	r1
    1b20:	18 95       	reti

00001b22 <GPIO_voidSetPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPinDirection(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinDIR) {
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <GPIO_voidSetPinDirection+0x6>
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <GPIO_voidSetPinDirection+0x8>
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <GPIO_voidSetPinDirection+0xa>
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	8a 83       	std	Y+2, r24	; 0x02
    1b32:	6b 83       	std	Y+3, r22	; 0x03
    1b34:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
    1b36:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	88 30       	cpi	r24, 0x08	; 8
    1b3c:	18 f0       	brcs	.+6      	; 0x1b44 <GPIO_voidSetPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	e1 c0       	rjmp	.+450    	; 0x1d06 <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	84 30       	cpi	r24, 0x04	; 4
    1b48:	18 f0       	brcs	.+6      	; 0x1b50 <GPIO_voidSetPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	db c0       	rjmp	.+438    	; 0x1d06 <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
    1b50:	8c 81       	ldd	r24, Y+4	; 0x04
    1b52:	88 23       	and	r24, r24
    1b54:	31 f0       	breq	.+12     	; 0x1b62 <GPIO_voidSetPinDirection+0x40>
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	19 f0       	breq	.+6      	; 0x1b62 <GPIO_voidSetPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1b5c:	83 e0       	ldi	r24, 0x03	; 3
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	d2 c0       	rjmp	.+420    	; 0x1d06 <GPIO_voidSetPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	3e 83       	std	Y+6, r19	; 0x06
    1b6a:	2d 83       	std	Y+5, r18	; 0x05
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	91 05       	cpc	r25, r1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <GPIO_voidSetPinDirection+0x56>
    1b76:	43 c0       	rjmp	.+134    	; 0x1bfe <GPIO_voidSetPinDirection+0xdc>
    1b78:	2d 81       	ldd	r18, Y+5	; 0x05
    1b7a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <GPIO_voidSetPinDirection+0x6a>
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	71 f0       	breq	.+28     	; 0x1ba6 <GPIO_voidSetPinDirection+0x84>
    1b8a:	bc c0       	rjmp	.+376    	; 0x1d04 <GPIO_voidSetPinDirection+0x1e2>
    1b8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <GPIO_voidSetPinDirection+0x76>
    1b96:	5f c0       	rjmp	.+190    	; 0x1c56 <GPIO_voidSetPinDirection+0x134>
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <GPIO_voidSetPinDirection+0x82>
    1ba2:	85 c0       	rjmp	.+266    	; 0x1cae <GPIO_voidSetPinDirection+0x18c>
    1ba4:	af c0       	rjmp	.+350    	; 0x1d04 <GPIO_voidSetPinDirection+0x1e2>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	a1 f4       	brne	.+40     	; 0x1bd4 <GPIO_voidSetPinDirection+0xb2>
					SET_BIT(DDRA_REG, copy_u8pinID);
    1bac:	aa e3       	ldi	r26, 0x3A	; 58
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	ea e3       	ldi	r30, 0x3A	; 58
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 2e       	mov	r0, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <GPIO_voidSetPinDirection+0xa8>
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	0a 94       	dec	r0
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <GPIO_voidSetPinDirection+0xa4>
    1bce:	84 2b       	or	r24, r20
    1bd0:	8c 93       	st	X, r24
    1bd2:	98 c0       	rjmp	.+304    	; 0x1d04 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
    1bd4:	aa e3       	ldi	r26, 0x3A	; 58
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	ea e3       	ldi	r30, 0x3A	; 58
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 2e       	mov	r0, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <GPIO_voidSetPinDirection+0xd0>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	0a 94       	dec	r0
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <GPIO_voidSetPinDirection+0xcc>
    1bf6:	80 95       	com	r24
    1bf8:	84 23       	and	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	83 c0       	rjmp	.+262    	; 0x1d04 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	a1 f4       	brne	.+40     	; 0x1c2c <GPIO_voidSetPinDirection+0x10a>
					SET_BIT(DDRB_REG, copy_u8pinID);
    1c04:	a7 e3       	ldi	r26, 0x37	; 55
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e7 e3       	ldi	r30, 0x37	; 55
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <GPIO_voidSetPinDirection+0x100>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <GPIO_voidSetPinDirection+0xfc>
    1c26:	84 2b       	or	r24, r20
    1c28:	8c 93       	st	X, r24
    1c2a:	6c c0       	rjmp	.+216    	; 0x1d04 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
    1c2c:	a7 e3       	ldi	r26, 0x37	; 55
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e7 e3       	ldi	r30, 0x37	; 55
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	48 2f       	mov	r20, r24
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 2e       	mov	r0, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <GPIO_voidSetPinDirection+0x128>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	0a 94       	dec	r0
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <GPIO_voidSetPinDirection+0x124>
    1c4e:	80 95       	com	r24
    1c50:	84 23       	and	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	57 c0       	rjmp	.+174    	; 0x1d04 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	a1 f4       	brne	.+40     	; 0x1c84 <GPIO_voidSetPinDirection+0x162>
					SET_BIT(DDRC_REG, copy_u8pinID);
    1c5c:	a4 e3       	ldi	r26, 0x34	; 52
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e4 e3       	ldi	r30, 0x34	; 52
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <GPIO_voidSetPinDirection+0x158>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <GPIO_voidSetPinDirection+0x154>
    1c7e:	84 2b       	or	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	40 c0       	rjmp	.+128    	; 0x1d04 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
    1c84:	a4 e3       	ldi	r26, 0x34	; 52
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e4 e3       	ldi	r30, 0x34	; 52
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <GPIO_voidSetPinDirection+0x180>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <GPIO_voidSetPinDirection+0x17c>
    1ca6:	80 95       	com	r24
    1ca8:	84 23       	and	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	2b c0       	rjmp	.+86     	; 0x1d04 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	a1 f4       	brne	.+40     	; 0x1cdc <GPIO_voidSetPinDirection+0x1ba>
					SET_BIT(DDRD_REG, copy_u8pinID);
    1cb4:	a1 e3       	ldi	r26, 0x31	; 49
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e1 e3       	ldi	r30, 0x31	; 49
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <GPIO_voidSetPinDirection+0x1b0>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <GPIO_voidSetPinDirection+0x1ac>
    1cd6:	84 2b       	or	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
    1cdc:	a1 e3       	ldi	r26, 0x31	; 49
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e1 e3       	ldi	r30, 0x31	; 49
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <GPIO_voidSetPinDirection+0x1d8>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <GPIO_voidSetPinDirection+0x1d4>
    1cfe:	80 95       	com	r24
    1d00:	84 23       	and	r24, r20
    1d02:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1d04:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d08:	26 96       	adiw	r28, 0x06	; 6
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <GPIO_voidSetPinValue>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_voidSetPinValue(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinValue)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <GPIO_voidSetPinValue+0x6>
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <GPIO_voidSetPinValue+0x8>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <GPIO_voidSetPinValue+0xa>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	8a 83       	std	Y+2, r24	; 0x02
    1d2a:	6b 83       	std	Y+3, r22	; 0x03
    1d2c:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
    1d2e:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	88 30       	cpi	r24, 0x08	; 8
    1d34:	18 f0       	brcs	.+6      	; 0x1d3c <GPIO_voidSetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	e1 c0       	rjmp	.+450    	; 0x1efe <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	84 30       	cpi	r24, 0x04	; 4
    1d40:	18 f0       	brcs	.+6      	; 0x1d48 <GPIO_voidSetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	db c0       	rjmp	.+438    	; 0x1efe <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	31 f0       	breq	.+12     	; 0x1d5a <GPIO_voidSetPinValue+0x40>
    1d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d50:	88 23       	and	r24, r24
    1d52:	19 f0       	breq	.+6      	; 0x1d5a <GPIO_voidSetPinValue+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1d54:	83 e0       	ldi	r24, 0x03	; 3
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	d2 c0       	rjmp	.+420    	; 0x1efe <GPIO_voidSetPinValue+0x1e4>
	}
	else {
		switch(copy_u8portID)
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3e 83       	std	Y+6, r19	; 0x06
    1d62:	2d 83       	std	Y+5, r18	; 0x05
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <GPIO_voidSetPinValue+0x56>
    1d6e:	43 c0       	rjmp	.+134    	; 0x1df6 <GPIO_voidSetPinValue+0xdc>
    1d70:	2d 81       	ldd	r18, Y+5	; 0x05
    1d72:	3e 81       	ldd	r19, Y+6	; 0x06
    1d74:	22 30       	cpi	r18, 0x02	; 2
    1d76:	31 05       	cpc	r19, r1
    1d78:	2c f4       	brge	.+10     	; 0x1d84 <GPIO_voidSetPinValue+0x6a>
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	71 f0       	breq	.+28     	; 0x1d9e <GPIO_voidSetPinValue+0x84>
    1d82:	bc c0       	rjmp	.+376    	; 0x1efc <GPIO_voidSetPinValue+0x1e2>
    1d84:	2d 81       	ldd	r18, Y+5	; 0x05
    1d86:	3e 81       	ldd	r19, Y+6	; 0x06
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <GPIO_voidSetPinValue+0x76>
    1d8e:	5f c0       	rjmp	.+190    	; 0x1e4e <GPIO_voidSetPinValue+0x134>
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	83 30       	cpi	r24, 0x03	; 3
    1d96:	91 05       	cpc	r25, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <GPIO_voidSetPinValue+0x82>
    1d9a:	85 c0       	rjmp	.+266    	; 0x1ea6 <GPIO_voidSetPinValue+0x18c>
    1d9c:	af c0       	rjmp	.+350    	; 0x1efc <GPIO_voidSetPinValue+0x1e2>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	a1 f4       	brne	.+40     	; 0x1dcc <GPIO_voidSetPinValue+0xb2>
					SET_BIT(PORTA_REG ,copy_u8pinID);
    1da4:	ab e3       	ldi	r26, 0x3B	; 59
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	eb e3       	ldi	r30, 0x3B	; 59
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <GPIO_voidSetPinValue+0xa8>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <GPIO_voidSetPinValue+0xa4>
    1dc6:	84 2b       	or	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	98 c0       	rjmp	.+304    	; 0x1efc <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
    1dcc:	ab e3       	ldi	r26, 0x3B	; 59
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb e3       	ldi	r30, 0x3B	; 59
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <GPIO_voidSetPinValue+0xd0>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <GPIO_voidSetPinValue+0xcc>
    1dee:	80 95       	com	r24
    1df0:	84 23       	and	r24, r20
    1df2:	8c 93       	st	X, r24
    1df4:	83 c0       	rjmp	.+262    	; 0x1efc <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1df6:	8c 81       	ldd	r24, Y+4	; 0x04
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	a1 f4       	brne	.+40     	; 0x1e24 <GPIO_voidSetPinValue+0x10a>
					SET_BIT(PORTB_REG ,copy_u8pinID);
    1dfc:	a8 e3       	ldi	r26, 0x38	; 56
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e8 e3       	ldi	r30, 0x38	; 56
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	48 2f       	mov	r20, r24
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 2e       	mov	r0, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <GPIO_voidSetPinValue+0x100>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	0a 94       	dec	r0
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <GPIO_voidSetPinValue+0xfc>
    1e1e:	84 2b       	or	r24, r20
    1e20:	8c 93       	st	X, r24
    1e22:	6c c0       	rjmp	.+216    	; 0x1efc <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
    1e24:	a8 e3       	ldi	r26, 0x38	; 56
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e8 e3       	ldi	r30, 0x38	; 56
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <GPIO_voidSetPinValue+0x128>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <GPIO_voidSetPinValue+0x124>
    1e46:	80 95       	com	r24
    1e48:	84 23       	and	r24, r20
    1e4a:	8c 93       	st	X, r24
    1e4c:	57 c0       	rjmp	.+174    	; 0x1efc <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	a1 f4       	brne	.+40     	; 0x1e7c <GPIO_voidSetPinValue+0x162>
					SET_BIT(PORTC_REG ,copy_u8pinID);
    1e54:	a5 e3       	ldi	r26, 0x35	; 53
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e3       	ldi	r30, 0x35	; 53
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 2e       	mov	r0, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <GPIO_voidSetPinValue+0x158>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	0a 94       	dec	r0
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <GPIO_voidSetPinValue+0x154>
    1e76:	84 2b       	or	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	40 c0       	rjmp	.+128    	; 0x1efc <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
    1e7c:	a5 e3       	ldi	r26, 0x35	; 53
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e5 e3       	ldi	r30, 0x35	; 53
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <GPIO_voidSetPinValue+0x180>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <GPIO_voidSetPinValue+0x17c>
    1e9e:	80 95       	com	r24
    1ea0:	84 23       	and	r24, r20
    1ea2:	8c 93       	st	X, r24
    1ea4:	2b c0       	rjmp	.+86     	; 0x1efc <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	a1 f4       	brne	.+40     	; 0x1ed4 <GPIO_voidSetPinValue+0x1ba>
					SET_BIT(PORTD_REG ,copy_u8pinID);
    1eac:	a2 e3       	ldi	r26, 0x32	; 50
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e2 e3       	ldi	r30, 0x32	; 50
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <GPIO_voidSetPinValue+0x1b0>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <GPIO_voidSetPinValue+0x1ac>
    1ece:	84 2b       	or	r24, r20
    1ed0:	8c 93       	st	X, r24
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
    1ed4:	a2 e3       	ldi	r26, 0x32	; 50
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e2 e3       	ldi	r30, 0x32	; 50
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <GPIO_voidSetPinValue+0x1d8>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <GPIO_voidSetPinValue+0x1d4>
    1ef6:	80 95       	com	r24
    1ef8:	84 23       	and	r24, r20
    1efa:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1efc:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f00:	26 96       	adiw	r28, 0x06	; 6
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <GPIO_u8GetPinValue>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
u8 GPIO_u8GetPinValue(u8 copy_u8portID, u8 copy_u8pinID) {
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <GPIO_u8GetPinValue+0x6>
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <GPIO_u8GetPinValue+0x8>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <GPIO_u8GetPinValue+0xa>
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	8b 83       	std	Y+3, r24	; 0x03
    1f22:	6c 83       	std	Y+4, r22	; 0x04
	u8 GPIO_Driver_Checker = 0;
    1f24:	1a 82       	std	Y+2, r1	; 0x02
	u8 pin_value = LOGIC_LOW;
    1f26:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	88 30       	cpi	r24, 0x08	; 8
    1f2c:	18 f0       	brcs	.+6      	; 0x1f34 <GPIO_u8GetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	87 c0       	rjmp	.+270    	; 0x2042 <GPIO_u8GetPinValue+0x130>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	84 30       	cpi	r24, 0x04	; 4
    1f38:	18 f0       	brcs	.+6      	; 0x1f40 <GPIO_u8GetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	8a 83       	std	Y+2, r24	; 0x02
    1f3e:	81 c0       	rjmp	.+258    	; 0x2042 <GPIO_u8GetPinValue+0x130>
	}
	else {
		/* Read the pin value as required */
		switch(copy_u8portID) {
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	3e 83       	std	Y+6, r19	; 0x06
    1f48:	2d 83       	std	Y+5, r18	; 0x05
    1f4a:	4d 81       	ldd	r20, Y+5	; 0x05
    1f4c:	5e 81       	ldd	r21, Y+6	; 0x06
    1f4e:	41 30       	cpi	r20, 0x01	; 1
    1f50:	51 05       	cpc	r21, r1
    1f52:	79 f1       	breq	.+94     	; 0x1fb2 <GPIO_u8GetPinValue+0xa0>
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	34 f4       	brge	.+12     	; 0x1f6a <GPIO_u8GetPinValue+0x58>
    1f5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f60:	3e 81       	ldd	r19, Y+6	; 0x06
    1f62:	21 15       	cp	r18, r1
    1f64:	31 05       	cpc	r19, r1
    1f66:	69 f0       	breq	.+26     	; 0x1f82 <GPIO_u8GetPinValue+0x70>
    1f68:	6b c0       	rjmp	.+214    	; 0x2040 <GPIO_u8GetPinValue+0x12e>
    1f6a:	4d 81       	ldd	r20, Y+5	; 0x05
    1f6c:	5e 81       	ldd	r21, Y+6	; 0x06
    1f6e:	42 30       	cpi	r20, 0x02	; 2
    1f70:	51 05       	cpc	r21, r1
    1f72:	b9 f1       	breq	.+110    	; 0x1fe2 <GPIO_u8GetPinValue+0xd0>
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	83 30       	cpi	r24, 0x03	; 3
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <GPIO_u8GetPinValue+0x6e>
    1f7e:	49 c0       	rjmp	.+146    	; 0x2012 <GPIO_u8GetPinValue+0x100>
    1f80:	5f c0       	rjmp	.+190    	; 0x2040 <GPIO_u8GetPinValue+0x12e>
			case PORT_A:
				// Checks if the bit equals '1' or not
				if(BIT_IS_SET(PINA_REG, copy_u8pinID)) {
    1f82:	e9 e3       	ldi	r30, 0x39	; 57
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a9 01       	movw	r20, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <GPIO_u8GetPinValue+0x88>
    1f96:	55 95       	asr	r21
    1f98:	47 95       	ror	r20
    1f9a:	8a 95       	dec	r24
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <GPIO_u8GetPinValue+0x84>
    1f9e:	ca 01       	movw	r24, r20
    1fa0:	81 70       	andi	r24, 0x01	; 1
    1fa2:	90 70       	andi	r25, 0x00	; 0
    1fa4:	88 23       	and	r24, r24
    1fa6:	19 f0       	breq	.+6      	; 0x1fae <GPIO_u8GetPinValue+0x9c>
					pin_value = LOGIC_HIGH;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	49 c0       	rjmp	.+146    	; 0x2040 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1fae:	19 82       	std	Y+1, r1	; 0x01
    1fb0:	47 c0       	rjmp	.+142    	; 0x2040 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_B:
				if(BIT_IS_SET(PINB_REG,copy_u8pinID)) {
    1fb2:	e6 e3       	ldi	r30, 0x36	; 54
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a9 01       	movw	r20, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <GPIO_u8GetPinValue+0xb8>
    1fc6:	55 95       	asr	r21
    1fc8:	47 95       	ror	r20
    1fca:	8a 95       	dec	r24
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <GPIO_u8GetPinValue+0xb4>
    1fce:	ca 01       	movw	r24, r20
    1fd0:	81 70       	andi	r24, 0x01	; 1
    1fd2:	90 70       	andi	r25, 0x00	; 0
    1fd4:	88 23       	and	r24, r24
    1fd6:	19 f0       	breq	.+6      	; 0x1fde <GPIO_u8GetPinValue+0xcc>
					pin_value = LOGIC_HIGH;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	31 c0       	rjmp	.+98     	; 0x2040 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1fde:	19 82       	std	Y+1, r1	; 0x01
    1fe0:	2f c0       	rjmp	.+94     	; 0x2040 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_C:
				if(BIT_IS_SET(PINC_REG,copy_u8pinID)) {
    1fe2:	e3 e3       	ldi	r30, 0x33	; 51
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a9 01       	movw	r20, r18
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <GPIO_u8GetPinValue+0xe8>
    1ff6:	55 95       	asr	r21
    1ff8:	47 95       	ror	r20
    1ffa:	8a 95       	dec	r24
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <GPIO_u8GetPinValue+0xe4>
    1ffe:	ca 01       	movw	r24, r20
    2000:	81 70       	andi	r24, 0x01	; 1
    2002:	90 70       	andi	r25, 0x00	; 0
    2004:	88 23       	and	r24, r24
    2006:	19 f0       	breq	.+6      	; 0x200e <GPIO_u8GetPinValue+0xfc>
					pin_value = LOGIC_HIGH;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	19 c0       	rjmp	.+50     	; 0x2040 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    200e:	19 82       	std	Y+1, r1	; 0x01
    2010:	17 c0       	rjmp	.+46     	; 0x2040 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_D:
				if(BIT_IS_SET(PIND_REG,copy_u8pinID)) {
    2012:	e0 e3       	ldi	r30, 0x30	; 48
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	8c 81       	ldd	r24, Y+4	; 0x04
    201e:	88 2f       	mov	r24, r24
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a9 01       	movw	r20, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <GPIO_u8GetPinValue+0x118>
    2026:	55 95       	asr	r21
    2028:	47 95       	ror	r20
    202a:	8a 95       	dec	r24
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <GPIO_u8GetPinValue+0x114>
    202e:	ca 01       	movw	r24, r20
    2030:	81 70       	andi	r24, 0x01	; 1
    2032:	90 70       	andi	r25, 0x00	; 0
    2034:	88 23       	and	r24, r24
    2036:	19 f0       	breq	.+6      	; 0x203e <GPIO_u8GetPinValue+0x12c>
					pin_value = LOGIC_HIGH;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    203e:	19 82       	std	Y+1, r1	; 0x01
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2040:	1a 82       	std	Y+2, r1	; 0x02
	}
	return pin_value;
    2042:	89 81       	ldd	r24, Y+1	; 0x01
}
    2044:	26 96       	adiw	r28, 0x06	; 6
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <GPIO_voidTogglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_voidTogglePin(u8 copy_u8portID, u8 copy_u8pinID) {
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	00 d0       	rcall	.+0      	; 0x205c <GPIO_voidTogglePin+0x6>
    205c:	00 d0       	rcall	.+0      	; 0x205e <GPIO_voidTogglePin+0x8>
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	8a 83       	std	Y+2, r24	; 0x02
    2066:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    2068:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	88 30       	cpi	r24, 0x08	; 8
    206e:	18 f0       	brcs	.+6      	; 0x2076 <GPIO_voidTogglePin+0x20>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	75 c0       	rjmp	.+234    	; 0x2160 <GPIO_voidTogglePin+0x10a>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	84 30       	cpi	r24, 0x04	; 4
    207a:	18 f0       	brcs	.+6      	; 0x2082 <GPIO_voidTogglePin+0x2c>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	6f c0       	rjmp	.+222    	; 0x2160 <GPIO_voidTogglePin+0x10a>
	}
	else {
		switch(copy_u8portID) {
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	3d 83       	std	Y+5, r19	; 0x05
    208a:	2c 83       	std	Y+4, r18	; 0x04
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
    208e:	9d 81       	ldd	r25, Y+5	; 0x05
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	91 05       	cpc	r25, r1
    2094:	49 f1       	breq	.+82     	; 0x20e8 <GPIO_voidTogglePin+0x92>
    2096:	2c 81       	ldd	r18, Y+4	; 0x04
    2098:	3d 81       	ldd	r19, Y+5	; 0x05
    209a:	22 30       	cpi	r18, 0x02	; 2
    209c:	31 05       	cpc	r19, r1
    209e:	2c f4       	brge	.+10     	; 0x20aa <GPIO_voidTogglePin+0x54>
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <GPIO_voidTogglePin+0x6a>
    20a8:	5a c0       	rjmp	.+180    	; 0x215e <GPIO_voidTogglePin+0x108>
    20aa:	2c 81       	ldd	r18, Y+4	; 0x04
    20ac:	3d 81       	ldd	r19, Y+5	; 0x05
    20ae:	22 30       	cpi	r18, 0x02	; 2
    20b0:	31 05       	cpc	r19, r1
    20b2:	71 f1       	breq	.+92     	; 0x2110 <GPIO_voidTogglePin+0xba>
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	9d 81       	ldd	r25, Y+5	; 0x05
    20b8:	83 30       	cpi	r24, 0x03	; 3
    20ba:	91 05       	cpc	r25, r1
    20bc:	e9 f1       	breq	.+122    	; 0x2138 <GPIO_voidTogglePin+0xe2>
    20be:	4f c0       	rjmp	.+158    	; 0x215e <GPIO_voidTogglePin+0x108>
			case PORT_A:
				TOG_BIT(PORTA_REG, copy_u8pinID);
    20c0:	ab e3       	ldi	r26, 0x3B	; 59
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	eb e3       	ldi	r30, 0x3B	; 59
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <GPIO_voidTogglePin+0x88>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <GPIO_voidTogglePin+0x84>
    20e2:	84 27       	eor	r24, r20
    20e4:	8c 93       	st	X, r24
    20e6:	3b c0       	rjmp	.+118    	; 0x215e <GPIO_voidTogglePin+0x108>
				break;
			case PORT_B:
				TOG_BIT(PORTB_REG, copy_u8pinID);
    20e8:	a8 e3       	ldi	r26, 0x38	; 56
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e8 e3       	ldi	r30, 0x38	; 56
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	48 2f       	mov	r20, r24
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	02 2e       	mov	r0, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <GPIO_voidTogglePin+0xb0>
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	0a 94       	dec	r0
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <GPIO_voidTogglePin+0xac>
    210a:	84 27       	eor	r24, r20
    210c:	8c 93       	st	X, r24
    210e:	27 c0       	rjmp	.+78     	; 0x215e <GPIO_voidTogglePin+0x108>
				break;
			case PORT_C:
				TOG_BIT(PORTC_REG, copy_u8pinID);
    2110:	a5 e3       	ldi	r26, 0x35	; 53
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e5 e3       	ldi	r30, 0x35	; 53
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	48 2f       	mov	r20, r24
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 2e       	mov	r0, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <GPIO_voidTogglePin+0xd8>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	0a 94       	dec	r0
    2130:	e2 f7       	brpl	.-8      	; 0x212a <GPIO_voidTogglePin+0xd4>
    2132:	84 27       	eor	r24, r20
    2134:	8c 93       	st	X, r24
    2136:	13 c0       	rjmp	.+38     	; 0x215e <GPIO_voidTogglePin+0x108>
				break;
			case PORT_D:
				TOG_BIT(PORTD_REG, copy_u8pinID);
    2138:	a2 e3       	ldi	r26, 0x32	; 50
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e2 e3       	ldi	r30, 0x32	; 50
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	48 2f       	mov	r20, r24
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 2e       	mov	r0, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <GPIO_voidTogglePin+0x100>
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	0a 94       	dec	r0
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <GPIO_voidTogglePin+0xfc>
    215a:	84 27       	eor	r24, r20
    215c:	8c 93       	st	X, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    215e:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2160:	89 81       	ldd	r24, Y+1	; 0x01
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <GPIO_voidSetPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortDirection(u8 copy_u8portID, u8 copy_u8portDIR) {
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <GPIO_voidSetPortDirection+0x6>
    2178:	00 d0       	rcall	.+0      	; 0x217a <GPIO_voidSetPortDirection+0x8>
    217a:	0f 92       	push	r0
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	8a 83       	std	Y+2, r24	; 0x02
    2182:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    2184:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	84 30       	cpi	r24, 0x04	; 4
    218a:	18 f0       	brcs	.+6      	; 0x2192 <GPIO_voidSetPortDirection+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	3c c0       	rjmp	.+120    	; 0x220a <GPIO_voidSetPortDirection+0x98>
	}
	else if((copy_u8portDIR != PORT_INPUT) && (copy_u8portDIR != PORT_OUTPUT)) {
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	88 23       	and	r24, r24
    2196:	31 f0       	breq	.+12     	; 0x21a4 <GPIO_voidSetPortDirection+0x32>
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	8f 3f       	cpi	r24, 0xFF	; 255
    219c:	19 f0       	breq	.+6      	; 0x21a4 <GPIO_voidSetPortDirection+0x32>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    219e:	83 e0       	ldi	r24, 0x03	; 3
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	33 c0       	rjmp	.+102    	; 0x220a <GPIO_voidSetPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	3d 83       	std	Y+5, r19	; 0x05
    21ac:	2c 83       	std	Y+4, r18	; 0x04
    21ae:	8c 81       	ldd	r24, Y+4	; 0x04
    21b0:	9d 81       	ldd	r25, Y+5	; 0x05
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	91 05       	cpc	r25, r1
    21b6:	d1 f0       	breq	.+52     	; 0x21ec <GPIO_voidSetPortDirection+0x7a>
    21b8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ba:	3d 81       	ldd	r19, Y+5	; 0x05
    21bc:	22 30       	cpi	r18, 0x02	; 2
    21be:	31 05       	cpc	r19, r1
    21c0:	2c f4       	brge	.+10     	; 0x21cc <GPIO_voidSetPortDirection+0x5a>
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	9d 81       	ldd	r25, Y+5	; 0x05
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	61 f0       	breq	.+24     	; 0x21e2 <GPIO_voidSetPortDirection+0x70>
    21ca:	1e c0       	rjmp	.+60     	; 0x2208 <GPIO_voidSetPortDirection+0x96>
    21cc:	2c 81       	ldd	r18, Y+4	; 0x04
    21ce:	3d 81       	ldd	r19, Y+5	; 0x05
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	81 f0       	breq	.+32     	; 0x21f6 <GPIO_voidSetPortDirection+0x84>
    21d6:	8c 81       	ldd	r24, Y+4	; 0x04
    21d8:	9d 81       	ldd	r25, Y+5	; 0x05
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	91 05       	cpc	r25, r1
    21de:	81 f0       	breq	.+32     	; 0x2200 <GPIO_voidSetPortDirection+0x8e>
    21e0:	13 c0       	rjmp	.+38     	; 0x2208 <GPIO_voidSetPortDirection+0x96>
			case PORT_A:
				DDRA_REG = copy_u8portDIR;
    21e2:	ea e3       	ldi	r30, 0x3A	; 58
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	80 83       	st	Z, r24
    21ea:	0e c0       	rjmp	.+28     	; 0x2208 <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_B:
				DDRB_REG = copy_u8portDIR;
    21ec:	e7 e3       	ldi	r30, 0x37	; 55
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	80 83       	st	Z, r24
    21f4:	09 c0       	rjmp	.+18     	; 0x2208 <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_C:
				DDRC_REG = copy_u8portDIR;
    21f6:	e4 e3       	ldi	r30, 0x34	; 52
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	80 83       	st	Z, r24
    21fe:	04 c0       	rjmp	.+8      	; 0x2208 <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_D:
				DDRD_REG = copy_u8portDIR;
    2200:	e1 e3       	ldi	r30, 0x31	; 49
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2208:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    220a:	89 81       	ldd	r24, Y+1	; 0x01
}
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <GPIO_voidSetPortValue>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortValue(u8 copy_u8portID, u8 copy_u8portValue) {
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	00 d0       	rcall	.+0      	; 0x2222 <GPIO_voidSetPortValue+0x6>
    2222:	00 d0       	rcall	.+0      	; 0x2224 <GPIO_voidSetPortValue+0x8>
    2224:	0f 92       	push	r0
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	8a 83       	std	Y+2, r24	; 0x02
    222c:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    222e:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	84 30       	cpi	r24, 0x04	; 4
    2234:	18 f0       	brcs	.+6      	; 0x223c <GPIO_voidSetPortValue+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2236:	82 e0       	ldi	r24, 0x02	; 2
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	33 c0       	rjmp	.+102    	; 0x22a2 <GPIO_voidSetPortValue+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	3d 83       	std	Y+5, r19	; 0x05
    2244:	2c 83       	std	Y+4, r18	; 0x04
    2246:	8c 81       	ldd	r24, Y+4	; 0x04
    2248:	9d 81       	ldd	r25, Y+5	; 0x05
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	91 05       	cpc	r25, r1
    224e:	d1 f0       	breq	.+52     	; 0x2284 <GPIO_voidSetPortValue+0x68>
    2250:	2c 81       	ldd	r18, Y+4	; 0x04
    2252:	3d 81       	ldd	r19, Y+5	; 0x05
    2254:	22 30       	cpi	r18, 0x02	; 2
    2256:	31 05       	cpc	r19, r1
    2258:	2c f4       	brge	.+10     	; 0x2264 <GPIO_voidSetPortValue+0x48>
    225a:	8c 81       	ldd	r24, Y+4	; 0x04
    225c:	9d 81       	ldd	r25, Y+5	; 0x05
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	61 f0       	breq	.+24     	; 0x227a <GPIO_voidSetPortValue+0x5e>
    2262:	1e c0       	rjmp	.+60     	; 0x22a0 <GPIO_voidSetPortValue+0x84>
    2264:	2c 81       	ldd	r18, Y+4	; 0x04
    2266:	3d 81       	ldd	r19, Y+5	; 0x05
    2268:	22 30       	cpi	r18, 0x02	; 2
    226a:	31 05       	cpc	r19, r1
    226c:	81 f0       	breq	.+32     	; 0x228e <GPIO_voidSetPortValue+0x72>
    226e:	8c 81       	ldd	r24, Y+4	; 0x04
    2270:	9d 81       	ldd	r25, Y+5	; 0x05
    2272:	83 30       	cpi	r24, 0x03	; 3
    2274:	91 05       	cpc	r25, r1
    2276:	81 f0       	breq	.+32     	; 0x2298 <GPIO_voidSetPortValue+0x7c>
    2278:	13 c0       	rjmp	.+38     	; 0x22a0 <GPIO_voidSetPortValue+0x84>
			case PORT_A:
				PORTA_REG = copy_u8portValue;
    227a:	eb e3       	ldi	r30, 0x3B	; 59
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	80 83       	st	Z, r24
    2282:	0e c0       	rjmp	.+28     	; 0x22a0 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_B:
				PORTB_REG = copy_u8portValue;
    2284:	e8 e3       	ldi	r30, 0x38	; 56
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	80 83       	st	Z, r24
    228c:	09 c0       	rjmp	.+18     	; 0x22a0 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_C:
				PORTC_REG = copy_u8portValue;
    228e:	e5 e3       	ldi	r30, 0x35	; 53
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	80 83       	st	Z, r24
    2296:	04 c0       	rjmp	.+8      	; 0x22a0 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_D:
				PORTD_REG = copy_u8portValue;
    2298:	e2 e3       	ldi	r30, 0x32	; 50
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    22a0:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <GPIO_u8GetPortValue>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_u8GetPortValue(u8 copy_u8portID) {
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <GPIO_u8GetPortValue+0x6>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <GPIO_u8GetPortValue+0x8>
    22bc:	0f 92       	push	r0
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	8b 83       	std	Y+3, r24	; 0x03
	u8 value = LOGIC_LOW;
    22c4:	1a 82       	std	Y+2, r1	; 0x02
	u8 GPIO_Driver_Checker = 0;
    22c6:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	84 30       	cpi	r24, 0x04	; 4
    22cc:	18 f0       	brcs	.+6      	; 0x22d4 <GPIO_u8GetPortValue+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    22ce:	82 e0       	ldi	r24, 0x02	; 2
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	33 c0       	rjmp	.+102    	; 0x233a <GPIO_u8GetPortValue+0x86>
	}
	else {
		switch(copy_u8portID) {
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	3d 83       	std	Y+5, r19	; 0x05
    22dc:	2c 83       	std	Y+4, r18	; 0x04
    22de:	8c 81       	ldd	r24, Y+4	; 0x04
    22e0:	9d 81       	ldd	r25, Y+5	; 0x05
    22e2:	81 30       	cpi	r24, 0x01	; 1
    22e4:	91 05       	cpc	r25, r1
    22e6:	d1 f0       	breq	.+52     	; 0x231c <GPIO_u8GetPortValue+0x68>
    22e8:	2c 81       	ldd	r18, Y+4	; 0x04
    22ea:	3d 81       	ldd	r19, Y+5	; 0x05
    22ec:	22 30       	cpi	r18, 0x02	; 2
    22ee:	31 05       	cpc	r19, r1
    22f0:	2c f4       	brge	.+10     	; 0x22fc <GPIO_u8GetPortValue+0x48>
    22f2:	8c 81       	ldd	r24, Y+4	; 0x04
    22f4:	9d 81       	ldd	r25, Y+5	; 0x05
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	61 f0       	breq	.+24     	; 0x2312 <GPIO_u8GetPortValue+0x5e>
    22fa:	1e c0       	rjmp	.+60     	; 0x2338 <GPIO_u8GetPortValue+0x84>
    22fc:	2c 81       	ldd	r18, Y+4	; 0x04
    22fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2300:	22 30       	cpi	r18, 0x02	; 2
    2302:	31 05       	cpc	r19, r1
    2304:	81 f0       	breq	.+32     	; 0x2326 <GPIO_u8GetPortValue+0x72>
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
    2308:	9d 81       	ldd	r25, Y+5	; 0x05
    230a:	83 30       	cpi	r24, 0x03	; 3
    230c:	91 05       	cpc	r25, r1
    230e:	81 f0       	breq	.+32     	; 0x2330 <GPIO_u8GetPortValue+0x7c>
    2310:	13 c0       	rjmp	.+38     	; 0x2338 <GPIO_u8GetPortValue+0x84>
			case PORT_A:
				// Why value equals PINA?
				value = PORTA_REG;
    2312:	eb e3       	ldi	r30, 0x3B	; 59
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	8a 83       	std	Y+2, r24	; 0x02
    231a:	0e c0       	rjmp	.+28     	; 0x2338 <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_B:
				value = PORTB_REG;
    231c:	e8 e3       	ldi	r30, 0x38	; 56
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	8a 83       	std	Y+2, r24	; 0x02
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_C:
				value = PORTC_REG;
    2326:	e5 e3       	ldi	r30, 0x35	; 53
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	8a 83       	std	Y+2, r24	; 0x02
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_D:
				value = PORTD_REG;
    2330:	e2 e3       	ldi	r30, 0x32	; 50
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	8a 83       	std	Y+2, r24	; 0x02
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2338:	19 82       	std	Y+1, r1	; 0x01
	}
	return value;
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <GLOBINT_voidSetEnableFlag>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Enables the Global Interrupt Enable Flag in the Status Register
void GLOBINT_voidSetEnableFlag(void) {
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, SREG_I_BIT);
    2354:	af e5       	ldi	r26, 0x5F	; 95
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	ef e5       	ldi	r30, 0x5F	; 95
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	80 68       	ori	r24, 0x80	; 128
    2360:	8c 93       	st	X, r24
}
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <GLOBINT_voidSetDisableFlag>:

// Disables the Global Interrupt Disable Flag in the Status Register
void GLOBINT_voidSetDisableFlag(void) {
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, SREG_I_BIT);
    2370:	af e5       	ldi	r26, 0x5F	; 95
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	ef e5       	ldi	r30, 0x5F	; 95
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8f 77       	andi	r24, 0x7F	; 127
    237c:	8c 93       	st	X, r24
}
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <EXTINT_voidSetSenseINTx>:
void (*CallBackPtr_INT1) (void);
void (*CallBackPtr_INT2) (void);


// Initialize INT0 & INT1 & INT2 Sense Control System
void EXTINT_voidSetSenseINTx(u8 copyINTx, u8 CopySense) {
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <EXTINT_voidSetSenseINTx+0x6>
    238a:	00 d0       	rcall	.+0      	; 0x238c <EXTINT_voidSetSenseINTx+0x8>
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	3c 83       	std	Y+4, r19	; 0x04
    239c:	2b 83       	std	Y+3, r18	; 0x03
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	82 30       	cpi	r24, 0x02	; 2
    23a4:	91 05       	cpc	r25, r1
    23a6:	09 f4       	brne	.+2      	; 0x23aa <EXTINT_voidSetSenseINTx+0x26>
    23a8:	55 c0       	rjmp	.+170    	; 0x2454 <EXTINT_voidSetSenseINTx+0xd0>
    23aa:	2b 81       	ldd	r18, Y+3	; 0x03
    23ac:	3c 81       	ldd	r19, Y+4	; 0x04
    23ae:	23 30       	cpi	r18, 0x03	; 3
    23b0:	31 05       	cpc	r19, r1
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <EXTINT_voidSetSenseINTx+0x32>
    23b4:	97 c0       	rjmp	.+302    	; 0x24e4 <EXTINT_voidSetSenseINTx+0x160>
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	81 30       	cpi	r24, 0x01	; 1
    23bc:	91 05       	cpc	r25, r1
    23be:	09 f0       	breq	.+2      	; 0x23c2 <EXTINT_voidSetSenseINTx+0x3e>
    23c0:	a6 c0       	rjmp	.+332    	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
	case EXT_INT0:
		if(CopySense == EXTINT_Low_Level) {
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	88 23       	and	r24, r24
    23c6:	79 f4       	brne	.+30     	; 0x23e6 <EXTINT_voidSetSenseINTx+0x62>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    23c8:	a5 e5       	ldi	r26, 0x55	; 85
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e5 e5       	ldi	r30, 0x55	; 85
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8d 7f       	andi	r24, 0xFD	; 253
    23d4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    23d6:	a5 e5       	ldi	r26, 0x55	; 85
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e5 e5       	ldi	r30, 0x55	; 85
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	8e 7f       	andi	r24, 0xFE	; 254
    23e2:	8c 93       	st	X, r24
    23e4:	94 c0       	rjmp	.+296    	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Logical_Change) {
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	79 f4       	brne	.+30     	; 0x240a <EXTINT_voidSetSenseINTx+0x86>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    23ec:	a5 e5       	ldi	r26, 0x55	; 85
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e5 e5       	ldi	r30, 0x55	; 85
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	8d 7f       	andi	r24, 0xFD	; 253
    23f8:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    23fa:	a5 e5       	ldi	r26, 0x55	; 85
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e5 e5       	ldi	r30, 0x55	; 85
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	81 60       	ori	r24, 0x01	; 1
    2406:	8c 93       	st	X, r24
    2408:	82 c0       	rjmp	.+260    	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Falling_Edge) {
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	82 30       	cpi	r24, 0x02	; 2
    240e:	79 f4       	brne	.+30     	; 0x242e <EXTINT_voidSetSenseINTx+0xaa>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    2410:	a5 e5       	ldi	r26, 0x55	; 85
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e5 e5       	ldi	r30, 0x55	; 85
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	82 60       	ori	r24, 0x02	; 2
    241c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    241e:	a5 e5       	ldi	r26, 0x55	; 85
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e5 e5       	ldi	r30, 0x55	; 85
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	8e 7f       	andi	r24, 0xFE	; 254
    242a:	8c 93       	st	X, r24
    242c:	70 c0       	rjmp	.+224    	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Rising_Edge) {
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	83 30       	cpi	r24, 0x03	; 3
    2432:	09 f0       	breq	.+2      	; 0x2436 <EXTINT_voidSetSenseINTx+0xb2>
    2434:	6c c0       	rjmp	.+216    	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    2436:	a5 e5       	ldi	r26, 0x55	; 85
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e5 e5       	ldi	r30, 0x55	; 85
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	82 60       	ori	r24, 0x02	; 2
    2442:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    2444:	a5 e5       	ldi	r26, 0x55	; 85
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e5 e5       	ldi	r30, 0x55	; 85
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	81 60       	ori	r24, 0x01	; 1
    2450:	8c 93       	st	X, r24
    2452:	5d c0       	rjmp	.+186    	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
		}
		break;
	case EXT_INT1:
		if(CopySense == EXTINT_Low_Level) {
    2454:	8a 81       	ldd	r24, Y+2	; 0x02
    2456:	88 23       	and	r24, r24
    2458:	79 f4       	brne	.+30     	; 0x2478 <EXTINT_voidSetSenseINTx+0xf4>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    245a:	a5 e5       	ldi	r26, 0x55	; 85
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e5 e5       	ldi	r30, 0x55	; 85
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	87 7f       	andi	r24, 0xF7	; 247
    2466:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    2468:	a5 e5       	ldi	r26, 0x55	; 85
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e5 e5       	ldi	r30, 0x55	; 85
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	8b 7f       	andi	r24, 0xFB	; 251
    2474:	8c 93       	st	X, r24
    2476:	4b c0       	rjmp	.+150    	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Logical_Change) {
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	81 30       	cpi	r24, 0x01	; 1
    247c:	79 f4       	brne	.+30     	; 0x249c <EXTINT_voidSetSenseINTx+0x118>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    247e:	a5 e5       	ldi	r26, 0x55	; 85
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e5 e5       	ldi	r30, 0x55	; 85
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	87 7f       	andi	r24, 0xF7	; 247
    248a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    248c:	a5 e5       	ldi	r26, 0x55	; 85
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e5 e5       	ldi	r30, 0x55	; 85
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	84 60       	ori	r24, 0x04	; 4
    2498:	8c 93       	st	X, r24
    249a:	39 c0       	rjmp	.+114    	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Falling_Edge) {
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	82 30       	cpi	r24, 0x02	; 2
    24a0:	79 f4       	brne	.+30     	; 0x24c0 <EXTINT_voidSetSenseINTx+0x13c>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    24a2:	a5 e5       	ldi	r26, 0x55	; 85
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e5 e5       	ldi	r30, 0x55	; 85
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	88 60       	ori	r24, 0x08	; 8
    24ae:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    24b0:	a5 e5       	ldi	r26, 0x55	; 85
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e5 e5       	ldi	r30, 0x55	; 85
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	8b 7f       	andi	r24, 0xFB	; 251
    24bc:	8c 93       	st	X, r24
    24be:	27 c0       	rjmp	.+78     	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Rising_Edge) {
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	83 30       	cpi	r24, 0x03	; 3
    24c4:	21 f5       	brne	.+72     	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    24c6:	a5 e5       	ldi	r26, 0x55	; 85
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e5 e5       	ldi	r30, 0x55	; 85
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	88 60       	ori	r24, 0x08	; 8
    24d2:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    24d4:	a5 e5       	ldi	r26, 0x55	; 85
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e5 e5       	ldi	r30, 0x55	; 85
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	84 60       	ori	r24, 0x04	; 4
    24e0:	8c 93       	st	X, r24
    24e2:	15 c0       	rjmp	.+42     	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
		}
		break;
	case EXT_INT2:
		if(CopySense == EXTINT_INT2_Falling_Edge) {
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	88 23       	and	r24, r24
    24e8:	41 f4       	brne	.+16     	; 0x24fa <EXTINT_voidSetSenseINTx+0x176>
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2);
    24ea:	a4 e5       	ldi	r26, 0x54	; 84
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e4 e5       	ldi	r30, 0x54	; 84
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	8f 7b       	andi	r24, 0xBF	; 191
    24f6:	8c 93       	st	X, r24
    24f8:	0a c0       	rjmp	.+20     	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_INT2_Rising_Edge) {
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	81 30       	cpi	r24, 0x01	; 1
    24fe:	39 f4       	brne	.+14     	; 0x250e <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2);
    2500:	a4 e5       	ldi	r26, 0x54	; 84
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e4 e5       	ldi	r30, 0x54	; 84
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	80 64       	ori	r24, 0x40	; 64
    250c:	8c 93       	st	X, r24
		}
		break;
	}
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <EXTINT_voidEnableINTx>:


// Enable External Interrupt INT0 & INT1 & INT2 and pass a function to ISR
void EXTINT_voidEnableINTx(u8 copyINTx, void (*copy_PtrtoFunc) (void)) {
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	00 d0       	rcall	.+0      	; 0x2522 <EXTINT_voidEnableINTx+0x6>
    2522:	00 d0       	rcall	.+0      	; 0x2524 <EXTINT_voidEnableINTx+0x8>
    2524:	0f 92       	push	r0
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	7b 83       	std	Y+3, r23	; 0x03
    252e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	3d 83       	std	Y+5, r19	; 0x05
    2538:	2c 83       	std	Y+4, r18	; 0x04
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	9d 81       	ldd	r25, Y+5	; 0x05
    253e:	82 30       	cpi	r24, 0x02	; 2
    2540:	91 05       	cpc	r25, r1
    2542:	c1 f0       	breq	.+48     	; 0x2574 <EXTINT_voidEnableINTx+0x58>
    2544:	2c 81       	ldd	r18, Y+4	; 0x04
    2546:	3d 81       	ldd	r19, Y+5	; 0x05
    2548:	23 30       	cpi	r18, 0x03	; 3
    254a:	31 05       	cpc	r19, r1
    254c:	09 f1       	breq	.+66     	; 0x2590 <EXTINT_voidEnableINTx+0x74>
    254e:	8c 81       	ldd	r24, Y+4	; 0x04
    2550:	9d 81       	ldd	r25, Y+5	; 0x05
    2552:	81 30       	cpi	r24, 0x01	; 1
    2554:	91 05       	cpc	r25, r1
    2556:	51 f5       	brne	.+84     	; 0x25ac <EXTINT_voidEnableINTx+0x90>
	case EXT_INT0:
		SET_BIT(GICR_REG, GICR_INT0);
    2558:	ab e5       	ldi	r26, 0x5B	; 91
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	eb e5       	ldi	r30, 0x5B	; 91
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	80 64       	ori	r24, 0x40	; 64
    2564:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	9b 81       	ldd	r25, Y+3	; 0x03
    256a:	90 93 ce 01 	sts	0x01CE, r25
    256e:	80 93 cd 01 	sts	0x01CD, r24
    2572:	29 c0       	rjmp	.+82     	; 0x25c6 <EXTINT_voidEnableINTx+0xaa>
		break;
	case EXT_INT1:
		SET_BIT(GICR_REG, GICR_INT1);
    2574:	ab e5       	ldi	r26, 0x5B	; 91
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	eb e5       	ldi	r30, 0x5B	; 91
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	80 68       	ori	r24, 0x80	; 128
    2580:	8c 93       	st	X, r24
		CallBackPtr_INT1 = copy_PtrtoFunc;
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	9b 81       	ldd	r25, Y+3	; 0x03
    2586:	90 93 d0 01 	sts	0x01D0, r25
    258a:	80 93 cf 01 	sts	0x01CF, r24
    258e:	1b c0       	rjmp	.+54     	; 0x25c6 <EXTINT_voidEnableINTx+0xaa>
		break;
	case EXT_INT2:
		SET_BIT(GICR_REG, GICR_INT2);
    2590:	ab e5       	ldi	r26, 0x5B	; 91
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	eb e5       	ldi	r30, 0x5B	; 91
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	80 62       	ori	r24, 0x20	; 32
    259c:	8c 93       	st	X, r24
		CallBackPtr_INT2 = copy_PtrtoFunc;
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	9b 81       	ldd	r25, Y+3	; 0x03
    25a2:	90 93 cc 01 	sts	0x01CC, r25
    25a6:	80 93 cb 01 	sts	0x01CB, r24
    25aa:	0d c0       	rjmp	.+26     	; 0x25c6 <EXTINT_voidEnableINTx+0xaa>
		break;
	default:
		SET_BIT(GICR_REG, GICR_INT0);
    25ac:	ab e5       	ldi	r26, 0x5B	; 91
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	eb e5       	ldi	r30, 0x5B	; 91
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	80 64       	ori	r24, 0x40	; 64
    25b8:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	90 93 ce 01 	sts	0x01CE, r25
    25c2:	80 93 cd 01 	sts	0x01CD, r24
		break;
	}
}
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <EXTINT_voidDisableINTx>:


// Disable External Interrupt INT0 & INT1 & INT2
void EXTINT_voidDisableINTx(u8 copyINTx) {
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <EXTINT_voidDisableINTx+0x6>
    25dc:	0f 92       	push	r0
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	89 83       	std	Y+1, r24	; 0x01
	switch(copyINTx) {
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	3b 83       	std	Y+3, r19	; 0x03
    25ec:	2a 83       	std	Y+2, r18	; 0x02
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	9b 81       	ldd	r25, Y+3	; 0x03
    25f2:	82 30       	cpi	r24, 0x02	; 2
    25f4:	91 05       	cpc	r25, r1
    25f6:	91 f0       	breq	.+36     	; 0x261c <EXTINT_voidDisableINTx+0x46>
    25f8:	2a 81       	ldd	r18, Y+2	; 0x02
    25fa:	3b 81       	ldd	r19, Y+3	; 0x03
    25fc:	23 30       	cpi	r18, 0x03	; 3
    25fe:	31 05       	cpc	r19, r1
    2600:	a9 f0       	breq	.+42     	; 0x262c <EXTINT_voidDisableINTx+0x56>
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	9b 81       	ldd	r25, Y+3	; 0x03
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	91 05       	cpc	r25, r1
    260a:	c1 f4       	brne	.+48     	; 0x263c <EXTINT_voidDisableINTx+0x66>
	case EXT_INT0:
		CLR_BIT(GICR_REG, GICR_INT0);
    260c:	ab e5       	ldi	r26, 0x5B	; 91
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	eb e5       	ldi	r30, 0x5B	; 91
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8f 7b       	andi	r24, 0xBF	; 191
    2618:	8c 93       	st	X, r24
    261a:	17 c0       	rjmp	.+46     	; 0x264a <EXTINT_voidDisableINTx+0x74>
		break;
	case EXT_INT1:
		CLR_BIT(GICR_REG, GICR_INT1);
    261c:	ab e5       	ldi	r26, 0x5B	; 91
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	eb e5       	ldi	r30, 0x5B	; 91
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	8f 77       	andi	r24, 0x7F	; 127
    2628:	8c 93       	st	X, r24
    262a:	0f c0       	rjmp	.+30     	; 0x264a <EXTINT_voidDisableINTx+0x74>
		break;
	case EXT_INT2:
		CLR_BIT(GICR_REG, GICR_INT2);
    262c:	ab e5       	ldi	r26, 0x5B	; 91
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	eb e5       	ldi	r30, 0x5B	; 91
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	8f 7d       	andi	r24, 0xDF	; 223
    2638:	8c 93       	st	X, r24
    263a:	07 c0       	rjmp	.+14     	; 0x264a <EXTINT_voidDisableINTx+0x74>
		break;
	default:
		CLR_BIT(GICR_REG, GICR_INT0);
    263c:	ab e5       	ldi	r26, 0x5B	; 91
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	eb e5       	ldi	r30, 0x5B	; 91
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	8f 7b       	andi	r24, 0xBF	; 191
    2648:	8c 93       	st	X, r24
		break;
	}
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <__vector_1>:


// Disables Compiler Optimizations & verifies callback not empty
void __vector_1(void) __attribute__((signal, used));
void __vector_1(void) {
    2656:	1f 92       	push	r1
    2658:	0f 92       	push	r0
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	0f 92       	push	r0
    265e:	11 24       	eor	r1, r1
    2660:	2f 93       	push	r18
    2662:	3f 93       	push	r19
    2664:	4f 93       	push	r20
    2666:	5f 93       	push	r21
    2668:	6f 93       	push	r22
    266a:	7f 93       	push	r23
    266c:	8f 93       	push	r24
    266e:	9f 93       	push	r25
    2670:	af 93       	push	r26
    2672:	bf 93       	push	r27
    2674:	ef 93       	push	r30
    2676:	ff 93       	push	r31
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT0 != NULL) {
    2680:	80 91 cd 01 	lds	r24, 0x01CD
    2684:	90 91 ce 01 	lds	r25, 0x01CE
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	29 f0       	breq	.+10     	; 0x2696 <__vector_1+0x40>
		CallBackPtr_INT0();
    268c:	e0 91 cd 01 	lds	r30, 0x01CD
    2690:	f0 91 ce 01 	lds	r31, 0x01CE
    2694:	09 95       	icall
	}
}
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	ff 91       	pop	r31
    269c:	ef 91       	pop	r30
    269e:	bf 91       	pop	r27
    26a0:	af 91       	pop	r26
    26a2:	9f 91       	pop	r25
    26a4:	8f 91       	pop	r24
    26a6:	7f 91       	pop	r23
    26a8:	6f 91       	pop	r22
    26aa:	5f 91       	pop	r21
    26ac:	4f 91       	pop	r20
    26ae:	3f 91       	pop	r19
    26b0:	2f 91       	pop	r18
    26b2:	0f 90       	pop	r0
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	0f 90       	pop	r0
    26b8:	1f 90       	pop	r1
    26ba:	18 95       	reti

000026bc <__vector_2>:

void __vector_2(void) __attribute__((signal, used));
void __vector_2(void) {
    26bc:	1f 92       	push	r1
    26be:	0f 92       	push	r0
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	0f 92       	push	r0
    26c4:	11 24       	eor	r1, r1
    26c6:	2f 93       	push	r18
    26c8:	3f 93       	push	r19
    26ca:	4f 93       	push	r20
    26cc:	5f 93       	push	r21
    26ce:	6f 93       	push	r22
    26d0:	7f 93       	push	r23
    26d2:	8f 93       	push	r24
    26d4:	9f 93       	push	r25
    26d6:	af 93       	push	r26
    26d8:	bf 93       	push	r27
    26da:	ef 93       	push	r30
    26dc:	ff 93       	push	r31
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT1 != NULL) {
    26e6:	80 91 cf 01 	lds	r24, 0x01CF
    26ea:	90 91 d0 01 	lds	r25, 0x01D0
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	29 f0       	breq	.+10     	; 0x26fc <__vector_2+0x40>
		CallBackPtr_INT1();
    26f2:	e0 91 cf 01 	lds	r30, 0x01CF
    26f6:	f0 91 d0 01 	lds	r31, 0x01D0
    26fa:	09 95       	icall
	}
}
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	ff 91       	pop	r31
    2702:	ef 91       	pop	r30
    2704:	bf 91       	pop	r27
    2706:	af 91       	pop	r26
    2708:	9f 91       	pop	r25
    270a:	8f 91       	pop	r24
    270c:	7f 91       	pop	r23
    270e:	6f 91       	pop	r22
    2710:	5f 91       	pop	r21
    2712:	4f 91       	pop	r20
    2714:	3f 91       	pop	r19
    2716:	2f 91       	pop	r18
    2718:	0f 90       	pop	r0
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	0f 90       	pop	r0
    271e:	1f 90       	pop	r1
    2720:	18 95       	reti

00002722 <__vector_3>:

void __vector_3(void) __attribute__((signal, used));
void __vector_3(void) {
    2722:	1f 92       	push	r1
    2724:	0f 92       	push	r0
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	0f 92       	push	r0
    272a:	11 24       	eor	r1, r1
    272c:	2f 93       	push	r18
    272e:	3f 93       	push	r19
    2730:	4f 93       	push	r20
    2732:	5f 93       	push	r21
    2734:	6f 93       	push	r22
    2736:	7f 93       	push	r23
    2738:	8f 93       	push	r24
    273a:	9f 93       	push	r25
    273c:	af 93       	push	r26
    273e:	bf 93       	push	r27
    2740:	ef 93       	push	r30
    2742:	ff 93       	push	r31
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT2 != NULL) {
    274c:	80 91 cb 01 	lds	r24, 0x01CB
    2750:	90 91 cc 01 	lds	r25, 0x01CC
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	29 f0       	breq	.+10     	; 0x2762 <__vector_3+0x40>
		CallBackPtr_INT2();
    2758:	e0 91 cb 01 	lds	r30, 0x01CB
    275c:	f0 91 cc 01 	lds	r31, 0x01CC
    2760:	09 95       	icall
	}
}
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	ff 91       	pop	r31
    2768:	ef 91       	pop	r30
    276a:	bf 91       	pop	r27
    276c:	af 91       	pop	r26
    276e:	9f 91       	pop	r25
    2770:	8f 91       	pop	r24
    2772:	7f 91       	pop	r23
    2774:	6f 91       	pop	r22
    2776:	5f 91       	pop	r21
    2778:	4f 91       	pop	r20
    277a:	3f 91       	pop	r19
    277c:	2f 91       	pop	r18
    277e:	0f 90       	pop	r0
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	0f 90       	pop	r0
    2784:	1f 90       	pop	r1
    2786:	18 95       	reti

00002788 <ADC_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality
void ADC_voidInit(void) {
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
	 * 5, 	ADLAR   = 0 right adjusted
	 * 4:0, 	MUX4:0  = 00000 to choose channel 0 as initializationd
	 */

	// Sets REFS1:0 to '01'
	ADMUX_REG->REFS = AVCC;
    2790:	e7 e2       	ldi	r30, 0x27	; 39
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	8f 73       	andi	r24, 0x3F	; 63
    2798:	80 64       	ori	r24, 0x40	; 64
    279a:	80 83       	st	Z, r24
	ADMUX_REG->ADLAR = RIGHT_ADJUST;
    279c:	e7 e2       	ldi	r30, 0x27	; 39
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	8f 7d       	andi	r24, 0xDF	; 223
    27a4:	80 83       	st	Z, r24

	// Enables ADC & Choose Prescaler of 128
	ADCSRA_REG->ADEN = ADEN_ENABLE;
    27a6:	e6 e2       	ldi	r30, 0x26	; 38
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	80 68       	ori	r24, 0x80	; 128
    27ae:	80 83       	st	Z, r24
	ADCSRA_REG->ADPS = PRESCALER_128;
    27b0:	e6 e2       	ldi	r30, 0x26	; 38
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	87 60       	ori	r24, 0x07	; 7
    27b8:	80 83       	st	Z, r24
	ADCSRA_REG->ADATE = DISABLE_TRIGGER;
    27ba:	e6 e2       	ldi	r30, 0x26	; 38
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	8f 7d       	andi	r24, 0xDF	; 223
    27c2:	80 83       	st	Z, r24
	SFIOR_REG->ADTS = FREE_RUNNING;
    27c4:	e0 e5       	ldi	r30, 0x50	; 80
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	8f 71       	andi	r24, 0x1F	; 31
    27cc:	80 83       	st	Z, r24
	 * 3,	ADIE = 1 Enable ADC Interrupt
	 * 2:0, ADPS2:0 = 111 to choose
	 * ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz
	 * --> ADC must operate in range 50-200Khz
	 */
}
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <ADC_voidStartConversionPolling>:


// Start ADC Conversion using Polling
u16 ADC_voidStartConversionPolling(u8 copy_u8channelSelect) {
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	0f 92       	push	r0
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	89 83       	std	Y+1, r24	; 0x01
	// Insert Channel Number in ADMUX Procedure
	ADMUX_REG->MUX = copy_u8channelSelect;
    27e0:	e7 e2       	ldi	r30, 0x27	; 39
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	8f 71       	andi	r24, 0x1F	; 31
    27e8:	98 2f       	mov	r25, r24
    27ea:	9f 71       	andi	r25, 0x1F	; 31
    27ec:	80 81       	ld	r24, Z
    27ee:	80 7e       	andi	r24, 0xE0	; 224
    27f0:	89 2b       	or	r24, r25
    27f2:	80 83       	st	Z, r24

	// Starts ADC Conversion
	ADCSRA_REG->ADSC = START_CONVERSION;
    27f4:	e6 e2       	ldi	r30, 0x26	; 38
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	80 64       	ori	r24, 0x40	; 64
    27fc:	80 83       	st	Z, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( ADCSRA_REG->ADIF == FLAG_NOTSET );
    27fe:	e6 e2       	ldi	r30, 0x26	; 38
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	80 71       	andi	r24, 0x10	; 16
    2806:	88 23       	and	r24, r24
    2808:	d1 f3       	breq	.-12     	; 0x27fe <ADC_voidStartConversionPolling+0x2a>

	// Set Interrupt Flag by 1 by clearing it
	ADCSRA_REG->ADIF = FLAG_SET;
    280a:	e6 e2       	ldi	r30, 0x26	; 38
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 61       	ori	r24, 0x10	; 16
    2812:	80 83       	st	Z, r24

	// Read Data from ADCL Bits 0 -> 9
	return ADC_DATA_REG;
    2814:	e4 e2       	ldi	r30, 0x24	; 36
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
}
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <ADC_voidStartConversionISR>:

// Start ADC Conversion using Interrupts
void ADC_voidStartConversionISR(u8 copy_u8channelSelect) {
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	0f 92       	push	r0
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG->MUX = copy_u8channelSelect;
    2830:	e7 e2       	ldi	r30, 0x27	; 39
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	8f 71       	andi	r24, 0x1F	; 31
    2838:	98 2f       	mov	r25, r24
    283a:	9f 71       	andi	r25, 0x1F	; 31
    283c:	80 81       	ld	r24, Z
    283e:	80 7e       	andi	r24, 0xE0	; 224
    2840:	89 2b       	or	r24, r25
    2842:	80 83       	st	Z, r24

	// Starts ADC Conversion
	ADCSRA_REG->ADSC = START_CONVERSION;
    2844:	e6 e2       	ldi	r30, 0x26	; 38
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	80 64       	ori	r24, 0x40	; 64
    284c:	80 83       	st	Z, r24

	// Enables the Interrupt
	ADCSRA_REG->ADIE = ENABLE_INT;
    284e:	e6 e2       	ldi	r30, 0x26	; 38
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	88 60       	ori	r24, 0x08	; 8
    2856:	80 83       	st	Z, r24

}
    2858:	0f 90       	pop	r0
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <ADC_CallBackFunction>:
/*
 * Description :
 * Call Back function to use in ISR *
 */
void ADC_CallBackFunction(void (*Ptr_ADC)(void))
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	00 d0       	rcall	.+0      	; 0x2866 <ADC_CallBackFunction+0x6>
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_ADC = Ptr_ADC;
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	90 93 d2 01 	sts	0x01D2, r25
    2876:	80 93 d1 01 	sts	0x01D1, r24
}
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <__vector_16>:


void __vector_16(void) __attribute__((signal, used));
void __vector_16(void) {
    2884:	1f 92       	push	r1
    2886:	0f 92       	push	r0
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	0f 92       	push	r0
    288c:	11 24       	eor	r1, r1
    288e:	2f 93       	push	r18
    2890:	3f 93       	push	r19
    2892:	4f 93       	push	r20
    2894:	5f 93       	push	r21
    2896:	6f 93       	push	r22
    2898:	7f 93       	push	r23
    289a:	8f 93       	push	r24
    289c:	9f 93       	push	r25
    289e:	af 93       	push	r26
    28a0:	bf 93       	push	r27
    28a2:	ef 93       	push	r30
    28a4:	ff 93       	push	r31
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_ADC != NULL) {
    28ae:	80 91 d1 01 	lds	r24, 0x01D1
    28b2:	90 91 d2 01 	lds	r25, 0x01D2
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	29 f0       	breq	.+10     	; 0x28c4 <__vector_16+0x40>
		CallBackPtr_ADC();
    28ba:	e0 91 d1 01 	lds	r30, 0x01D1
    28be:	f0 91 d2 01 	lds	r31, 0x01D2
    28c2:	09 95       	icall
	}
}
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	ff 91       	pop	r31
    28ca:	ef 91       	pop	r30
    28cc:	bf 91       	pop	r27
    28ce:	af 91       	pop	r26
    28d0:	9f 91       	pop	r25
    28d2:	8f 91       	pop	r24
    28d4:	7f 91       	pop	r23
    28d6:	6f 91       	pop	r22
    28d8:	5f 91       	pop	r21
    28da:	4f 91       	pop	r20
    28dc:	3f 91       	pop	r19
    28de:	2f 91       	pop	r18
    28e0:	0f 90       	pop	r0
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	0f 90       	pop	r0
    28e6:	1f 90       	pop	r1
    28e8:	18 95       	reti

000028ea <SEGMENT_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes the 7 Segment Display Driver
SEGMENT_Error_t SEGMENT_voidInit(u8 copy_u8portID) {
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <SEGMENT_voidInit+0x6>
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 SEGMENT_Driver_Checker = 0;
    28f6:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	84 30       	cpi	r24, 0x04	; 4
    28fc:	18 f0       	brcs	.+6      	; 0x2904 <SEGMENT_voidInit+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	1f c0       	rjmp	.+62     	; 0x2942 <SEGMENT_voidInit+0x58>
#elif (DIGITS_USED == 3)
		GPIO_voidSetPinDirection(COM_3_PORT, COM_3, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#elif (DIGITS_USED == 2)
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	62 e0       	ldi	r22, 0x02	; 2
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	63 e0       	ldi	r22, 0x03	; 3
    2912:	41 e0       	ldi	r20, 0x01	; 1
    2914:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#endif

		/* These pins are for the BCD on the FARES Kit */
		GPIO_voidSetPinDirection(copy_u8portID, BCD_1, PIN_OUTPUT);
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_2, PIN_OUTPUT);
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	61 e0       	ldi	r22, 0x01	; 1
    2926:	41 e0       	ldi	r20, 0x01	; 1
    2928:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_4, PIN_OUTPUT);
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	62 e0       	ldi	r22, 0x02	; 2
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_8, PIN_OUTPUT);
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	64 e0       	ldi	r22, 0x04	; 4
    293a:	41 e0       	ldi	r20, 0x01	; 1
    293c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>

		SEGMENT_Driver_Checker = SEGMENT_OK;
    2940:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2942:	89 81       	ldd	r24, Y+1	; 0x01
}
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <SEGMENT_voidDisplay>:


// Displays a value on the 7 Segment Display
SEGMENT_Error_t SEGMENT_voidDisplay(u8 copy_u8portID, u8 copy_u8pinValue) {
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <SEGMENT_voidDisplay+0x6>
    2954:	00 d0       	rcall	.+0      	; 0x2956 <SEGMENT_voidDisplay+0x8>
    2956:	0f 92       	push	r0
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	8a 83       	std	Y+2, r24	; 0x02
    295e:	6b 83       	std	Y+3, r22	; 0x03
	u8 SEGMENT_Driver_Checker = 0;
    2960:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	84 30       	cpi	r24, 0x04	; 4
    2966:	18 f0       	brcs	.+6      	; 0x296e <SEGMENT_voidDisplay+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	24 c1       	rjmp	.+584    	; 0x2bb6 <SEGMENT_voidDisplay+0x268>
	}
	else if((copy_u8pinValue < 0 && copy_u8pinValue > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(copy_u8pinValue) {
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	3d 83       	std	Y+5, r19	; 0x05
    2976:	2c 83       	std	Y+4, r18	; 0x04
    2978:	8c 81       	ldd	r24, Y+4	; 0x04
    297a:	9d 81       	ldd	r25, Y+5	; 0x05
    297c:	84 30       	cpi	r24, 0x04	; 4
    297e:	91 05       	cpc	r25, r1
    2980:	09 f4       	brne	.+2      	; 0x2984 <SEGMENT_voidDisplay+0x36>
    2982:	9b c0       	rjmp	.+310    	; 0x2aba <SEGMENT_voidDisplay+0x16c>
    2984:	2c 81       	ldd	r18, Y+4	; 0x04
    2986:	3d 81       	ldd	r19, Y+5	; 0x05
    2988:	25 30       	cpi	r18, 0x05	; 5
    298a:	31 05       	cpc	r19, r1
    298c:	ec f4       	brge	.+58     	; 0x29c8 <SEGMENT_voidDisplay+0x7a>
    298e:	8c 81       	ldd	r24, Y+4	; 0x04
    2990:	9d 81       	ldd	r25, Y+5	; 0x05
    2992:	81 30       	cpi	r24, 0x01	; 1
    2994:	91 05       	cpc	r25, r1
    2996:	09 f4       	brne	.+2      	; 0x299a <SEGMENT_voidDisplay+0x4c>
    2998:	51 c0       	rjmp	.+162    	; 0x2a3c <SEGMENT_voidDisplay+0xee>
    299a:	2c 81       	ldd	r18, Y+4	; 0x04
    299c:	3d 81       	ldd	r19, Y+5	; 0x05
    299e:	22 30       	cpi	r18, 0x02	; 2
    29a0:	31 05       	cpc	r19, r1
    29a2:	2c f4       	brge	.+10     	; 0x29ae <SEGMENT_voidDisplay+0x60>
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	99 f1       	breq	.+102    	; 0x2a12 <SEGMENT_voidDisplay+0xc4>
    29ac:	03 c1       	rjmp	.+518    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
    29ae:	2c 81       	ldd	r18, Y+4	; 0x04
    29b0:	3d 81       	ldd	r19, Y+5	; 0x05
    29b2:	22 30       	cpi	r18, 0x02	; 2
    29b4:	31 05       	cpc	r19, r1
    29b6:	09 f4       	brne	.+2      	; 0x29ba <SEGMENT_voidDisplay+0x6c>
    29b8:	56 c0       	rjmp	.+172    	; 0x2a66 <SEGMENT_voidDisplay+0x118>
    29ba:	8c 81       	ldd	r24, Y+4	; 0x04
    29bc:	9d 81       	ldd	r25, Y+5	; 0x05
    29be:	83 30       	cpi	r24, 0x03	; 3
    29c0:	91 05       	cpc	r25, r1
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <SEGMENT_voidDisplay+0x78>
    29c4:	65 c0       	rjmp	.+202    	; 0x2a90 <SEGMENT_voidDisplay+0x142>
    29c6:	f6 c0       	rjmp	.+492    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
    29c8:	2c 81       	ldd	r18, Y+4	; 0x04
    29ca:	3d 81       	ldd	r19, Y+5	; 0x05
    29cc:	27 30       	cpi	r18, 0x07	; 7
    29ce:	31 05       	cpc	r19, r1
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <SEGMENT_voidDisplay+0x86>
    29d2:	b2 c0       	rjmp	.+356    	; 0x2b38 <SEGMENT_voidDisplay+0x1ea>
    29d4:	8c 81       	ldd	r24, Y+4	; 0x04
    29d6:	9d 81       	ldd	r25, Y+5	; 0x05
    29d8:	88 30       	cpi	r24, 0x08	; 8
    29da:	91 05       	cpc	r25, r1
    29dc:	6c f4       	brge	.+26     	; 0x29f8 <SEGMENT_voidDisplay+0xaa>
    29de:	2c 81       	ldd	r18, Y+4	; 0x04
    29e0:	3d 81       	ldd	r19, Y+5	; 0x05
    29e2:	25 30       	cpi	r18, 0x05	; 5
    29e4:	31 05       	cpc	r19, r1
    29e6:	09 f4       	brne	.+2      	; 0x29ea <SEGMENT_voidDisplay+0x9c>
    29e8:	7d c0       	rjmp	.+250    	; 0x2ae4 <SEGMENT_voidDisplay+0x196>
    29ea:	8c 81       	ldd	r24, Y+4	; 0x04
    29ec:	9d 81       	ldd	r25, Y+5	; 0x05
    29ee:	86 30       	cpi	r24, 0x06	; 6
    29f0:	91 05       	cpc	r25, r1
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <SEGMENT_voidDisplay+0xa8>
    29f4:	8c c0       	rjmp	.+280    	; 0x2b0e <SEGMENT_voidDisplay+0x1c0>
    29f6:	de c0       	rjmp	.+444    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
    29f8:	2c 81       	ldd	r18, Y+4	; 0x04
    29fa:	3d 81       	ldd	r19, Y+5	; 0x05
    29fc:	28 30       	cpi	r18, 0x08	; 8
    29fe:	31 05       	cpc	r19, r1
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <SEGMENT_voidDisplay+0xb6>
    2a02:	af c0       	rjmp	.+350    	; 0x2b62 <SEGMENT_voidDisplay+0x214>
    2a04:	8c 81       	ldd	r24, Y+4	; 0x04
    2a06:	9d 81       	ldd	r25, Y+5	; 0x05
    2a08:	89 30       	cpi	r24, 0x09	; 9
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <SEGMENT_voidDisplay+0xc2>
    2a0e:	be c0       	rjmp	.+380    	; 0x2b8c <SEGMENT_voidDisplay+0x23e>
    2a10:	d1 c0       	rjmp	.+418    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
			case 0:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	60 e0       	ldi	r22, 0x00	; 0
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	61 e0       	ldi	r22, 0x01	; 1
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	62 e0       	ldi	r22, 0x02	; 2
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	64 e0       	ldi	r22, 0x04	; 4
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    2a3a:	bc c0       	rjmp	.+376    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
				break;
			case 1:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	41 e0       	ldi	r20, 0x01	; 1
    2a42:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	61 e0       	ldi	r22, 0x01	; 1
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	62 e0       	ldi	r22, 0x02	; 2
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	64 e0       	ldi	r22, 0x04	; 4
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    2a64:	a7 c0       	rjmp	.+334    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
				break;
			case 2:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	61 e0       	ldi	r22, 0x01	; 1
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	62 e0       	ldi	r22, 0x02	; 2
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	64 e0       	ldi	r22, 0x04	; 4
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    2a8e:	92 c0       	rjmp	.+292    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
				break;
			case 3:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	60 e0       	ldi	r22, 0x00	; 0
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	62 e0       	ldi	r22, 0x02	; 2
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	64 e0       	ldi	r22, 0x04	; 4
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    2ab8:	7d c0       	rjmp	.+250    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
				break;
			case 4:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	40 e0       	ldi	r20, 0x00	; 0
    2aca:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	62 e0       	ldi	r22, 0x02	; 2
    2ad2:	41 e0       	ldi	r20, 0x01	; 1
    2ad4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	64 e0       	ldi	r22, 0x04	; 4
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    2ae2:	68 c0       	rjmp	.+208    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
				break;
			case 5:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	41 e0       	ldi	r20, 0x01	; 1
    2aea:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	62 e0       	ldi	r22, 0x02	; 2
    2afc:	41 e0       	ldi	r20, 0x01	; 1
    2afe:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	64 e0       	ldi	r22, 0x04	; 4
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    2b0c:	53 c0       	rjmp	.+166    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
				break;
			case 6:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	61 e0       	ldi	r22, 0x01	; 1
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	64 e0       	ldi	r22, 0x04	; 4
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    2b36:	3e c0       	rjmp	.+124    	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
				break;
			case 7:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	60 e0       	ldi	r22, 0x00	; 0
    2b3c:	41 e0       	ldi	r20, 0x01	; 1
    2b3e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	61 e0       	ldi	r22, 0x01	; 1
    2b46:	41 e0       	ldi	r20, 0x01	; 1
    2b48:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	62 e0       	ldi	r22, 0x02	; 2
    2b50:	41 e0       	ldi	r20, 0x01	; 1
    2b52:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	64 e0       	ldi	r22, 0x04	; 4
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    2b60:	29 c0       	rjmp	.+82     	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
				break;
			case 8:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	40 e0       	ldi	r20, 0x00	; 0
    2b68:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	61 e0       	ldi	r22, 0x01	; 1
    2b70:	40 e0       	ldi	r20, 0x00	; 0
    2b72:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	62 e0       	ldi	r22, 0x02	; 2
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	64 e0       	ldi	r22, 0x04	; 4
    2b84:	41 e0       	ldi	r20, 0x01	; 1
    2b86:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    2b8a:	14 c0       	rjmp	.+40     	; 0x2bb4 <SEGMENT_voidDisplay+0x266>
				break;
			case 9:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba2:	62 e0       	ldi	r22, 0x02	; 2
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	64 e0       	ldi	r22, 0x04	; 4
    2bae:	41 e0       	ldi	r20, 0x01	; 1
    2bb0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    2bb4:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <SERVO_voidInit>:
u16 AngleValue 	= 0;
u16 CMP_Value 	= 0;


// Initializes the 7 Segment Display Driver
void SERVO_voidInit(void) {
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
	TIMER1_Initialization();
    2bd0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <TIMER1_Initialization>
	TIMER1A_SetTop_FASTPWM(SERVO_OP_RANGE);
    2bd4:	80 e2       	ldi	r24, 0x20	; 32
    2bd6:	9e e4       	ldi	r25, 0x4E	; 78
    2bd8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <TIMER1A_SetTop_FASTPWM>
	ADC_voidInit();
    2bdc:	0e 94 c4 13 	call	0x2788	; 0x2788 <ADC_voidInit>
}
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <SERVO_voidAdjustAngle>:

// Displays a value on the 7 Segment Display
void SERVO_voidAdjustAngle(void) {
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
	ADC_Result = ADC_voidStartConversionPolling(CHANNEL_1);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <ADC_voidStartConversionPolling>
    2bf4:	90 93 b7 01 	sts	0x01B7, r25
    2bf8:	80 93 b6 01 	sts	0x01B6, r24
	AngleValue = mapServo(ADC_Result);
    2bfc:	80 91 b6 01 	lds	r24, 0x01B6
    2c00:	90 91 b7 01 	lds	r25, 0x01B7
    2c04:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <mapServo>
    2c08:	90 93 b9 01 	sts	0x01B9, r25
    2c0c:	80 93 b8 01 	sts	0x01B8, r24
	CMP_Value = TIMER1A_SetCOMPAREMATCH_FASTPWM(AngleValue);
    2c10:	80 91 b8 01 	lds	r24, 0x01B8
    2c14:	90 91 b9 01 	lds	r25, 0x01B9
    2c18:	0e 94 bb 08 	call	0x1176	; 0x1176 <TIMER1A_SetCOMPAREMATCH_FASTPWM>
    2c1c:	90 93 bb 01 	sts	0x01BB, r25
    2c20:	80 93 ba 01 	sts	0x01BA, r24
	LCD_voidSetCursor(1, 0);
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	0e 94 3c 22 	call	0x4478	; 0x4478 <LCD_voidSetCursor>
	LCD_voidDisplayString("Angle: ");
    2c2c:	80 e6       	ldi	r24, 0x60	; 96
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	0e 94 13 22 	call	0x4426	; 0x4426 <LCD_voidDisplayString>
	LCD_voidSetCursor(1, 7);
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	67 e0       	ldi	r22, 0x07	; 7
    2c38:	0e 94 3c 22 	call	0x4478	; 0x4478 <LCD_voidSetCursor>
	LCD_voidIntgerToString(CMP_Value);
    2c3c:	80 91 ba 01 	lds	r24, 0x01BA
    2c40:	90 91 bb 01 	lds	r25, 0x01BB
    2c44:	cc 01       	movw	r24, r24
    2c46:	a0 e0       	ldi	r26, 0x00	; 0
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 7e 22 	call	0x44fc	; 0x44fc <LCD_voidIntgerToString>
}
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <mapServo>:

u16 mapServo(u16 copy_u16ADCValue){
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <mapServo+0x6>
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <mapServo+0x8>
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	9c 83       	std	Y+4, r25	; 0x04
    2c66:	8b 83       	std	Y+3, r24	; 0x03
	u16 servoAngle = (u16)(copy_u16ADCValue * 255) / 100;
    2c68:	4b 81       	ldd	r20, Y+3	; 0x03
    2c6a:	5c 81       	ldd	r21, Y+4	; 0x04
    2c6c:	ca 01       	movw	r24, r20
    2c6e:	9c 01       	movw	r18, r24
    2c70:	22 0f       	add	r18, r18
    2c72:	33 1f       	adc	r19, r19
    2c74:	c9 01       	movw	r24, r18
    2c76:	96 95       	lsr	r25
    2c78:	98 2f       	mov	r25, r24
    2c7a:	88 27       	eor	r24, r24
    2c7c:	97 95       	ror	r25
    2c7e:	87 95       	ror	r24
    2c80:	82 1b       	sub	r24, r18
    2c82:	93 0b       	sbc	r25, r19
    2c84:	84 0f       	add	r24, r20
    2c86:	95 1f       	adc	r25, r21
    2c88:	24 e6       	ldi	r18, 0x64	; 100
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	b9 01       	movw	r22, r18
    2c8e:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodhi4>
    2c92:	cb 01       	movw	r24, r22
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
	return servoAngle;
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <LM35_u8getTemperature>:
/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality
u8 LM35_u8getTemperature(void) {
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	2f 97       	sbiw	r28, 0x0f	; 15
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
	u8 temperatureValue = 0;
    2cbe:	1f 86       	std	Y+15, r1	; 0x0f

	// Read ADC Channel that the LM35 is configured to
	ADC_voidStartConversionPolling(LM35_CHANNEL_ID);
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <ADC_voidStartConversionPolling>
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	a0 ea       	ldi	r26, 0xA0	; 160
    2ccc:	b0 e4       	ldi	r27, 0x40	; 64
    2cce:	8b 87       	std	Y+11, r24	; 0x0b
    2cd0:	9c 87       	std	Y+12, r25	; 0x0c
    2cd2:	ad 87       	std	Y+13, r26	; 0x0d
    2cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	4a e7       	ldi	r20, 0x7A	; 122
    2ce4:	55 e4       	ldi	r21, 0x45	; 69
    2ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	8f 83       	std	Y+7, r24	; 0x07
    2cf0:	98 87       	std	Y+8, r25	; 0x08
    2cf2:	a9 87       	std	Y+9, r26	; 0x09
    2cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf8:	78 85       	ldd	r23, Y+8	; 0x08
    2cfa:	89 85       	ldd	r24, Y+9	; 0x09
    2cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e8       	ldi	r20, 0x80	; 128
    2d04:	5f e3       	ldi	r21, 0x3F	; 63
    2d06:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d0a:	88 23       	and	r24, r24
    2d0c:	2c f4       	brge	.+10     	; 0x2d18 <LM35_u8getTemperature+0x6e>
		__ticks = 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9e 83       	std	Y+6, r25	; 0x06
    2d14:	8d 83       	std	Y+5, r24	; 0x05
    2d16:	3f c0       	rjmp	.+126    	; 0x2d96 <LM35_u8getTemperature+0xec>
	else if (__tmp > 65535)
    2d18:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1a:	78 85       	ldd	r23, Y+8	; 0x08
    2d1c:	89 85       	ldd	r24, Y+9	; 0x09
    2d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	3f ef       	ldi	r19, 0xFF	; 255
    2d24:	4f e7       	ldi	r20, 0x7F	; 127
    2d26:	57 e4       	ldi	r21, 0x47	; 71
    2d28:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d2c:	18 16       	cp	r1, r24
    2d2e:	4c f5       	brge	.+82     	; 0x2d82 <LM35_u8getTemperature+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	51 e4       	ldi	r21, 0x41	; 65
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	0f c0       	rjmp	.+30     	; 0x2d78 <LM35_u8getTemperature+0xce>
    2d5a:	80 e9       	ldi	r24, 0x90	; 144
    2d5c:	91 e0       	ldi	r25, 0x01	; 1
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	9c 81       	ldd	r25, Y+4	; 0x04
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <LM35_u8getTemperature+0xbc>
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	9e 81       	ldd	r25, Y+6	; 0x06
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d78:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	69 f7       	brne	.-38     	; 0x2d5a <LM35_u8getTemperature+0xb0>
    2d80:	14 c0       	rjmp	.+40     	; 0x2daa <LM35_u8getTemperature+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d82:	6f 81       	ldd	r22, Y+7	; 0x07
    2d84:	78 85       	ldd	r23, Y+8	; 0x08
    2d86:	89 85       	ldd	r24, Y+9	; 0x09
    2d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	9e 83       	std	Y+6, r25	; 0x06
    2d94:	8d 83       	std	Y+5, r24	; 0x05
    2d96:	8d 81       	ldd	r24, Y+5	; 0x05
    2d98:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	9a 81       	ldd	r25, Y+2	; 0x02
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <LM35_u8getTemperature+0xf8>
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01

	// Add a small Delay for the global ADC result is set with Interrupt
	_delay_ms(5);

	// Calculate the temperature for the ADC
	temperatureValue = (((u32)LM35_MAX_TEMP * ADC_REF_VOLT) / (ADC_MAX_VAL * LM35_MAX_VOLT));
    2daa:	1f 86       	std	Y+15, r1	; 0x0f

	return temperatureValue;
    2dac:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2dae:	2f 96       	adiw	r28, 0x0f	; 15
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <LED_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes the LED Driver
LED_Error_t LED_voidInit(u8 copy_u8portID, u8 copy_u8pinID) {
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <LED_voidInit+0x6>
    2dc6:	0f 92       	push	r0
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
    2dcc:	8a 83       	std	Y+2, r24	; 0x02
    2dce:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2dd0:	19 82       	std	Y+1, r1	; 0x01
	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	88 30       	cpi	r24, 0x08	; 8
    2dd6:	18 f0       	brcs	.+6      	; 0x2dde <LED_voidInit+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	0c c0       	rjmp	.+24     	; 0x2df6 <LED_voidInit+0x36>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    2dde:	8a 81       	ldd	r24, Y+2	; 0x02
    2de0:	84 30       	cpi	r24, 0x04	; 4
    2de2:	18 f0       	brcs	.+6      	; 0x2dea <LED_voidInit+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2de4:	82 e0       	ldi	r24, 0x02	; 2
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	06 c0       	rjmp	.+12     	; 0x2df6 <LED_voidInit+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_voidSetPinDirection(copy_u8portID, copy_u8pinID, PIN_OUTPUT);
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	6b 81       	ldd	r22, Y+3	; 0x03
    2dee:	41 e0       	ldi	r20, 0x01	; 1
    2df0:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		LED_Driver_Checker = LED_OK;
    2df4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <LED_voidOn>:

// Turns on a LED
LED_Error_t LED_voidOn(u8 copy_u8portID, u8 copy_u8pinID) {
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <LED_voidOn+0x6>
    2e0a:	0f 92       	push	r0
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	8a 83       	std	Y+2, r24	; 0x02
    2e12:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2e14:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	88 30       	cpi	r24, 0x08	; 8
    2e1a:	18 f0       	brcs	.+6      	; 0x2e22 <LED_voidOn+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	0c c0       	rjmp	.+24     	; 0x2e3a <LED_voidOn+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	84 30       	cpi	r24, 0x04	; 4
    2e26:	18 f0       	brcs	.+6      	; 0x2e2e <LED_voidOn+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	06 c0       	rjmp	.+12     	; 0x2e3a <LED_voidOn+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
    2e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e30:	6b 81       	ldd	r22, Y+3	; 0x03
    2e32:	41 e0       	ldi	r20, 0x01	; 1
    2e34:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    2e38:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <LED_voidOff>:

// Turns off a LED
LED_Error_t LED_voidOff(u8 copy_u8portID, u8 copy_u8pinID) {
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <LED_voidOff+0x6>
    2e4e:	0f 92       	push	r0
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	8a 83       	std	Y+2, r24	; 0x02
    2e56:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2e58:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	88 30       	cpi	r24, 0x08	; 8
    2e5e:	18 f0       	brcs	.+6      	; 0x2e66 <LED_voidOff+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	0c c0       	rjmp	.+24     	; 0x2e7e <LED_voidOff+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    2e66:	8a 81       	ldd	r24, Y+2	; 0x02
    2e68:	84 30       	cpi	r24, 0x04	; 4
    2e6a:	18 f0       	brcs	.+6      	; 0x2e72 <LED_voidOff+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	06 c0       	rjmp	.+12     	; 0x2e7e <LED_voidOff+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	6b 81       	ldd	r22, Y+3	; 0x03
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    2e7c:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <LED_voidToggle>:

// Toggles a LED
LED_Error_t LED_voidToggle(u8 copy_u8portID, u8 copy_u8pinID) {
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <LED_voidToggle+0x6>
    2e92:	0f 92       	push	r0
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	8a 83       	std	Y+2, r24	; 0x02
    2e9a:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2e9c:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	88 30       	cpi	r24, 0x08	; 8
    2ea2:	18 f0       	brcs	.+6      	; 0x2eaa <LED_voidToggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	0b c0       	rjmp	.+22     	; 0x2ec0 <LED_voidToggle+0x34>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	84 30       	cpi	r24, 0x04	; 4
    2eae:	18 f0       	brcs	.+6      	; 0x2eb6 <LED_voidToggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	05 c0       	rjmp	.+10     	; 0x2ec0 <LED_voidToggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_voidTogglePin(copy_u8portID, copy_u8pinID);
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	6b 81       	ldd	r22, Y+3	; 0x03
    2eba:	0e 94 2b 10 	call	0x2056	; 0x2056 <GPIO_voidTogglePin>
			LED_Driver_Checker = LED_OK;
    2ebe:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <LCD_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes and enables the LCD Module to start functionality
void LCD_voidInit(void) {
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	e8 97       	sbiw	r28, 0x38	; 56
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	63 e0       	ldi	r22, 0x03	; 3
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>

	// Initialize Enable Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	62 e0       	ldi	r22, 0x02	; 2
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	a0 ea       	ldi	r26, 0xA0	; 160
    2efc:	b1 e4       	ldi	r27, 0x41	; 65
    2efe:	8d ab       	std	Y+53, r24	; 0x35
    2f00:	9e ab       	std	Y+54, r25	; 0x36
    2f02:	af ab       	std	Y+55, r26	; 0x37
    2f04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f06:	6d a9       	ldd	r22, Y+53	; 0x35
    2f08:	7e a9       	ldd	r23, Y+54	; 0x36
    2f0a:	8f a9       	ldd	r24, Y+55	; 0x37
    2f0c:	98 ad       	ldd	r25, Y+56	; 0x38
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	4a e7       	ldi	r20, 0x7A	; 122
    2f14:	55 e4       	ldi	r21, 0x45	; 69
    2f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	89 ab       	std	Y+49, r24	; 0x31
    2f20:	9a ab       	std	Y+50, r25	; 0x32
    2f22:	ab ab       	std	Y+51, r26	; 0x33
    2f24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f26:	69 a9       	ldd	r22, Y+49	; 0x31
    2f28:	7a a9       	ldd	r23, Y+50	; 0x32
    2f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e8       	ldi	r20, 0x80	; 128
    2f34:	5f e3       	ldi	r21, 0x3F	; 63
    2f36:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f3a:	88 23       	and	r24, r24
    2f3c:	2c f4       	brge	.+10     	; 0x2f48 <LCD_voidInit+0x7a>
		__ticks = 1;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	98 ab       	std	Y+48, r25	; 0x30
    2f44:	8f a7       	std	Y+47, r24	; 0x2f
    2f46:	3f c0       	rjmp	.+126    	; 0x2fc6 <LCD_voidInit+0xf8>
	else if (__tmp > 65535)
    2f48:	69 a9       	ldd	r22, Y+49	; 0x31
    2f4a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f4c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	3f ef       	ldi	r19, 0xFF	; 255
    2f54:	4f e7       	ldi	r20, 0x7F	; 127
    2f56:	57 e4       	ldi	r21, 0x47	; 71
    2f58:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f5c:	18 16       	cp	r1, r24
    2f5e:	4c f5       	brge	.+82     	; 0x2fb2 <LCD_voidInit+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f60:	6d a9       	ldd	r22, Y+53	; 0x35
    2f62:	7e a9       	ldd	r23, Y+54	; 0x36
    2f64:	8f a9       	ldd	r24, Y+55	; 0x37
    2f66:	98 ad       	ldd	r25, Y+56	; 0x38
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e2       	ldi	r20, 0x20	; 32
    2f6e:	51 e4       	ldi	r21, 0x41	; 65
    2f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	bc 01       	movw	r22, r24
    2f7a:	cd 01       	movw	r24, r26
    2f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	98 ab       	std	Y+48, r25	; 0x30
    2f86:	8f a7       	std	Y+47, r24	; 0x2f
    2f88:	0f c0       	rjmp	.+30     	; 0x2fa8 <LCD_voidInit+0xda>
    2f8a:	80 e9       	ldi	r24, 0x90	; 144
    2f8c:	91 e0       	ldi	r25, 0x01	; 1
    2f8e:	9e a7       	std	Y+46, r25	; 0x2e
    2f90:	8d a7       	std	Y+45, r24	; 0x2d
    2f92:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f94:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <LCD_voidInit+0xc8>
    2f9a:	9e a7       	std	Y+46, r25	; 0x2e
    2f9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa0:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	98 ab       	std	Y+48, r25	; 0x30
    2fa6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2faa:	98 a9       	ldd	r25, Y+48	; 0x30
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	69 f7       	brne	.-38     	; 0x2f8a <LCD_voidInit+0xbc>
    2fb0:	14 c0       	rjmp	.+40     	; 0x2fda <LCD_voidInit+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	98 ab       	std	Y+48, r25	; 0x30
    2fc4:	8f a7       	std	Y+47, r24	; 0x2f
    2fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    2fca:	9c a7       	std	Y+44, r25	; 0x2c
    2fcc:	8b a7       	std	Y+43, r24	; 0x2b
    2fce:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <LCD_voidInit+0x104>
    2fd6:	9c a7       	std	Y+44, r25	; 0x2c
    2fd8:	8b a7       	std	Y+43, r24	; 0x2b
	if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_voidSetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
		LCD_voidSendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}
	else {
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	41 e0       	ldi	r20, 0x01	; 1
    2fe0:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	61 e0       	ldi	r22, 0x01	; 1
    2fe8:	41 e0       	ldi	r20, 0x01	; 1
    2fea:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	62 e0       	ldi	r22, 0x02	; 2
    2ff2:	41 e0       	ldi	r20, 0x01	; 1
    2ff4:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	64 e0       	ldi	r22, 0x04	; 4
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>


		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT1);
    3002:	83 e3       	ldi	r24, 0x33	; 51
    3004:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT2);
    3008:	82 e3       	ldi	r24, 0x32	; 50
    300a:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_5x7_DOTS);
    300e:	88 e2       	ldi	r24, 0x28	; 40
    3010:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendCommand>
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	a0 e0       	ldi	r26, 0x00	; 0
    301a:	b0 e4       	ldi	r27, 0x40	; 64
    301c:	8f a3       	std	Y+39, r24	; 0x27
    301e:	98 a7       	std	Y+40, r25	; 0x28
    3020:	a9 a7       	std	Y+41, r26	; 0x29
    3022:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3024:	6f a1       	ldd	r22, Y+39	; 0x27
    3026:	78 a5       	ldd	r23, Y+40	; 0x28
    3028:	89 a5       	ldd	r24, Y+41	; 0x29
    302a:	9a a5       	ldd	r25, Y+42	; 0x2a
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	4a e7       	ldi	r20, 0x7A	; 122
    3032:	55 e4       	ldi	r21, 0x45	; 69
    3034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	8b a3       	std	Y+35, r24	; 0x23
    303e:	9c a3       	std	Y+36, r25	; 0x24
    3040:	ad a3       	std	Y+37, r26	; 0x25
    3042:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3044:	6b a1       	ldd	r22, Y+35	; 0x23
    3046:	7c a1       	ldd	r23, Y+36	; 0x24
    3048:	8d a1       	ldd	r24, Y+37	; 0x25
    304a:	9e a1       	ldd	r25, Y+38	; 0x26
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	40 e8       	ldi	r20, 0x80	; 128
    3052:	5f e3       	ldi	r21, 0x3F	; 63
    3054:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3058:	88 23       	and	r24, r24
    305a:	2c f4       	brge	.+10     	; 0x3066 <LCD_voidInit+0x198>
		__ticks = 1;
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	9a a3       	std	Y+34, r25	; 0x22
    3062:	89 a3       	std	Y+33, r24	; 0x21
    3064:	3f c0       	rjmp	.+126    	; 0x30e4 <LCD_voidInit+0x216>
	else if (__tmp > 65535)
    3066:	6b a1       	ldd	r22, Y+35	; 0x23
    3068:	7c a1       	ldd	r23, Y+36	; 0x24
    306a:	8d a1       	ldd	r24, Y+37	; 0x25
    306c:	9e a1       	ldd	r25, Y+38	; 0x26
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	3f ef       	ldi	r19, 0xFF	; 255
    3072:	4f e7       	ldi	r20, 0x7F	; 127
    3074:	57 e4       	ldi	r21, 0x47	; 71
    3076:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    307a:	18 16       	cp	r1, r24
    307c:	4c f5       	brge	.+82     	; 0x30d0 <LCD_voidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    307e:	6f a1       	ldd	r22, Y+39	; 0x27
    3080:	78 a5       	ldd	r23, Y+40	; 0x28
    3082:	89 a5       	ldd	r24, Y+41	; 0x29
    3084:	9a a5       	ldd	r25, Y+42	; 0x2a
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e2       	ldi	r20, 0x20	; 32
    308c:	51 e4       	ldi	r21, 0x41	; 65
    308e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	bc 01       	movw	r22, r24
    3098:	cd 01       	movw	r24, r26
    309a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	9a a3       	std	Y+34, r25	; 0x22
    30a4:	89 a3       	std	Y+33, r24	; 0x21
    30a6:	0f c0       	rjmp	.+30     	; 0x30c6 <LCD_voidInit+0x1f8>
    30a8:	80 e9       	ldi	r24, 0x90	; 144
    30aa:	91 e0       	ldi	r25, 0x01	; 1
    30ac:	98 a3       	std	Y+32, r25	; 0x20
    30ae:	8f 8f       	std	Y+31, r24	; 0x1f
    30b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30b2:	98 a1       	ldd	r25, Y+32	; 0x20
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <LCD_voidInit+0x1e6>
    30b8:	98 a3       	std	Y+32, r25	; 0x20
    30ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30bc:	89 a1       	ldd	r24, Y+33	; 0x21
    30be:	9a a1       	ldd	r25, Y+34	; 0x22
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	9a a3       	std	Y+34, r25	; 0x22
    30c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c6:	89 a1       	ldd	r24, Y+33	; 0x21
    30c8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	69 f7       	brne	.-38     	; 0x30a8 <LCD_voidInit+0x1da>
    30ce:	14 c0       	rjmp	.+40     	; 0x30f8 <LCD_voidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d0:	6b a1       	ldd	r22, Y+35	; 0x23
    30d2:	7c a1       	ldd	r23, Y+36	; 0x24
    30d4:	8d a1       	ldd	r24, Y+37	; 0x25
    30d6:	9e a1       	ldd	r25, Y+38	; 0x26
    30d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	9a a3       	std	Y+34, r25	; 0x22
    30e2:	89 a3       	std	Y+33, r24	; 0x21
    30e4:	89 a1       	ldd	r24, Y+33	; 0x21
    30e6:	9a a1       	ldd	r25, Y+34	; 0x22
    30e8:	9e 8f       	std	Y+30, r25	; 0x1e
    30ea:	8d 8f       	std	Y+29, r24	; 0x1d
    30ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	f1 f7       	brne	.-4      	; 0x30f0 <LCD_voidInit+0x222>
    30f4:	9e 8f       	std	Y+30, r25	; 0x1e
    30f6:	8d 8f       	std	Y+29, r24	; 0x1d
		//LCD_voidSendCommand(LCD_2LINES_FOUR_BIT);
		_delay_ms(2);
	}

	LCD_voidSendCommand(LCD_CURSOR_OFF);
    30f8:	8c e0       	ldi	r24, 0x0C	; 12
    30fa:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendCommand>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a0 e0       	ldi	r26, 0x00	; 0
    3104:	b0 e4       	ldi	r27, 0x40	; 64
    3106:	89 8f       	std	Y+25, r24	; 0x19
    3108:	9a 8f       	std	Y+26, r25	; 0x1a
    310a:	ab 8f       	std	Y+27, r26	; 0x1b
    310c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	69 8d       	ldd	r22, Y+25	; 0x19
    3110:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3114:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a e7       	ldi	r20, 0x7A	; 122
    311c:	55 e4       	ldi	r21, 0x45	; 69
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	8d 8b       	std	Y+21, r24	; 0x15
    3128:	9e 8b       	std	Y+22, r25	; 0x16
    312a:	af 8b       	std	Y+23, r26	; 0x17
    312c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    312e:	6d 89       	ldd	r22, Y+21	; 0x15
    3130:	7e 89       	ldd	r23, Y+22	; 0x16
    3132:	8f 89       	ldd	r24, Y+23	; 0x17
    3134:	98 8d       	ldd	r25, Y+24	; 0x18
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <LCD_voidInit+0x282>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9c 8b       	std	Y+20, r25	; 0x14
    314c:	8b 8b       	std	Y+19, r24	; 0x13
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <LCD_voidInit+0x300>
	else if (__tmp > 65535)
    3150:	6d 89       	ldd	r22, Y+21	; 0x15
    3152:	7e 89       	ldd	r23, Y+22	; 0x16
    3154:	8f 89       	ldd	r24, Y+23	; 0x17
    3156:	98 8d       	ldd	r25, Y+24	; 0x18
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <LCD_voidInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	69 8d       	ldd	r22, Y+25	; 0x19
    316a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    316c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    316e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	9c 8b       	std	Y+20, r25	; 0x14
    318e:	8b 8b       	std	Y+19, r24	; 0x13
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <LCD_voidInit+0x2e2>
    3192:	80 e9       	ldi	r24, 0x90	; 144
    3194:	91 e0       	ldi	r25, 0x01	; 1
    3196:	9a 8b       	std	Y+18, r25	; 0x12
    3198:	89 8b       	std	Y+17, r24	; 0x11
    319a:	89 89       	ldd	r24, Y+17	; 0x11
    319c:	9a 89       	ldd	r25, Y+18	; 0x12
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <LCD_voidInit+0x2d0>
    31a2:	9a 8b       	std	Y+18, r25	; 0x12
    31a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	8b 89       	ldd	r24, Y+19	; 0x13
    31a8:	9c 89       	ldd	r25, Y+20	; 0x14
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	9c 8b       	std	Y+20, r25	; 0x14
    31ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	8b 89       	ldd	r24, Y+19	; 0x13
    31b2:	9c 89       	ldd	r25, Y+20	; 0x14
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <LCD_voidInit+0x2c4>
    31b8:	14 c0       	rjmp	.+40     	; 0x31e2 <LCD_voidInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	6d 89       	ldd	r22, Y+21	; 0x15
    31bc:	7e 89       	ldd	r23, Y+22	; 0x16
    31be:	8f 89       	ldd	r24, Y+23	; 0x17
    31c0:	98 8d       	ldd	r25, Y+24	; 0x18
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9c 8b       	std	Y+20, r25	; 0x14
    31cc:	8b 8b       	std	Y+19, r24	; 0x13
    31ce:	8b 89       	ldd	r24, Y+19	; 0x13
    31d0:	9c 89       	ldd	r25, Y+20	; 0x14
    31d2:	98 8b       	std	Y+16, r25	; 0x10
    31d4:	8f 87       	std	Y+15, r24	; 0x0f
    31d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d8:	98 89       	ldd	r25, Y+16	; 0x10
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <LCD_voidInit+0x30c>
    31de:	98 8b       	std	Y+16, r25	; 0x10
    31e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendCommand>
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	a0 e0       	ldi	r26, 0x00	; 0
    31ee:	b0 e4       	ldi	r27, 0x40	; 64
    31f0:	8b 87       	std	Y+11, r24	; 0x0b
    31f2:	9c 87       	std	Y+12, r25	; 0x0c
    31f4:	ad 87       	std	Y+13, r26	; 0x0d
    31f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    31fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	4a e7       	ldi	r20, 0x7A	; 122
    3206:	55 e4       	ldi	r21, 0x45	; 69
    3208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	8f 83       	std	Y+7, r24	; 0x07
    3212:	98 87       	std	Y+8, r25	; 0x08
    3214:	a9 87       	std	Y+9, r26	; 0x09
    3216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3218:	6f 81       	ldd	r22, Y+7	; 0x07
    321a:	78 85       	ldd	r23, Y+8	; 0x08
    321c:	89 85       	ldd	r24, Y+9	; 0x09
    321e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e8       	ldi	r20, 0x80	; 128
    3226:	5f e3       	ldi	r21, 0x3F	; 63
    3228:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    322c:	88 23       	and	r24, r24
    322e:	2c f4       	brge	.+10     	; 0x323a <LCD_voidInit+0x36c>
		__ticks = 1;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	9e 83       	std	Y+6, r25	; 0x06
    3236:	8d 83       	std	Y+5, r24	; 0x05
    3238:	3f c0       	rjmp	.+126    	; 0x32b8 <LCD_voidInit+0x3ea>
	else if (__tmp > 65535)
    323a:	6f 81       	ldd	r22, Y+7	; 0x07
    323c:	78 85       	ldd	r23, Y+8	; 0x08
    323e:	89 85       	ldd	r24, Y+9	; 0x09
    3240:	9a 85       	ldd	r25, Y+10	; 0x0a
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	3f ef       	ldi	r19, 0xFF	; 255
    3246:	4f e7       	ldi	r20, 0x7F	; 127
    3248:	57 e4       	ldi	r21, 0x47	; 71
    324a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    324e:	18 16       	cp	r1, r24
    3250:	4c f5       	brge	.+82     	; 0x32a4 <LCD_voidInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3252:	6b 85       	ldd	r22, Y+11	; 0x0b
    3254:	7c 85       	ldd	r23, Y+12	; 0x0c
    3256:	8d 85       	ldd	r24, Y+13	; 0x0d
    3258:	9e 85       	ldd	r25, Y+14	; 0x0e
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e2       	ldi	r20, 0x20	; 32
    3260:	51 e4       	ldi	r21, 0x41	; 65
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	9e 83       	std	Y+6, r25	; 0x06
    3278:	8d 83       	std	Y+5, r24	; 0x05
    327a:	0f c0       	rjmp	.+30     	; 0x329a <LCD_voidInit+0x3cc>
    327c:	80 e9       	ldi	r24, 0x90	; 144
    327e:	91 e0       	ldi	r25, 0x01	; 1
    3280:	9c 83       	std	Y+4, r25	; 0x04
    3282:	8b 83       	std	Y+3, r24	; 0x03
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	9c 81       	ldd	r25, Y+4	; 0x04
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	f1 f7       	brne	.-4      	; 0x3288 <LCD_voidInit+0x3ba>
    328c:	9c 83       	std	Y+4, r25	; 0x04
    328e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3290:	8d 81       	ldd	r24, Y+5	; 0x05
    3292:	9e 81       	ldd	r25, Y+6	; 0x06
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	69 f7       	brne	.-38     	; 0x327c <LCD_voidInit+0x3ae>
    32a2:	14 c0       	rjmp	.+40     	; 0x32cc <LCD_voidInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a4:	6f 81       	ldd	r22, Y+7	; 0x07
    32a6:	78 85       	ldd	r23, Y+8	; 0x08
    32a8:	89 85       	ldd	r24, Y+9	; 0x09
    32aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9e 83       	std	Y+6, r25	; 0x06
    32b6:	8d 83       	std	Y+5, r24	; 0x05
    32b8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ba:	9e 81       	ldd	r25, Y+6	; 0x06
    32bc:	9a 83       	std	Y+2, r25	; 0x02
    32be:	89 83       	std	Y+1, r24	; 0x01
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	9a 81       	ldd	r25, Y+2	; 0x02
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <LCD_voidInit+0x3f6>
    32c8:	9a 83       	std	Y+2, r25	; 0x02
    32ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//LCD_voidSendCommand(LCD_ENTRY_MODE);

}
    32cc:	e8 96       	adiw	r28, 0x38	; 56
    32ce:	0f b6       	in	r0, 0x3f	; 63
    32d0:	f8 94       	cli
    32d2:	de bf       	out	0x3e, r29	; 62
    32d4:	0f be       	out	0x3f, r0	; 63
    32d6:	cd bf       	out	0x3d, r28	; 61
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <LCD_voidSendCommand>:


// Sends a command to the LCD
void LCD_voidSendCommand(u8 copy_u8Command) {
    32de:	0f 93       	push	r16
    32e0:	1f 93       	push	r17
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	c3 56       	subi	r28, 0x63	; 99
    32ec:	d0 40       	sbci	r29, 0x00	; 0
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	fe 01       	movw	r30, r28
    32fa:	ed 59       	subi	r30, 0x9D	; 157
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	63 e0       	ldi	r22, 0x03	; 3
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    330a:	fe 01       	movw	r30, r28
    330c:	e1 5a       	subi	r30, 0xA1	; 161
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	a0 e8       	ldi	r26, 0x80	; 128
    3316:	bf e3       	ldi	r27, 0x3F	; 63
    3318:	80 83       	st	Z, r24
    331a:	91 83       	std	Z+1, r25	; 0x01
    331c:	a2 83       	std	Z+2, r26	; 0x02
    331e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3320:	8e 01       	movw	r16, r28
    3322:	05 5a       	subi	r16, 0xA5	; 165
    3324:	1f 4f       	sbci	r17, 0xFF	; 255
    3326:	fe 01       	movw	r30, r28
    3328:	e1 5a       	subi	r30, 0xA1	; 161
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	4a e7       	ldi	r20, 0x7A	; 122
    333a:	55 e4       	ldi	r21, 0x45	; 69
    333c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	f8 01       	movw	r30, r16
    3346:	80 83       	st	Z, r24
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	a2 83       	std	Z+2, r26	; 0x02
    334c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    334e:	fe 01       	movw	r30, r28
    3350:	e5 5a       	subi	r30, 0xA5	; 165
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	60 81       	ld	r22, Z
    3356:	71 81       	ldd	r23, Z+1	; 0x01
    3358:	82 81       	ldd	r24, Z+2	; 0x02
    335a:	93 81       	ldd	r25, Z+3	; 0x03
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e8       	ldi	r20, 0x80	; 128
    3362:	5f e3       	ldi	r21, 0x3F	; 63
    3364:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3368:	88 23       	and	r24, r24
    336a:	44 f4       	brge	.+16     	; 0x337c <LCD_voidSendCommand+0x9e>
		__ticks = 1;
    336c:	fe 01       	movw	r30, r28
    336e:	e7 5a       	subi	r30, 0xA7	; 167
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	91 83       	std	Z+1, r25	; 0x01
    3378:	80 83       	st	Z, r24
    337a:	64 c0       	rjmp	.+200    	; 0x3444 <LCD_voidSendCommand+0x166>
	else if (__tmp > 65535)
    337c:	fe 01       	movw	r30, r28
    337e:	e5 5a       	subi	r30, 0xA5	; 165
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	0c f0       	brlt	.+2      	; 0x339c <LCD_voidSendCommand+0xbe>
    339a:	43 c0       	rjmp	.+134    	; 0x3422 <LCD_voidSendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339c:	fe 01       	movw	r30, r28
    339e:	e1 5a       	subi	r30, 0xA1	; 161
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e2       	ldi	r20, 0x20	; 32
    33b0:	51 e4       	ldi	r21, 0x41	; 65
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	8e 01       	movw	r16, r28
    33bc:	07 5a       	subi	r16, 0xA7	; 167
    33be:	1f 4f       	sbci	r17, 0xFF	; 255
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	f8 01       	movw	r30, r16
    33ce:	91 83       	std	Z+1, r25	; 0x01
    33d0:	80 83       	st	Z, r24
    33d2:	1f c0       	rjmp	.+62     	; 0x3412 <LCD_voidSendCommand+0x134>
    33d4:	fe 01       	movw	r30, r28
    33d6:	e9 5a       	subi	r30, 0xA9	; 169
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	80 e9       	ldi	r24, 0x90	; 144
    33dc:	91 e0       	ldi	r25, 0x01	; 1
    33de:	91 83       	std	Z+1, r25	; 0x01
    33e0:	80 83       	st	Z, r24
    33e2:	fe 01       	movw	r30, r28
    33e4:	e9 5a       	subi	r30, 0xA9	; 169
    33e6:	ff 4f       	sbci	r31, 0xFF	; 255
    33e8:	80 81       	ld	r24, Z
    33ea:	91 81       	ldd	r25, Z+1	; 0x01
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <LCD_voidSendCommand+0x10e>
    33f0:	fe 01       	movw	r30, r28
    33f2:	e9 5a       	subi	r30, 0xA9	; 169
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fa:	de 01       	movw	r26, r28
    33fc:	a7 5a       	subi	r26, 0xA7	; 167
    33fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3400:	fe 01       	movw	r30, r28
    3402:	e7 5a       	subi	r30, 0xA7	; 167
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	80 81       	ld	r24, Z
    3408:	91 81       	ldd	r25, Z+1	; 0x01
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	11 96       	adiw	r26, 0x01	; 1
    340e:	9c 93       	st	X, r25
    3410:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3412:	fe 01       	movw	r30, r28
    3414:	e7 5a       	subi	r30, 0xA7	; 167
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	80 81       	ld	r24, Z
    341a:	91 81       	ldd	r25, Z+1	; 0x01
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	d1 f6       	brne	.-76     	; 0x33d4 <LCD_voidSendCommand+0xf6>
    3420:	27 c0       	rjmp	.+78     	; 0x3470 <LCD_voidSendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3422:	8e 01       	movw	r16, r28
    3424:	07 5a       	subi	r16, 0xA7	; 167
    3426:	1f 4f       	sbci	r17, 0xFF	; 255
    3428:	fe 01       	movw	r30, r28
    342a:	e5 5a       	subi	r30, 0xA5	; 165
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	60 81       	ld	r22, Z
    3430:	71 81       	ldd	r23, Z+1	; 0x01
    3432:	82 81       	ldd	r24, Z+2	; 0x02
    3434:	93 81       	ldd	r25, Z+3	; 0x03
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	f8 01       	movw	r30, r16
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	80 83       	st	Z, r24
    3444:	de 01       	movw	r26, r28
    3446:	ab 5a       	subi	r26, 0xAB	; 171
    3448:	bf 4f       	sbci	r27, 0xFF	; 255
    344a:	fe 01       	movw	r30, r28
    344c:	e7 5a       	subi	r30, 0xA7	; 167
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	80 81       	ld	r24, Z
    3452:	91 81       	ldd	r25, Z+1	; 0x01
    3454:	8d 93       	st	X+, r24
    3456:	9c 93       	st	X, r25
    3458:	fe 01       	movw	r30, r28
    345a:	eb 5a       	subi	r30, 0xAB	; 171
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	80 81       	ld	r24, Z
    3460:	91 81       	ldd	r25, Z+1	; 0x01
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <LCD_voidSendCommand+0x184>
    3466:	fe 01       	movw	r30, r28
    3468:	eb 5a       	subi	r30, 0xAB	; 171
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	91 83       	std	Z+1, r25	; 0x01
    346e:	80 83       	st	Z, r24
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	62 e0       	ldi	r22, 0x02	; 2
    3474:	41 e0       	ldi	r20, 0x01	; 1
    3476:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    347a:	fe 01       	movw	r30, r28
    347c:	ef 5a       	subi	r30, 0xAF	; 175
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	a0 e8       	ldi	r26, 0x80	; 128
    3486:	bf e3       	ldi	r27, 0x3F	; 63
    3488:	80 83       	st	Z, r24
    348a:	91 83       	std	Z+1, r25	; 0x01
    348c:	a2 83       	std	Z+2, r26	; 0x02
    348e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3490:	8e 01       	movw	r16, r28
    3492:	03 5b       	subi	r16, 0xB3	; 179
    3494:	1f 4f       	sbci	r17, 0xFF	; 255
    3496:	fe 01       	movw	r30, r28
    3498:	ef 5a       	subi	r30, 0xAF	; 175
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	60 81       	ld	r22, Z
    349e:	71 81       	ldd	r23, Z+1	; 0x01
    34a0:	82 81       	ldd	r24, Z+2	; 0x02
    34a2:	93 81       	ldd	r25, Z+3	; 0x03
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	4a e7       	ldi	r20, 0x7A	; 122
    34aa:	55 e4       	ldi	r21, 0x45	; 69
    34ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	f8 01       	movw	r30, r16
    34b6:	80 83       	st	Z, r24
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	a2 83       	std	Z+2, r26	; 0x02
    34bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34be:	fe 01       	movw	r30, r28
    34c0:	e3 5b       	subi	r30, 0xB3	; 179
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	60 81       	ld	r22, Z
    34c6:	71 81       	ldd	r23, Z+1	; 0x01
    34c8:	82 81       	ldd	r24, Z+2	; 0x02
    34ca:	93 81       	ldd	r25, Z+3	; 0x03
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	40 e8       	ldi	r20, 0x80	; 128
    34d2:	5f e3       	ldi	r21, 0x3F	; 63
    34d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34d8:	88 23       	and	r24, r24
    34da:	44 f4       	brge	.+16     	; 0x34ec <LCD_voidSendCommand+0x20e>
		__ticks = 1;
    34dc:	fe 01       	movw	r30, r28
    34de:	e5 5b       	subi	r30, 0xB5	; 181
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	91 83       	std	Z+1, r25	; 0x01
    34e8:	80 83       	st	Z, r24
    34ea:	64 c0       	rjmp	.+200    	; 0x35b4 <LCD_voidSendCommand+0x2d6>
	else if (__tmp > 65535)
    34ec:	fe 01       	movw	r30, r28
    34ee:	e3 5b       	subi	r30, 0xB3	; 179
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	60 81       	ld	r22, Z
    34f4:	71 81       	ldd	r23, Z+1	; 0x01
    34f6:	82 81       	ldd	r24, Z+2	; 0x02
    34f8:	93 81       	ldd	r25, Z+3	; 0x03
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	3f ef       	ldi	r19, 0xFF	; 255
    34fe:	4f e7       	ldi	r20, 0x7F	; 127
    3500:	57 e4       	ldi	r21, 0x47	; 71
    3502:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3506:	18 16       	cp	r1, r24
    3508:	0c f0       	brlt	.+2      	; 0x350c <LCD_voidSendCommand+0x22e>
    350a:	43 c0       	rjmp	.+134    	; 0x3592 <LCD_voidSendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350c:	fe 01       	movw	r30, r28
    350e:	ef 5a       	subi	r30, 0xAF	; 175
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	93 81       	ldd	r25, Z+3	; 0x03
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e2       	ldi	r20, 0x20	; 32
    3520:	51 e4       	ldi	r21, 0x41	; 65
    3522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	8e 01       	movw	r16, r28
    352c:	05 5b       	subi	r16, 0xB5	; 181
    352e:	1f 4f       	sbci	r17, 0xFF	; 255
    3530:	bc 01       	movw	r22, r24
    3532:	cd 01       	movw	r24, r26
    3534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	f8 01       	movw	r30, r16
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	80 83       	st	Z, r24
    3542:	1f c0       	rjmp	.+62     	; 0x3582 <LCD_voidSendCommand+0x2a4>
    3544:	fe 01       	movw	r30, r28
    3546:	e7 5b       	subi	r30, 0xB7	; 183
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	80 e9       	ldi	r24, 0x90	; 144
    354c:	91 e0       	ldi	r25, 0x01	; 1
    354e:	91 83       	std	Z+1, r25	; 0x01
    3550:	80 83       	st	Z, r24
    3552:	fe 01       	movw	r30, r28
    3554:	e7 5b       	subi	r30, 0xB7	; 183
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	80 81       	ld	r24, Z
    355a:	91 81       	ldd	r25, Z+1	; 0x01
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <LCD_voidSendCommand+0x27e>
    3560:	fe 01       	movw	r30, r28
    3562:	e7 5b       	subi	r30, 0xB7	; 183
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356a:	de 01       	movw	r26, r28
    356c:	a5 5b       	subi	r26, 0xB5	; 181
    356e:	bf 4f       	sbci	r27, 0xFF	; 255
    3570:	fe 01       	movw	r30, r28
    3572:	e5 5b       	subi	r30, 0xB5	; 181
    3574:	ff 4f       	sbci	r31, 0xFF	; 255
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	11 96       	adiw	r26, 0x01	; 1
    357e:	9c 93       	st	X, r25
    3580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3582:	fe 01       	movw	r30, r28
    3584:	e5 5b       	subi	r30, 0xB5	; 181
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	80 81       	ld	r24, Z
    358a:	91 81       	ldd	r25, Z+1	; 0x01
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	d1 f6       	brne	.-76     	; 0x3544 <LCD_voidSendCommand+0x266>
    3590:	27 c0       	rjmp	.+78     	; 0x35e0 <LCD_voidSendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3592:	8e 01       	movw	r16, r28
    3594:	05 5b       	subi	r16, 0xB5	; 181
    3596:	1f 4f       	sbci	r17, 0xFF	; 255
    3598:	fe 01       	movw	r30, r28
    359a:	e3 5b       	subi	r30, 0xB3	; 179
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	60 81       	ld	r22, Z
    35a0:	71 81       	ldd	r23, Z+1	; 0x01
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	f8 01       	movw	r30, r16
    35b0:	91 83       	std	Z+1, r25	; 0x01
    35b2:	80 83       	st	Z, r24
    35b4:	de 01       	movw	r26, r28
    35b6:	a9 5b       	subi	r26, 0xB9	; 185
    35b8:	bf 4f       	sbci	r27, 0xFF	; 255
    35ba:	fe 01       	movw	r30, r28
    35bc:	e5 5b       	subi	r30, 0xB5	; 181
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	80 81       	ld	r24, Z
    35c2:	91 81       	ldd	r25, Z+1	; 0x01
    35c4:	8d 93       	st	X+, r24
    35c6:	9c 93       	st	X, r25
    35c8:	fe 01       	movw	r30, r28
    35ca:	e9 5b       	subi	r30, 0xB9	; 185
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 81       	ld	r24, Z
    35d0:	91 81       	ldd	r25, Z+1	; 0x01
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	f1 f7       	brne	.-4      	; 0x35d2 <LCD_voidSendCommand+0x2f4>
    35d6:	fe 01       	movw	r30, r28
    35d8:	e9 5b       	subi	r30, 0xB9	; 185
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	91 83       	std	Z+1, r25	; 0x01
    35de:	80 83       	st	Z, r24
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
    35e0:	fe 01       	movw	r30, r28
    35e2:	ed 59       	subi	r30, 0x9D	; 157
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	80 81       	ld	r24, Z
    35e8:	82 95       	swap	r24
    35ea:	8f 70       	andi	r24, 0x0F	; 15
    35ec:	98 2f       	mov	r25, r24
    35ee:	91 70       	andi	r25, 0x01	; 1
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	60 e0       	ldi	r22, 0x00	; 0
    35f4:	49 2f       	mov	r20, r25
    35f6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
    35fa:	fe 01       	movw	r30, r28
    35fc:	ed 59       	subi	r30, 0x9D	; 157
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 81       	ld	r24, Z
    3602:	82 95       	swap	r24
    3604:	86 95       	lsr	r24
    3606:	87 70       	andi	r24, 0x07	; 7
    3608:	98 2f       	mov	r25, r24
    360a:	91 70       	andi	r25, 0x01	; 1
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	61 e0       	ldi	r22, 0x01	; 1
    3610:	49 2f       	mov	r20, r25
    3612:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
    3616:	fe 01       	movw	r30, r28
    3618:	ed 59       	subi	r30, 0x9D	; 157
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 81       	ld	r24, Z
    361e:	82 95       	swap	r24
    3620:	86 95       	lsr	r24
    3622:	86 95       	lsr	r24
    3624:	83 70       	andi	r24, 0x03	; 3
    3626:	98 2f       	mov	r25, r24
    3628:	91 70       	andi	r25, 0x01	; 1
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	62 e0       	ldi	r22, 0x02	; 2
    362e:	49 2f       	mov	r20, r25
    3630:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
    3634:	fe 01       	movw	r30, r28
    3636:	ed 59       	subi	r30, 0x9D	; 157
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	80 81       	ld	r24, Z
    363c:	98 2f       	mov	r25, r24
    363e:	99 1f       	adc	r25, r25
    3640:	99 27       	eor	r25, r25
    3642:	99 1f       	adc	r25, r25
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	64 e0       	ldi	r22, 0x04	; 4
    3648:	49 2f       	mov	r20, r25
    364a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    364e:	fe 01       	movw	r30, r28
    3650:	ed 5b       	subi	r30, 0xBD	; 189
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	a0 e8       	ldi	r26, 0x80	; 128
    365a:	bf e3       	ldi	r27, 0x3F	; 63
    365c:	80 83       	st	Z, r24
    365e:	91 83       	std	Z+1, r25	; 0x01
    3660:	a2 83       	std	Z+2, r26	; 0x02
    3662:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3664:	8e 01       	movw	r16, r28
    3666:	01 5c       	subi	r16, 0xC1	; 193
    3668:	1f 4f       	sbci	r17, 0xFF	; 255
    366a:	fe 01       	movw	r30, r28
    366c:	ed 5b       	subi	r30, 0xBD	; 189
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	82 81       	ldd	r24, Z+2	; 0x02
    3676:	93 81       	ldd	r25, Z+3	; 0x03
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	4a e7       	ldi	r20, 0x7A	; 122
    367e:	55 e4       	ldi	r21, 0x45	; 69
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	f8 01       	movw	r30, r16
    368a:	80 83       	st	Z, r24
    368c:	91 83       	std	Z+1, r25	; 0x01
    368e:	a2 83       	std	Z+2, r26	; 0x02
    3690:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3692:	fe 01       	movw	r30, r28
    3694:	ff 96       	adiw	r30, 0x3f	; 63
    3696:	60 81       	ld	r22, Z
    3698:	71 81       	ldd	r23, Z+1	; 0x01
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	93 81       	ldd	r25, Z+3	; 0x03
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e8       	ldi	r20, 0x80	; 128
    36a4:	5f e3       	ldi	r21, 0x3F	; 63
    36a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36aa:	88 23       	and	r24, r24
    36ac:	2c f4       	brge	.+10     	; 0x36b8 <LCD_voidSendCommand+0x3da>
		__ticks = 1;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	9e af       	std	Y+62, r25	; 0x3e
    36b4:	8d af       	std	Y+61, r24	; 0x3d
    36b6:	46 c0       	rjmp	.+140    	; 0x3744 <LCD_voidSendCommand+0x466>
	else if (__tmp > 65535)
    36b8:	fe 01       	movw	r30, r28
    36ba:	ff 96       	adiw	r30, 0x3f	; 63
    36bc:	60 81       	ld	r22, Z
    36be:	71 81       	ldd	r23, Z+1	; 0x01
    36c0:	82 81       	ldd	r24, Z+2	; 0x02
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	3f ef       	ldi	r19, 0xFF	; 255
    36c8:	4f e7       	ldi	r20, 0x7F	; 127
    36ca:	57 e4       	ldi	r21, 0x47	; 71
    36cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36d0:	18 16       	cp	r1, r24
    36d2:	64 f5       	brge	.+88     	; 0x372c <LCD_voidSendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d4:	fe 01       	movw	r30, r28
    36d6:	ed 5b       	subi	r30, 0xBD	; 189
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	60 81       	ld	r22, Z
    36dc:	71 81       	ldd	r23, Z+1	; 0x01
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	40 e2       	ldi	r20, 0x20	; 32
    36e8:	51 e4       	ldi	r21, 0x41	; 65
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	9e af       	std	Y+62, r25	; 0x3e
    3700:	8d af       	std	Y+61, r24	; 0x3d
    3702:	0f c0       	rjmp	.+30     	; 0x3722 <LCD_voidSendCommand+0x444>
    3704:	80 e9       	ldi	r24, 0x90	; 144
    3706:	91 e0       	ldi	r25, 0x01	; 1
    3708:	9c af       	std	Y+60, r25	; 0x3c
    370a:	8b af       	std	Y+59, r24	; 0x3b
    370c:	8b ad       	ldd	r24, Y+59	; 0x3b
    370e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <LCD_voidSendCommand+0x432>
    3714:	9c af       	std	Y+60, r25	; 0x3c
    3716:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3718:	8d ad       	ldd	r24, Y+61	; 0x3d
    371a:	9e ad       	ldd	r25, Y+62	; 0x3e
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	9e af       	std	Y+62, r25	; 0x3e
    3720:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3722:	8d ad       	ldd	r24, Y+61	; 0x3d
    3724:	9e ad       	ldd	r25, Y+62	; 0x3e
    3726:	00 97       	sbiw	r24, 0x00	; 0
    3728:	69 f7       	brne	.-38     	; 0x3704 <LCD_voidSendCommand+0x426>
    372a:	16 c0       	rjmp	.+44     	; 0x3758 <LCD_voidSendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372c:	fe 01       	movw	r30, r28
    372e:	ff 96       	adiw	r30, 0x3f	; 63
    3730:	60 81       	ld	r22, Z
    3732:	71 81       	ldd	r23, Z+1	; 0x01
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
    3738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	9e af       	std	Y+62, r25	; 0x3e
    3742:	8d af       	std	Y+61, r24	; 0x3d
    3744:	8d ad       	ldd	r24, Y+61	; 0x3d
    3746:	9e ad       	ldd	r25, Y+62	; 0x3e
    3748:	9a af       	std	Y+58, r25	; 0x3a
    374a:	89 af       	std	Y+57, r24	; 0x39
    374c:	89 ad       	ldd	r24, Y+57	; 0x39
    374e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <LCD_voidSendCommand+0x472>
    3754:	9a af       	std	Y+58, r25	; 0x3a
    3756:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	62 e0       	ldi	r22, 0x02	; 2
    375c:	40 e0       	ldi	r20, 0x00	; 0
    375e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	a0 e8       	ldi	r26, 0x80	; 128
    3768:	bf e3       	ldi	r27, 0x3F	; 63
    376a:	8d ab       	std	Y+53, r24	; 0x35
    376c:	9e ab       	std	Y+54, r25	; 0x36
    376e:	af ab       	std	Y+55, r26	; 0x37
    3770:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3772:	6d a9       	ldd	r22, Y+53	; 0x35
    3774:	7e a9       	ldd	r23, Y+54	; 0x36
    3776:	8f a9       	ldd	r24, Y+55	; 0x37
    3778:	98 ad       	ldd	r25, Y+56	; 0x38
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	4a e7       	ldi	r20, 0x7A	; 122
    3780:	55 e4       	ldi	r21, 0x45	; 69
    3782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	89 ab       	std	Y+49, r24	; 0x31
    378c:	9a ab       	std	Y+50, r25	; 0x32
    378e:	ab ab       	std	Y+51, r26	; 0x33
    3790:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3792:	69 a9       	ldd	r22, Y+49	; 0x31
    3794:	7a a9       	ldd	r23, Y+50	; 0x32
    3796:	8b a9       	ldd	r24, Y+51	; 0x33
    3798:	9c a9       	ldd	r25, Y+52	; 0x34
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	40 e8       	ldi	r20, 0x80	; 128
    37a0:	5f e3       	ldi	r21, 0x3F	; 63
    37a2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37a6:	88 23       	and	r24, r24
    37a8:	2c f4       	brge	.+10     	; 0x37b4 <LCD_voidSendCommand+0x4d6>
		__ticks = 1;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	98 ab       	std	Y+48, r25	; 0x30
    37b0:	8f a7       	std	Y+47, r24	; 0x2f
    37b2:	3f c0       	rjmp	.+126    	; 0x3832 <LCD_voidSendCommand+0x554>
	else if (__tmp > 65535)
    37b4:	69 a9       	ldd	r22, Y+49	; 0x31
    37b6:	7a a9       	ldd	r23, Y+50	; 0x32
    37b8:	8b a9       	ldd	r24, Y+51	; 0x33
    37ba:	9c a9       	ldd	r25, Y+52	; 0x34
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	3f ef       	ldi	r19, 0xFF	; 255
    37c0:	4f e7       	ldi	r20, 0x7F	; 127
    37c2:	57 e4       	ldi	r21, 0x47	; 71
    37c4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    37c8:	18 16       	cp	r1, r24
    37ca:	4c f5       	brge	.+82     	; 0x381e <LCD_voidSendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37cc:	6d a9       	ldd	r22, Y+53	; 0x35
    37ce:	7e a9       	ldd	r23, Y+54	; 0x36
    37d0:	8f a9       	ldd	r24, Y+55	; 0x37
    37d2:	98 ad       	ldd	r25, Y+56	; 0x38
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	40 e2       	ldi	r20, 0x20	; 32
    37da:	51 e4       	ldi	r21, 0x41	; 65
    37dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	bc 01       	movw	r22, r24
    37e6:	cd 01       	movw	r24, r26
    37e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	98 ab       	std	Y+48, r25	; 0x30
    37f2:	8f a7       	std	Y+47, r24	; 0x2f
    37f4:	0f c0       	rjmp	.+30     	; 0x3814 <LCD_voidSendCommand+0x536>
    37f6:	80 e9       	ldi	r24, 0x90	; 144
    37f8:	91 e0       	ldi	r25, 0x01	; 1
    37fa:	9e a7       	std	Y+46, r25	; 0x2e
    37fc:	8d a7       	std	Y+45, r24	; 0x2d
    37fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    3800:	9e a5       	ldd	r25, Y+46	; 0x2e
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <LCD_voidSendCommand+0x524>
    3806:	9e a7       	std	Y+46, r25	; 0x2e
    3808:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    380a:	8f a5       	ldd	r24, Y+47	; 0x2f
    380c:	98 a9       	ldd	r25, Y+48	; 0x30
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	98 ab       	std	Y+48, r25	; 0x30
    3812:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3814:	8f a5       	ldd	r24, Y+47	; 0x2f
    3816:	98 a9       	ldd	r25, Y+48	; 0x30
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	69 f7       	brne	.-38     	; 0x37f6 <LCD_voidSendCommand+0x518>
    381c:	14 c0       	rjmp	.+40     	; 0x3846 <LCD_voidSendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    381e:	69 a9       	ldd	r22, Y+49	; 0x31
    3820:	7a a9       	ldd	r23, Y+50	; 0x32
    3822:	8b a9       	ldd	r24, Y+51	; 0x33
    3824:	9c a9       	ldd	r25, Y+52	; 0x34
    3826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	98 ab       	std	Y+48, r25	; 0x30
    3830:	8f a7       	std	Y+47, r24	; 0x2f
    3832:	8f a5       	ldd	r24, Y+47	; 0x2f
    3834:	98 a9       	ldd	r25, Y+48	; 0x30
    3836:	9c a7       	std	Y+44, r25	; 0x2c
    3838:	8b a7       	std	Y+43, r24	; 0x2b
    383a:	8b a5       	ldd	r24, Y+43	; 0x2b
    383c:	9c a5       	ldd	r25, Y+44	; 0x2c
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	f1 f7       	brne	.-4      	; 0x383e <LCD_voidSendCommand+0x560>
    3842:	9c a7       	std	Y+44, r25	; 0x2c
    3844:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	62 e0       	ldi	r22, 0x02	; 2
    384a:	41 e0       	ldi	r20, 0x01	; 1
    384c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	a0 e8       	ldi	r26, 0x80	; 128
    3856:	bf e3       	ldi	r27, 0x3F	; 63
    3858:	8f a3       	std	Y+39, r24	; 0x27
    385a:	98 a7       	std	Y+40, r25	; 0x28
    385c:	a9 a7       	std	Y+41, r26	; 0x29
    385e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3860:	6f a1       	ldd	r22, Y+39	; 0x27
    3862:	78 a5       	ldd	r23, Y+40	; 0x28
    3864:	89 a5       	ldd	r24, Y+41	; 0x29
    3866:	9a a5       	ldd	r25, Y+42	; 0x2a
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	4a e7       	ldi	r20, 0x7A	; 122
    386e:	55 e4       	ldi	r21, 0x45	; 69
    3870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	8b a3       	std	Y+35, r24	; 0x23
    387a:	9c a3       	std	Y+36, r25	; 0x24
    387c:	ad a3       	std	Y+37, r26	; 0x25
    387e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3880:	6b a1       	ldd	r22, Y+35	; 0x23
    3882:	7c a1       	ldd	r23, Y+36	; 0x24
    3884:	8d a1       	ldd	r24, Y+37	; 0x25
    3886:	9e a1       	ldd	r25, Y+38	; 0x26
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e8       	ldi	r20, 0x80	; 128
    388e:	5f e3       	ldi	r21, 0x3F	; 63
    3890:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3894:	88 23       	and	r24, r24
    3896:	2c f4       	brge	.+10     	; 0x38a2 <LCD_voidSendCommand+0x5c4>
		__ticks = 1;
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	9a a3       	std	Y+34, r25	; 0x22
    389e:	89 a3       	std	Y+33, r24	; 0x21
    38a0:	3f c0       	rjmp	.+126    	; 0x3920 <LCD_voidSendCommand+0x642>
	else if (__tmp > 65535)
    38a2:	6b a1       	ldd	r22, Y+35	; 0x23
    38a4:	7c a1       	ldd	r23, Y+36	; 0x24
    38a6:	8d a1       	ldd	r24, Y+37	; 0x25
    38a8:	9e a1       	ldd	r25, Y+38	; 0x26
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	3f ef       	ldi	r19, 0xFF	; 255
    38ae:	4f e7       	ldi	r20, 0x7F	; 127
    38b0:	57 e4       	ldi	r21, 0x47	; 71
    38b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    38b6:	18 16       	cp	r1, r24
    38b8:	4c f5       	brge	.+82     	; 0x390c <LCD_voidSendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ba:	6f a1       	ldd	r22, Y+39	; 0x27
    38bc:	78 a5       	ldd	r23, Y+40	; 0x28
    38be:	89 a5       	ldd	r24, Y+41	; 0x29
    38c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e2       	ldi	r20, 0x20	; 32
    38c8:	51 e4       	ldi	r21, 0x41	; 65
    38ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	bc 01       	movw	r22, r24
    38d4:	cd 01       	movw	r24, r26
    38d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	9a a3       	std	Y+34, r25	; 0x22
    38e0:	89 a3       	std	Y+33, r24	; 0x21
    38e2:	0f c0       	rjmp	.+30     	; 0x3902 <LCD_voidSendCommand+0x624>
    38e4:	80 e9       	ldi	r24, 0x90	; 144
    38e6:	91 e0       	ldi	r25, 0x01	; 1
    38e8:	98 a3       	std	Y+32, r25	; 0x20
    38ea:	8f 8f       	std	Y+31, r24	; 0x1f
    38ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38ee:	98 a1       	ldd	r25, Y+32	; 0x20
    38f0:	01 97       	sbiw	r24, 0x01	; 1
    38f2:	f1 f7       	brne	.-4      	; 0x38f0 <LCD_voidSendCommand+0x612>
    38f4:	98 a3       	std	Y+32, r25	; 0x20
    38f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f8:	89 a1       	ldd	r24, Y+33	; 0x21
    38fa:	9a a1       	ldd	r25, Y+34	; 0x22
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	9a a3       	std	Y+34, r25	; 0x22
    3900:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3902:	89 a1       	ldd	r24, Y+33	; 0x21
    3904:	9a a1       	ldd	r25, Y+34	; 0x22
    3906:	00 97       	sbiw	r24, 0x00	; 0
    3908:	69 f7       	brne	.-38     	; 0x38e4 <LCD_voidSendCommand+0x606>
    390a:	14 c0       	rjmp	.+40     	; 0x3934 <LCD_voidSendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390c:	6b a1       	ldd	r22, Y+35	; 0x23
    390e:	7c a1       	ldd	r23, Y+36	; 0x24
    3910:	8d a1       	ldd	r24, Y+37	; 0x25
    3912:	9e a1       	ldd	r25, Y+38	; 0x26
    3914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3918:	dc 01       	movw	r26, r24
    391a:	cb 01       	movw	r24, r22
    391c:	9a a3       	std	Y+34, r25	; 0x22
    391e:	89 a3       	std	Y+33, r24	; 0x21
    3920:	89 a1       	ldd	r24, Y+33	; 0x21
    3922:	9a a1       	ldd	r25, Y+34	; 0x22
    3924:	9e 8f       	std	Y+30, r25	; 0x1e
    3926:	8d 8f       	std	Y+29, r24	; 0x1d
    3928:	8d 8d       	ldd	r24, Y+29	; 0x1d
    392a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	f1 f7       	brne	.-4      	; 0x392c <LCD_voidSendCommand+0x64e>
    3930:	9e 8f       	std	Y+30, r25	; 0x1e
    3932:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
    3934:	fe 01       	movw	r30, r28
    3936:	ed 59       	subi	r30, 0x9D	; 157
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 81       	ld	r24, Z
    393c:	98 2f       	mov	r25, r24
    393e:	91 70       	andi	r25, 0x01	; 1
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	60 e0       	ldi	r22, 0x00	; 0
    3944:	49 2f       	mov	r20, r25
    3946:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
    394a:	fe 01       	movw	r30, r28
    394c:	ed 59       	subi	r30, 0x9D	; 157
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	80 81       	ld	r24, Z
    3952:	86 95       	lsr	r24
    3954:	98 2f       	mov	r25, r24
    3956:	91 70       	andi	r25, 0x01	; 1
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	61 e0       	ldi	r22, 0x01	; 1
    395c:	49 2f       	mov	r20, r25
    395e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
    3962:	fe 01       	movw	r30, r28
    3964:	ed 59       	subi	r30, 0x9D	; 157
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	80 81       	ld	r24, Z
    396a:	86 95       	lsr	r24
    396c:	86 95       	lsr	r24
    396e:	98 2f       	mov	r25, r24
    3970:	91 70       	andi	r25, 0x01	; 1
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	62 e0       	ldi	r22, 0x02	; 2
    3976:	49 2f       	mov	r20, r25
    3978:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
    397c:	fe 01       	movw	r30, r28
    397e:	ed 59       	subi	r30, 0x9D	; 157
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	80 81       	ld	r24, Z
    3984:	86 95       	lsr	r24
    3986:	86 95       	lsr	r24
    3988:	86 95       	lsr	r24
    398a:	98 2f       	mov	r25, r24
    398c:	91 70       	andi	r25, 0x01	; 1
    398e:	81 e0       	ldi	r24, 0x01	; 1
    3990:	64 e0       	ldi	r22, 0x04	; 4
    3992:	49 2f       	mov	r20, r25
    3994:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	a0 e8       	ldi	r26, 0x80	; 128
    399e:	bf e3       	ldi	r27, 0x3F	; 63
    39a0:	89 8f       	std	Y+25, r24	; 0x19
    39a2:	9a 8f       	std	Y+26, r25	; 0x1a
    39a4:	ab 8f       	std	Y+27, r26	; 0x1b
    39a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a8:	69 8d       	ldd	r22, Y+25	; 0x19
    39aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	4a e7       	ldi	r20, 0x7A	; 122
    39b6:	55 e4       	ldi	r21, 0x45	; 69
    39b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	8d 8b       	std	Y+21, r24	; 0x15
    39c2:	9e 8b       	std	Y+22, r25	; 0x16
    39c4:	af 8b       	std	Y+23, r26	; 0x17
    39c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39c8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ca:	7e 89       	ldd	r23, Y+22	; 0x16
    39cc:	8f 89       	ldd	r24, Y+23	; 0x17
    39ce:	98 8d       	ldd	r25, Y+24	; 0x18
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	40 e8       	ldi	r20, 0x80	; 128
    39d6:	5f e3       	ldi	r21, 0x3F	; 63
    39d8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39dc:	88 23       	and	r24, r24
    39de:	2c f4       	brge	.+10     	; 0x39ea <LCD_voidSendCommand+0x70c>
		__ticks = 1;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	9c 8b       	std	Y+20, r25	; 0x14
    39e6:	8b 8b       	std	Y+19, r24	; 0x13
    39e8:	3f c0       	rjmp	.+126    	; 0x3a68 <LCD_voidSendCommand+0x78a>
	else if (__tmp > 65535)
    39ea:	6d 89       	ldd	r22, Y+21	; 0x15
    39ec:	7e 89       	ldd	r23, Y+22	; 0x16
    39ee:	8f 89       	ldd	r24, Y+23	; 0x17
    39f0:	98 8d       	ldd	r25, Y+24	; 0x18
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	3f ef       	ldi	r19, 0xFF	; 255
    39f6:	4f e7       	ldi	r20, 0x7F	; 127
    39f8:	57 e4       	ldi	r21, 0x47	; 71
    39fa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39fe:	18 16       	cp	r1, r24
    3a00:	4c f5       	brge	.+82     	; 0x3a54 <LCD_voidSendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a02:	69 8d       	ldd	r22, Y+25	; 0x19
    3a04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	40 e2       	ldi	r20, 0x20	; 32
    3a10:	51 e4       	ldi	r21, 0x41	; 65
    3a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	bc 01       	movw	r22, r24
    3a1c:	cd 01       	movw	r24, r26
    3a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	9c 8b       	std	Y+20, r25	; 0x14
    3a28:	8b 8b       	std	Y+19, r24	; 0x13
    3a2a:	0f c0       	rjmp	.+30     	; 0x3a4a <LCD_voidSendCommand+0x76c>
    3a2c:	80 e9       	ldi	r24, 0x90	; 144
    3a2e:	91 e0       	ldi	r25, 0x01	; 1
    3a30:	9a 8b       	std	Y+18, r25	; 0x12
    3a32:	89 8b       	std	Y+17, r24	; 0x11
    3a34:	89 89       	ldd	r24, Y+17	; 0x11
    3a36:	9a 89       	ldd	r25, Y+18	; 0x12
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	f1 f7       	brne	.-4      	; 0x3a38 <LCD_voidSendCommand+0x75a>
    3a3c:	9a 8b       	std	Y+18, r25	; 0x12
    3a3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a40:	8b 89       	ldd	r24, Y+19	; 0x13
    3a42:	9c 89       	ldd	r25, Y+20	; 0x14
    3a44:	01 97       	sbiw	r24, 0x01	; 1
    3a46:	9c 8b       	std	Y+20, r25	; 0x14
    3a48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	69 f7       	brne	.-38     	; 0x3a2c <LCD_voidSendCommand+0x74e>
    3a52:	14 c0       	rjmp	.+40     	; 0x3a7c <LCD_voidSendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a54:	6d 89       	ldd	r22, Y+21	; 0x15
    3a56:	7e 89       	ldd	r23, Y+22	; 0x16
    3a58:	8f 89       	ldd	r24, Y+23	; 0x17
    3a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	9c 8b       	std	Y+20, r25	; 0x14
    3a66:	8b 8b       	std	Y+19, r24	; 0x13
    3a68:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6c:	98 8b       	std	Y+16, r25	; 0x10
    3a6e:	8f 87       	std	Y+15, r24	; 0x0f
    3a70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a72:	98 89       	ldd	r25, Y+16	; 0x10
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	f1 f7       	brne	.-4      	; 0x3a74 <LCD_voidSendCommand+0x796>
    3a78:	98 8b       	std	Y+16, r25	; 0x10
    3a7a:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	62 e0       	ldi	r22, 0x02	; 2
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	a0 e8       	ldi	r26, 0x80	; 128
    3a8c:	bf e3       	ldi	r27, 0x3F	; 63
    3a8e:	8b 87       	std	Y+11, r24	; 0x0b
    3a90:	9c 87       	std	Y+12, r25	; 0x0c
    3a92:	ad 87       	std	Y+13, r26	; 0x0d
    3a94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	4a e7       	ldi	r20, 0x7A	; 122
    3aa4:	55 e4       	ldi	r21, 0x45	; 69
    3aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	8f 83       	std	Y+7, r24	; 0x07
    3ab0:	98 87       	std	Y+8, r25	; 0x08
    3ab2:	a9 87       	std	Y+9, r26	; 0x09
    3ab4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab8:	78 85       	ldd	r23, Y+8	; 0x08
    3aba:	89 85       	ldd	r24, Y+9	; 0x09
    3abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	40 e8       	ldi	r20, 0x80	; 128
    3ac4:	5f e3       	ldi	r21, 0x3F	; 63
    3ac6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3aca:	88 23       	and	r24, r24
    3acc:	2c f4       	brge	.+10     	; 0x3ad8 <LCD_voidSendCommand+0x7fa>
		__ticks = 1;
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	9e 83       	std	Y+6, r25	; 0x06
    3ad4:	8d 83       	std	Y+5, r24	; 0x05
    3ad6:	3f c0       	rjmp	.+126    	; 0x3b56 <LCD_voidSendCommand+0x878>
	else if (__tmp > 65535)
    3ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    3ada:	78 85       	ldd	r23, Y+8	; 0x08
    3adc:	89 85       	ldd	r24, Y+9	; 0x09
    3ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	3f ef       	ldi	r19, 0xFF	; 255
    3ae4:	4f e7       	ldi	r20, 0x7F	; 127
    3ae6:	57 e4       	ldi	r21, 0x47	; 71
    3ae8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3aec:	18 16       	cp	r1, r24
    3aee:	4c f5       	brge	.+82     	; 0x3b42 <LCD_voidSendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e2       	ldi	r20, 0x20	; 32
    3afe:	51 e4       	ldi	r21, 0x41	; 65
    3b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	bc 01       	movw	r22, r24
    3b0a:	cd 01       	movw	r24, r26
    3b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	9e 83       	std	Y+6, r25	; 0x06
    3b16:	8d 83       	std	Y+5, r24	; 0x05
    3b18:	0f c0       	rjmp	.+30     	; 0x3b38 <LCD_voidSendCommand+0x85a>
    3b1a:	80 e9       	ldi	r24, 0x90	; 144
    3b1c:	91 e0       	ldi	r25, 0x01	; 1
    3b1e:	9c 83       	std	Y+4, r25	; 0x04
    3b20:	8b 83       	std	Y+3, r24	; 0x03
    3b22:	8b 81       	ldd	r24, Y+3	; 0x03
    3b24:	9c 81       	ldd	r25, Y+4	; 0x04
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	f1 f7       	brne	.-4      	; 0x3b26 <LCD_voidSendCommand+0x848>
    3b2a:	9c 83       	std	Y+4, r25	; 0x04
    3b2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b30:	9e 81       	ldd	r25, Y+6	; 0x06
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	9e 83       	std	Y+6, r25	; 0x06
    3b36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b38:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3c:	00 97       	sbiw	r24, 0x00	; 0
    3b3e:	69 f7       	brne	.-38     	; 0x3b1a <LCD_voidSendCommand+0x83c>
    3b40:	14 c0       	rjmp	.+40     	; 0x3b6a <LCD_voidSendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b42:	6f 81       	ldd	r22, Y+7	; 0x07
    3b44:	78 85       	ldd	r23, Y+8	; 0x08
    3b46:	89 85       	ldd	r24, Y+9	; 0x09
    3b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4e:	dc 01       	movw	r26, r24
    3b50:	cb 01       	movw	r24, r22
    3b52:	9e 83       	std	Y+6, r25	; 0x06
    3b54:	8d 83       	std	Y+5, r24	; 0x05
    3b56:	8d 81       	ldd	r24, Y+5	; 0x05
    3b58:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5a:	9a 83       	std	Y+2, r25	; 0x02
    3b5c:	89 83       	std	Y+1, r24	; 0x01
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	9a 81       	ldd	r25, Y+2	; 0x02
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <LCD_voidSendCommand+0x884>
    3b66:	9a 83       	std	Y+2, r25	; 0x02
    3b68:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif
}
    3b6a:	cd 59       	subi	r28, 0x9D	; 157
    3b6c:	df 4f       	sbci	r29, 0xFF	; 255
    3b6e:	0f b6       	in	r0, 0x3f	; 63
    3b70:	f8 94       	cli
    3b72:	de bf       	out	0x3e, r29	; 62
    3b74:	0f be       	out	0x3f, r0	; 63
    3b76:	cd bf       	out	0x3d, r28	; 61
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	1f 91       	pop	r17
    3b7e:	0f 91       	pop	r16
    3b80:	08 95       	ret

00003b82 <LCD_voidSendData>:


// Displays a character on the LCD
void LCD_voidSendData(u8 copy_u8data) {
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	df 93       	push	r29
    3b88:	cf 93       	push	r28
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	c3 56       	subi	r28, 0x63	; 99
    3b90:	d0 40       	sbci	r29, 0x00	; 0
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ed 59       	subi	r30, 0x9D	; 157
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	63 e0       	ldi	r22, 0x03	; 3
    3ba8:	41 e0       	ldi	r20, 0x01	; 1
    3baa:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e1 5a       	subi	r30, 0xA1	; 161
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	a0 e8       	ldi	r26, 0x80	; 128
    3bba:	bf e3       	ldi	r27, 0x3F	; 63
    3bbc:	80 83       	st	Z, r24
    3bbe:	91 83       	std	Z+1, r25	; 0x01
    3bc0:	a2 83       	std	Z+2, r26	; 0x02
    3bc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc4:	8e 01       	movw	r16, r28
    3bc6:	05 5a       	subi	r16, 0xA5	; 165
    3bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bca:	fe 01       	movw	r30, r28
    3bcc:	e1 5a       	subi	r30, 0xA1	; 161
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	60 81       	ld	r22, Z
    3bd2:	71 81       	ldd	r23, Z+1	; 0x01
    3bd4:	82 81       	ldd	r24, Z+2	; 0x02
    3bd6:	93 81       	ldd	r25, Z+3	; 0x03
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	4a e7       	ldi	r20, 0x7A	; 122
    3bde:	55 e4       	ldi	r21, 0x45	; 69
    3be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	f8 01       	movw	r30, r16
    3bea:	80 83       	st	Z, r24
    3bec:	91 83       	std	Z+1, r25	; 0x01
    3bee:	a2 83       	std	Z+2, r26	; 0x02
    3bf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	e5 5a       	subi	r30, 0xA5	; 165
    3bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf8:	60 81       	ld	r22, Z
    3bfa:	71 81       	ldd	r23, Z+1	; 0x01
    3bfc:	82 81       	ldd	r24, Z+2	; 0x02
    3bfe:	93 81       	ldd	r25, Z+3	; 0x03
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	40 e8       	ldi	r20, 0x80	; 128
    3c06:	5f e3       	ldi	r21, 0x3F	; 63
    3c08:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c0c:	88 23       	and	r24, r24
    3c0e:	44 f4       	brge	.+16     	; 0x3c20 <LCD_voidSendData+0x9e>
		__ticks = 1;
    3c10:	fe 01       	movw	r30, r28
    3c12:	e7 5a       	subi	r30, 0xA7	; 167
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	91 83       	std	Z+1, r25	; 0x01
    3c1c:	80 83       	st	Z, r24
    3c1e:	64 c0       	rjmp	.+200    	; 0x3ce8 <LCD_voidSendData+0x166>
	else if (__tmp > 65535)
    3c20:	fe 01       	movw	r30, r28
    3c22:	e5 5a       	subi	r30, 0xA5	; 165
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	60 81       	ld	r22, Z
    3c28:	71 81       	ldd	r23, Z+1	; 0x01
    3c2a:	82 81       	ldd	r24, Z+2	; 0x02
    3c2c:	93 81       	ldd	r25, Z+3	; 0x03
    3c2e:	20 e0       	ldi	r18, 0x00	; 0
    3c30:	3f ef       	ldi	r19, 0xFF	; 255
    3c32:	4f e7       	ldi	r20, 0x7F	; 127
    3c34:	57 e4       	ldi	r21, 0x47	; 71
    3c36:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c3a:	18 16       	cp	r1, r24
    3c3c:	0c f0       	brlt	.+2      	; 0x3c40 <LCD_voidSendData+0xbe>
    3c3e:	43 c0       	rjmp	.+134    	; 0x3cc6 <LCD_voidSendData+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c40:	fe 01       	movw	r30, r28
    3c42:	e1 5a       	subi	r30, 0xA1	; 161
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	60 81       	ld	r22, Z
    3c48:	71 81       	ldd	r23, Z+1	; 0x01
    3c4a:	82 81       	ldd	r24, Z+2	; 0x02
    3c4c:	93 81       	ldd	r25, Z+3	; 0x03
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	40 e2       	ldi	r20, 0x20	; 32
    3c54:	51 e4       	ldi	r21, 0x41	; 65
    3c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	8e 01       	movw	r16, r28
    3c60:	07 5a       	subi	r16, 0xA7	; 167
    3c62:	1f 4f       	sbci	r17, 0xFF	; 255
    3c64:	bc 01       	movw	r22, r24
    3c66:	cd 01       	movw	r24, r26
    3c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	f8 01       	movw	r30, r16
    3c72:	91 83       	std	Z+1, r25	; 0x01
    3c74:	80 83       	st	Z, r24
    3c76:	1f c0       	rjmp	.+62     	; 0x3cb6 <LCD_voidSendData+0x134>
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e9 5a       	subi	r30, 0xA9	; 169
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	80 e9       	ldi	r24, 0x90	; 144
    3c80:	91 e0       	ldi	r25, 0x01	; 1
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
    3c86:	fe 01       	movw	r30, r28
    3c88:	e9 5a       	subi	r30, 0xA9	; 169
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	80 81       	ld	r24, Z
    3c8e:	91 81       	ldd	r25, Z+1	; 0x01
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <LCD_voidSendData+0x10e>
    3c94:	fe 01       	movw	r30, r28
    3c96:	e9 5a       	subi	r30, 0xA9	; 169
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	91 83       	std	Z+1, r25	; 0x01
    3c9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c9e:	de 01       	movw	r26, r28
    3ca0:	a7 5a       	subi	r26, 0xA7	; 167
    3ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	e7 5a       	subi	r30, 0xA7	; 167
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	80 81       	ld	r24, Z
    3cac:	91 81       	ldd	r25, Z+1	; 0x01
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	11 96       	adiw	r26, 0x01	; 1
    3cb2:	9c 93       	st	X, r25
    3cb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e7 5a       	subi	r30, 0xA7	; 167
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	80 81       	ld	r24, Z
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	00 97       	sbiw	r24, 0x00	; 0
    3cc2:	d1 f6       	brne	.-76     	; 0x3c78 <LCD_voidSendData+0xf6>
    3cc4:	27 c0       	rjmp	.+78     	; 0x3d14 <LCD_voidSendData+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc6:	8e 01       	movw	r16, r28
    3cc8:	07 5a       	subi	r16, 0xA7	; 167
    3cca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ccc:	fe 01       	movw	r30, r28
    3cce:	e5 5a       	subi	r30, 0xA5	; 165
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	60 81       	ld	r22, Z
    3cd4:	71 81       	ldd	r23, Z+1	; 0x01
    3cd6:	82 81       	ldd	r24, Z+2	; 0x02
    3cd8:	93 81       	ldd	r25, Z+3	; 0x03
    3cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cde:	dc 01       	movw	r26, r24
    3ce0:	cb 01       	movw	r24, r22
    3ce2:	f8 01       	movw	r30, r16
    3ce4:	91 83       	std	Z+1, r25	; 0x01
    3ce6:	80 83       	st	Z, r24
    3ce8:	de 01       	movw	r26, r28
    3cea:	ab 5a       	subi	r26, 0xAB	; 171
    3cec:	bf 4f       	sbci	r27, 0xFF	; 255
    3cee:	fe 01       	movw	r30, r28
    3cf0:	e7 5a       	subi	r30, 0xA7	; 167
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	80 81       	ld	r24, Z
    3cf6:	91 81       	ldd	r25, Z+1	; 0x01
    3cf8:	8d 93       	st	X+, r24
    3cfa:	9c 93       	st	X, r25
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	eb 5a       	subi	r30, 0xAB	; 171
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	80 81       	ld	r24, Z
    3d04:	91 81       	ldd	r25, Z+1	; 0x01
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	f1 f7       	brne	.-4      	; 0x3d06 <LCD_voidSendData+0x184>
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	eb 5a       	subi	r30, 0xAB	; 171
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	91 83       	std	Z+1, r25	; 0x01
    3d12:	80 83       	st	Z, r24
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	62 e0       	ldi	r22, 0x02	; 2
    3d18:	41 e0       	ldi	r20, 0x01	; 1
    3d1a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    3d1e:	fe 01       	movw	r30, r28
    3d20:	ef 5a       	subi	r30, 0xAF	; 175
    3d22:	ff 4f       	sbci	r31, 0xFF	; 255
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	a0 e8       	ldi	r26, 0x80	; 128
    3d2a:	bf e3       	ldi	r27, 0x3F	; 63
    3d2c:	80 83       	st	Z, r24
    3d2e:	91 83       	std	Z+1, r25	; 0x01
    3d30:	a2 83       	std	Z+2, r26	; 0x02
    3d32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d34:	8e 01       	movw	r16, r28
    3d36:	03 5b       	subi	r16, 0xB3	; 179
    3d38:	1f 4f       	sbci	r17, 0xFF	; 255
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	ef 5a       	subi	r30, 0xAF	; 175
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	60 81       	ld	r22, Z
    3d42:	71 81       	ldd	r23, Z+1	; 0x01
    3d44:	82 81       	ldd	r24, Z+2	; 0x02
    3d46:	93 81       	ldd	r25, Z+3	; 0x03
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	4a e7       	ldi	r20, 0x7A	; 122
    3d4e:	55 e4       	ldi	r21, 0x45	; 69
    3d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	f8 01       	movw	r30, r16
    3d5a:	80 83       	st	Z, r24
    3d5c:	91 83       	std	Z+1, r25	; 0x01
    3d5e:	a2 83       	std	Z+2, r26	; 0x02
    3d60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d62:	fe 01       	movw	r30, r28
    3d64:	e3 5b       	subi	r30, 0xB3	; 179
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	60 81       	ld	r22, Z
    3d6a:	71 81       	ldd	r23, Z+1	; 0x01
    3d6c:	82 81       	ldd	r24, Z+2	; 0x02
    3d6e:	93 81       	ldd	r25, Z+3	; 0x03
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	40 e8       	ldi	r20, 0x80	; 128
    3d76:	5f e3       	ldi	r21, 0x3F	; 63
    3d78:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d7c:	88 23       	and	r24, r24
    3d7e:	44 f4       	brge	.+16     	; 0x3d90 <LCD_voidSendData+0x20e>
		__ticks = 1;
    3d80:	fe 01       	movw	r30, r28
    3d82:	e5 5b       	subi	r30, 0xB5	; 181
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	91 83       	std	Z+1, r25	; 0x01
    3d8c:	80 83       	st	Z, r24
    3d8e:	64 c0       	rjmp	.+200    	; 0x3e58 <LCD_voidSendData+0x2d6>
	else if (__tmp > 65535)
    3d90:	fe 01       	movw	r30, r28
    3d92:	e3 5b       	subi	r30, 0xB3	; 179
    3d94:	ff 4f       	sbci	r31, 0xFF	; 255
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	82 81       	ldd	r24, Z+2	; 0x02
    3d9c:	93 81       	ldd	r25, Z+3	; 0x03
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	3f ef       	ldi	r19, 0xFF	; 255
    3da2:	4f e7       	ldi	r20, 0x7F	; 127
    3da4:	57 e4       	ldi	r21, 0x47	; 71
    3da6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3daa:	18 16       	cp	r1, r24
    3dac:	0c f0       	brlt	.+2      	; 0x3db0 <LCD_voidSendData+0x22e>
    3dae:	43 c0       	rjmp	.+134    	; 0x3e36 <LCD_voidSendData+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3db0:	fe 01       	movw	r30, r28
    3db2:	ef 5a       	subi	r30, 0xAF	; 175
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	60 81       	ld	r22, Z
    3db8:	71 81       	ldd	r23, Z+1	; 0x01
    3dba:	82 81       	ldd	r24, Z+2	; 0x02
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e2       	ldi	r20, 0x20	; 32
    3dc4:	51 e4       	ldi	r21, 0x41	; 65
    3dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	8e 01       	movw	r16, r28
    3dd0:	05 5b       	subi	r16, 0xB5	; 181
    3dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd4:	bc 01       	movw	r22, r24
    3dd6:	cd 01       	movw	r24, r26
    3dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ddc:	dc 01       	movw	r26, r24
    3dde:	cb 01       	movw	r24, r22
    3de0:	f8 01       	movw	r30, r16
    3de2:	91 83       	std	Z+1, r25	; 0x01
    3de4:	80 83       	st	Z, r24
    3de6:	1f c0       	rjmp	.+62     	; 0x3e26 <LCD_voidSendData+0x2a4>
    3de8:	fe 01       	movw	r30, r28
    3dea:	e7 5b       	subi	r30, 0xB7	; 183
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	80 e9       	ldi	r24, 0x90	; 144
    3df0:	91 e0       	ldi	r25, 0x01	; 1
    3df2:	91 83       	std	Z+1, r25	; 0x01
    3df4:	80 83       	st	Z, r24
    3df6:	fe 01       	movw	r30, r28
    3df8:	e7 5b       	subi	r30, 0xB7	; 183
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	80 81       	ld	r24, Z
    3dfe:	91 81       	ldd	r25, Z+1	; 0x01
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <LCD_voidSendData+0x27e>
    3e04:	fe 01       	movw	r30, r28
    3e06:	e7 5b       	subi	r30, 0xB7	; 183
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	91 83       	std	Z+1, r25	; 0x01
    3e0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0e:	de 01       	movw	r26, r28
    3e10:	a5 5b       	subi	r26, 0xB5	; 181
    3e12:	bf 4f       	sbci	r27, 0xFF	; 255
    3e14:	fe 01       	movw	r30, r28
    3e16:	e5 5b       	subi	r30, 0xB5	; 181
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	80 81       	ld	r24, Z
    3e1c:	91 81       	ldd	r25, Z+1	; 0x01
    3e1e:	01 97       	sbiw	r24, 0x01	; 1
    3e20:	11 96       	adiw	r26, 0x01	; 1
    3e22:	9c 93       	st	X, r25
    3e24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e26:	fe 01       	movw	r30, r28
    3e28:	e5 5b       	subi	r30, 0xB5	; 181
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	80 81       	ld	r24, Z
    3e2e:	91 81       	ldd	r25, Z+1	; 0x01
    3e30:	00 97       	sbiw	r24, 0x00	; 0
    3e32:	d1 f6       	brne	.-76     	; 0x3de8 <LCD_voidSendData+0x266>
    3e34:	27 c0       	rjmp	.+78     	; 0x3e84 <LCD_voidSendData+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e36:	8e 01       	movw	r16, r28
    3e38:	05 5b       	subi	r16, 0xB5	; 181
    3e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3c:	fe 01       	movw	r30, r28
    3e3e:	e3 5b       	subi	r30, 0xB3	; 179
    3e40:	ff 4f       	sbci	r31, 0xFF	; 255
    3e42:	60 81       	ld	r22, Z
    3e44:	71 81       	ldd	r23, Z+1	; 0x01
    3e46:	82 81       	ldd	r24, Z+2	; 0x02
    3e48:	93 81       	ldd	r25, Z+3	; 0x03
    3e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	f8 01       	movw	r30, r16
    3e54:	91 83       	std	Z+1, r25	; 0x01
    3e56:	80 83       	st	Z, r24
    3e58:	de 01       	movw	r26, r28
    3e5a:	a9 5b       	subi	r26, 0xB9	; 185
    3e5c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e5e:	fe 01       	movw	r30, r28
    3e60:	e5 5b       	subi	r30, 0xB5	; 181
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	80 81       	ld	r24, Z
    3e66:	91 81       	ldd	r25, Z+1	; 0x01
    3e68:	8d 93       	st	X+, r24
    3e6a:	9c 93       	st	X, r25
    3e6c:	fe 01       	movw	r30, r28
    3e6e:	e9 5b       	subi	r30, 0xB9	; 185
    3e70:	ff 4f       	sbci	r31, 0xFF	; 255
    3e72:	80 81       	ld	r24, Z
    3e74:	91 81       	ldd	r25, Z+1	; 0x01
    3e76:	01 97       	sbiw	r24, 0x01	; 1
    3e78:	f1 f7       	brne	.-4      	; 0x3e76 <LCD_voidSendData+0x2f4>
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	e9 5b       	subi	r30, 0xB9	; 185
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	91 83       	std	Z+1, r25	; 0x01
    3e82:	80 83       	st	Z, r24
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
    3e84:	fe 01       	movw	r30, r28
    3e86:	ed 59       	subi	r30, 0x9D	; 157
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	80 81       	ld	r24, Z
    3e8c:	82 95       	swap	r24
    3e8e:	8f 70       	andi	r24, 0x0F	; 15
    3e90:	98 2f       	mov	r25, r24
    3e92:	91 70       	andi	r25, 0x01	; 1
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	60 e0       	ldi	r22, 0x00	; 0
    3e98:	49 2f       	mov	r20, r25
    3e9a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	ed 59       	subi	r30, 0x9D	; 157
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	80 81       	ld	r24, Z
    3ea6:	82 95       	swap	r24
    3ea8:	86 95       	lsr	r24
    3eaa:	87 70       	andi	r24, 0x07	; 7
    3eac:	98 2f       	mov	r25, r24
    3eae:	91 70       	andi	r25, 0x01	; 1
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	61 e0       	ldi	r22, 0x01	; 1
    3eb4:	49 2f       	mov	r20, r25
    3eb6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
    3eba:	fe 01       	movw	r30, r28
    3ebc:	ed 59       	subi	r30, 0x9D	; 157
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	80 81       	ld	r24, Z
    3ec2:	82 95       	swap	r24
    3ec4:	86 95       	lsr	r24
    3ec6:	86 95       	lsr	r24
    3ec8:	83 70       	andi	r24, 0x03	; 3
    3eca:	98 2f       	mov	r25, r24
    3ecc:	91 70       	andi	r25, 0x01	; 1
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	62 e0       	ldi	r22, 0x02	; 2
    3ed2:	49 2f       	mov	r20, r25
    3ed4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
    3ed8:	fe 01       	movw	r30, r28
    3eda:	ed 59       	subi	r30, 0x9D	; 157
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	80 81       	ld	r24, Z
    3ee0:	98 2f       	mov	r25, r24
    3ee2:	99 1f       	adc	r25, r25
    3ee4:	99 27       	eor	r25, r25
    3ee6:	99 1f       	adc	r25, r25
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	64 e0       	ldi	r22, 0x04	; 4
    3eec:	49 2f       	mov	r20, r25
    3eee:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	ed 5b       	subi	r30, 0xBD	; 189
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	a0 e8       	ldi	r26, 0x80	; 128
    3efe:	bf e3       	ldi	r27, 0x3F	; 63
    3f00:	80 83       	st	Z, r24
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	a2 83       	std	Z+2, r26	; 0x02
    3f06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f08:	8e 01       	movw	r16, r28
    3f0a:	01 5c       	subi	r16, 0xC1	; 193
    3f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0e:	fe 01       	movw	r30, r28
    3f10:	ed 5b       	subi	r30, 0xBD	; 189
    3f12:	ff 4f       	sbci	r31, 0xFF	; 255
    3f14:	60 81       	ld	r22, Z
    3f16:	71 81       	ldd	r23, Z+1	; 0x01
    3f18:	82 81       	ldd	r24, Z+2	; 0x02
    3f1a:	93 81       	ldd	r25, Z+3	; 0x03
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	4a e7       	ldi	r20, 0x7A	; 122
    3f22:	55 e4       	ldi	r21, 0x45	; 69
    3f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	f8 01       	movw	r30, r16
    3f2e:	80 83       	st	Z, r24
    3f30:	91 83       	std	Z+1, r25	; 0x01
    3f32:	a2 83       	std	Z+2, r26	; 0x02
    3f34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f36:	fe 01       	movw	r30, r28
    3f38:	ff 96       	adiw	r30, 0x3f	; 63
    3f3a:	60 81       	ld	r22, Z
    3f3c:	71 81       	ldd	r23, Z+1	; 0x01
    3f3e:	82 81       	ldd	r24, Z+2	; 0x02
    3f40:	93 81       	ldd	r25, Z+3	; 0x03
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	40 e8       	ldi	r20, 0x80	; 128
    3f48:	5f e3       	ldi	r21, 0x3F	; 63
    3f4a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f4e:	88 23       	and	r24, r24
    3f50:	2c f4       	brge	.+10     	; 0x3f5c <LCD_voidSendData+0x3da>
		__ticks = 1;
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	9e af       	std	Y+62, r25	; 0x3e
    3f58:	8d af       	std	Y+61, r24	; 0x3d
    3f5a:	46 c0       	rjmp	.+140    	; 0x3fe8 <LCD_voidSendData+0x466>
	else if (__tmp > 65535)
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	ff 96       	adiw	r30, 0x3f	; 63
    3f60:	60 81       	ld	r22, Z
    3f62:	71 81       	ldd	r23, Z+1	; 0x01
    3f64:	82 81       	ldd	r24, Z+2	; 0x02
    3f66:	93 81       	ldd	r25, Z+3	; 0x03
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	3f ef       	ldi	r19, 0xFF	; 255
    3f6c:	4f e7       	ldi	r20, 0x7F	; 127
    3f6e:	57 e4       	ldi	r21, 0x47	; 71
    3f70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f74:	18 16       	cp	r1, r24
    3f76:	64 f5       	brge	.+88     	; 0x3fd0 <LCD_voidSendData+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f78:	fe 01       	movw	r30, r28
    3f7a:	ed 5b       	subi	r30, 0xBD	; 189
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	60 81       	ld	r22, Z
    3f80:	71 81       	ldd	r23, Z+1	; 0x01
    3f82:	82 81       	ldd	r24, Z+2	; 0x02
    3f84:	93 81       	ldd	r25, Z+3	; 0x03
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	40 e2       	ldi	r20, 0x20	; 32
    3f8c:	51 e4       	ldi	r21, 0x41	; 65
    3f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	bc 01       	movw	r22, r24
    3f98:	cd 01       	movw	r24, r26
    3f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	9e af       	std	Y+62, r25	; 0x3e
    3fa4:	8d af       	std	Y+61, r24	; 0x3d
    3fa6:	0f c0       	rjmp	.+30     	; 0x3fc6 <LCD_voidSendData+0x444>
    3fa8:	80 e9       	ldi	r24, 0x90	; 144
    3faa:	91 e0       	ldi	r25, 0x01	; 1
    3fac:	9c af       	std	Y+60, r25	; 0x3c
    3fae:	8b af       	std	Y+59, r24	; 0x3b
    3fb0:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fb2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	f1 f7       	brne	.-4      	; 0x3fb4 <LCD_voidSendData+0x432>
    3fb8:	9c af       	std	Y+60, r25	; 0x3c
    3fba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fc0:	01 97       	sbiw	r24, 0x01	; 1
    3fc2:	9e af       	std	Y+62, r25	; 0x3e
    3fc4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fca:	00 97       	sbiw	r24, 0x00	; 0
    3fcc:	69 f7       	brne	.-38     	; 0x3fa8 <LCD_voidSendData+0x426>
    3fce:	16 c0       	rjmp	.+44     	; 0x3ffc <LCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	ff 96       	adiw	r30, 0x3f	; 63
    3fd4:	60 81       	ld	r22, Z
    3fd6:	71 81       	ldd	r23, Z+1	; 0x01
    3fd8:	82 81       	ldd	r24, Z+2	; 0x02
    3fda:	93 81       	ldd	r25, Z+3	; 0x03
    3fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	9e af       	std	Y+62, r25	; 0x3e
    3fe6:	8d af       	std	Y+61, r24	; 0x3d
    3fe8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fea:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fec:	9a af       	std	Y+58, r25	; 0x3a
    3fee:	89 af       	std	Y+57, r24	; 0x39
    3ff0:	89 ad       	ldd	r24, Y+57	; 0x39
    3ff2:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	f1 f7       	brne	.-4      	; 0x3ff4 <LCD_voidSendData+0x472>
    3ff8:	9a af       	std	Y+58, r25	; 0x3a
    3ffa:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	62 e0       	ldi	r22, 0x02	; 2
    4000:	40 e0       	ldi	r20, 0x00	; 0
    4002:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	a0 e8       	ldi	r26, 0x80	; 128
    400c:	bf e3       	ldi	r27, 0x3F	; 63
    400e:	8d ab       	std	Y+53, r24	; 0x35
    4010:	9e ab       	std	Y+54, r25	; 0x36
    4012:	af ab       	std	Y+55, r26	; 0x37
    4014:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4016:	6d a9       	ldd	r22, Y+53	; 0x35
    4018:	7e a9       	ldd	r23, Y+54	; 0x36
    401a:	8f a9       	ldd	r24, Y+55	; 0x37
    401c:	98 ad       	ldd	r25, Y+56	; 0x38
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	4a e7       	ldi	r20, 0x7A	; 122
    4024:	55 e4       	ldi	r21, 0x45	; 69
    4026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	89 ab       	std	Y+49, r24	; 0x31
    4030:	9a ab       	std	Y+50, r25	; 0x32
    4032:	ab ab       	std	Y+51, r26	; 0x33
    4034:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4036:	69 a9       	ldd	r22, Y+49	; 0x31
    4038:	7a a9       	ldd	r23, Y+50	; 0x32
    403a:	8b a9       	ldd	r24, Y+51	; 0x33
    403c:	9c a9       	ldd	r25, Y+52	; 0x34
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 e8       	ldi	r20, 0x80	; 128
    4044:	5f e3       	ldi	r21, 0x3F	; 63
    4046:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    404a:	88 23       	and	r24, r24
    404c:	2c f4       	brge	.+10     	; 0x4058 <LCD_voidSendData+0x4d6>
		__ticks = 1;
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	98 ab       	std	Y+48, r25	; 0x30
    4054:	8f a7       	std	Y+47, r24	; 0x2f
    4056:	3f c0       	rjmp	.+126    	; 0x40d6 <LCD_voidSendData+0x554>
	else if (__tmp > 65535)
    4058:	69 a9       	ldd	r22, Y+49	; 0x31
    405a:	7a a9       	ldd	r23, Y+50	; 0x32
    405c:	8b a9       	ldd	r24, Y+51	; 0x33
    405e:	9c a9       	ldd	r25, Y+52	; 0x34
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	3f ef       	ldi	r19, 0xFF	; 255
    4064:	4f e7       	ldi	r20, 0x7F	; 127
    4066:	57 e4       	ldi	r21, 0x47	; 71
    4068:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    406c:	18 16       	cp	r1, r24
    406e:	4c f5       	brge	.+82     	; 0x40c2 <LCD_voidSendData+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4070:	6d a9       	ldd	r22, Y+53	; 0x35
    4072:	7e a9       	ldd	r23, Y+54	; 0x36
    4074:	8f a9       	ldd	r24, Y+55	; 0x37
    4076:	98 ad       	ldd	r25, Y+56	; 0x38
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	40 e2       	ldi	r20, 0x20	; 32
    407e:	51 e4       	ldi	r21, 0x41	; 65
    4080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	bc 01       	movw	r22, r24
    408a:	cd 01       	movw	r24, r26
    408c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	98 ab       	std	Y+48, r25	; 0x30
    4096:	8f a7       	std	Y+47, r24	; 0x2f
    4098:	0f c0       	rjmp	.+30     	; 0x40b8 <LCD_voidSendData+0x536>
    409a:	80 e9       	ldi	r24, 0x90	; 144
    409c:	91 e0       	ldi	r25, 0x01	; 1
    409e:	9e a7       	std	Y+46, r25	; 0x2e
    40a0:	8d a7       	std	Y+45, r24	; 0x2d
    40a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    40a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    40a6:	01 97       	sbiw	r24, 0x01	; 1
    40a8:	f1 f7       	brne	.-4      	; 0x40a6 <LCD_voidSendData+0x524>
    40aa:	9e a7       	std	Y+46, r25	; 0x2e
    40ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    40b0:	98 a9       	ldd	r25, Y+48	; 0x30
    40b2:	01 97       	sbiw	r24, 0x01	; 1
    40b4:	98 ab       	std	Y+48, r25	; 0x30
    40b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    40ba:	98 a9       	ldd	r25, Y+48	; 0x30
    40bc:	00 97       	sbiw	r24, 0x00	; 0
    40be:	69 f7       	brne	.-38     	; 0x409a <LCD_voidSendData+0x518>
    40c0:	14 c0       	rjmp	.+40     	; 0x40ea <LCD_voidSendData+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40c2:	69 a9       	ldd	r22, Y+49	; 0x31
    40c4:	7a a9       	ldd	r23, Y+50	; 0x32
    40c6:	8b a9       	ldd	r24, Y+51	; 0x33
    40c8:	9c a9       	ldd	r25, Y+52	; 0x34
    40ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ce:	dc 01       	movw	r26, r24
    40d0:	cb 01       	movw	r24, r22
    40d2:	98 ab       	std	Y+48, r25	; 0x30
    40d4:	8f a7       	std	Y+47, r24	; 0x2f
    40d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    40d8:	98 a9       	ldd	r25, Y+48	; 0x30
    40da:	9c a7       	std	Y+44, r25	; 0x2c
    40dc:	8b a7       	std	Y+43, r24	; 0x2b
    40de:	8b a5       	ldd	r24, Y+43	; 0x2b
    40e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	f1 f7       	brne	.-4      	; 0x40e2 <LCD_voidSendData+0x560>
    40e6:	9c a7       	std	Y+44, r25	; 0x2c
    40e8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	62 e0       	ldi	r22, 0x02	; 2
    40ee:	41 e0       	ldi	r20, 0x01	; 1
    40f0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	a0 e8       	ldi	r26, 0x80	; 128
    40fa:	bf e3       	ldi	r27, 0x3F	; 63
    40fc:	8f a3       	std	Y+39, r24	; 0x27
    40fe:	98 a7       	std	Y+40, r25	; 0x28
    4100:	a9 a7       	std	Y+41, r26	; 0x29
    4102:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4104:	6f a1       	ldd	r22, Y+39	; 0x27
    4106:	78 a5       	ldd	r23, Y+40	; 0x28
    4108:	89 a5       	ldd	r24, Y+41	; 0x29
    410a:	9a a5       	ldd	r25, Y+42	; 0x2a
    410c:	20 e0       	ldi	r18, 0x00	; 0
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	4a e7       	ldi	r20, 0x7A	; 122
    4112:	55 e4       	ldi	r21, 0x45	; 69
    4114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4118:	dc 01       	movw	r26, r24
    411a:	cb 01       	movw	r24, r22
    411c:	8b a3       	std	Y+35, r24	; 0x23
    411e:	9c a3       	std	Y+36, r25	; 0x24
    4120:	ad a3       	std	Y+37, r26	; 0x25
    4122:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4124:	6b a1       	ldd	r22, Y+35	; 0x23
    4126:	7c a1       	ldd	r23, Y+36	; 0x24
    4128:	8d a1       	ldd	r24, Y+37	; 0x25
    412a:	9e a1       	ldd	r25, Y+38	; 0x26
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	40 e8       	ldi	r20, 0x80	; 128
    4132:	5f e3       	ldi	r21, 0x3F	; 63
    4134:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4138:	88 23       	and	r24, r24
    413a:	2c f4       	brge	.+10     	; 0x4146 <LCD_voidSendData+0x5c4>
		__ticks = 1;
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	9a a3       	std	Y+34, r25	; 0x22
    4142:	89 a3       	std	Y+33, r24	; 0x21
    4144:	3f c0       	rjmp	.+126    	; 0x41c4 <LCD_voidSendData+0x642>
	else if (__tmp > 65535)
    4146:	6b a1       	ldd	r22, Y+35	; 0x23
    4148:	7c a1       	ldd	r23, Y+36	; 0x24
    414a:	8d a1       	ldd	r24, Y+37	; 0x25
    414c:	9e a1       	ldd	r25, Y+38	; 0x26
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	3f ef       	ldi	r19, 0xFF	; 255
    4152:	4f e7       	ldi	r20, 0x7F	; 127
    4154:	57 e4       	ldi	r21, 0x47	; 71
    4156:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    415a:	18 16       	cp	r1, r24
    415c:	4c f5       	brge	.+82     	; 0x41b0 <LCD_voidSendData+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    415e:	6f a1       	ldd	r22, Y+39	; 0x27
    4160:	78 a5       	ldd	r23, Y+40	; 0x28
    4162:	89 a5       	ldd	r24, Y+41	; 0x29
    4164:	9a a5       	ldd	r25, Y+42	; 0x2a
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	40 e2       	ldi	r20, 0x20	; 32
    416c:	51 e4       	ldi	r21, 0x41	; 65
    416e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	bc 01       	movw	r22, r24
    4178:	cd 01       	movw	r24, r26
    417a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	9a a3       	std	Y+34, r25	; 0x22
    4184:	89 a3       	std	Y+33, r24	; 0x21
    4186:	0f c0       	rjmp	.+30     	; 0x41a6 <LCD_voidSendData+0x624>
    4188:	80 e9       	ldi	r24, 0x90	; 144
    418a:	91 e0       	ldi	r25, 0x01	; 1
    418c:	98 a3       	std	Y+32, r25	; 0x20
    418e:	8f 8f       	std	Y+31, r24	; 0x1f
    4190:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4192:	98 a1       	ldd	r25, Y+32	; 0x20
    4194:	01 97       	sbiw	r24, 0x01	; 1
    4196:	f1 f7       	brne	.-4      	; 0x4194 <LCD_voidSendData+0x612>
    4198:	98 a3       	std	Y+32, r25	; 0x20
    419a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    419c:	89 a1       	ldd	r24, Y+33	; 0x21
    419e:	9a a1       	ldd	r25, Y+34	; 0x22
    41a0:	01 97       	sbiw	r24, 0x01	; 1
    41a2:	9a a3       	std	Y+34, r25	; 0x22
    41a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41a6:	89 a1       	ldd	r24, Y+33	; 0x21
    41a8:	9a a1       	ldd	r25, Y+34	; 0x22
    41aa:	00 97       	sbiw	r24, 0x00	; 0
    41ac:	69 f7       	brne	.-38     	; 0x4188 <LCD_voidSendData+0x606>
    41ae:	14 c0       	rjmp	.+40     	; 0x41d8 <LCD_voidSendData+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b0:	6b a1       	ldd	r22, Y+35	; 0x23
    41b2:	7c a1       	ldd	r23, Y+36	; 0x24
    41b4:	8d a1       	ldd	r24, Y+37	; 0x25
    41b6:	9e a1       	ldd	r25, Y+38	; 0x26
    41b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41bc:	dc 01       	movw	r26, r24
    41be:	cb 01       	movw	r24, r22
    41c0:	9a a3       	std	Y+34, r25	; 0x22
    41c2:	89 a3       	std	Y+33, r24	; 0x21
    41c4:	89 a1       	ldd	r24, Y+33	; 0x21
    41c6:	9a a1       	ldd	r25, Y+34	; 0x22
    41c8:	9e 8f       	std	Y+30, r25	; 0x1e
    41ca:	8d 8f       	std	Y+29, r24	; 0x1d
    41cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	f1 f7       	brne	.-4      	; 0x41d0 <LCD_voidSendData+0x64e>
    41d4:	9e 8f       	std	Y+30, r25	; 0x1e
    41d6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
    41d8:	fe 01       	movw	r30, r28
    41da:	ed 59       	subi	r30, 0x9D	; 157
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	80 81       	ld	r24, Z
    41e0:	98 2f       	mov	r25, r24
    41e2:	91 70       	andi	r25, 0x01	; 1
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	60 e0       	ldi	r22, 0x00	; 0
    41e8:	49 2f       	mov	r20, r25
    41ea:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
    41ee:	fe 01       	movw	r30, r28
    41f0:	ed 59       	subi	r30, 0x9D	; 157
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	80 81       	ld	r24, Z
    41f6:	86 95       	lsr	r24
    41f8:	98 2f       	mov	r25, r24
    41fa:	91 70       	andi	r25, 0x01	; 1
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	61 e0       	ldi	r22, 0x01	; 1
    4200:	49 2f       	mov	r20, r25
    4202:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
    4206:	fe 01       	movw	r30, r28
    4208:	ed 59       	subi	r30, 0x9D	; 157
    420a:	ff 4f       	sbci	r31, 0xFF	; 255
    420c:	80 81       	ld	r24, Z
    420e:	86 95       	lsr	r24
    4210:	86 95       	lsr	r24
    4212:	98 2f       	mov	r25, r24
    4214:	91 70       	andi	r25, 0x01	; 1
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	62 e0       	ldi	r22, 0x02	; 2
    421a:	49 2f       	mov	r20, r25
    421c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
    4220:	fe 01       	movw	r30, r28
    4222:	ed 59       	subi	r30, 0x9D	; 157
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	80 81       	ld	r24, Z
    4228:	86 95       	lsr	r24
    422a:	86 95       	lsr	r24
    422c:	86 95       	lsr	r24
    422e:	98 2f       	mov	r25, r24
    4230:	91 70       	andi	r25, 0x01	; 1
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	64 e0       	ldi	r22, 0x04	; 4
    4236:	49 2f       	mov	r20, r25
    4238:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	a0 e8       	ldi	r26, 0x80	; 128
    4242:	bf e3       	ldi	r27, 0x3F	; 63
    4244:	89 8f       	std	Y+25, r24	; 0x19
    4246:	9a 8f       	std	Y+26, r25	; 0x1a
    4248:	ab 8f       	std	Y+27, r26	; 0x1b
    424a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424c:	69 8d       	ldd	r22, Y+25	; 0x19
    424e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4250:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4252:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	4a e7       	ldi	r20, 0x7A	; 122
    425a:	55 e4       	ldi	r21, 0x45	; 69
    425c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	8d 8b       	std	Y+21, r24	; 0x15
    4266:	9e 8b       	std	Y+22, r25	; 0x16
    4268:	af 8b       	std	Y+23, r26	; 0x17
    426a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    426c:	6d 89       	ldd	r22, Y+21	; 0x15
    426e:	7e 89       	ldd	r23, Y+22	; 0x16
    4270:	8f 89       	ldd	r24, Y+23	; 0x17
    4272:	98 8d       	ldd	r25, Y+24	; 0x18
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	40 e8       	ldi	r20, 0x80	; 128
    427a:	5f e3       	ldi	r21, 0x3F	; 63
    427c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4280:	88 23       	and	r24, r24
    4282:	2c f4       	brge	.+10     	; 0x428e <LCD_voidSendData+0x70c>
		__ticks = 1;
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	9c 8b       	std	Y+20, r25	; 0x14
    428a:	8b 8b       	std	Y+19, r24	; 0x13
    428c:	3f c0       	rjmp	.+126    	; 0x430c <LCD_voidSendData+0x78a>
	else if (__tmp > 65535)
    428e:	6d 89       	ldd	r22, Y+21	; 0x15
    4290:	7e 89       	ldd	r23, Y+22	; 0x16
    4292:	8f 89       	ldd	r24, Y+23	; 0x17
    4294:	98 8d       	ldd	r25, Y+24	; 0x18
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	3f ef       	ldi	r19, 0xFF	; 255
    429a:	4f e7       	ldi	r20, 0x7F	; 127
    429c:	57 e4       	ldi	r21, 0x47	; 71
    429e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42a2:	18 16       	cp	r1, r24
    42a4:	4c f5       	brge	.+82     	; 0x42f8 <LCD_voidSendData+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a6:	69 8d       	ldd	r22, Y+25	; 0x19
    42a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	40 e2       	ldi	r20, 0x20	; 32
    42b4:	51 e4       	ldi	r21, 0x41	; 65
    42b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	bc 01       	movw	r22, r24
    42c0:	cd 01       	movw	r24, r26
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	9c 8b       	std	Y+20, r25	; 0x14
    42cc:	8b 8b       	std	Y+19, r24	; 0x13
    42ce:	0f c0       	rjmp	.+30     	; 0x42ee <LCD_voidSendData+0x76c>
    42d0:	80 e9       	ldi	r24, 0x90	; 144
    42d2:	91 e0       	ldi	r25, 0x01	; 1
    42d4:	9a 8b       	std	Y+18, r25	; 0x12
    42d6:	89 8b       	std	Y+17, r24	; 0x11
    42d8:	89 89       	ldd	r24, Y+17	; 0x11
    42da:	9a 89       	ldd	r25, Y+18	; 0x12
    42dc:	01 97       	sbiw	r24, 0x01	; 1
    42de:	f1 f7       	brne	.-4      	; 0x42dc <LCD_voidSendData+0x75a>
    42e0:	9a 8b       	std	Y+18, r25	; 0x12
    42e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e4:	8b 89       	ldd	r24, Y+19	; 0x13
    42e6:	9c 89       	ldd	r25, Y+20	; 0x14
    42e8:	01 97       	sbiw	r24, 0x01	; 1
    42ea:	9c 8b       	std	Y+20, r25	; 0x14
    42ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ee:	8b 89       	ldd	r24, Y+19	; 0x13
    42f0:	9c 89       	ldd	r25, Y+20	; 0x14
    42f2:	00 97       	sbiw	r24, 0x00	; 0
    42f4:	69 f7       	brne	.-38     	; 0x42d0 <LCD_voidSendData+0x74e>
    42f6:	14 c0       	rjmp	.+40     	; 0x4320 <LCD_voidSendData+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f8:	6d 89       	ldd	r22, Y+21	; 0x15
    42fa:	7e 89       	ldd	r23, Y+22	; 0x16
    42fc:	8f 89       	ldd	r24, Y+23	; 0x17
    42fe:	98 8d       	ldd	r25, Y+24	; 0x18
    4300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	9c 8b       	std	Y+20, r25	; 0x14
    430a:	8b 8b       	std	Y+19, r24	; 0x13
    430c:	8b 89       	ldd	r24, Y+19	; 0x13
    430e:	9c 89       	ldd	r25, Y+20	; 0x14
    4310:	98 8b       	std	Y+16, r25	; 0x10
    4312:	8f 87       	std	Y+15, r24	; 0x0f
    4314:	8f 85       	ldd	r24, Y+15	; 0x0f
    4316:	98 89       	ldd	r25, Y+16	; 0x10
    4318:	01 97       	sbiw	r24, 0x01	; 1
    431a:	f1 f7       	brne	.-4      	; 0x4318 <LCD_voidSendData+0x796>
    431c:	98 8b       	std	Y+16, r25	; 0x10
    431e:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	62 e0       	ldi	r22, 0x02	; 2
    4324:	40 e0       	ldi	r20, 0x00	; 0
    4326:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
    432a:	80 e0       	ldi	r24, 0x00	; 0
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	a0 e8       	ldi	r26, 0x80	; 128
    4330:	bf e3       	ldi	r27, 0x3F	; 63
    4332:	8b 87       	std	Y+11, r24	; 0x0b
    4334:	9c 87       	std	Y+12, r25	; 0x0c
    4336:	ad 87       	std	Y+13, r26	; 0x0d
    4338:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    433a:	6b 85       	ldd	r22, Y+11	; 0x0b
    433c:	7c 85       	ldd	r23, Y+12	; 0x0c
    433e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4340:	9e 85       	ldd	r25, Y+14	; 0x0e
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	4a e7       	ldi	r20, 0x7A	; 122
    4348:	55 e4       	ldi	r21, 0x45	; 69
    434a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	8f 83       	std	Y+7, r24	; 0x07
    4354:	98 87       	std	Y+8, r25	; 0x08
    4356:	a9 87       	std	Y+9, r26	; 0x09
    4358:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    435a:	6f 81       	ldd	r22, Y+7	; 0x07
    435c:	78 85       	ldd	r23, Y+8	; 0x08
    435e:	89 85       	ldd	r24, Y+9	; 0x09
    4360:	9a 85       	ldd	r25, Y+10	; 0x0a
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e8       	ldi	r20, 0x80	; 128
    4368:	5f e3       	ldi	r21, 0x3F	; 63
    436a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    436e:	88 23       	and	r24, r24
    4370:	2c f4       	brge	.+10     	; 0x437c <LCD_voidSendData+0x7fa>
		__ticks = 1;
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	9e 83       	std	Y+6, r25	; 0x06
    4378:	8d 83       	std	Y+5, r24	; 0x05
    437a:	3f c0       	rjmp	.+126    	; 0x43fa <LCD_voidSendData+0x878>
	else if (__tmp > 65535)
    437c:	6f 81       	ldd	r22, Y+7	; 0x07
    437e:	78 85       	ldd	r23, Y+8	; 0x08
    4380:	89 85       	ldd	r24, Y+9	; 0x09
    4382:	9a 85       	ldd	r25, Y+10	; 0x0a
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	3f ef       	ldi	r19, 0xFF	; 255
    4388:	4f e7       	ldi	r20, 0x7F	; 127
    438a:	57 e4       	ldi	r21, 0x47	; 71
    438c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4390:	18 16       	cp	r1, r24
    4392:	4c f5       	brge	.+82     	; 0x43e6 <LCD_voidSendData+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4394:	6b 85       	ldd	r22, Y+11	; 0x0b
    4396:	7c 85       	ldd	r23, Y+12	; 0x0c
    4398:	8d 85       	ldd	r24, Y+13	; 0x0d
    439a:	9e 85       	ldd	r25, Y+14	; 0x0e
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	40 e2       	ldi	r20, 0x20	; 32
    43a2:	51 e4       	ldi	r21, 0x41	; 65
    43a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	bc 01       	movw	r22, r24
    43ae:	cd 01       	movw	r24, r26
    43b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b4:	dc 01       	movw	r26, r24
    43b6:	cb 01       	movw	r24, r22
    43b8:	9e 83       	std	Y+6, r25	; 0x06
    43ba:	8d 83       	std	Y+5, r24	; 0x05
    43bc:	0f c0       	rjmp	.+30     	; 0x43dc <LCD_voidSendData+0x85a>
    43be:	80 e9       	ldi	r24, 0x90	; 144
    43c0:	91 e0       	ldi	r25, 0x01	; 1
    43c2:	9c 83       	std	Y+4, r25	; 0x04
    43c4:	8b 83       	std	Y+3, r24	; 0x03
    43c6:	8b 81       	ldd	r24, Y+3	; 0x03
    43c8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	f1 f7       	brne	.-4      	; 0x43ca <LCD_voidSendData+0x848>
    43ce:	9c 83       	std	Y+4, r25	; 0x04
    43d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d2:	8d 81       	ldd	r24, Y+5	; 0x05
    43d4:	9e 81       	ldd	r25, Y+6	; 0x06
    43d6:	01 97       	sbiw	r24, 0x01	; 1
    43d8:	9e 83       	std	Y+6, r25	; 0x06
    43da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43dc:	8d 81       	ldd	r24, Y+5	; 0x05
    43de:	9e 81       	ldd	r25, Y+6	; 0x06
    43e0:	00 97       	sbiw	r24, 0x00	; 0
    43e2:	69 f7       	brne	.-38     	; 0x43be <LCD_voidSendData+0x83c>
    43e4:	14 c0       	rjmp	.+40     	; 0x440e <LCD_voidSendData+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e6:	6f 81       	ldd	r22, Y+7	; 0x07
    43e8:	78 85       	ldd	r23, Y+8	; 0x08
    43ea:	89 85       	ldd	r24, Y+9	; 0x09
    43ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	9e 83       	std	Y+6, r25	; 0x06
    43f8:	8d 83       	std	Y+5, r24	; 0x05
    43fa:	8d 81       	ldd	r24, Y+5	; 0x05
    43fc:	9e 81       	ldd	r25, Y+6	; 0x06
    43fe:	9a 83       	std	Y+2, r25	; 0x02
    4400:	89 83       	std	Y+1, r24	; 0x01
    4402:	89 81       	ldd	r24, Y+1	; 0x01
    4404:	9a 81       	ldd	r25, Y+2	; 0x02
    4406:	01 97       	sbiw	r24, 0x01	; 1
    4408:	f1 f7       	brne	.-4      	; 0x4406 <LCD_voidSendData+0x884>
    440a:	9a 83       	std	Y+2, r25	; 0x02
    440c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif
}
    440e:	cd 59       	subi	r28, 0x9D	; 157
    4410:	df 4f       	sbci	r29, 0xFF	; 255
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	f8 94       	cli
    4416:	de bf       	out	0x3e, r29	; 62
    4418:	0f be       	out	0x3f, r0	; 63
    441a:	cd bf       	out	0x3d, r28	; 61
    441c:	cf 91       	pop	r28
    441e:	df 91       	pop	r29
    4420:	1f 91       	pop	r17
    4422:	0f 91       	pop	r16
    4424:	08 95       	ret

00004426 <LCD_voidDisplayString>:


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
    4426:	df 93       	push	r29
    4428:	cf 93       	push	r28
    442a:	00 d0       	rcall	.+0      	; 0x442c <LCD_voidDisplayString+0x6>
    442c:	0f 92       	push	r0
    442e:	cd b7       	in	r28, 0x3d	; 61
    4430:	de b7       	in	r29, 0x3e	; 62
    4432:	9b 83       	std	Y+3, r25	; 0x03
    4434:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    4436:	19 82       	std	Y+1, r1	; 0x01
    4438:	0e c0       	rjmp	.+28     	; 0x4456 <LCD_voidDisplayString+0x30>
	while(str[i] != '\0') {
		LCD_voidSendData(str[i]);
    443a:	89 81       	ldd	r24, Y+1	; 0x01
    443c:	28 2f       	mov	r18, r24
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	8a 81       	ldd	r24, Y+2	; 0x02
    4442:	9b 81       	ldd	r25, Y+3	; 0x03
    4444:	fc 01       	movw	r30, r24
    4446:	e2 0f       	add	r30, r18
    4448:	f3 1f       	adc	r31, r19
    444a:	80 81       	ld	r24, Z
    444c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <LCD_voidSendData>
		i++;
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	8f 5f       	subi	r24, 0xFF	; 255
    4454:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
	u8 i = 0;
	while(str[i] != '\0') {
    4456:	89 81       	ldd	r24, Y+1	; 0x01
    4458:	28 2f       	mov	r18, r24
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	8a 81       	ldd	r24, Y+2	; 0x02
    445e:	9b 81       	ldd	r25, Y+3	; 0x03
    4460:	fc 01       	movw	r30, r24
    4462:	e2 0f       	add	r30, r18
    4464:	f3 1f       	adc	r31, r19
    4466:	80 81       	ld	r24, Z
    4468:	88 23       	and	r24, r24
    446a:	39 f7       	brne	.-50     	; 0x443a <LCD_voidDisplayString+0x14>
		LCD_voidSendData(str[i]);
		i++;
	}
}
    446c:	0f 90       	pop	r0
    446e:	0f 90       	pop	r0
    4470:	0f 90       	pop	r0
    4472:	cf 91       	pop	r28
    4474:	df 91       	pop	r29
    4476:	08 95       	ret

00004478 <LCD_voidSetCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_voidSetCursor(u8 copy_u8row, u8 copy_u8_col) {
    4478:	df 93       	push	r29
    447a:	cf 93       	push	r28
    447c:	00 d0       	rcall	.+0      	; 0x447e <LCD_voidSetCursor+0x6>
    447e:	00 d0       	rcall	.+0      	; 0x4480 <LCD_voidSetCursor+0x8>
    4480:	0f 92       	push	r0
    4482:	cd b7       	in	r28, 0x3d	; 61
    4484:	de b7       	in	r29, 0x3e	; 62
    4486:	8a 83       	std	Y+2, r24	; 0x02
    4488:	6b 83       	std	Y+3, r22	; 0x03
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
    448a:	8a 81       	ldd	r24, Y+2	; 0x02
    448c:	28 2f       	mov	r18, r24
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	3d 83       	std	Y+5, r19	; 0x05
    4492:	2c 83       	std	Y+4, r18	; 0x04
    4494:	8c 81       	ldd	r24, Y+4	; 0x04
    4496:	9d 81       	ldd	r25, Y+5	; 0x05
    4498:	81 30       	cpi	r24, 0x01	; 1
    449a:	91 05       	cpc	r25, r1
    449c:	c1 f0       	breq	.+48     	; 0x44ce <LCD_voidSetCursor+0x56>
    449e:	2c 81       	ldd	r18, Y+4	; 0x04
    44a0:	3d 81       	ldd	r19, Y+5	; 0x05
    44a2:	22 30       	cpi	r18, 0x02	; 2
    44a4:	31 05       	cpc	r19, r1
    44a6:	2c f4       	brge	.+10     	; 0x44b2 <LCD_voidSetCursor+0x3a>
    44a8:	8c 81       	ldd	r24, Y+4	; 0x04
    44aa:	9d 81       	ldd	r25, Y+5	; 0x05
    44ac:	00 97       	sbiw	r24, 0x00	; 0
    44ae:	61 f0       	breq	.+24     	; 0x44c8 <LCD_voidSetCursor+0x50>
    44b0:	19 c0       	rjmp	.+50     	; 0x44e4 <LCD_voidSetCursor+0x6c>
    44b2:	2c 81       	ldd	r18, Y+4	; 0x04
    44b4:	3d 81       	ldd	r19, Y+5	; 0x05
    44b6:	22 30       	cpi	r18, 0x02	; 2
    44b8:	31 05       	cpc	r19, r1
    44ba:	69 f0       	breq	.+26     	; 0x44d6 <LCD_voidSetCursor+0x5e>
    44bc:	8c 81       	ldd	r24, Y+4	; 0x04
    44be:	9d 81       	ldd	r25, Y+5	; 0x05
    44c0:	83 30       	cpi	r24, 0x03	; 3
    44c2:	91 05       	cpc	r25, r1
    44c4:	61 f0       	breq	.+24     	; 0x44de <LCD_voidSetCursor+0x66>
    44c6:	0e c0       	rjmp	.+28     	; 0x44e4 <LCD_voidSetCursor+0x6c>
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
    44c8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ca:	89 83       	std	Y+1, r24	; 0x01
    44cc:	0b c0       	rjmp	.+22     	; 0x44e4 <LCD_voidSetCursor+0x6c>
			break;
		case LINE1:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x40;
    44ce:	8b 81       	ldd	r24, Y+3	; 0x03
    44d0:	80 5c       	subi	r24, 0xC0	; 192
    44d2:	89 83       	std	Y+1, r24	; 0x01
    44d4:	07 c0       	rjmp	.+14     	; 0x44e4 <LCD_voidSetCursor+0x6c>
			break;
		case LINE2:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x10;
    44d6:	8b 81       	ldd	r24, Y+3	; 0x03
    44d8:	80 5f       	subi	r24, 0xF0	; 240
    44da:	89 83       	std	Y+1, r24	; 0x01
    44dc:	03 c0       	rjmp	.+6      	; 0x44e4 <LCD_voidSetCursor+0x6c>
			break;
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
    44de:	8b 81       	ldd	r24, Y+3	; 0x03
    44e0:	80 5b       	subi	r24, 0xB0	; 176
    44e2:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_voidSendCommand(LCD_MEMORY_ADDRESS | LINE0_ADDRESS);
    44e4:	89 81       	ldd	r24, Y+1	; 0x01
    44e6:	80 68       	ori	r24, 0x80	; 128
    44e8:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendCommand>
//					break;
//			default:
//				LCD_voidDisplayString("default", 0, 0);
//				break;
//		}
}
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0
    44f2:	0f 90       	pop	r0
    44f4:	0f 90       	pop	r0
    44f6:	cf 91       	pop	r28
    44f8:	df 91       	pop	r29
    44fa:	08 95       	ret

000044fc <LCD_voidIntgerToString>:


// LCD only understands ASCII, so this converts Int to a string
void LCD_voidIntgerToString(u32 copy_u32data) {
    44fc:	df 93       	push	r29
    44fe:	cf 93       	push	r28
    4500:	cd b7       	in	r28, 0x3d	; 61
    4502:	de b7       	in	r29, 0x3e	; 62
    4504:	64 97       	sbiw	r28, 0x14	; 20
    4506:	0f b6       	in	r0, 0x3f	; 63
    4508:	f8 94       	cli
    450a:	de bf       	out	0x3e, r29	; 62
    450c:	0f be       	out	0x3f, r0	; 63
    450e:	cd bf       	out	0x3d, r28	; 61
    4510:	69 8b       	std	Y+17, r22	; 0x11
    4512:	7a 8b       	std	Y+18, r23	; 0x12
    4514:	8b 8b       	std	Y+19, r24	; 0x13
    4516:	9c 8b       	std	Y+20, r25	; 0x14
	// A string to hold the ASCII values
	cu8 buffer[16];

	// Converts data to its ASCII
	itoa(copy_u32data, buffer, 10);
    4518:	89 89       	ldd	r24, Y+17	; 0x11
    451a:	9a 89       	ldd	r25, Y+18	; 0x12
    451c:	9e 01       	movw	r18, r28
    451e:	2f 5f       	subi	r18, 0xFF	; 255
    4520:	3f 4f       	sbci	r19, 0xFF	; 255
    4522:	b9 01       	movw	r22, r18
    4524:	4a e0       	ldi	r20, 0x0A	; 10
    4526:	50 e0       	ldi	r21, 0x00	; 0
    4528:	0e 94 58 24 	call	0x48b0	; 0x48b0 <itoa>

	// Display string with the results in the buffer
	LCD_voidDisplayString(buffer);
    452c:	ce 01       	movw	r24, r28
    452e:	01 96       	adiw	r24, 0x01	; 1
    4530:	0e 94 13 22 	call	0x4426	; 0x4426 <LCD_voidDisplayString>
}
    4534:	64 96       	adiw	r28, 0x14	; 20
    4536:	0f b6       	in	r0, 0x3f	; 63
    4538:	f8 94       	cli
    453a:	de bf       	out	0x3e, r29	; 62
    453c:	0f be       	out	0x3f, r0	; 63
    453e:	cd bf       	out	0x3d, r28	; 61
    4540:	cf 91       	pop	r28
    4542:	df 91       	pop	r29
    4544:	08 95       	ret

00004546 <LCD_voidClearScreen>:

// Clears the LCD from any garbage
void LCD_voidClearScreen(void) {
    4546:	df 93       	push	r29
    4548:	cf 93       	push	r28
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	0e 94 6f 19 	call	0x32de	; 0x32de <LCD_voidSendCommand>
}
    4554:	cf 91       	pop	r28
    4556:	df 91       	pop	r29
    4558:	08 95       	ret

0000455a <KEYPAD_voidInit>:
u8 KPD_COL_PIN_VAL [] = KPD_ARR_COL_PIN;

u8 KPD_DATA [KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VALUES;


void KEYPAD_voidInit(void) {
    455a:	df 93       	push	r29
    455c:	cf 93       	push	r28
    455e:	00 d0       	rcall	.+0      	; 0x4560 <KEYPAD_voidInit+0x6>
    4560:	cd b7       	in	r28, 0x3d	; 61
    4562:	de b7       	in	r29, 0x3e	; 62
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    4564:	1a 82       	std	Y+2, r1	; 0x02
    4566:	29 c0       	rjmp	.+82     	; 0x45ba <KEYPAD_voidInit+0x60>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
    4568:	8a 81       	ldd	r24, Y+2	; 0x02
    456a:	88 2f       	mov	r24, r24
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	fc 01       	movw	r30, r24
    4570:	e1 57       	subi	r30, 0x71	; 113
    4572:	fe 4f       	sbci	r31, 0xFE	; 254
    4574:	20 81       	ld	r18, Z
    4576:	8a 81       	ldd	r24, Y+2	; 0x02
    4578:	88 2f       	mov	r24, r24
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	fc 01       	movw	r30, r24
    457e:	ed 56       	subi	r30, 0x6D	; 109
    4580:	fe 4f       	sbci	r31, 0xFE	; 254
    4582:	90 81       	ld	r25, Z
    4584:	82 2f       	mov	r24, r18
    4586:	69 2f       	mov	r22, r25
    4588:	41 e0       	ldi	r20, 0x01	; 1
    458a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
    458e:	8a 81       	ldd	r24, Y+2	; 0x02
    4590:	88 2f       	mov	r24, r24
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	fc 01       	movw	r30, r24
    4596:	e1 57       	subi	r30, 0x71	; 113
    4598:	fe 4f       	sbci	r31, 0xFE	; 254
    459a:	20 81       	ld	r18, Z
    459c:	8a 81       	ldd	r24, Y+2	; 0x02
    459e:	88 2f       	mov	r24, r24
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	fc 01       	movw	r30, r24
    45a4:	ed 56       	subi	r30, 0x6D	; 109
    45a6:	fe 4f       	sbci	r31, 0xFE	; 254
    45a8:	90 81       	ld	r25, Z
    45aa:	82 2f       	mov	r24, r18
    45ac:	69 2f       	mov	r22, r25
    45ae:	41 e0       	ldi	r20, 0x01	; 1
    45b0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>

void KEYPAD_voidInit(void) {
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    45b4:	8a 81       	ldd	r24, Y+2	; 0x02
    45b6:	8f 5f       	subi	r24, 0xFF	; 255
    45b8:	8a 83       	std	Y+2, r24	; 0x02
    45ba:	8a 81       	ldd	r24, Y+2	; 0x02
    45bc:	84 30       	cpi	r24, 0x04	; 4
    45be:	a0 f2       	brcs	.-88     	; 0x4568 <KEYPAD_voidInit+0xe>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    45c0:	19 82       	std	Y+1, r1	; 0x01
    45c2:	16 c0       	rjmp	.+44     	; 0x45f0 <KEYPAD_voidInit+0x96>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
    45c4:	89 81       	ldd	r24, Y+1	; 0x01
    45c6:	88 2f       	mov	r24, r24
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	fc 01       	movw	r30, r24
    45cc:	e9 56       	subi	r30, 0x69	; 105
    45ce:	fe 4f       	sbci	r31, 0xFE	; 254
    45d0:	20 81       	ld	r18, Z
    45d2:	89 81       	ldd	r24, Y+1	; 0x01
    45d4:	88 2f       	mov	r24, r24
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	fc 01       	movw	r30, r24
    45da:	e5 56       	subi	r30, 0x65	; 101
    45dc:	fe 4f       	sbci	r31, 0xFE	; 254
    45de:	90 81       	ld	r25, Z
    45e0:	82 2f       	mov	r24, r18
    45e2:	69 2f       	mov	r22, r25
    45e4:	40 e0       	ldi	r20, 0x00	; 0
    45e6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    45ea:	89 81       	ldd	r24, Y+1	; 0x01
    45ec:	8f 5f       	subi	r24, 0xFF	; 255
    45ee:	89 83       	std	Y+1, r24	; 0x01
    45f0:	89 81       	ldd	r24, Y+1	; 0x01
    45f2:	84 30       	cpi	r24, 0x04	; 4
    45f4:	38 f3       	brcs	.-50     	; 0x45c4 <KEYPAD_voidInit+0x6a>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
	}
}
    45f6:	0f 90       	pop	r0
    45f8:	0f 90       	pop	r0
    45fa:	cf 91       	pop	r28
    45fc:	df 91       	pop	r29
    45fe:	08 95       	ret

00004600 <KEYPAD_u8getPressedKey>:


u8 KEYPAD_u8getPressedKey(void) {
    4600:	df 93       	push	r29
    4602:	cf 93       	push	r28
    4604:	00 d0       	rcall	.+0      	; 0x4606 <KEYPAD_u8getPressedKey+0x6>
    4606:	0f 92       	push	r0
    4608:	cd b7       	in	r28, 0x3d	; 61
    460a:	de b7       	in	r29, 0x3e	; 62
	u8 row, col, dataValue = 0xff;
    460c:	8f ef       	ldi	r24, 0xFF	; 255
    460e:	89 83       	std	Y+1, r24	; 0x01
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    4610:	1b 82       	std	Y+3, r1	; 0x03
    4612:	6a c0       	rjmp	.+212    	; 0x46e8 <KEYPAD_u8getPressedKey+0xe8>

			// I set the pin by '1' for the row, and will iterate
			GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], PIN_OUTPUT);
    4614:	8b 81       	ldd	r24, Y+3	; 0x03
    4616:	88 2f       	mov	r24, r24
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	fc 01       	movw	r30, r24
    461c:	e1 57       	subi	r30, 0x71	; 113
    461e:	fe 4f       	sbci	r31, 0xFE	; 254
    4620:	20 81       	ld	r18, Z
    4622:	8b 81       	ldd	r24, Y+3	; 0x03
    4624:	88 2f       	mov	r24, r24
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	fc 01       	movw	r30, r24
    462a:	ed 56       	subi	r30, 0x6D	; 109
    462c:	fe 4f       	sbci	r31, 0xFE	; 254
    462e:	90 81       	ld	r25, Z
    4630:	82 2f       	mov	r24, r18
    4632:	69 2f       	mov	r22, r25
    4634:	41 e0       	ldi	r20, 0x01	; 1
    4636:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
    463a:	8b 81       	ldd	r24, Y+3	; 0x03
    463c:	88 2f       	mov	r24, r24
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	fc 01       	movw	r30, r24
    4642:	e1 57       	subi	r30, 0x71	; 113
    4644:	fe 4f       	sbci	r31, 0xFE	; 254
    4646:	20 81       	ld	r18, Z
    4648:	8b 81       	ldd	r24, Y+3	; 0x03
    464a:	88 2f       	mov	r24, r24
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	fc 01       	movw	r30, r24
    4650:	ed 56       	subi	r30, 0x6D	; 109
    4652:	fe 4f       	sbci	r31, 0xFE	; 254
    4654:	90 81       	ld	r25, Z
    4656:	82 2f       	mov	r24, r18
    4658:	69 2f       	mov	r22, r25
    465a:	40 e0       	ldi	r20, 0x00	; 0
    465c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    4660:	1a 82       	std	Y+2, r1	; 0x02
    4662:	29 c0       	rjmp	.+82     	; 0x46b6 <KEYPAD_u8getPressedKey+0xb6>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
    4664:	8a 81       	ldd	r24, Y+2	; 0x02
    4666:	88 2f       	mov	r24, r24
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	fc 01       	movw	r30, r24
    466c:	e9 56       	subi	r30, 0x69	; 105
    466e:	fe 4f       	sbci	r31, 0xFE	; 254
    4670:	20 81       	ld	r18, Z
    4672:	8a 81       	ldd	r24, Y+2	; 0x02
    4674:	88 2f       	mov	r24, r24
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	fc 01       	movw	r30, r24
    467a:	e5 56       	subi	r30, 0x65	; 101
    467c:	fe 4f       	sbci	r31, 0xFE	; 254
    467e:	90 81       	ld	r25, Z
    4680:	82 2f       	mov	r24, r18
    4682:	69 2f       	mov	r22, r25
    4684:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_u8GetPinValue>
    4688:	88 23       	and	r24, r24
    468a:	91 f4       	brne	.+36     	; 0x46b0 <KEYPAD_u8getPressedKey+0xb0>
					dataValue = KPD_DATA[row][col];
    468c:	8b 81       	ldd	r24, Y+3	; 0x03
    468e:	48 2f       	mov	r20, r24
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	8a 81       	ldd	r24, Y+2	; 0x02
    4694:	28 2f       	mov	r18, r24
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	ca 01       	movw	r24, r20
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	88 0f       	add	r24, r24
    46a0:	99 1f       	adc	r25, r25
    46a2:	82 0f       	add	r24, r18
    46a4:	93 1f       	adc	r25, r19
    46a6:	fc 01       	movw	r30, r24
    46a8:	e1 56       	subi	r30, 0x61	; 97
    46aa:	fe 4f       	sbci	r31, 0xFE	; 254
    46ac:	80 81       	ld	r24, Z
    46ae:	89 83       	std	Y+1, r24	; 0x01

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    46b0:	8a 81       	ldd	r24, Y+2	; 0x02
    46b2:	8f 5f       	subi	r24, 0xFF	; 255
    46b4:	8a 83       	std	Y+2, r24	; 0x02
    46b6:	8a 81       	ldd	r24, Y+2	; 0x02
    46b8:	84 30       	cpi	r24, 0x04	; 4
    46ba:	a0 f2       	brcs	.-88     	; 0x4664 <KEYPAD_u8getPressedKey+0x64>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
					dataValue = KPD_DATA[row][col];
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
    46bc:	8b 81       	ldd	r24, Y+3	; 0x03
    46be:	88 2f       	mov	r24, r24
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	fc 01       	movw	r30, r24
    46c4:	e1 57       	subi	r30, 0x71	; 113
    46c6:	fe 4f       	sbci	r31, 0xFE	; 254
    46c8:	20 81       	ld	r18, Z
    46ca:	8b 81       	ldd	r24, Y+3	; 0x03
    46cc:	88 2f       	mov	r24, r24
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	fc 01       	movw	r30, r24
    46d2:	ed 56       	subi	r30, 0x6D	; 109
    46d4:	fe 4f       	sbci	r31, 0xFE	; 254
    46d6:	90 81       	ld	r25, Z
    46d8:	82 2f       	mov	r24, r18
    46da:	69 2f       	mov	r22, r25
    46dc:	41 e0       	ldi	r20, 0x01	; 1
    46de:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <GPIO_voidSetPinValue>


u8 KEYPAD_u8getPressedKey(void) {
	u8 row, col, dataValue = 0xff;
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    46e2:	8b 81       	ldd	r24, Y+3	; 0x03
    46e4:	8f 5f       	subi	r24, 0xFF	; 255
    46e6:	8b 83       	std	Y+3, r24	; 0x03
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	84 30       	cpi	r24, 0x04	; 4
    46ec:	08 f4       	brcc	.+2      	; 0x46f0 <KEYPAD_u8getPressedKey+0xf0>
    46ee:	92 cf       	rjmp	.-220    	; 0x4614 <KEYPAD_u8getPressedKey+0x14>
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
		//}
	}
	return dataValue;
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    46f2:	0f 90       	pop	r0
    46f4:	0f 90       	pop	r0
    46f6:	0f 90       	pop	r0
    46f8:	cf 91       	pop	r28
    46fa:	df 91       	pop	r29
    46fc:	08 95       	ret

000046fe <System_Initialization>:
 *******************************************************************************/

u8 KeyData = 0;
u8* CHARReceived = 0;

void System_Initialization(void) {
    46fe:	df 93       	push	r29
    4700:	cf 93       	push	r28
    4702:	cd b7       	in	r28, 0x3d	; 61
    4704:	de b7       	in	r29, 0x3e	; 62
	// Initializing LCD Module
	LCD_voidInit();
    4706:	0e 94 67 17 	call	0x2ece	; 0x2ece <LCD_voidInit>
	LCD_voidSetCursor(0, 0);
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	60 e0       	ldi	r22, 0x00	; 0
    470e:	0e 94 3c 22 	call	0x4478	; 0x4478 <LCD_voidSetCursor>
	LCD_voidDisplayString("UART RECEIVE");
    4712:	88 e6       	ldi	r24, 0x68	; 104
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	0e 94 13 22 	call	0x4426	; 0x4426 <LCD_voidDisplayString>

	// Initializing UART Pins
	UART_Initialization();
    471a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <UART_Initialization>
	GPIO_voidSetPinDirection(PORT_D, PIN_1, PIN_OUTPUT);
    471e:	83 e0       	ldi	r24, 0x03	; 3
    4720:	61 e0       	ldi	r22, 0x01	; 1
    4722:	41 e0       	ldi	r20, 0x01	; 1
    4724:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORT_D, PIN_0, PIN_INPUT);
    4728:	83 e0       	ldi	r24, 0x03	; 3
    472a:	60 e0       	ldi	r22, 0x00	; 0
    472c:	40 e0       	ldi	r20, 0x00	; 0
    472e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <GPIO_voidSetPinDirection>

	// Initializing Keypad
	//KEYPAD_voidInit();


}
    4732:	cf 91       	pop	r28
    4734:	df 91       	pop	r29
    4736:	08 95       	ret

00004738 <executeMain_RXD>:

void executeMain_RXD(void) {
    4738:	df 93       	push	r29
    473a:	cf 93       	push	r28
    473c:	cd b7       	in	r28, 0x3d	; 61
    473e:	de b7       	in	r29, 0x3e	; 62
	USART_voidReceiveString(CHARReceived);
    4740:	80 91 bd 01 	lds	r24, 0x01BD
    4744:	90 91 be 01 	lds	r25, 0x01BE
    4748:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_voidReceiveString>
	LCD_voidSetCursor(1, 0);
    474c:	81 e0       	ldi	r24, 0x01	; 1
    474e:	60 e0       	ldi	r22, 0x00	; 0
    4750:	0e 94 3c 22 	call	0x4478	; 0x4478 <LCD_voidSetCursor>
	LCD_voidDisplayString("Receiving..");
    4754:	85 e7       	ldi	r24, 0x75	; 117
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	0e 94 13 22 	call	0x4426	; 0x4426 <LCD_voidDisplayString>
	LCD_voidSetCursor(2, 0);
    475c:	82 e0       	ldi	r24, 0x02	; 2
    475e:	60 e0       	ldi	r22, 0x00	; 0
    4760:	0e 94 3c 22 	call	0x4478	; 0x4478 <LCD_voidSetCursor>
	LCD_voidDisplayString(CHARReceived);
    4764:	80 91 bd 01 	lds	r24, 0x01BD
    4768:	90 91 be 01 	lds	r25, 0x01BE
    476c:	0e 94 13 22 	call	0x4426	; 0x4426 <LCD_voidDisplayString>
	//LCD_voidSendData(UDR_REG);
	LCD_voidSetCursor(3, 0);
    4770:	83 e0       	ldi	r24, 0x03	; 3
    4772:	60 e0       	ldi	r22, 0x00	; 0
    4774:	0e 94 3c 22 	call	0x4478	; 0x4478 <LCD_voidSetCursor>
	LCD_voidDisplayString("Done!");
    4778:	81 e8       	ldi	r24, 0x81	; 129
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	0e 94 13 22 	call	0x4426	; 0x4426 <LCD_voidDisplayString>

}
    4780:	cf 91       	pop	r28
    4782:	df 91       	pop	r29
    4784:	08 95       	ret

00004786 <main>:
/*******************************************************************************
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void)
{
    4786:	df 93       	push	r29
    4788:	cf 93       	push	r28
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
	System_Initialization();
    478e:	0e 94 7f 23 	call	0x46fe	; 0x46fe <System_Initialization>

	while (1)
	{
		executeMain_RXD();
    4792:	0e 94 9c 23 	call	0x4738	; 0x4738 <executeMain_RXD>
    4796:	fd cf       	rjmp	.-6      	; 0x4792 <main+0xc>

00004798 <__mulsi3>:
    4798:	62 9f       	mul	r22, r18
    479a:	d0 01       	movw	r26, r0
    479c:	73 9f       	mul	r23, r19
    479e:	f0 01       	movw	r30, r0
    47a0:	82 9f       	mul	r24, r18
    47a2:	e0 0d       	add	r30, r0
    47a4:	f1 1d       	adc	r31, r1
    47a6:	64 9f       	mul	r22, r20
    47a8:	e0 0d       	add	r30, r0
    47aa:	f1 1d       	adc	r31, r1
    47ac:	92 9f       	mul	r25, r18
    47ae:	f0 0d       	add	r31, r0
    47b0:	83 9f       	mul	r24, r19
    47b2:	f0 0d       	add	r31, r0
    47b4:	74 9f       	mul	r23, r20
    47b6:	f0 0d       	add	r31, r0
    47b8:	65 9f       	mul	r22, r21
    47ba:	f0 0d       	add	r31, r0
    47bc:	99 27       	eor	r25, r25
    47be:	72 9f       	mul	r23, r18
    47c0:	b0 0d       	add	r27, r0
    47c2:	e1 1d       	adc	r30, r1
    47c4:	f9 1f       	adc	r31, r25
    47c6:	63 9f       	mul	r22, r19
    47c8:	b0 0d       	add	r27, r0
    47ca:	e1 1d       	adc	r30, r1
    47cc:	f9 1f       	adc	r31, r25
    47ce:	bd 01       	movw	r22, r26
    47d0:	cf 01       	movw	r24, r30
    47d2:	11 24       	eor	r1, r1
    47d4:	08 95       	ret

000047d6 <__udivmodhi4>:
    47d6:	aa 1b       	sub	r26, r26
    47d8:	bb 1b       	sub	r27, r27
    47da:	51 e1       	ldi	r21, 0x11	; 17
    47dc:	07 c0       	rjmp	.+14     	; 0x47ec <__udivmodhi4_ep>

000047de <__udivmodhi4_loop>:
    47de:	aa 1f       	adc	r26, r26
    47e0:	bb 1f       	adc	r27, r27
    47e2:	a6 17       	cp	r26, r22
    47e4:	b7 07       	cpc	r27, r23
    47e6:	10 f0       	brcs	.+4      	; 0x47ec <__udivmodhi4_ep>
    47e8:	a6 1b       	sub	r26, r22
    47ea:	b7 0b       	sbc	r27, r23

000047ec <__udivmodhi4_ep>:
    47ec:	88 1f       	adc	r24, r24
    47ee:	99 1f       	adc	r25, r25
    47f0:	5a 95       	dec	r21
    47f2:	a9 f7       	brne	.-22     	; 0x47de <__udivmodhi4_loop>
    47f4:	80 95       	com	r24
    47f6:	90 95       	com	r25
    47f8:	bc 01       	movw	r22, r24
    47fa:	cd 01       	movw	r24, r26
    47fc:	08 95       	ret

000047fe <__udivmodsi4>:
    47fe:	a1 e2       	ldi	r26, 0x21	; 33
    4800:	1a 2e       	mov	r1, r26
    4802:	aa 1b       	sub	r26, r26
    4804:	bb 1b       	sub	r27, r27
    4806:	fd 01       	movw	r30, r26
    4808:	0d c0       	rjmp	.+26     	; 0x4824 <__udivmodsi4_ep>

0000480a <__udivmodsi4_loop>:
    480a:	aa 1f       	adc	r26, r26
    480c:	bb 1f       	adc	r27, r27
    480e:	ee 1f       	adc	r30, r30
    4810:	ff 1f       	adc	r31, r31
    4812:	a2 17       	cp	r26, r18
    4814:	b3 07       	cpc	r27, r19
    4816:	e4 07       	cpc	r30, r20
    4818:	f5 07       	cpc	r31, r21
    481a:	20 f0       	brcs	.+8      	; 0x4824 <__udivmodsi4_ep>
    481c:	a2 1b       	sub	r26, r18
    481e:	b3 0b       	sbc	r27, r19
    4820:	e4 0b       	sbc	r30, r20
    4822:	f5 0b       	sbc	r31, r21

00004824 <__udivmodsi4_ep>:
    4824:	66 1f       	adc	r22, r22
    4826:	77 1f       	adc	r23, r23
    4828:	88 1f       	adc	r24, r24
    482a:	99 1f       	adc	r25, r25
    482c:	1a 94       	dec	r1
    482e:	69 f7       	brne	.-38     	; 0x480a <__udivmodsi4_loop>
    4830:	60 95       	com	r22
    4832:	70 95       	com	r23
    4834:	80 95       	com	r24
    4836:	90 95       	com	r25
    4838:	9b 01       	movw	r18, r22
    483a:	ac 01       	movw	r20, r24
    483c:	bd 01       	movw	r22, r26
    483e:	cf 01       	movw	r24, r30
    4840:	08 95       	ret

00004842 <__prologue_saves__>:
    4842:	2f 92       	push	r2
    4844:	3f 92       	push	r3
    4846:	4f 92       	push	r4
    4848:	5f 92       	push	r5
    484a:	6f 92       	push	r6
    484c:	7f 92       	push	r7
    484e:	8f 92       	push	r8
    4850:	9f 92       	push	r9
    4852:	af 92       	push	r10
    4854:	bf 92       	push	r11
    4856:	cf 92       	push	r12
    4858:	df 92       	push	r13
    485a:	ef 92       	push	r14
    485c:	ff 92       	push	r15
    485e:	0f 93       	push	r16
    4860:	1f 93       	push	r17
    4862:	cf 93       	push	r28
    4864:	df 93       	push	r29
    4866:	cd b7       	in	r28, 0x3d	; 61
    4868:	de b7       	in	r29, 0x3e	; 62
    486a:	ca 1b       	sub	r28, r26
    486c:	db 0b       	sbc	r29, r27
    486e:	0f b6       	in	r0, 0x3f	; 63
    4870:	f8 94       	cli
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	09 94       	ijmp

0000487a <__epilogue_restores__>:
    487a:	2a 88       	ldd	r2, Y+18	; 0x12
    487c:	39 88       	ldd	r3, Y+17	; 0x11
    487e:	48 88       	ldd	r4, Y+16	; 0x10
    4880:	5f 84       	ldd	r5, Y+15	; 0x0f
    4882:	6e 84       	ldd	r6, Y+14	; 0x0e
    4884:	7d 84       	ldd	r7, Y+13	; 0x0d
    4886:	8c 84       	ldd	r8, Y+12	; 0x0c
    4888:	9b 84       	ldd	r9, Y+11	; 0x0b
    488a:	aa 84       	ldd	r10, Y+10	; 0x0a
    488c:	b9 84       	ldd	r11, Y+9	; 0x09
    488e:	c8 84       	ldd	r12, Y+8	; 0x08
    4890:	df 80       	ldd	r13, Y+7	; 0x07
    4892:	ee 80       	ldd	r14, Y+6	; 0x06
    4894:	fd 80       	ldd	r15, Y+5	; 0x05
    4896:	0c 81       	ldd	r16, Y+4	; 0x04
    4898:	1b 81       	ldd	r17, Y+3	; 0x03
    489a:	aa 81       	ldd	r26, Y+2	; 0x02
    489c:	b9 81       	ldd	r27, Y+1	; 0x01
    489e:	ce 0f       	add	r28, r30
    48a0:	d1 1d       	adc	r29, r1
    48a2:	0f b6       	in	r0, 0x3f	; 63
    48a4:	f8 94       	cli
    48a6:	de bf       	out	0x3e, r29	; 62
    48a8:	0f be       	out	0x3f, r0	; 63
    48aa:	cd bf       	out	0x3d, r28	; 61
    48ac:	ed 01       	movw	r28, r26
    48ae:	08 95       	ret

000048b0 <itoa>:
    48b0:	fb 01       	movw	r30, r22
    48b2:	9f 01       	movw	r18, r30
    48b4:	e8 94       	clt
    48b6:	42 30       	cpi	r20, 0x02	; 2
    48b8:	c4 f0       	brlt	.+48     	; 0x48ea <itoa+0x3a>
    48ba:	45 32       	cpi	r20, 0x25	; 37
    48bc:	b4 f4       	brge	.+44     	; 0x48ea <itoa+0x3a>
    48be:	4a 30       	cpi	r20, 0x0A	; 10
    48c0:	29 f4       	brne	.+10     	; 0x48cc <itoa+0x1c>
    48c2:	97 fb       	bst	r25, 7
    48c4:	1e f4       	brtc	.+6      	; 0x48cc <itoa+0x1c>
    48c6:	90 95       	com	r25
    48c8:	81 95       	neg	r24
    48ca:	9f 4f       	sbci	r25, 0xFF	; 255
    48cc:	64 2f       	mov	r22, r20
    48ce:	77 27       	eor	r23, r23
    48d0:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <__udivmodhi4>
    48d4:	80 5d       	subi	r24, 0xD0	; 208
    48d6:	8a 33       	cpi	r24, 0x3A	; 58
    48d8:	0c f0       	brlt	.+2      	; 0x48dc <itoa+0x2c>
    48da:	89 5d       	subi	r24, 0xD9	; 217
    48dc:	81 93       	st	Z+, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	00 97       	sbiw	r24, 0x00	; 0
    48e2:	a1 f7       	brne	.-24     	; 0x48cc <itoa+0x1c>
    48e4:	16 f4       	brtc	.+4      	; 0x48ea <itoa+0x3a>
    48e6:	5d e2       	ldi	r21, 0x2D	; 45
    48e8:	51 93       	st	Z+, r21
    48ea:	10 82       	st	Z, r1
    48ec:	c9 01       	movw	r24, r18
    48ee:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <strrev>

000048f2 <ceil>:
    48f2:	3b d0       	rcall	.+118    	; 0x496a <__fp_trunc>
    48f4:	80 f0       	brcs	.+32     	; 0x4916 <ceil+0x24>
    48f6:	9f 37       	cpi	r25, 0x7F	; 127
    48f8:	40 f4       	brcc	.+16     	; 0x490a <ceil+0x18>
    48fa:	91 11       	cpse	r25, r1
    48fc:	0e f4       	brtc	.+2      	; 0x4900 <ceil+0xe>
    48fe:	4d c0       	rjmp	.+154    	; 0x499a <__fp_szero>
    4900:	60 e0       	ldi	r22, 0x00	; 0
    4902:	70 e0       	ldi	r23, 0x00	; 0
    4904:	80 e8       	ldi	r24, 0x80	; 128
    4906:	9f e3       	ldi	r25, 0x3F	; 63
    4908:	08 95       	ret
    490a:	26 f0       	brts	.+8      	; 0x4914 <ceil+0x22>
    490c:	1b 16       	cp	r1, r27
    490e:	61 1d       	adc	r22, r1
    4910:	71 1d       	adc	r23, r1
    4912:	81 1d       	adc	r24, r1
    4914:	01 c0       	rjmp	.+2      	; 0x4918 <__fp_mintl>
    4916:	1b c0       	rjmp	.+54     	; 0x494e <__fp_mpack>

00004918 <__fp_mintl>:
    4918:	88 23       	and	r24, r24
    491a:	71 f4       	brne	.+28     	; 0x4938 <__fp_mintl+0x20>
    491c:	77 23       	and	r23, r23
    491e:	21 f0       	breq	.+8      	; 0x4928 <__fp_mintl+0x10>
    4920:	98 50       	subi	r25, 0x08	; 8
    4922:	87 2b       	or	r24, r23
    4924:	76 2f       	mov	r23, r22
    4926:	07 c0       	rjmp	.+14     	; 0x4936 <__fp_mintl+0x1e>
    4928:	66 23       	and	r22, r22
    492a:	11 f4       	brne	.+4      	; 0x4930 <__fp_mintl+0x18>
    492c:	99 27       	eor	r25, r25
    492e:	0d c0       	rjmp	.+26     	; 0x494a <__fp_mintl+0x32>
    4930:	90 51       	subi	r25, 0x10	; 16
    4932:	86 2b       	or	r24, r22
    4934:	70 e0       	ldi	r23, 0x00	; 0
    4936:	60 e0       	ldi	r22, 0x00	; 0
    4938:	2a f0       	brmi	.+10     	; 0x4944 <__fp_mintl+0x2c>
    493a:	9a 95       	dec	r25
    493c:	66 0f       	add	r22, r22
    493e:	77 1f       	adc	r23, r23
    4940:	88 1f       	adc	r24, r24
    4942:	da f7       	brpl	.-10     	; 0x493a <__fp_mintl+0x22>
    4944:	88 0f       	add	r24, r24
    4946:	96 95       	lsr	r25
    4948:	87 95       	ror	r24
    494a:	97 f9       	bld	r25, 7
    494c:	08 95       	ret

0000494e <__fp_mpack>:
    494e:	9f 3f       	cpi	r25, 0xFF	; 255
    4950:	31 f0       	breq	.+12     	; 0x495e <__fp_mpack_finite+0xc>

00004952 <__fp_mpack_finite>:
    4952:	91 50       	subi	r25, 0x01	; 1
    4954:	20 f4       	brcc	.+8      	; 0x495e <__fp_mpack_finite+0xc>
    4956:	87 95       	ror	r24
    4958:	77 95       	ror	r23
    495a:	67 95       	ror	r22
    495c:	b7 95       	ror	r27
    495e:	88 0f       	add	r24, r24
    4960:	91 1d       	adc	r25, r1
    4962:	96 95       	lsr	r25
    4964:	87 95       	ror	r24
    4966:	97 f9       	bld	r25, 7
    4968:	08 95       	ret

0000496a <__fp_trunc>:
    496a:	35 d0       	rcall	.+106    	; 0x49d6 <__fp_splitA>
    496c:	a0 f0       	brcs	.+40     	; 0x4996 <__fp_trunc+0x2c>
    496e:	be e7       	ldi	r27, 0x7E	; 126
    4970:	b9 17       	cp	r27, r25
    4972:	88 f4       	brcc	.+34     	; 0x4996 <__fp_trunc+0x2c>
    4974:	bb 27       	eor	r27, r27
    4976:	9f 38       	cpi	r25, 0x8F	; 143
    4978:	60 f4       	brcc	.+24     	; 0x4992 <__fp_trunc+0x28>
    497a:	16 16       	cp	r1, r22
    497c:	b1 1d       	adc	r27, r1
    497e:	67 2f       	mov	r22, r23
    4980:	78 2f       	mov	r23, r24
    4982:	88 27       	eor	r24, r24
    4984:	98 5f       	subi	r25, 0xF8	; 248
    4986:	f7 cf       	rjmp	.-18     	; 0x4976 <__fp_trunc+0xc>
    4988:	86 95       	lsr	r24
    498a:	77 95       	ror	r23
    498c:	67 95       	ror	r22
    498e:	b1 1d       	adc	r27, r1
    4990:	93 95       	inc	r25
    4992:	96 39       	cpi	r25, 0x96	; 150
    4994:	c8 f3       	brcs	.-14     	; 0x4988 <__fp_trunc+0x1e>
    4996:	08 95       	ret

00004998 <__fp_zero>:
    4998:	e8 94       	clt

0000499a <__fp_szero>:
    499a:	bb 27       	eor	r27, r27
    499c:	66 27       	eor	r22, r22
    499e:	77 27       	eor	r23, r23
    49a0:	cb 01       	movw	r24, r22
    49a2:	97 f9       	bld	r25, 7
    49a4:	08 95       	ret

000049a6 <strrev>:
    49a6:	dc 01       	movw	r26, r24
    49a8:	fc 01       	movw	r30, r24
    49aa:	67 2f       	mov	r22, r23
    49ac:	71 91       	ld	r23, Z+
    49ae:	77 23       	and	r23, r23
    49b0:	e1 f7       	brne	.-8      	; 0x49aa <strrev+0x4>
    49b2:	32 97       	sbiw	r30, 0x02	; 2
    49b4:	04 c0       	rjmp	.+8      	; 0x49be <strrev+0x18>
    49b6:	7c 91       	ld	r23, X
    49b8:	6d 93       	st	X+, r22
    49ba:	70 83       	st	Z, r23
    49bc:	62 91       	ld	r22, -Z
    49be:	ae 17       	cp	r26, r30
    49c0:	bf 07       	cpc	r27, r31
    49c2:	c8 f3       	brcs	.-14     	; 0x49b6 <strrev+0x10>
    49c4:	08 95       	ret

000049c6 <__fp_split3>:
    49c6:	57 fd       	sbrc	r21, 7
    49c8:	90 58       	subi	r25, 0x80	; 128
    49ca:	44 0f       	add	r20, r20
    49cc:	55 1f       	adc	r21, r21
    49ce:	59 f0       	breq	.+22     	; 0x49e6 <__fp_splitA+0x10>
    49d0:	5f 3f       	cpi	r21, 0xFF	; 255
    49d2:	71 f0       	breq	.+28     	; 0x49f0 <__fp_splitA+0x1a>
    49d4:	47 95       	ror	r20

000049d6 <__fp_splitA>:
    49d6:	88 0f       	add	r24, r24
    49d8:	97 fb       	bst	r25, 7
    49da:	99 1f       	adc	r25, r25
    49dc:	61 f0       	breq	.+24     	; 0x49f6 <__fp_splitA+0x20>
    49de:	9f 3f       	cpi	r25, 0xFF	; 255
    49e0:	79 f0       	breq	.+30     	; 0x4a00 <__fp_splitA+0x2a>
    49e2:	87 95       	ror	r24
    49e4:	08 95       	ret
    49e6:	12 16       	cp	r1, r18
    49e8:	13 06       	cpc	r1, r19
    49ea:	14 06       	cpc	r1, r20
    49ec:	55 1f       	adc	r21, r21
    49ee:	f2 cf       	rjmp	.-28     	; 0x49d4 <__fp_split3+0xe>
    49f0:	46 95       	lsr	r20
    49f2:	f1 df       	rcall	.-30     	; 0x49d6 <__fp_splitA>
    49f4:	08 c0       	rjmp	.+16     	; 0x4a06 <__fp_splitA+0x30>
    49f6:	16 16       	cp	r1, r22
    49f8:	17 06       	cpc	r1, r23
    49fa:	18 06       	cpc	r1, r24
    49fc:	99 1f       	adc	r25, r25
    49fe:	f1 cf       	rjmp	.-30     	; 0x49e2 <__fp_splitA+0xc>
    4a00:	86 95       	lsr	r24
    4a02:	71 05       	cpc	r23, r1
    4a04:	61 05       	cpc	r22, r1
    4a06:	08 94       	sec
    4a08:	08 95       	ret

00004a0a <_exit>:
    4a0a:	f8 94       	cli

00004a0c <__stop_program>:
    4a0c:	ff cf       	rjmp	.-2      	; 0x4a0c <__stop_program>
