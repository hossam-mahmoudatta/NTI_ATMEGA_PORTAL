
TASK30_UART-STR-RXD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  00004a32  00004ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008001b0  008001b0  00004c16  2**0
                  ALLOC
  3 .stab         0000636c  00000000  00000000  00004c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004f5d  00000000  00000000  0000af84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000fee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  000100c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  000102f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00012b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  000141ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0001558c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0001578c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00015a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000164f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__vector_1>
       8:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__vector_2>
       c:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_6>
      1c:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_7>
      20:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_8>
      24:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_9>
      28:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__vector_10>
      2c:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 23 	call	0x47aa	; 0x47aa <main>
      8a:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e8       	ldi	r26, 0x87	; 135
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 24 	jmp	0x489e	; 0x489e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e8       	ldi	r24, 0x87	; 135
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 24 	jmp	0x489e	; 0x489e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3b 24 	jmp	0x4876	; 0x4876 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e8       	ldi	r22, 0x87	; 135
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 57 24 	jmp	0x48ae	; 0x48ae <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 58 24 	jmp	0x48b0	; 0x48b0 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 43 24 	jmp	0x4886	; 0x4886 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 5f 24 	jmp	0x48be	; 0x48be <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 3b 24 	jmp	0x4876	; 0x4876 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 57 24 	jmp	0x48ae	; 0x48ae <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e1 57       	subi	r30, 0x71	; 113
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <UART_Initialization>:

/*******************************************************************************
 *                              				FUNCTION IMPLEMENTATIONS				                   	   *
 *******************************************************************************/

void UART_Initialization(void) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	// When will this eqn be in -Ve? if the Fcpu is less than '1'
	// What does the -Ve UBBR mean? it means i can't use this baud rate @ this Fcpu
	// The Fcpu must be atleast 8 times larger than the Baud Rate!!!
	// So if my Fcpu = 16Mhz & Baud = 9600, then the UBBR = 207.
*/
	UCSRA_REG->U2X = UART_SPEED;
     f54:	eb e2       	ldi	r30, 0x2B	; 43
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	80 83       	st	Z, r24
	UCSRB_REG->TXEN = 1;
     f5e:	ea e2       	ldi	r30, 0x2A	; 42
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	80 83       	st	Z, r24
	UCSRB_REG->RXEN = 1;
     f68:	ea e2       	ldi	r30, 0x2A	; 42
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 61       	ori	r24, 0x10	; 16
     f70:	80 83       	st	Z, r24

	u8 UCSRC_Value = 0;
     f72:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRC_Value, UCSRC_URSEL);
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	80 68       	ori	r24, 0x80	; 128
     f78:	89 83       	std	Y+1, r24	; 0x01
#elif (UART_BITSIZE == UART_9_BITSIZE)
	SET_BIT(UCSRC_Value, UCSRC_UCSZ0);
	SET_BIT(UCSRC_Value, UCSRC_UCSZ1);
	SET_BIT(UCSRB_REG, UCSZ2);
#else
	SET_BIT(UCSRC_Value, UCSRC_UCSZ0);
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_Value, UCSRC_UCSZ1);
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	84 60       	ori	r24, 0x04	; 4
     f84:	89 83       	std	Y+1, r24	; 0x01
#endif
	UCSRC_REG = UCSRC_Value;
     f86:	e0 e4       	ldi	r30, 0x40	; 64
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	80 83       	st	Z, r24

	// For F_CPU: 16 MHz & Baud: 9600, My UBRR: 103
	UBRRL_REG = (u8)(UBRR_VALUE);
     f8e:	e9 e2       	ldi	r30, 0x29	; 41
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	83 e3       	ldi	r24, 0x33	; 51
     f94:	80 83       	st	Z, r24
	UBRRH_REG = (u8)(UBRR_VALUE >> 8);
     f96:	e0 e4       	ldi	r30, 0x40	; 64
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	10 82       	st	Z, r1
	UCSRB_REG->RXCIE = 1;
	UCSRB_REG->TXCIE = 1;
	UCSRB_REG->UDRIE = 1;
#endif

}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_voidSendByte_Polling>:


// Responsible for the USART to send a byte
void UART_voidSendByte_Polling(const u8 data) {
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
	while(UCSRA_REG->UDRE == 0);
     fb0:	eb e2       	ldi	r30, 0x2B	; 43
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 72       	andi	r24, 0x20	; 32
     fb8:	88 23       	and	r24, r24
     fba:	d1 f3       	breq	.-12     	; 0xfb0 <UART_voidSendByte_Polling+0xc>
	//UCSRA_REG->TXC = 1;

	UDR_REG = data;
     fbc:	ec e2       	ldi	r30, 0x2C	; 44
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	80 83       	st	Z, r24

	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	// This is waiting for the flag to be set to '0' to know that I received data
	*******************************************************************/
}
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <UART_voidReceiveByte_Polling>:


// Responsible for the USART to receive a byte
u8 UART_voidReceiveByte_Polling(void) {
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	// This is waiting for the flag to be set to '0' to know that I received data
	while(UCSRA_REG->RXC == 0);
     fd4:	eb e2       	ldi	r30, 0x2B	; 43
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 78       	andi	r24, 0x80	; 128
     fdc:	88 23       	and	r24, r24
     fde:	d1 f3       	breq	.-12     	; 0xfd4 <UART_voidReceiveByte_Polling+0x8>

	return UDR_REG;		// When reading
     fe0:	ec e2       	ldi	r30, 0x2C	; 44
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <UART_voidSendString>:


// Responsible for the USART to send an array of bytes, a string
void UART_voidSendString(const u8 *str) {
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <UART_voidSendString+0x6>
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	17 c0       	rjmp	.+46     	; 0x102a <UART_voidSendString+0x3e>
	while(*str)
	{
		while(UCSRA_REG->UDRE == 0);
     ffc:	eb e2       	ldi	r30, 0x2B	; 43
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 72       	andi	r24, 0x20	; 32
    1004:	88 23       	and	r24, r24
    1006:	d1 f3       	breq	.-12     	; 0xffc <UART_voidSendString+0x10>
		UDR_REG = *str++;
    1008:	ac e2       	ldi	r26, 0x2C	; 44
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e9 81       	ldd	r30, Y+1	; 0x01
    100e:	fa 81       	ldd	r31, Y+2	; 0x02
    1010:	80 81       	ld	r24, Z
    1012:	8c 93       	st	X, r24
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	9a 83       	std	Y+2, r25	; 0x02
    101c:	89 83       	std	Y+1, r24	; 0x01
		while(UCSRA_REG->TXC == 0);
    101e:	eb e2       	ldi	r30, 0x2B	; 43
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 74       	andi	r24, 0x40	; 64
    1026:	88 23       	and	r24, r24
    1028:	d1 f3       	breq	.-12     	; 0x101e <UART_voidSendString+0x32>
}


// Responsible for the USART to send an array of bytes, a string
void UART_voidSendString(const u8 *str) {
	while(*str)
    102a:	e9 81       	ldd	r30, Y+1	; 0x01
    102c:	fa 81       	ldd	r31, Y+2	; 0x02
    102e:	80 81       	ld	r24, Z
    1030:	88 23       	and	r24, r24
    1032:	21 f7       	brne	.-56     	; 0xffc <UART_voidSendString+0x10>
	{
		while(UCSRA_REG->UDRE == 0);
		UDR_REG = *str++;
		while(UCSRA_REG->TXC == 0);
	}
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <UART_voidReceiveString>:


// Responsible for the USART to receive an array of bytes, a string
void UART_voidReceiveString(u8 *str) {
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <UART_voidReceiveString+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <UART_voidReceiveString+0x8>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	9d 83       	std	Y+5, r25	; 0x05
    104e:	8c 83       	std	Y+4, r24	; 0x04
	u8 i = 0;
    1050:	1b 82       	std	Y+3, r1	; 0x03
	u8 maxLength = 20;
    1052:	84 e1       	ldi	r24, 0x14	; 20
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	20 c0       	rjmp	.+64     	; 0x1098 <UART_voidReceiveString+0x5a>
	u8 receivedCharacter;

	while(i < (maxLength - 1))
	{
		receivedCharacter = UART_voidReceiveByte_Polling();
    1058:	0e 94 e6 07 	call	0xfcc	; 0xfcc <UART_voidReceiveByte_Polling>
    105c:	89 83       	std	Y+1, r24	; 0x01

		if(receivedCharacter == '\n' || receivedCharacter == '#')
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	8a 30       	cpi	r24, 0x0A	; 10
    1062:	19 f0       	breq	.+6      	; 0x106a <UART_voidReceiveString+0x2c>
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	83 32       	cpi	r24, 0x23	; 35
    1068:	51 f4       	brne	.+20     	; 0x107e <UART_voidReceiveString+0x40>
		{
			str[i] = '\0';
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	fc 01       	movw	r30, r24
    1076:	e2 0f       	add	r30, r18
    1078:	f3 1f       	adc	r31, r19
    107a:	10 82       	st	Z, r1
    107c:	23 c0       	rjmp	.+70     	; 0x10c4 <UART_voidReceiveString+0x86>
			return;
		}
		else
		{
			str[i] = receivedCharacter;
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	fc 01       	movw	r30, r24
    108a:	e2 0f       	add	r30, r18
    108c:	f3 1f       	adc	r31, r19
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	80 83       	st	Z, r24
			i++;
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	8b 83       	std	Y+3, r24	; 0x03
void UART_voidReceiveString(u8 *str) {
	u8 i = 0;
	u8 maxLength = 20;
	u8 receivedCharacter;

	while(i < (maxLength - 1))
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	28 17       	cp	r18, r24
    10a8:	39 07       	cpc	r19, r25
    10aa:	b4 f2       	brlt	.-84     	; 0x1058 <UART_voidReceiveString+0x1a>
		{
			str[i] = receivedCharacter;
			i++;
		}
	}
	str[maxLength - 1] = '\0';
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9c 01       	movw	r18, r24
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	30 40       	sbci	r19, 0x00	; 0
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	9d 81       	ldd	r25, Y+5	; 0x05
    10bc:	fc 01       	movw	r30, r24
    10be:	e2 0f       	add	r30, r18
    10c0:	f3 1f       	adc	r31, r19
    10c2:	10 82       	st	Z, r1
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <TIMER1_Initialization>:

/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

void TIMER1_Initialization(void) {
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG->WGM1x = 0b01;
	TCCR1B_REG->WGM1x = 0b10;
	TCCR1A_REG->COM1Bx 	= 0b10; // Non Inverting Mode
	TCCR1A_REG->COM1Ax 	= 0b10; // Non Inverting Mode
#elif (TIMER1_FASTPWM_MODE)
	TCCR1A_REG->FOC1A 	= 0;
    10dc:	ef e4       	ldi	r30, 0x4F	; 79
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	87 7f       	andi	r24, 0xF7	; 247
    10e4:	80 83       	st	Z, r24
	TCCR1A_REG->FOC1B 	= 0;
    10e6:	ef e4       	ldi	r30, 0x4F	; 79
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8b 7f       	andi	r24, 0xFB	; 251
    10ee:	80 83       	st	Z, r24
	TCCR1A_REG->WGM1x 	= 0b10;
    10f0:	ef e4       	ldi	r30, 0x4F	; 79
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8c 7f       	andi	r24, 0xFC	; 252
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	80 83       	st	Z, r24
	TCCR1B_REG->WGM1x 	= 0b11;
    10fc:	ee e4       	ldi	r30, 0x4E	; 78
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 61       	ori	r24, 0x18	; 24
    1104:	80 83       	st	Z, r24
	TCCR1A_REG->COM1Bx 	= 0b10; // Non Inverting Mode
    1106:	ef e4       	ldi	r30, 0x4F	; 79
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8f 7c       	andi	r24, 0xCF	; 207
    110e:	80 62       	ori	r24, 0x20	; 32
    1110:	80 83       	st	Z, r24
	TCCR1A_REG->COM1Ax 	= 0b10; // Non Inverting Mode
    1112:	ef e4       	ldi	r30, 0x4F	; 79
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 73       	andi	r24, 0x3F	; 63
    111a:	80 68       	ori	r24, 0x80	; 128
    111c:	80 83       	st	Z, r24
#endif

	TCCR1B_REG->CS1x = TIMER1_PRESCALER;
    111e:	ee e4       	ldi	r30, 0x4E	; 78
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	88 7f       	andi	r24, 0xF8	; 248
    1126:	82 60       	ori	r24, 0x02	; 2
    1128:	80 83       	st	Z, r24
	OCR1AL_REG = 500;
    112a:	ea e4       	ldi	r30, 0x4A	; 74
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	84 ef       	ldi	r24, 0xF4	; 244
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
	TIMSK_REG->TICIE1 = TIMER1_SET;
	TIMSK_REG->OCIE1A = TIMER1_SET;
	TIMSK_REG->OCIE1B = TIMER1_SET;
	TIMSK_REG->TOIE1 = TIMER1_SET;
#endif
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <TIMER1_voidStart>:

void TIMER1_voidStart(void) {
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	//TCCR1B_REG->CS1x = TIMER1_PRESCALER;
}
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <TIMER1_voidStop>:


void TIMER1_voidStop(void) {
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	TCCR1B_REG->CS1x = TIMER1_NO_TIME;
    1152:	ee e4       	ldi	r30, 0x4E	; 78
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	88 7f       	andi	r24, 0xF8	; 248
    115a:	80 83       	st	Z, r24
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <TIMER1_voidSetPreload>:


void TIMER1_voidSetPreload(u8 copy_u8preloadValue) {
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	0f 92       	push	r0
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	89 83       	std	Y+1, r24	; 0x01
	// Choose Timer PRESCALER
	TCNT1L_REG = copy_u8preloadValue;
    116e:	ec e4       	ldi	r30, 0x4C	; 76
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
}
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <TIMER1_u16GetTime>:


u16 TIMER1_u16GetTime(void) {
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	return (u16)TCNT1L_REG;
    118c:	ec e4       	ldi	r30, 0x4C	; 76
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <TIMER1A_SetCOMPAREMATCH_FASTPWM>:


u16 TIMER1A_SetCOMPAREMATCH_FASTPWM(u16 copy_u16CMP)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <TIMER1A_SetCOMPAREMATCH_FASTPWM+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <TIMER1A_SetCOMPAREMATCH_FASTPWM+0x8>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9c 83       	std	Y+4, r25	; 0x04
    11a8:	8b 83       	std	Y+3, r24	; 0x03
	 u16 Value = copy_u16CMP;
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	9a 83       	std	Y+2, r25	; 0x02
    11b0:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_D, PIN_5, PIN_OUTPUT);
    11b2:	83 e0       	ldi	r24, 0x03	; 3
    11b4:	65 e0       	ldi	r22, 0x05	; 5
    11b6:	41 e0       	ldi	r20, 0x01	; 1
    11b8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
	 OCR1AL_REG = copy_u16CMP;
    11bc:	ea e4       	ldi	r30, 0x4A	; 74
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	80 83       	st	Z, r24
	 return Value;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <TIMER1A_SetTop_FASTPWM>:

void TIMER1A_SetTop_FASTPWM(u16 copy_u16ICRValue)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <TIMER1A_SetTop_FASTPWM+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
	 ICR1L_REG = copy_u16ICRValue;
    11e8:	e6 e4       	ldi	r30, 0x46	; 70
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <TIMER1A_SetDutyCycle_FASTPWM>:

u16 TIMER1A_SetDutyCycle_FASTPWM(u8 copy_u8Duty)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <TIMER1A_SetDutyCycle_FASTPWM+0x6>
    1204:	0f 92       	push	r0
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	8b 83       	std	Y+3, r24	; 0x03
	 u16 PWMValue = (u16)(copy_u8Duty * 255) / 100;
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	48 2f       	mov	r20, r24
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	ca 01       	movw	r24, r20
    1214:	9c 01       	movw	r18, r24
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	c9 01       	movw	r24, r18
    121c:	96 95       	lsr	r25
    121e:	98 2f       	mov	r25, r24
    1220:	88 27       	eor	r24, r24
    1222:	97 95       	ror	r25
    1224:	87 95       	ror	r24
    1226:	82 1b       	sub	r24, r18
    1228:	93 0b       	sbc	r25, r19
    122a:	84 0f       	add	r24, r20
    122c:	95 1f       	adc	r25, r21
    122e:	24 e6       	ldi	r18, 0x64	; 100
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	b9 01       	movw	r22, r18
    1234:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__udivmodhi4>
    1238:	cb 01       	movw	r24, r22
    123a:	9a 83       	std	Y+2, r25	; 0x02
    123c:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_D, PIN_5, PIN_OUTPUT);
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	65 e0       	ldi	r22, 0x05	; 5
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
	 OCR1AL_REG = PWMValue;
    1248:	ea e4       	ldi	r30, 0x4A	; 74
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
	 return PWMValue;
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TIMER1B_SetDutyCycle_FASTPWM>:

u16 TIMER1B_SetDutyCycle_FASTPWM(u8 copy_u8Duty)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <TIMER1B_SetDutyCycle_FASTPWM+0x6>
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	8b 83       	std	Y+3, r24	; 0x03
	 u16 PWMValue = (u16)(copy_u8Duty * 255) / 100;
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	48 2f       	mov	r20, r24
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	ca 01       	movw	r24, r20
    127a:	9c 01       	movw	r18, r24
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	c9 01       	movw	r24, r18
    1282:	96 95       	lsr	r25
    1284:	98 2f       	mov	r25, r24
    1286:	88 27       	eor	r24, r24
    1288:	97 95       	ror	r25
    128a:	87 95       	ror	r24
    128c:	82 1b       	sub	r24, r18
    128e:	93 0b       	sbc	r25, r19
    1290:	84 0f       	add	r24, r20
    1292:	95 1f       	adc	r25, r21
    1294:	24 e6       	ldi	r18, 0x64	; 100
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	b9 01       	movw	r22, r18
    129a:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__udivmodhi4>
    129e:	cb 01       	movw	r24, r22
    12a0:	9a 83       	std	Y+2, r25	; 0x02
    12a2:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_D, PIN_4, PIN_OUTPUT);
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	64 e0       	ldi	r22, 0x04	; 4
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
	 OCR1BL_REG = PWMValue;
    12ae:	e8 e4       	ldi	r30, 0x48	; 72
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	80 83       	st	Z, r24
	 return PWMValue;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <TIMER1A_setDelay_ms_CTC>:

void TIMER1A_setDelay_ms_CTC(u16 copy_u16Delay)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	28 97       	sbiw	r28, 0x08	; 8
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	98 87       	std	Y+8, r25	; 0x08
    12dc:	8f 83       	std	Y+7, r24	; 0x07
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0.001;
    12de:	8f e6       	ldi	r24, 0x6F	; 111
    12e0:	92 e1       	ldi	r25, 0x12	; 18
    12e2:	a3 e8       	ldi	r26, 0x83	; 131
    12e4:	ba e3       	ldi	r27, 0x3A	; 58
    12e6:	8b 83       	std	Y+3, r24	; 0x03
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	ad 83       	std	Y+5, r26	; 0x05
    12ec:	be 83       	std	Y+6, r27	; 0x06
			// This will set the Tick Time 1mS
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
    12ee:	6b 81       	ldd	r22, Y+3	; 0x03
    12f0:	7c 81       	ldd	r23, Y+4	; 0x04
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	9e 81       	ldd	r25, Y+6	; 0x06
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	34 e2       	ldi	r19, 0x24	; 36
    12fa:	44 ef       	ldi	r20, 0xF4	; 244
    12fc:	5a e4       	ldi	r21, 0x4A	; 74
    12fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e4       	ldi	r20, 0x40	; 64
    1310:	50 e4       	ldi	r21, 0x40	; 64
    1312:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9a 83       	std	Y+2, r25	; 0x02
    1328:	89 83       	std	Y+1, r24	; 0x01
			TCNT1L_REG = compareValue;
    132a:	ec e4       	ldi	r30, 0x4C	; 76
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
    1336:	10 c0       	rjmp	.+32     	; 0x1358 <TIMER1A_setDelay_ms_CTC+0x92>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
				// This condition is a Busy Wait
				while(TIFR_REG->OCF1A == TIMER1_NOTSET);
    1338:	e8 e5       	ldi	r30, 0x58	; 88
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	80 71       	andi	r24, 0x10	; 16
    1340:	88 23       	and	r24, r24
    1342:	d1 f3       	breq	.-12     	; 0x1338 <TIMER1A_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1A = TIMER1_SET;
    1344:	e8 e5       	ldi	r30, 0x58	; 88
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	80 61       	ori	r24, 0x10	; 16
    134c:	80 83       	st	Z, r24
				overFlowCounter++;
    134e:	80 91 b0 01 	lds	r24, 0x01B0
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	80 93 b0 01 	sts	0x01B0, r24
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
			TCNT1L_REG = compareValue;

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
    1358:	80 91 b0 01 	lds	r24, 0x01B0
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	98 85       	ldd	r25, Y+8	; 0x08
    1364:	28 17       	cp	r18, r24
    1366:	39 07       	cpc	r19, r25
    1368:	39 f7       	brne	.-50     	; 0x1338 <TIMER1A_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1A = TIMER1_SET;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    136a:	10 92 b0 01 	sts	0x01B0, r1
}
    136e:	28 96       	adiw	r28, 0x08	; 8
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <TIMER1B_setDelay_ms_CTC>:

void TIMER1B_setDelay_ms_CTC(u16 copy_u16Delay)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	28 97       	sbiw	r28, 0x08	; 8
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	98 87       	std	Y+8, r25	; 0x08
    1396:	8f 83       	std	Y+7, r24	; 0x07
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0.001;
    1398:	8f e6       	ldi	r24, 0x6F	; 111
    139a:	92 e1       	ldi	r25, 0x12	; 18
    139c:	a3 e8       	ldi	r26, 0x83	; 131
    139e:	ba e3       	ldi	r27, 0x3A	; 58
    13a0:	8b 83       	std	Y+3, r24	; 0x03
    13a2:	9c 83       	std	Y+4, r25	; 0x04
    13a4:	ad 83       	std	Y+5, r26	; 0x05
    13a6:	be 83       	std	Y+6, r27	; 0x06
			// This will set the Tick Time 1mS
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
    13a8:	6b 81       	ldd	r22, Y+3	; 0x03
    13aa:	7c 81       	ldd	r23, Y+4	; 0x04
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	34 e2       	ldi	r19, 0x24	; 36
    13b4:	44 ef       	ldi	r20, 0xF4	; 244
    13b6:	5a e4       	ldi	r21, 0x4A	; 74
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	bc 01       	movw	r22, r24
    13c2:	cd 01       	movw	r24, r26
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e4       	ldi	r20, 0x40	; 64
    13ca:	50 e4       	ldi	r21, 0x40	; 64
    13cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
			TCNT1L_REG = compareValue;
    13e4:	ec e4       	ldi	r30, 0x4C	; 76
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <TIMER1B_setDelay_ms_CTC+0x92>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
				// This condition is a Busy Wait
				while(TIFR_REG->OCF1B == TIMER1_NOTSET);
    13f2:	e8 e5       	ldi	r30, 0x58	; 88
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	88 70       	andi	r24, 0x08	; 8
    13fa:	88 23       	and	r24, r24
    13fc:	d1 f3       	breq	.-12     	; 0x13f2 <TIMER1B_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1B = TIMER1_SET;
    13fe:	e8 e5       	ldi	r30, 0x58	; 88
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	80 83       	st	Z, r24
				overFlowCounter++;
    1408:	80 91 b1 01 	lds	r24, 0x01B1
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	80 93 b1 01 	sts	0x01B1, r24
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
			TCNT1L_REG = compareValue;

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
    1412:	80 91 b1 01 	lds	r24, 0x01B1
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8f 81       	ldd	r24, Y+7	; 0x07
    141c:	98 85       	ldd	r25, Y+8	; 0x08
    141e:	28 17       	cp	r18, r24
    1420:	39 07       	cpc	r19, r25
    1422:	39 f7       	brne	.-50     	; 0x13f2 <TIMER1B_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1B = TIMER1_SET;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    1424:	10 92 b1 01 	sts	0x01B1, r1
}
    1428:	28 96       	adiw	r28, 0x08	; 8
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <TIMER1_setDelay_ms_OVF>:

void TIMER1_setDelay_ms_OVF(u16 copy_u16Delay)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	2e 97       	sbiw	r28, 0x0e	; 14
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	9e 87       	std	Y+14, r25	; 0x0e
    1450:	8d 87       	std	Y+13, r24	; 0x0d
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0;
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	89 87       	std	Y+9, r24	; 0x09
    145c:	9a 87       	std	Y+10, r25	; 0x0a
    145e:	ab 87       	std	Y+11, r26	; 0x0b
    1460:	bc 87       	std	Y+12, r27	; 0x0c
			Tick_Time = TIMER1_PRESCALER / (float)F_CPU;
    1462:	8d eb       	ldi	r24, 0xBD	; 189
    1464:	97 e3       	ldi	r25, 0x37	; 55
    1466:	a6 e8       	ldi	r26, 0x86	; 134
    1468:	b4 e3       	ldi	r27, 0x34	; 52
    146a:	89 87       	std	Y+9, r24	; 0x09
    146c:	9a 87       	std	Y+10, r25	; 0x0a
    146e:	ab 87       	std	Y+11, r26	; 0x0b
    1470:	bc 87       	std	Y+12, r27	; 0x0c
			float Time_Overflow = Tick_Time * TIMER1_SIZE;
    1472:	69 85       	ldd	r22, Y+9	; 0x09
    1474:	7a 85       	ldd	r23, Y+10	; 0x0a
    1476:	8b 85       	ldd	r24, Y+11	; 0x0b
    1478:	9c 85       	ldd	r25, Y+12	; 0x0c
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	53 e4       	ldi	r21, 0x43	; 67
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	af 83       	std	Y+7, r26	; 0x07
    1490:	b8 87       	std	Y+8, r27	; 0x08
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	cc 01       	movw	r24, r24
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	2d 81       	ldd	r18, Y+5	; 0x05
    14ae:	3e 81       	ldd	r19, Y+6	; 0x06
    14b0:	4f 81       	ldd	r20, Y+7	; 0x07
    14b2:	58 85       	ldd	r21, Y+8	; 0x08
    14b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	0e 94 8b 24 	call	0x4916	; 0x4916 <ceil>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	ab 83       	std	Y+3, r26	; 0x03
    14ce:	bc 83       	std	Y+4, r27	; 0x04
    14d0:	10 c0       	rjmp	.+32     	; 0x14f2 <TIMER1_setDelay_ms_OVF+0xb8>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
				// This condition is a Busy Wait
				while(TIFR_REG->TOV1 == TIMER1_NOTSET);
    14d2:	e8 e5       	ldi	r30, 0x58	; 88
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	84 70       	andi	r24, 0x04	; 4
    14da:	88 23       	and	r24, r24
    14dc:	d1 f3       	breq	.-12     	; 0x14d2 <TIMER1_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV1 = TIMER1_SET;
    14de:	e8 e5       	ldi	r30, 0x58	; 88
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	84 60       	ori	r24, 0x04	; 4
    14e6:	80 83       	st	Z, r24
				overFlowCounter++;
    14e8:	80 91 b2 01 	lds	r24, 0x01B2
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	80 93 b2 01 	sts	0x01B2, r24
			float Time_Overflow = Tick_Time * TIMER1_SIZE;
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
    14f2:	80 91 b2 01 	lds	r24, 0x01B2
    14f6:	88 2f       	mov	r24, r24
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	aa 27       	eor	r26, r26
    14fc:	97 fd       	sbrc	r25, 7
    14fe:	a0 95       	com	r26
    1500:	ba 2f       	mov	r27, r26
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	29 81       	ldd	r18, Y+1	; 0x01
    1514:	3a 81       	ldd	r19, Y+2	; 0x02
    1516:	4b 81       	ldd	r20, Y+3	; 0x03
    1518:	5c 81       	ldd	r21, Y+4	; 0x04
    151a:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    151e:	88 23       	and	r24, r24
    1520:	c1 f6       	brne	.-80     	; 0x14d2 <TIMER1_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV1 = TIMER1_SET;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    1522:	10 92 b2 01 	sts	0x01B2, r1
}
    1526:	2e 96       	adiw	r28, 0x0e	; 14
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <TIMER1_CallBackFunction_CAPT>:

void TIMER1_CallBackFunction_CAPT(void (*Ptr_TIMER)(void))
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <TIMER1_CallBackFunction_CAPT+0x6>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	9a 83       	std	Y+2, r25	; 0x02
    1544:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_CAPT = Ptr_TIMER;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	90 93 c4 01 	sts	0x01C4, r25
    154e:	80 93 c3 01 	sts	0x01C3, r24
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <TIMER1_CallBackFunction_COMPA>:

void TIMER1_CallBackFunction_COMPA(void (*Ptr_TIMER)(void))
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <TIMER1_CallBackFunction_COMPA+0x6>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_COMPA = Ptr_TIMER;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	90 93 c6 01 	sts	0x01C6, r25
    1572:	80 93 c5 01 	sts	0x01C5, r24
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <TIMER1_CallBackFunction_COMPB>:

void TIMER1_CallBackFunction_COMPB(void (*Ptr_TIMER)(void))
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	00 d0       	rcall	.+0      	; 0x1586 <TIMER1_CallBackFunction_COMPB+0x6>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_COMPB = Ptr_TIMER;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	90 93 c0 01 	sts	0x01C0, r25
    1596:	80 93 bf 01 	sts	0x01BF, r24
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <TIMER1_CallBackFunction_OVF>:

void TIMER1_CallBackFunction_OVF(void (*Ptr_TIMER)(void))
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <TIMER1_CallBackFunction_OVF+0x6>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_OVF = Ptr_TIMER;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	90 93 c2 01 	sts	0x01C2, r25
    15ba:	80 93 c1 01 	sts	0x01C1, r24
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <__vector_6>:


void __vector_6(void) __attribute__((signal, used));
void __vector_6(void) {
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_CAPT != NULL) {
    15f2:	80 91 c3 01 	lds	r24, 0x01C3
    15f6:	90 91 c4 01 	lds	r25, 0x01C4
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	29 f0       	breq	.+10     	; 0x1608 <__vector_6+0x40>
		CallBackPtr_TIMER1_CAPT();
    15fe:	e0 91 c3 01 	lds	r30, 0x01C3
    1602:	f0 91 c4 01 	lds	r31, 0x01C4
    1606:	09 95       	icall
	}
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0
    162a:	1f 90       	pop	r1
    162c:	18 95       	reti

0000162e <__vector_7>:

void __vector_7(void) __attribute__((signal, used));
void __vector_7(void) {
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	2f 93       	push	r18
    163a:	3f 93       	push	r19
    163c:	4f 93       	push	r20
    163e:	5f 93       	push	r21
    1640:	6f 93       	push	r22
    1642:	7f 93       	push	r23
    1644:	8f 93       	push	r24
    1646:	9f 93       	push	r25
    1648:	af 93       	push	r26
    164a:	bf 93       	push	r27
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_COMPA != NULL) {
    1658:	80 91 c5 01 	lds	r24, 0x01C5
    165c:	90 91 c6 01 	lds	r25, 0x01C6
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	29 f0       	breq	.+10     	; 0x166e <__vector_7+0x40>
		CallBackPtr_TIMER1_COMPA();
    1664:	e0 91 c5 01 	lds	r30, 0x01C5
    1668:	f0 91 c6 01 	lds	r31, 0x01C6
    166c:	09 95       	icall
	}
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_8>:

void __vector_8(void) __attribute__((signal, used));
void __vector_8(void) {
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_COMPB != NULL) {
    16be:	80 91 bf 01 	lds	r24, 0x01BF
    16c2:	90 91 c0 01 	lds	r25, 0x01C0
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <__vector_8+0x40>
		CallBackPtr_TIMER1_COMPB();
    16ca:	e0 91 bf 01 	lds	r30, 0x01BF
    16ce:	f0 91 c0 01 	lds	r31, 0x01C0
    16d2:	09 95       	icall
	}
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	bf 91       	pop	r27
    16de:	af 91       	pop	r26
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	7f 91       	pop	r23
    16e6:	6f 91       	pop	r22
    16e8:	5f 91       	pop	r21
    16ea:	4f 91       	pop	r20
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <__vector_9>:

void __vector_9(void) __attribute__((signal, used));
void __vector_9(void) {
    16fa:	1f 92       	push	r1
    16fc:	0f 92       	push	r0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	0f 92       	push	r0
    1702:	11 24       	eor	r1, r1
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_OVF != NULL) {
    1724:	80 91 c1 01 	lds	r24, 0x01C1
    1728:	90 91 c2 01 	lds	r25, 0x01C2
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	29 f0       	breq	.+10     	; 0x173a <__vector_9+0x40>
		CallBackPtr_TIMER1_OVF();
    1730:	e0 91 c1 01 	lds	r30, 0x01C1
    1734:	f0 91 c2 01 	lds	r31, 0x01C2
    1738:	09 95       	icall
	}
}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	7f 91       	pop	r23
    174c:	6f 91       	pop	r22
    174e:	5f 91       	pop	r21
    1750:	4f 91       	pop	r20
    1752:	3f 91       	pop	r19
    1754:	2f 91       	pop	r18
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	0f 90       	pop	r0
    175c:	1f 90       	pop	r1
    175e:	18 95       	reti

00001760 <TIMER0_INITIALIZATION>:

/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

void TIMER0_INITIALIZATION(void) {
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
#endif

#if (ISR_ENABLE)
	TIMSK_REG->TOIE0 = 1;
#endif
}
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <TIMER0_START>:


void TIMER0_START(void) {
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	TCCR0_REG->CS0x = TIMER0_PRESCALER;
    1776:	e3 e5       	ldi	r30, 0x53	; 83
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	88 7f       	andi	r24, 0xF8	; 248
    177e:	82 60       	ori	r24, 0x02	; 2
    1780:	80 83       	st	Z, r24
}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <TIMER0_STOP>:


void TIMER0_STOP(void) {
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	TCCR0_REG->CS0x = NO_TIME;
    1790:	e3 e5       	ldi	r30, 0x53	; 83
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	88 7f       	andi	r24, 0xF8	; 248
    1798:	80 83       	st	Z, r24
}
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <TIMER0_setPreload>:


void TIMER0_setPreload(u8 preloadValue) {
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	0f 92       	push	r0
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	89 83       	std	Y+1, r24	; 0x01
	// Choose Timer PRESCALER
	TCNT0_REG = preloadValue;
    17ac:	e2 e5       	ldi	r30, 0x52	; 82
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	80 83       	st	Z, r24
}
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <TIMER0_getTime>:


u8 TIMER0_getTime(void) {
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	return TCNT0_REG;
    17c4:	e2 e5       	ldi	r30, 0x52	; 82
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
}
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <TIMER0_voidSetDutyCycle_FASTPWM>:

u8 TIMER0_voidSetDutyCycle_FASTPWM(u8 copy_u8Duty)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <TIMER0_voidSetDutyCycle_FASTPWM+0x6>
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	8a 83       	std	Y+2, r24	; 0x02
	 u8 pwmValue = (u16)(copy_u8Duty * 255) / 100;
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	48 2f       	mov	r20, r24
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	ca 01       	movw	r24, r20
    17e4:	9c 01       	movw	r18, r24
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	c9 01       	movw	r24, r18
    17ec:	96 95       	lsr	r25
    17ee:	98 2f       	mov	r25, r24
    17f0:	88 27       	eor	r24, r24
    17f2:	97 95       	ror	r25
    17f4:	87 95       	ror	r24
    17f6:	82 1b       	sub	r24, r18
    17f8:	93 0b       	sbc	r25, r19
    17fa:	84 0f       	add	r24, r20
    17fc:	95 1f       	adc	r25, r21
    17fe:	24 e6       	ldi	r18, 0x64	; 100
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	b9 01       	movw	r22, r18
    1804:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__udivmodhi4>
    1808:	cb 01       	movw	r24, r22
    180a:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_B, PIN_3, PIN_OUTPUT);
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
	 OCR0_REG = pwmValue;
    1816:	ec e5       	ldi	r30, 0x5C	; 92
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	80 83       	st	Z, r24
	 return pwmValue;
    181e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <TIMER0_setDelay_ms_CTC>:

void TIMER0_setDelay_ms_CTC(u16 copy_u16Delay)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	27 97       	sbiw	r28, 0x07	; 7
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	9f 83       	std	Y+7, r25	; 0x07
    1840:	8e 83       	std	Y+6, r24	; 0x06
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0.001;
    1842:	8f e6       	ldi	r24, 0x6F	; 111
    1844:	92 e1       	ldi	r25, 0x12	; 18
    1846:	a3 e8       	ldi	r26, 0x83	; 131
    1848:	ba e3       	ldi	r27, 0x3A	; 58
    184a:	8a 83       	std	Y+2, r24	; 0x02
    184c:	9b 83       	std	Y+3, r25	; 0x03
    184e:	ac 83       	std	Y+4, r26	; 0x04
    1850:	bd 83       	std	Y+5, r27	; 0x05
			// This will set the Tick Time 1mS
			u8 compareValue = (Tick_Time * (float)F_CPU) / TIMER0_PRESCALER_64;
    1852:	6a 81       	ldd	r22, Y+2	; 0x02
    1854:	7b 81       	ldd	r23, Y+3	; 0x03
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	34 e2       	ldi	r19, 0x24	; 36
    185e:	44 ef       	ldi	r20, 0xF4	; 244
    1860:	5a e4       	ldi	r21, 0x4A	; 74
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e4       	ldi	r20, 0x40	; 64
    1874:	50 e4       	ldi	r21, 0x40	; 64
    1876:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	89 83       	std	Y+1, r24	; 0x01
			TCNT0_REG = compareValue;
    188c:	e2 e5       	ldi	r30, 0x52	; 82
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	80 83       	st	Z, r24
    1894:	10 c0       	rjmp	.+32     	; 0x18b6 <TIMER0_setDelay_ms_CTC+0x8c>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
				// This condition is a Busy Wait
				while(TIFR_REG->OCF0 == 0);
    1896:	e8 e5       	ldi	r30, 0x58	; 88
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	82 70       	andi	r24, 0x02	; 2
    189e:	88 23       	and	r24, r24
    18a0:	d1 f3       	breq	.-12     	; 0x1896 <TIMER0_setDelay_ms_CTC+0x6c>

				// Clear the overflow flag
				TIFR_REG->OCF0 = 1;
    18a2:	e8 e5       	ldi	r30, 0x58	; 88
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	82 60       	ori	r24, 0x02	; 2
    18aa:	80 83       	st	Z, r24
				overFlowCounter++;
    18ac:	80 91 b3 01 	lds	r24, 0x01B3
    18b0:	8f 5f       	subi	r24, 0xFF	; 255
    18b2:	80 93 b3 01 	sts	0x01B3, r24
			u8 compareValue = (Tick_Time * (float)F_CPU) / TIMER0_PRESCALER_64;
			TCNT0_REG = compareValue;

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
    18b6:	80 91 b3 01 	lds	r24, 0x01B3
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	8e 81       	ldd	r24, Y+6	; 0x06
    18c0:	9f 81       	ldd	r25, Y+7	; 0x07
    18c2:	28 17       	cp	r18, r24
    18c4:	39 07       	cpc	r19, r25
    18c6:	39 f7       	brne	.-50     	; 0x1896 <TIMER0_setDelay_ms_CTC+0x6c>

				// Clear the overflow flag
				TIFR_REG->OCF0 = 1;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    18c8:	10 92 b3 01 	sts	0x01B3, r1
}
    18cc:	27 96       	adiw	r28, 0x07	; 7
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <TIMER0_setDelay_ms_OVF>:


void TIMER0_setDelay_ms_OVF(u16 copy_u16Delay)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	2e 97       	sbiw	r28, 0x0e	; 14
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	9e 87       	std	Y+14, r25	; 0x0e
    18f4:	8d 87       	std	Y+13, r24	; 0x0d
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0;
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	89 87       	std	Y+9, r24	; 0x09
    1900:	9a 87       	std	Y+10, r25	; 0x0a
    1902:	ab 87       	std	Y+11, r26	; 0x0b
    1904:	bc 87       	std	Y+12, r27	; 0x0c
			Tick_Time = TIMER0_PRESCALER / (float)F_CPU;
    1906:	8d eb       	ldi	r24, 0xBD	; 189
    1908:	97 e3       	ldi	r25, 0x37	; 55
    190a:	a6 e8       	ldi	r26, 0x86	; 134
    190c:	b4 e3       	ldi	r27, 0x34	; 52
    190e:	89 87       	std	Y+9, r24	; 0x09
    1910:	9a 87       	std	Y+10, r25	; 0x0a
    1912:	ab 87       	std	Y+11, r26	; 0x0b
    1914:	bc 87       	std	Y+12, r27	; 0x0c
			float Time_Overflow = Tick_Time * TIMER0_SIZE;
    1916:	69 85       	ldd	r22, Y+9	; 0x09
    1918:	7a 85       	ldd	r23, Y+10	; 0x0a
    191a:	8b 85       	ldd	r24, Y+11	; 0x0b
    191c:	9c 85       	ldd	r25, Y+12	; 0x0c
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	53 e4       	ldi	r21, 0x43	; 67
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	af 83       	std	Y+7, r26	; 0x07
    1934:	b8 87       	std	Y+8, r27	; 0x08
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));
    1936:	8d 85       	ldd	r24, Y+13	; 0x0d
    1938:	9e 85       	ldd	r25, Y+14	; 0x0e
    193a:	cc 01       	movw	r24, r24
    193c:	a0 e0       	ldi	r26, 0x00	; 0
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	2d 81       	ldd	r18, Y+5	; 0x05
    1952:	3e 81       	ldd	r19, Y+6	; 0x06
    1954:	4f 81       	ldd	r20, Y+7	; 0x07
    1956:	58 85       	ldd	r21, Y+8	; 0x08
    1958:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 8b 24 	call	0x4916	; 0x4916 <ceil>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	ab 83       	std	Y+3, r26	; 0x03
    1972:	bc 83       	std	Y+4, r27	; 0x04
    1974:	10 c0       	rjmp	.+32     	; 0x1996 <TIMER0_setDelay_ms_OVF+0xb8>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
				// This condition is a Busy Wait
				while(TIFR_REG->TOV0 == 0);
    1976:	e8 e5       	ldi	r30, 0x58	; 88
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	81 70       	andi	r24, 0x01	; 1
    197e:	88 23       	and	r24, r24
    1980:	d1 f3       	breq	.-12     	; 0x1976 <TIMER0_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV0 = 1;
    1982:	e8 e5       	ldi	r30, 0x58	; 88
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	81 60       	ori	r24, 0x01	; 1
    198a:	80 83       	st	Z, r24
				overFlowCounter++;
    198c:	80 91 b4 01 	lds	r24, 0x01B4
    1990:	8f 5f       	subi	r24, 0xFF	; 255
    1992:	80 93 b4 01 	sts	0x01B4, r24
			float Time_Overflow = Tick_Time * TIMER0_SIZE;
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
    1996:	80 91 b4 01 	lds	r24, 0x01B4
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	aa 27       	eor	r26, r26
    19a0:	97 fd       	sbrc	r25, 7
    19a2:	a0 95       	com	r26
    19a4:	ba 2f       	mov	r27, r26
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	29 81       	ldd	r18, Y+1	; 0x01
    19b8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ba:	4b 81       	ldd	r20, Y+3	; 0x03
    19bc:	5c 81       	ldd	r21, Y+4	; 0x04
    19be:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    19c2:	88 23       	and	r24, r24
    19c4:	c1 f6       	brne	.-80     	; 0x1976 <TIMER0_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV0 = 1;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    19c6:	10 92 b4 01 	sts	0x01B4, r1
}
    19ca:	2e 96       	adiw	r28, 0x0e	; 14
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <DutyCycle_ADC_Mapping>:

u16 DutyCycle_ADC_Mapping(u16 copy_u16Data)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <DutyCycle_ADC_Mapping+0x6>
    19e2:	0f 92       	push	r0
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	9b 83       	std	Y+3, r25	; 0x03
    19ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 dutyCycleValue = ((u32)copy_u16Data * 100) / 1023;
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	9b 81       	ldd	r25, Y+3	; 0x03
    19f0:	cc 01       	movw	r24, r24
    19f2:	a0 e0       	ldi	r26, 0x00	; 0
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	24 e6       	ldi	r18, 0x64	; 100
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 de 23 	call	0x47bc	; 0x47bc <__mulsi3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	2f ef       	ldi	r18, 0xFF	; 255
    1a0c:	33 e0       	ldi	r19, 0x03	; 3
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 11 24 	call	0x4822	; 0x4822 <__udivmodsi4>
    1a1a:	da 01       	movw	r26, r20
    1a1c:	c9 01       	movw	r24, r18
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	return  dutyCycleValue ;
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <TIMER0_CallBackFunction_COMP>:

void TIMER0_CallBackFunction_COMP(void (*Ptr_TIMER)(void))
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <TIMER0_CallBackFunction_COMP+0x6>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER0_COMP = Ptr_TIMER;
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	90 93 c8 01 	sts	0x01C8, r25
    1a48:	80 93 c7 01 	sts	0x01C7, r24
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <TIMER0_CallBackFunction_OVF>:

void TIMER0_CallBackFunction_OVF(void (*Ptr_TIMER)(void))
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <TIMER0_CallBackFunction_OVF+0x6>
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER0_OVF = Ptr_TIMER;
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	90 93 ca 01 	sts	0x01CA, r25
    1a6c:	80 93 c9 01 	sts	0x01C9, r24
}
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <__vector_10>:


void __vector_10(void) __attribute__((signal, used));
void __vector_10(void) {
    1a7a:	1f 92       	push	r1
    1a7c:	0f 92       	push	r0
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	0f 92       	push	r0
    1a82:	11 24       	eor	r1, r1
    1a84:	2f 93       	push	r18
    1a86:	3f 93       	push	r19
    1a88:	4f 93       	push	r20
    1a8a:	5f 93       	push	r21
    1a8c:	6f 93       	push	r22
    1a8e:	7f 93       	push	r23
    1a90:	8f 93       	push	r24
    1a92:	9f 93       	push	r25
    1a94:	af 93       	push	r26
    1a96:	bf 93       	push	r27
    1a98:	ef 93       	push	r30
    1a9a:	ff 93       	push	r31
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER0_COMP != NULL) {
    1aa4:	80 91 c7 01 	lds	r24, 0x01C7
    1aa8:	90 91 c8 01 	lds	r25, 0x01C8
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	29 f0       	breq	.+10     	; 0x1aba <__vector_10+0x40>
		CallBackPtr_TIMER0_COMP();
    1ab0:	e0 91 c7 01 	lds	r30, 0x01C7
    1ab4:	f0 91 c8 01 	lds	r31, 0x01C8
    1ab8:	09 95       	icall
	}
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	ff 91       	pop	r31
    1ac0:	ef 91       	pop	r30
    1ac2:	bf 91       	pop	r27
    1ac4:	af 91       	pop	r26
    1ac6:	9f 91       	pop	r25
    1ac8:	8f 91       	pop	r24
    1aca:	7f 91       	pop	r23
    1acc:	6f 91       	pop	r22
    1ace:	5f 91       	pop	r21
    1ad0:	4f 91       	pop	r20
    1ad2:	3f 91       	pop	r19
    1ad4:	2f 91       	pop	r18
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	0f 90       	pop	r0
    1adc:	1f 90       	pop	r1
    1ade:	18 95       	reti

00001ae0 <__vector_11>:

void __vector_11(void) __attribute__((signal, used));
void __vector_11(void) {
    1ae0:	1f 92       	push	r1
    1ae2:	0f 92       	push	r0
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	0f 92       	push	r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	2f 93       	push	r18
    1aec:	3f 93       	push	r19
    1aee:	4f 93       	push	r20
    1af0:	5f 93       	push	r21
    1af2:	6f 93       	push	r22
    1af4:	7f 93       	push	r23
    1af6:	8f 93       	push	r24
    1af8:	9f 93       	push	r25
    1afa:	af 93       	push	r26
    1afc:	bf 93       	push	r27
    1afe:	ef 93       	push	r30
    1b00:	ff 93       	push	r31
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER0_OVF != NULL) {
    1b0a:	80 91 c9 01 	lds	r24, 0x01C9
    1b0e:	90 91 ca 01 	lds	r25, 0x01CA
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	29 f0       	breq	.+10     	; 0x1b20 <__vector_11+0x40>
		CallBackPtr_TIMER0_OVF();
    1b16:	e0 91 c9 01 	lds	r30, 0x01C9
    1b1a:	f0 91 ca 01 	lds	r31, 0x01CA
    1b1e:	09 95       	icall
	}
}
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	ff 91       	pop	r31
    1b26:	ef 91       	pop	r30
    1b28:	bf 91       	pop	r27
    1b2a:	af 91       	pop	r26
    1b2c:	9f 91       	pop	r25
    1b2e:	8f 91       	pop	r24
    1b30:	7f 91       	pop	r23
    1b32:	6f 91       	pop	r22
    1b34:	5f 91       	pop	r21
    1b36:	4f 91       	pop	r20
    1b38:	3f 91       	pop	r19
    1b3a:	2f 91       	pop	r18
    1b3c:	0f 90       	pop	r0
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	0f 90       	pop	r0
    1b42:	1f 90       	pop	r1
    1b44:	18 95       	reti

00001b46 <GPIO_voidSetPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPinDirection(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinDIR) {
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <GPIO_voidSetPinDirection+0x6>
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <GPIO_voidSetPinDirection+0x8>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <GPIO_voidSetPinDirection+0xa>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	8a 83       	std	Y+2, r24	; 0x02
    1b56:	6b 83       	std	Y+3, r22	; 0x03
    1b58:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
    1b5a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	88 30       	cpi	r24, 0x08	; 8
    1b60:	18 f0       	brcs	.+6      	; 0x1b68 <GPIO_voidSetPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	e1 c0       	rjmp	.+450    	; 0x1d2a <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	84 30       	cpi	r24, 0x04	; 4
    1b6c:	18 f0       	brcs	.+6      	; 0x1b74 <GPIO_voidSetPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	db c0       	rjmp	.+438    	; 0x1d2a <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	88 23       	and	r24, r24
    1b78:	31 f0       	breq	.+12     	; 0x1b86 <GPIO_voidSetPinDirection+0x40>
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	19 f0       	breq	.+6      	; 0x1b86 <GPIO_voidSetPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1b80:	83 e0       	ldi	r24, 0x03	; 3
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	d2 c0       	rjmp	.+420    	; 0x1d2a <GPIO_voidSetPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	3e 83       	std	Y+6, r19	; 0x06
    1b8e:	2d 83       	std	Y+5, r18	; 0x05
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <GPIO_voidSetPinDirection+0x56>
    1b9a:	43 c0       	rjmp	.+134    	; 0x1c22 <GPIO_voidSetPinDirection+0xdc>
    1b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <GPIO_voidSetPinDirection+0x6a>
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	71 f0       	breq	.+28     	; 0x1bca <GPIO_voidSetPinDirection+0x84>
    1bae:	bc c0       	rjmp	.+376    	; 0x1d28 <GPIO_voidSetPinDirection+0x1e2>
    1bb0:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb2:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb4:	22 30       	cpi	r18, 0x02	; 2
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <GPIO_voidSetPinDirection+0x76>
    1bba:	5f c0       	rjmp	.+190    	; 0x1c7a <GPIO_voidSetPinDirection+0x134>
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	83 30       	cpi	r24, 0x03	; 3
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <GPIO_voidSetPinDirection+0x82>
    1bc6:	85 c0       	rjmp	.+266    	; 0x1cd2 <GPIO_voidSetPinDirection+0x18c>
    1bc8:	af c0       	rjmp	.+350    	; 0x1d28 <GPIO_voidSetPinDirection+0x1e2>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	a1 f4       	brne	.+40     	; 0x1bf8 <GPIO_voidSetPinDirection+0xb2>
					SET_BIT(DDRA_REG, copy_u8pinID);
    1bd0:	aa e3       	ldi	r26, 0x3A	; 58
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ea e3       	ldi	r30, 0x3A	; 58
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <GPIO_voidSetPinDirection+0xa8>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <GPIO_voidSetPinDirection+0xa4>
    1bf2:	84 2b       	or	r24, r20
    1bf4:	8c 93       	st	X, r24
    1bf6:	98 c0       	rjmp	.+304    	; 0x1d28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
    1bf8:	aa e3       	ldi	r26, 0x3A	; 58
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	ea e3       	ldi	r30, 0x3A	; 58
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	48 2f       	mov	r20, r24
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	02 2e       	mov	r0, r18
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <GPIO_voidSetPinDirection+0xd0>
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	0a 94       	dec	r0
    1c18:	e2 f7       	brpl	.-8      	; 0x1c12 <GPIO_voidSetPinDirection+0xcc>
    1c1a:	80 95       	com	r24
    1c1c:	84 23       	and	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	83 c0       	rjmp	.+262    	; 0x1d28 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	a1 f4       	brne	.+40     	; 0x1c50 <GPIO_voidSetPinDirection+0x10a>
					SET_BIT(DDRB_REG, copy_u8pinID);
    1c28:	a7 e3       	ldi	r26, 0x37	; 55
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e7 e3       	ldi	r30, 0x37	; 55
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 2e       	mov	r0, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <GPIO_voidSetPinDirection+0x100>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	0a 94       	dec	r0
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <GPIO_voidSetPinDirection+0xfc>
    1c4a:	84 2b       	or	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	6c c0       	rjmp	.+216    	; 0x1d28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
    1c50:	a7 e3       	ldi	r26, 0x37	; 55
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e7 e3       	ldi	r30, 0x37	; 55
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <GPIO_voidSetPinDirection+0x128>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <GPIO_voidSetPinDirection+0x124>
    1c72:	80 95       	com	r24
    1c74:	84 23       	and	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	57 c0       	rjmp	.+174    	; 0x1d28 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	a1 f4       	brne	.+40     	; 0x1ca8 <GPIO_voidSetPinDirection+0x162>
					SET_BIT(DDRC_REG, copy_u8pinID);
    1c80:	a4 e3       	ldi	r26, 0x34	; 52
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e4 e3       	ldi	r30, 0x34	; 52
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 2e       	mov	r0, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <GPIO_voidSetPinDirection+0x158>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <GPIO_voidSetPinDirection+0x154>
    1ca2:	84 2b       	or	r24, r20
    1ca4:	8c 93       	st	X, r24
    1ca6:	40 c0       	rjmp	.+128    	; 0x1d28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
    1ca8:	a4 e3       	ldi	r26, 0x34	; 52
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e4 e3       	ldi	r30, 0x34	; 52
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <GPIO_voidSetPinDirection+0x180>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <GPIO_voidSetPinDirection+0x17c>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	2b c0       	rjmp	.+86     	; 0x1d28 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	a1 f4       	brne	.+40     	; 0x1d00 <GPIO_voidSetPinDirection+0x1ba>
					SET_BIT(DDRD_REG, copy_u8pinID);
    1cd8:	a1 e3       	ldi	r26, 0x31	; 49
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e1 e3       	ldi	r30, 0x31	; 49
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_voidSetPinDirection+0x1b0>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_voidSetPinDirection+0x1ac>
    1cfa:	84 2b       	or	r24, r20
    1cfc:	8c 93       	st	X, r24
    1cfe:	14 c0       	rjmp	.+40     	; 0x1d28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
    1d00:	a1 e3       	ldi	r26, 0x31	; 49
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e1 e3       	ldi	r30, 0x31	; 49
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <GPIO_voidSetPinDirection+0x1d8>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <GPIO_voidSetPinDirection+0x1d4>
    1d22:	80 95       	com	r24
    1d24:	84 23       	and	r24, r20
    1d26:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1d28:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d2c:	26 96       	adiw	r28, 0x06	; 6
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <GPIO_voidSetPinValue>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_voidSetPinValue(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinValue)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <GPIO_voidSetPinValue+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <GPIO_voidSetPinValue+0x8>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <GPIO_voidSetPinValue+0xa>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
    1d4e:	6b 83       	std	Y+3, r22	; 0x03
    1d50:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
    1d52:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	88 30       	cpi	r24, 0x08	; 8
    1d58:	18 f0       	brcs	.+6      	; 0x1d60 <GPIO_voidSetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	e1 c0       	rjmp	.+450    	; 0x1f22 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	84 30       	cpi	r24, 0x04	; 4
    1d64:	18 f0       	brcs	.+6      	; 0x1d6c <GPIO_voidSetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	db c0       	rjmp	.+438    	; 0x1f22 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	31 f0       	breq	.+12     	; 0x1d7e <GPIO_voidSetPinValue+0x40>
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	88 23       	and	r24, r24
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <GPIO_voidSetPinValue+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	d2 c0       	rjmp	.+420    	; 0x1f22 <GPIO_voidSetPinValue+0x1e4>
	}
	else {
		switch(copy_u8portID)
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	3e 83       	std	Y+6, r19	; 0x06
    1d86:	2d 83       	std	Y+5, r18	; 0x05
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <GPIO_voidSetPinValue+0x56>
    1d92:	43 c0       	rjmp	.+134    	; 0x1e1a <GPIO_voidSetPinValue+0xdc>
    1d94:	2d 81       	ldd	r18, Y+5	; 0x05
    1d96:	3e 81       	ldd	r19, Y+6	; 0x06
    1d98:	22 30       	cpi	r18, 0x02	; 2
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <GPIO_voidSetPinValue+0x6a>
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	9e 81       	ldd	r25, Y+6	; 0x06
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	71 f0       	breq	.+28     	; 0x1dc2 <GPIO_voidSetPinValue+0x84>
    1da6:	bc c0       	rjmp	.+376    	; 0x1f20 <GPIO_voidSetPinValue+0x1e2>
    1da8:	2d 81       	ldd	r18, Y+5	; 0x05
    1daa:	3e 81       	ldd	r19, Y+6	; 0x06
    1dac:	22 30       	cpi	r18, 0x02	; 2
    1dae:	31 05       	cpc	r19, r1
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <GPIO_voidSetPinValue+0x76>
    1db2:	5f c0       	rjmp	.+190    	; 0x1e72 <GPIO_voidSetPinValue+0x134>
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	83 30       	cpi	r24, 0x03	; 3
    1dba:	91 05       	cpc	r25, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <GPIO_voidSetPinValue+0x82>
    1dbe:	85 c0       	rjmp	.+266    	; 0x1eca <GPIO_voidSetPinValue+0x18c>
    1dc0:	af c0       	rjmp	.+350    	; 0x1f20 <GPIO_voidSetPinValue+0x1e2>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	a1 f4       	brne	.+40     	; 0x1df0 <GPIO_voidSetPinValue+0xb2>
					SET_BIT(PORTA_REG ,copy_u8pinID);
    1dc8:	ab e3       	ldi	r26, 0x3B	; 59
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	eb e3       	ldi	r30, 0x3B	; 59
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <GPIO_voidSetPinValue+0xa8>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <GPIO_voidSetPinValue+0xa4>
    1dea:	84 2b       	or	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	98 c0       	rjmp	.+304    	; 0x1f20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
    1df0:	ab e3       	ldi	r26, 0x3B	; 59
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	eb e3       	ldi	r30, 0x3B	; 59
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <GPIO_voidSetPinValue+0xd0>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <GPIO_voidSetPinValue+0xcc>
    1e12:	80 95       	com	r24
    1e14:	84 23       	and	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	83 c0       	rjmp	.+262    	; 0x1f20 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	a1 f4       	brne	.+40     	; 0x1e48 <GPIO_voidSetPinValue+0x10a>
					SET_BIT(PORTB_REG ,copy_u8pinID);
    1e20:	a8 e3       	ldi	r26, 0x38	; 56
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e8 e3       	ldi	r30, 0x38	; 56
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	48 2f       	mov	r20, r24
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	02 2e       	mov	r0, r18
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <GPIO_voidSetPinValue+0x100>
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	0a 94       	dec	r0
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <GPIO_voidSetPinValue+0xfc>
    1e42:	84 2b       	or	r24, r20
    1e44:	8c 93       	st	X, r24
    1e46:	6c c0       	rjmp	.+216    	; 0x1f20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
    1e48:	a8 e3       	ldi	r26, 0x38	; 56
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e8 e3       	ldi	r30, 0x38	; 56
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	48 2f       	mov	r20, r24
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 2e       	mov	r0, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <GPIO_voidSetPinValue+0x128>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <GPIO_voidSetPinValue+0x124>
    1e6a:	80 95       	com	r24
    1e6c:	84 23       	and	r24, r20
    1e6e:	8c 93       	st	X, r24
    1e70:	57 c0       	rjmp	.+174    	; 0x1f20 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	a1 f4       	brne	.+40     	; 0x1ea0 <GPIO_voidSetPinValue+0x162>
					SET_BIT(PORTC_REG ,copy_u8pinID);
    1e78:	a5 e3       	ldi	r26, 0x35	; 53
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e5 e3       	ldi	r30, 0x35	; 53
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	48 2f       	mov	r20, r24
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	02 2e       	mov	r0, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <GPIO_voidSetPinValue+0x158>
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	0a 94       	dec	r0
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <GPIO_voidSetPinValue+0x154>
    1e9a:	84 2b       	or	r24, r20
    1e9c:	8c 93       	st	X, r24
    1e9e:	40 c0       	rjmp	.+128    	; 0x1f20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
    1ea0:	a5 e3       	ldi	r26, 0x35	; 53
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e5 e3       	ldi	r30, 0x35	; 53
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <GPIO_voidSetPinValue+0x180>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <GPIO_voidSetPinValue+0x17c>
    1ec2:	80 95       	com	r24
    1ec4:	84 23       	and	r24, r20
    1ec6:	8c 93       	st	X, r24
    1ec8:	2b c0       	rjmp	.+86     	; 0x1f20 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	a1 f4       	brne	.+40     	; 0x1ef8 <GPIO_voidSetPinValue+0x1ba>
					SET_BIT(PORTD_REG ,copy_u8pinID);
    1ed0:	a2 e3       	ldi	r26, 0x32	; 50
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e2 e3       	ldi	r30, 0x32	; 50
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	48 2f       	mov	r20, r24
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	02 2e       	mov	r0, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <GPIO_voidSetPinValue+0x1b0>
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	0a 94       	dec	r0
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <GPIO_voidSetPinValue+0x1ac>
    1ef2:	84 2b       	or	r24, r20
    1ef4:	8c 93       	st	X, r24
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
    1ef8:	a2 e3       	ldi	r26, 0x32	; 50
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e2 e3       	ldi	r30, 0x32	; 50
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	48 2f       	mov	r20, r24
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	28 2f       	mov	r18, r24
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 2e       	mov	r0, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <GPIO_voidSetPinValue+0x1d8>
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	0a 94       	dec	r0
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <GPIO_voidSetPinValue+0x1d4>
    1f1a:	80 95       	com	r24
    1f1c:	84 23       	and	r24, r20
    1f1e:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1f20:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f24:	26 96       	adiw	r28, 0x06	; 6
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <GPIO_u8GetPinValue>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
u8 GPIO_u8GetPinValue(u8 copy_u8portID, u8 copy_u8pinID) {
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <GPIO_u8GetPinValue+0x6>
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <GPIO_u8GetPinValue+0x8>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <GPIO_u8GetPinValue+0xa>
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	8b 83       	std	Y+3, r24	; 0x03
    1f46:	6c 83       	std	Y+4, r22	; 0x04
	u8 GPIO_Driver_Checker = 0;
    1f48:	1a 82       	std	Y+2, r1	; 0x02
	u8 pin_value = LOGIC_LOW;
    1f4a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	88 30       	cpi	r24, 0x08	; 8
    1f50:	18 f0       	brcs	.+6      	; 0x1f58 <GPIO_u8GetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	8a 83       	std	Y+2, r24	; 0x02
    1f56:	87 c0       	rjmp	.+270    	; 0x2066 <GPIO_u8GetPinValue+0x130>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	84 30       	cpi	r24, 0x04	; 4
    1f5c:	18 f0       	brcs	.+6      	; 0x1f64 <GPIO_u8GetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	81 c0       	rjmp	.+258    	; 0x2066 <GPIO_u8GetPinValue+0x130>
	}
	else {
		/* Read the pin value as required */
		switch(copy_u8portID) {
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	3e 83       	std	Y+6, r19	; 0x06
    1f6c:	2d 83       	std	Y+5, r18	; 0x05
    1f6e:	4d 81       	ldd	r20, Y+5	; 0x05
    1f70:	5e 81       	ldd	r21, Y+6	; 0x06
    1f72:	41 30       	cpi	r20, 0x01	; 1
    1f74:	51 05       	cpc	r21, r1
    1f76:	79 f1       	breq	.+94     	; 0x1fd6 <GPIO_u8GetPinValue+0xa0>
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	91 05       	cpc	r25, r1
    1f80:	34 f4       	brge	.+12     	; 0x1f8e <GPIO_u8GetPinValue+0x58>
    1f82:	2d 81       	ldd	r18, Y+5	; 0x05
    1f84:	3e 81       	ldd	r19, Y+6	; 0x06
    1f86:	21 15       	cp	r18, r1
    1f88:	31 05       	cpc	r19, r1
    1f8a:	69 f0       	breq	.+26     	; 0x1fa6 <GPIO_u8GetPinValue+0x70>
    1f8c:	6b c0       	rjmp	.+214    	; 0x2064 <GPIO_u8GetPinValue+0x12e>
    1f8e:	4d 81       	ldd	r20, Y+5	; 0x05
    1f90:	5e 81       	ldd	r21, Y+6	; 0x06
    1f92:	42 30       	cpi	r20, 0x02	; 2
    1f94:	51 05       	cpc	r21, r1
    1f96:	b9 f1       	breq	.+110    	; 0x2006 <GPIO_u8GetPinValue+0xd0>
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <GPIO_u8GetPinValue+0x6e>
    1fa2:	49 c0       	rjmp	.+146    	; 0x2036 <GPIO_u8GetPinValue+0x100>
    1fa4:	5f c0       	rjmp	.+190    	; 0x2064 <GPIO_u8GetPinValue+0x12e>
			case PORT_A:
				// Checks if the bit equals '1' or not
				if(BIT_IS_SET(PINA_REG, copy_u8pinID)) {
    1fa6:	e9 e3       	ldi	r30, 0x39	; 57
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb2:	88 2f       	mov	r24, r24
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a9 01       	movw	r20, r18
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <GPIO_u8GetPinValue+0x88>
    1fba:	55 95       	asr	r21
    1fbc:	47 95       	ror	r20
    1fbe:	8a 95       	dec	r24
    1fc0:	e2 f7       	brpl	.-8      	; 0x1fba <GPIO_u8GetPinValue+0x84>
    1fc2:	ca 01       	movw	r24, r20
    1fc4:	81 70       	andi	r24, 0x01	; 1
    1fc6:	90 70       	andi	r25, 0x00	; 0
    1fc8:	88 23       	and	r24, r24
    1fca:	19 f0       	breq	.+6      	; 0x1fd2 <GPIO_u8GetPinValue+0x9c>
					pin_value = LOGIC_HIGH;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	49 c0       	rjmp	.+146    	; 0x2064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1fd2:	19 82       	std	Y+1, r1	; 0x01
    1fd4:	47 c0       	rjmp	.+142    	; 0x2064 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_B:
				if(BIT_IS_SET(PINB_REG,copy_u8pinID)) {
    1fd6:	e6 e3       	ldi	r30, 0x36	; 54
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	88 2f       	mov	r24, r24
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a9 01       	movw	r20, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <GPIO_u8GetPinValue+0xb8>
    1fea:	55 95       	asr	r21
    1fec:	47 95       	ror	r20
    1fee:	8a 95       	dec	r24
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <GPIO_u8GetPinValue+0xb4>
    1ff2:	ca 01       	movw	r24, r20
    1ff4:	81 70       	andi	r24, 0x01	; 1
    1ff6:	90 70       	andi	r25, 0x00	; 0
    1ff8:	88 23       	and	r24, r24
    1ffa:	19 f0       	breq	.+6      	; 0x2002 <GPIO_u8GetPinValue+0xcc>
					pin_value = LOGIC_HIGH;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	31 c0       	rjmp	.+98     	; 0x2064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    2002:	19 82       	std	Y+1, r1	; 0x01
    2004:	2f c0       	rjmp	.+94     	; 0x2064 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_C:
				if(BIT_IS_SET(PINC_REG,copy_u8pinID)) {
    2006:	e3 e3       	ldi	r30, 0x33	; 51
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a9 01       	movw	r20, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <GPIO_u8GetPinValue+0xe8>
    201a:	55 95       	asr	r21
    201c:	47 95       	ror	r20
    201e:	8a 95       	dec	r24
    2020:	e2 f7       	brpl	.-8      	; 0x201a <GPIO_u8GetPinValue+0xe4>
    2022:	ca 01       	movw	r24, r20
    2024:	81 70       	andi	r24, 0x01	; 1
    2026:	90 70       	andi	r25, 0x00	; 0
    2028:	88 23       	and	r24, r24
    202a:	19 f0       	breq	.+6      	; 0x2032 <GPIO_u8GetPinValue+0xfc>
					pin_value = LOGIC_HIGH;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	19 c0       	rjmp	.+50     	; 0x2064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    2032:	19 82       	std	Y+1, r1	; 0x01
    2034:	17 c0       	rjmp	.+46     	; 0x2064 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_D:
				if(BIT_IS_SET(PIND_REG,copy_u8pinID)) {
    2036:	e0 e3       	ldi	r30, 0x30	; 48
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a9 01       	movw	r20, r18
    2048:	02 c0       	rjmp	.+4      	; 0x204e <GPIO_u8GetPinValue+0x118>
    204a:	55 95       	asr	r21
    204c:	47 95       	ror	r20
    204e:	8a 95       	dec	r24
    2050:	e2 f7       	brpl	.-8      	; 0x204a <GPIO_u8GetPinValue+0x114>
    2052:	ca 01       	movw	r24, r20
    2054:	81 70       	andi	r24, 0x01	; 1
    2056:	90 70       	andi	r25, 0x00	; 0
    2058:	88 23       	and	r24, r24
    205a:	19 f0       	breq	.+6      	; 0x2062 <GPIO_u8GetPinValue+0x12c>
					pin_value = LOGIC_HIGH;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    2062:	19 82       	std	Y+1, r1	; 0x01
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2064:	1a 82       	std	Y+2, r1	; 0x02
	}
	return pin_value;
    2066:	89 81       	ldd	r24, Y+1	; 0x01
}
    2068:	26 96       	adiw	r28, 0x06	; 6
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <GPIO_voidTogglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_voidTogglePin(u8 copy_u8portID, u8 copy_u8pinID) {
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <GPIO_voidTogglePin+0x6>
    2080:	00 d0       	rcall	.+0      	; 0x2082 <GPIO_voidTogglePin+0x8>
    2082:	0f 92       	push	r0
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	8a 83       	std	Y+2, r24	; 0x02
    208a:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    208c:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	88 30       	cpi	r24, 0x08	; 8
    2092:	18 f0       	brcs	.+6      	; 0x209a <GPIO_voidTogglePin+0x20>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	75 c0       	rjmp	.+234    	; 0x2184 <GPIO_voidTogglePin+0x10a>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	84 30       	cpi	r24, 0x04	; 4
    209e:	18 f0       	brcs	.+6      	; 0x20a6 <GPIO_voidTogglePin+0x2c>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	6f c0       	rjmp	.+222    	; 0x2184 <GPIO_voidTogglePin+0x10a>
	}
	else {
		switch(copy_u8portID) {
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	3d 83       	std	Y+5, r19	; 0x05
    20ae:	2c 83       	std	Y+4, r18	; 0x04
    20b0:	8c 81       	ldd	r24, Y+4	; 0x04
    20b2:	9d 81       	ldd	r25, Y+5	; 0x05
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	91 05       	cpc	r25, r1
    20b8:	49 f1       	breq	.+82     	; 0x210c <GPIO_voidTogglePin+0x92>
    20ba:	2c 81       	ldd	r18, Y+4	; 0x04
    20bc:	3d 81       	ldd	r19, Y+5	; 0x05
    20be:	22 30       	cpi	r18, 0x02	; 2
    20c0:	31 05       	cpc	r19, r1
    20c2:	2c f4       	brge	.+10     	; 0x20ce <GPIO_voidTogglePin+0x54>
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	9d 81       	ldd	r25, Y+5	; 0x05
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	61 f0       	breq	.+24     	; 0x20e4 <GPIO_voidTogglePin+0x6a>
    20cc:	5a c0       	rjmp	.+180    	; 0x2182 <GPIO_voidTogglePin+0x108>
    20ce:	2c 81       	ldd	r18, Y+4	; 0x04
    20d0:	3d 81       	ldd	r19, Y+5	; 0x05
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	31 05       	cpc	r19, r1
    20d6:	71 f1       	breq	.+92     	; 0x2134 <GPIO_voidTogglePin+0xba>
    20d8:	8c 81       	ldd	r24, Y+4	; 0x04
    20da:	9d 81       	ldd	r25, Y+5	; 0x05
    20dc:	83 30       	cpi	r24, 0x03	; 3
    20de:	91 05       	cpc	r25, r1
    20e0:	e9 f1       	breq	.+122    	; 0x215c <GPIO_voidTogglePin+0xe2>
    20e2:	4f c0       	rjmp	.+158    	; 0x2182 <GPIO_voidTogglePin+0x108>
			case PORT_A:
				TOG_BIT(PORTA_REG, copy_u8pinID);
    20e4:	ab e3       	ldi	r26, 0x3B	; 59
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	eb e3       	ldi	r30, 0x3B	; 59
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	48 2f       	mov	r20, r24
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 2e       	mov	r0, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <GPIO_voidTogglePin+0x88>
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	0a 94       	dec	r0
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <GPIO_voidTogglePin+0x84>
    2106:	84 27       	eor	r24, r20
    2108:	8c 93       	st	X, r24
    210a:	3b c0       	rjmp	.+118    	; 0x2182 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_B:
				TOG_BIT(PORTB_REG, copy_u8pinID);
    210c:	a8 e3       	ldi	r26, 0x38	; 56
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e8 e3       	ldi	r30, 0x38	; 56
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	48 2f       	mov	r20, r24
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <GPIO_voidTogglePin+0xb0>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <GPIO_voidTogglePin+0xac>
    212e:	84 27       	eor	r24, r20
    2130:	8c 93       	st	X, r24
    2132:	27 c0       	rjmp	.+78     	; 0x2182 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_C:
				TOG_BIT(PORTC_REG, copy_u8pinID);
    2134:	a5 e3       	ldi	r26, 0x35	; 53
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e5 e3       	ldi	r30, 0x35	; 53
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	48 2f       	mov	r20, r24
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	02 2e       	mov	r0, r18
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <GPIO_voidTogglePin+0xd8>
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	0a 94       	dec	r0
    2154:	e2 f7       	brpl	.-8      	; 0x214e <GPIO_voidTogglePin+0xd4>
    2156:	84 27       	eor	r24, r20
    2158:	8c 93       	st	X, r24
    215a:	13 c0       	rjmp	.+38     	; 0x2182 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_D:
				TOG_BIT(PORTD_REG, copy_u8pinID);
    215c:	a2 e3       	ldi	r26, 0x32	; 50
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e2 e3       	ldi	r30, 0x32	; 50
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	48 2f       	mov	r20, r24
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	02 2e       	mov	r0, r18
    2174:	02 c0       	rjmp	.+4      	; 0x217a <GPIO_voidTogglePin+0x100>
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	0a 94       	dec	r0
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <GPIO_voidTogglePin+0xfc>
    217e:	84 27       	eor	r24, r20
    2180:	8c 93       	st	X, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2182:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2184:	89 81       	ldd	r24, Y+1	; 0x01
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <GPIO_voidSetPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortDirection(u8 copy_u8portID, u8 copy_u8portDIR) {
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <GPIO_voidSetPortDirection+0x6>
    219c:	00 d0       	rcall	.+0      	; 0x219e <GPIO_voidSetPortDirection+0x8>
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    21a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    21a8:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    21aa:	8a 81       	ldd	r24, Y+2	; 0x02
    21ac:	84 30       	cpi	r24, 0x04	; 4
    21ae:	18 f0       	brcs	.+6      	; 0x21b6 <GPIO_voidSetPortDirection+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	3c c0       	rjmp	.+120    	; 0x222e <GPIO_voidSetPortDirection+0x98>
	}
	else if((copy_u8portDIR != PORT_INPUT) && (copy_u8portDIR != PORT_OUTPUT)) {
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	88 23       	and	r24, r24
    21ba:	31 f0       	breq	.+12     	; 0x21c8 <GPIO_voidSetPortDirection+0x32>
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	8f 3f       	cpi	r24, 0xFF	; 255
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <GPIO_voidSetPortDirection+0x32>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	33 c0       	rjmp	.+102    	; 0x222e <GPIO_voidSetPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	3d 83       	std	Y+5, r19	; 0x05
    21d0:	2c 83       	std	Y+4, r18	; 0x04
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	9d 81       	ldd	r25, Y+5	; 0x05
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	91 05       	cpc	r25, r1
    21da:	d1 f0       	breq	.+52     	; 0x2210 <GPIO_voidSetPortDirection+0x7a>
    21dc:	2c 81       	ldd	r18, Y+4	; 0x04
    21de:	3d 81       	ldd	r19, Y+5	; 0x05
    21e0:	22 30       	cpi	r18, 0x02	; 2
    21e2:	31 05       	cpc	r19, r1
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <GPIO_voidSetPortDirection+0x5a>
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	61 f0       	breq	.+24     	; 0x2206 <GPIO_voidSetPortDirection+0x70>
    21ee:	1e c0       	rjmp	.+60     	; 0x222c <GPIO_voidSetPortDirection+0x96>
    21f0:	2c 81       	ldd	r18, Y+4	; 0x04
    21f2:	3d 81       	ldd	r19, Y+5	; 0x05
    21f4:	22 30       	cpi	r18, 0x02	; 2
    21f6:	31 05       	cpc	r19, r1
    21f8:	81 f0       	breq	.+32     	; 0x221a <GPIO_voidSetPortDirection+0x84>
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	9d 81       	ldd	r25, Y+5	; 0x05
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	91 05       	cpc	r25, r1
    2202:	81 f0       	breq	.+32     	; 0x2224 <GPIO_voidSetPortDirection+0x8e>
    2204:	13 c0       	rjmp	.+38     	; 0x222c <GPIO_voidSetPortDirection+0x96>
			case PORT_A:
				DDRA_REG = copy_u8portDIR;
    2206:	ea e3       	ldi	r30, 0x3A	; 58
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	80 83       	st	Z, r24
    220e:	0e c0       	rjmp	.+28     	; 0x222c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_B:
				DDRB_REG = copy_u8portDIR;
    2210:	e7 e3       	ldi	r30, 0x37	; 55
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	80 83       	st	Z, r24
    2218:	09 c0       	rjmp	.+18     	; 0x222c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_C:
				DDRC_REG = copy_u8portDIR;
    221a:	e4 e3       	ldi	r30, 0x34	; 52
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	80 83       	st	Z, r24
    2222:	04 c0       	rjmp	.+8      	; 0x222c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_D:
				DDRD_REG = copy_u8portDIR;
    2224:	e1 e3       	ldi	r30, 0x31	; 49
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    222c:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    222e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <GPIO_voidSetPortValue>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortValue(u8 copy_u8portID, u8 copy_u8portValue) {
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <GPIO_voidSetPortValue+0x6>
    2246:	00 d0       	rcall	.+0      	; 0x2248 <GPIO_voidSetPortValue+0x8>
    2248:	0f 92       	push	r0
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	8a 83       	std	Y+2, r24	; 0x02
    2250:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    2252:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	84 30       	cpi	r24, 0x04	; 4
    2258:	18 f0       	brcs	.+6      	; 0x2260 <GPIO_voidSetPortValue+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    225a:	82 e0       	ldi	r24, 0x02	; 2
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	33 c0       	rjmp	.+102    	; 0x22c6 <GPIO_voidSetPortValue+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	3d 83       	std	Y+5, r19	; 0x05
    2268:	2c 83       	std	Y+4, r18	; 0x04
    226a:	8c 81       	ldd	r24, Y+4	; 0x04
    226c:	9d 81       	ldd	r25, Y+5	; 0x05
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	d1 f0       	breq	.+52     	; 0x22a8 <GPIO_voidSetPortValue+0x68>
    2274:	2c 81       	ldd	r18, Y+4	; 0x04
    2276:	3d 81       	ldd	r19, Y+5	; 0x05
    2278:	22 30       	cpi	r18, 0x02	; 2
    227a:	31 05       	cpc	r19, r1
    227c:	2c f4       	brge	.+10     	; 0x2288 <GPIO_voidSetPortValue+0x48>
    227e:	8c 81       	ldd	r24, Y+4	; 0x04
    2280:	9d 81       	ldd	r25, Y+5	; 0x05
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	61 f0       	breq	.+24     	; 0x229e <GPIO_voidSetPortValue+0x5e>
    2286:	1e c0       	rjmp	.+60     	; 0x22c4 <GPIO_voidSetPortValue+0x84>
    2288:	2c 81       	ldd	r18, Y+4	; 0x04
    228a:	3d 81       	ldd	r19, Y+5	; 0x05
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	31 05       	cpc	r19, r1
    2290:	81 f0       	breq	.+32     	; 0x22b2 <GPIO_voidSetPortValue+0x72>
    2292:	8c 81       	ldd	r24, Y+4	; 0x04
    2294:	9d 81       	ldd	r25, Y+5	; 0x05
    2296:	83 30       	cpi	r24, 0x03	; 3
    2298:	91 05       	cpc	r25, r1
    229a:	81 f0       	breq	.+32     	; 0x22bc <GPIO_voidSetPortValue+0x7c>
    229c:	13 c0       	rjmp	.+38     	; 0x22c4 <GPIO_voidSetPortValue+0x84>
			case PORT_A:
				PORTA_REG = copy_u8portValue;
    229e:	eb e3       	ldi	r30, 0x3B	; 59
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	80 83       	st	Z, r24
    22a6:	0e c0       	rjmp	.+28     	; 0x22c4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_B:
				PORTB_REG = copy_u8portValue;
    22a8:	e8 e3       	ldi	r30, 0x38	; 56
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	80 83       	st	Z, r24
    22b0:	09 c0       	rjmp	.+18     	; 0x22c4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_C:
				PORTC_REG = copy_u8portValue;
    22b2:	e5 e3       	ldi	r30, 0x35	; 53
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	80 83       	st	Z, r24
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_D:
				PORTD_REG = copy_u8portValue;
    22bc:	e2 e3       	ldi	r30, 0x32	; 50
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    22c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <GPIO_u8GetPortValue>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_u8GetPortValue(u8 copy_u8portID) {
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	00 d0       	rcall	.+0      	; 0x22de <GPIO_u8GetPortValue+0x6>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <GPIO_u8GetPortValue+0x8>
    22e0:	0f 92       	push	r0
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	8b 83       	std	Y+3, r24	; 0x03
	u8 value = LOGIC_LOW;
    22e8:	1a 82       	std	Y+2, r1	; 0x02
	u8 GPIO_Driver_Checker = 0;
    22ea:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	84 30       	cpi	r24, 0x04	; 4
    22f0:	18 f0       	brcs	.+6      	; 0x22f8 <GPIO_u8GetPortValue+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	33 c0       	rjmp	.+102    	; 0x235e <GPIO_u8GetPortValue+0x86>
	}
	else {
		switch(copy_u8portID) {
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	3d 83       	std	Y+5, r19	; 0x05
    2300:	2c 83       	std	Y+4, r18	; 0x04
    2302:	8c 81       	ldd	r24, Y+4	; 0x04
    2304:	9d 81       	ldd	r25, Y+5	; 0x05
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	91 05       	cpc	r25, r1
    230a:	d1 f0       	breq	.+52     	; 0x2340 <GPIO_u8GetPortValue+0x68>
    230c:	2c 81       	ldd	r18, Y+4	; 0x04
    230e:	3d 81       	ldd	r19, Y+5	; 0x05
    2310:	22 30       	cpi	r18, 0x02	; 2
    2312:	31 05       	cpc	r19, r1
    2314:	2c f4       	brge	.+10     	; 0x2320 <GPIO_u8GetPortValue+0x48>
    2316:	8c 81       	ldd	r24, Y+4	; 0x04
    2318:	9d 81       	ldd	r25, Y+5	; 0x05
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	61 f0       	breq	.+24     	; 0x2336 <GPIO_u8GetPortValue+0x5e>
    231e:	1e c0       	rjmp	.+60     	; 0x235c <GPIO_u8GetPortValue+0x84>
    2320:	2c 81       	ldd	r18, Y+4	; 0x04
    2322:	3d 81       	ldd	r19, Y+5	; 0x05
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	81 f0       	breq	.+32     	; 0x234a <GPIO_u8GetPortValue+0x72>
    232a:	8c 81       	ldd	r24, Y+4	; 0x04
    232c:	9d 81       	ldd	r25, Y+5	; 0x05
    232e:	83 30       	cpi	r24, 0x03	; 3
    2330:	91 05       	cpc	r25, r1
    2332:	81 f0       	breq	.+32     	; 0x2354 <GPIO_u8GetPortValue+0x7c>
    2334:	13 c0       	rjmp	.+38     	; 0x235c <GPIO_u8GetPortValue+0x84>
			case PORT_A:
				// Why value equals PINA?
				value = PORTA_REG;
    2336:	eb e3       	ldi	r30, 0x3B	; 59
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	8a 83       	std	Y+2, r24	; 0x02
    233e:	0e c0       	rjmp	.+28     	; 0x235c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_B:
				value = PORTB_REG;
    2340:	e8 e3       	ldi	r30, 0x38	; 56
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	8a 83       	std	Y+2, r24	; 0x02
    2348:	09 c0       	rjmp	.+18     	; 0x235c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_C:
				value = PORTC_REG;
    234a:	e5 e3       	ldi	r30, 0x35	; 53
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8a 83       	std	Y+2, r24	; 0x02
    2352:	04 c0       	rjmp	.+8      	; 0x235c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_D:
				value = PORTD_REG;
    2354:	e2 e3       	ldi	r30, 0x32	; 50
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8a 83       	std	Y+2, r24	; 0x02
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    235c:	19 82       	std	Y+1, r1	; 0x01
	}
	return value;
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <GLOBINT_voidSetEnableFlag>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Enables the Global Interrupt Enable Flag in the Status Register
void GLOBINT_voidSetEnableFlag(void) {
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, SREG_I_BIT);
    2378:	af e5       	ldi	r26, 0x5F	; 95
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	ef e5       	ldi	r30, 0x5F	; 95
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	80 68       	ori	r24, 0x80	; 128
    2384:	8c 93       	st	X, r24
}
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <GLOBINT_voidSetDisableFlag>:

// Disables the Global Interrupt Disable Flag in the Status Register
void GLOBINT_voidSetDisableFlag(void) {
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, SREG_I_BIT);
    2394:	af e5       	ldi	r26, 0x5F	; 95
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	ef e5       	ldi	r30, 0x5F	; 95
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	8f 77       	andi	r24, 0x7F	; 127
    23a0:	8c 93       	st	X, r24
}
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <EXTINT_voidSetSenseINTx>:
void (*CallBackPtr_INT1) (void);
void (*CallBackPtr_INT2) (void);


// Initialize INT0 & INT1 & INT2 Sense Control System
void EXTINT_voidSetSenseINTx(u8 copyINTx, u8 CopySense) {
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <EXTINT_voidSetSenseINTx+0x6>
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <EXTINT_voidSetSenseINTx+0x8>
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3c 83       	std	Y+4, r19	; 0x04
    23c0:	2b 83       	std	Y+3, r18	; 0x03
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	91 05       	cpc	r25, r1
    23ca:	09 f4       	brne	.+2      	; 0x23ce <EXTINT_voidSetSenseINTx+0x26>
    23cc:	55 c0       	rjmp	.+170    	; 0x2478 <EXTINT_voidSetSenseINTx+0xd0>
    23ce:	2b 81       	ldd	r18, Y+3	; 0x03
    23d0:	3c 81       	ldd	r19, Y+4	; 0x04
    23d2:	23 30       	cpi	r18, 0x03	; 3
    23d4:	31 05       	cpc	r19, r1
    23d6:	09 f4       	brne	.+2      	; 0x23da <EXTINT_voidSetSenseINTx+0x32>
    23d8:	97 c0       	rjmp	.+302    	; 0x2508 <EXTINT_voidSetSenseINTx+0x160>
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	91 05       	cpc	r25, r1
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <EXTINT_voidSetSenseINTx+0x3e>
    23e4:	a6 c0       	rjmp	.+332    	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
	case EXT_INT0:
		if(CopySense == EXTINT_Low_Level) {
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	88 23       	and	r24, r24
    23ea:	79 f4       	brne	.+30     	; 0x240a <EXTINT_voidSetSenseINTx+0x62>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    23ec:	a5 e5       	ldi	r26, 0x55	; 85
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e5 e5       	ldi	r30, 0x55	; 85
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	8d 7f       	andi	r24, 0xFD	; 253
    23f8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    23fa:	a5 e5       	ldi	r26, 0x55	; 85
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e5 e5       	ldi	r30, 0x55	; 85
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	8e 7f       	andi	r24, 0xFE	; 254
    2406:	8c 93       	st	X, r24
    2408:	94 c0       	rjmp	.+296    	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Logical_Change) {
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	79 f4       	brne	.+30     	; 0x242e <EXTINT_voidSetSenseINTx+0x86>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    2410:	a5 e5       	ldi	r26, 0x55	; 85
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e5 e5       	ldi	r30, 0x55	; 85
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	8d 7f       	andi	r24, 0xFD	; 253
    241c:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    241e:	a5 e5       	ldi	r26, 0x55	; 85
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e5 e5       	ldi	r30, 0x55	; 85
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	81 60       	ori	r24, 0x01	; 1
    242a:	8c 93       	st	X, r24
    242c:	82 c0       	rjmp	.+260    	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Falling_Edge) {
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	82 30       	cpi	r24, 0x02	; 2
    2432:	79 f4       	brne	.+30     	; 0x2452 <EXTINT_voidSetSenseINTx+0xaa>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    2434:	a5 e5       	ldi	r26, 0x55	; 85
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e5 e5       	ldi	r30, 0x55	; 85
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	82 60       	ori	r24, 0x02	; 2
    2440:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    2442:	a5 e5       	ldi	r26, 0x55	; 85
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e5 e5       	ldi	r30, 0x55	; 85
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	8e 7f       	andi	r24, 0xFE	; 254
    244e:	8c 93       	st	X, r24
    2450:	70 c0       	rjmp	.+224    	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Rising_Edge) {
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	09 f0       	breq	.+2      	; 0x245a <EXTINT_voidSetSenseINTx+0xb2>
    2458:	6c c0       	rjmp	.+216    	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    245a:	a5 e5       	ldi	r26, 0x55	; 85
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e5 e5       	ldi	r30, 0x55	; 85
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	82 60       	ori	r24, 0x02	; 2
    2466:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    2468:	a5 e5       	ldi	r26, 0x55	; 85
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e5 e5       	ldi	r30, 0x55	; 85
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	81 60       	ori	r24, 0x01	; 1
    2474:	8c 93       	st	X, r24
    2476:	5d c0       	rjmp	.+186    	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		break;
	case EXT_INT1:
		if(CopySense == EXTINT_Low_Level) {
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	88 23       	and	r24, r24
    247c:	79 f4       	brne	.+30     	; 0x249c <EXTINT_voidSetSenseINTx+0xf4>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    247e:	a5 e5       	ldi	r26, 0x55	; 85
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e5 e5       	ldi	r30, 0x55	; 85
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	87 7f       	andi	r24, 0xF7	; 247
    248a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    248c:	a5 e5       	ldi	r26, 0x55	; 85
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e5 e5       	ldi	r30, 0x55	; 85
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8b 7f       	andi	r24, 0xFB	; 251
    2498:	8c 93       	st	X, r24
    249a:	4b c0       	rjmp	.+150    	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Logical_Change) {
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	79 f4       	brne	.+30     	; 0x24c0 <EXTINT_voidSetSenseINTx+0x118>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    24a2:	a5 e5       	ldi	r26, 0x55	; 85
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e5 e5       	ldi	r30, 0x55	; 85
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	87 7f       	andi	r24, 0xF7	; 247
    24ae:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    24b0:	a5 e5       	ldi	r26, 0x55	; 85
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e5 e5       	ldi	r30, 0x55	; 85
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	84 60       	ori	r24, 0x04	; 4
    24bc:	8c 93       	st	X, r24
    24be:	39 c0       	rjmp	.+114    	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Falling_Edge) {
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	82 30       	cpi	r24, 0x02	; 2
    24c4:	79 f4       	brne	.+30     	; 0x24e4 <EXTINT_voidSetSenseINTx+0x13c>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    24c6:	a5 e5       	ldi	r26, 0x55	; 85
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e5 e5       	ldi	r30, 0x55	; 85
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	88 60       	ori	r24, 0x08	; 8
    24d2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    24d4:	a5 e5       	ldi	r26, 0x55	; 85
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e5 e5       	ldi	r30, 0x55	; 85
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	8b 7f       	andi	r24, 0xFB	; 251
    24e0:	8c 93       	st	X, r24
    24e2:	27 c0       	rjmp	.+78     	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Rising_Edge) {
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	83 30       	cpi	r24, 0x03	; 3
    24e8:	21 f5       	brne	.+72     	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    24ea:	a5 e5       	ldi	r26, 0x55	; 85
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e5 e5       	ldi	r30, 0x55	; 85
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	88 60       	ori	r24, 0x08	; 8
    24f6:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    24f8:	a5 e5       	ldi	r26, 0x55	; 85
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e5 e5       	ldi	r30, 0x55	; 85
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	84 60       	ori	r24, 0x04	; 4
    2504:	8c 93       	st	X, r24
    2506:	15 c0       	rjmp	.+42     	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		break;
	case EXT_INT2:
		if(CopySense == EXTINT_INT2_Falling_Edge) {
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	88 23       	and	r24, r24
    250c:	41 f4       	brne	.+16     	; 0x251e <EXTINT_voidSetSenseINTx+0x176>
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2);
    250e:	a4 e5       	ldi	r26, 0x54	; 84
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e4 e5       	ldi	r30, 0x54	; 84
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	8f 7b       	andi	r24, 0xBF	; 191
    251a:	8c 93       	st	X, r24
    251c:	0a c0       	rjmp	.+20     	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_INT2_Rising_Edge) {
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	39 f4       	brne	.+14     	; 0x2532 <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2);
    2524:	a4 e5       	ldi	r26, 0x54	; 84
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e4 e5       	ldi	r30, 0x54	; 84
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	80 64       	ori	r24, 0x40	; 64
    2530:	8c 93       	st	X, r24
		}
		break;
	}
}
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <EXTINT_voidEnableINTx>:


// Enable External Interrupt INT0 & INT1 & INT2 and pass a function to ISR
void EXTINT_voidEnableINTx(u8 copyINTx, void (*copy_PtrtoFunc) (void)) {
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	00 d0       	rcall	.+0      	; 0x2546 <EXTINT_voidEnableINTx+0x6>
    2546:	00 d0       	rcall	.+0      	; 0x2548 <EXTINT_voidEnableINTx+0x8>
    2548:	0f 92       	push	r0
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	7b 83       	std	Y+3, r23	; 0x03
    2552:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	3d 83       	std	Y+5, r19	; 0x05
    255c:	2c 83       	std	Y+4, r18	; 0x04
    255e:	8c 81       	ldd	r24, Y+4	; 0x04
    2560:	9d 81       	ldd	r25, Y+5	; 0x05
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	91 05       	cpc	r25, r1
    2566:	c1 f0       	breq	.+48     	; 0x2598 <EXTINT_voidEnableINTx+0x58>
    2568:	2c 81       	ldd	r18, Y+4	; 0x04
    256a:	3d 81       	ldd	r19, Y+5	; 0x05
    256c:	23 30       	cpi	r18, 0x03	; 3
    256e:	31 05       	cpc	r19, r1
    2570:	09 f1       	breq	.+66     	; 0x25b4 <EXTINT_voidEnableINTx+0x74>
    2572:	8c 81       	ldd	r24, Y+4	; 0x04
    2574:	9d 81       	ldd	r25, Y+5	; 0x05
    2576:	81 30       	cpi	r24, 0x01	; 1
    2578:	91 05       	cpc	r25, r1
    257a:	51 f5       	brne	.+84     	; 0x25d0 <EXTINT_voidEnableINTx+0x90>
	case EXT_INT0:
		SET_BIT(GICR_REG, GICR_INT0);
    257c:	ab e5       	ldi	r26, 0x5B	; 91
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	eb e5       	ldi	r30, 0x5B	; 91
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	80 64       	ori	r24, 0x40	; 64
    2588:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	9b 81       	ldd	r25, Y+3	; 0x03
    258e:	90 93 ce 01 	sts	0x01CE, r25
    2592:	80 93 cd 01 	sts	0x01CD, r24
    2596:	29 c0       	rjmp	.+82     	; 0x25ea <EXTINT_voidEnableINTx+0xaa>
		break;
	case EXT_INT1:
		SET_BIT(GICR_REG, GICR_INT1);
    2598:	ab e5       	ldi	r26, 0x5B	; 91
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	eb e5       	ldi	r30, 0x5B	; 91
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	80 68       	ori	r24, 0x80	; 128
    25a4:	8c 93       	st	X, r24
		CallBackPtr_INT1 = copy_PtrtoFunc;
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	90 93 d0 01 	sts	0x01D0, r25
    25ae:	80 93 cf 01 	sts	0x01CF, r24
    25b2:	1b c0       	rjmp	.+54     	; 0x25ea <EXTINT_voidEnableINTx+0xaa>
		break;
	case EXT_INT2:
		SET_BIT(GICR_REG, GICR_INT2);
    25b4:	ab e5       	ldi	r26, 0x5B	; 91
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e5       	ldi	r30, 0x5B	; 91
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 62       	ori	r24, 0x20	; 32
    25c0:	8c 93       	st	X, r24
		CallBackPtr_INT2 = copy_PtrtoFunc;
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	9b 81       	ldd	r25, Y+3	; 0x03
    25c6:	90 93 cc 01 	sts	0x01CC, r25
    25ca:	80 93 cb 01 	sts	0x01CB, r24
    25ce:	0d c0       	rjmp	.+26     	; 0x25ea <EXTINT_voidEnableINTx+0xaa>
		break;
	default:
		SET_BIT(GICR_REG, GICR_INT0);
    25d0:	ab e5       	ldi	r26, 0x5B	; 91
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	eb e5       	ldi	r30, 0x5B	; 91
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	80 64       	ori	r24, 0x40	; 64
    25dc:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	9b 81       	ldd	r25, Y+3	; 0x03
    25e2:	90 93 ce 01 	sts	0x01CE, r25
    25e6:	80 93 cd 01 	sts	0x01CD, r24
		break;
	}
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <EXTINT_voidDisableINTx>:


// Disable External Interrupt INT0 & INT1 & INT2
void EXTINT_voidDisableINTx(u8 copyINTx) {
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <EXTINT_voidDisableINTx+0x6>
    2600:	0f 92       	push	r0
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	89 83       	std	Y+1, r24	; 0x01
	switch(copyINTx) {
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	3b 83       	std	Y+3, r19	; 0x03
    2610:	2a 83       	std	Y+2, r18	; 0x02
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	9b 81       	ldd	r25, Y+3	; 0x03
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	91 05       	cpc	r25, r1
    261a:	91 f0       	breq	.+36     	; 0x2640 <EXTINT_voidDisableINTx+0x46>
    261c:	2a 81       	ldd	r18, Y+2	; 0x02
    261e:	3b 81       	ldd	r19, Y+3	; 0x03
    2620:	23 30       	cpi	r18, 0x03	; 3
    2622:	31 05       	cpc	r19, r1
    2624:	a9 f0       	breq	.+42     	; 0x2650 <EXTINT_voidDisableINTx+0x56>
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	9b 81       	ldd	r25, Y+3	; 0x03
    262a:	81 30       	cpi	r24, 0x01	; 1
    262c:	91 05       	cpc	r25, r1
    262e:	c1 f4       	brne	.+48     	; 0x2660 <EXTINT_voidDisableINTx+0x66>
	case EXT_INT0:
		CLR_BIT(GICR_REG, GICR_INT0);
    2630:	ab e5       	ldi	r26, 0x5B	; 91
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	eb e5       	ldi	r30, 0x5B	; 91
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	8f 7b       	andi	r24, 0xBF	; 191
    263c:	8c 93       	st	X, r24
    263e:	17 c0       	rjmp	.+46     	; 0x266e <EXTINT_voidDisableINTx+0x74>
		break;
	case EXT_INT1:
		CLR_BIT(GICR_REG, GICR_INT1);
    2640:	ab e5       	ldi	r26, 0x5B	; 91
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	eb e5       	ldi	r30, 0x5B	; 91
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	8f 77       	andi	r24, 0x7F	; 127
    264c:	8c 93       	st	X, r24
    264e:	0f c0       	rjmp	.+30     	; 0x266e <EXTINT_voidDisableINTx+0x74>
		break;
	case EXT_INT2:
		CLR_BIT(GICR_REG, GICR_INT2);
    2650:	ab e5       	ldi	r26, 0x5B	; 91
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	eb e5       	ldi	r30, 0x5B	; 91
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	8f 7d       	andi	r24, 0xDF	; 223
    265c:	8c 93       	st	X, r24
    265e:	07 c0       	rjmp	.+14     	; 0x266e <EXTINT_voidDisableINTx+0x74>
		break;
	default:
		CLR_BIT(GICR_REG, GICR_INT0);
    2660:	ab e5       	ldi	r26, 0x5B	; 91
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	eb e5       	ldi	r30, 0x5B	; 91
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	8f 7b       	andi	r24, 0xBF	; 191
    266c:	8c 93       	st	X, r24
		break;
	}
}
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <__vector_1>:


// Disables Compiler Optimizations & verifies callback not empty
void __vector_1(void) __attribute__((signal, used));
void __vector_1(void) {
    267a:	1f 92       	push	r1
    267c:	0f 92       	push	r0
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	0f 92       	push	r0
    2682:	11 24       	eor	r1, r1
    2684:	2f 93       	push	r18
    2686:	3f 93       	push	r19
    2688:	4f 93       	push	r20
    268a:	5f 93       	push	r21
    268c:	6f 93       	push	r22
    268e:	7f 93       	push	r23
    2690:	8f 93       	push	r24
    2692:	9f 93       	push	r25
    2694:	af 93       	push	r26
    2696:	bf 93       	push	r27
    2698:	ef 93       	push	r30
    269a:	ff 93       	push	r31
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT0 != NULL) {
    26a4:	80 91 cd 01 	lds	r24, 0x01CD
    26a8:	90 91 ce 01 	lds	r25, 0x01CE
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	29 f0       	breq	.+10     	; 0x26ba <__vector_1+0x40>
		CallBackPtr_INT0();
    26b0:	e0 91 cd 01 	lds	r30, 0x01CD
    26b4:	f0 91 ce 01 	lds	r31, 0x01CE
    26b8:	09 95       	icall
	}
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	ff 91       	pop	r31
    26c0:	ef 91       	pop	r30
    26c2:	bf 91       	pop	r27
    26c4:	af 91       	pop	r26
    26c6:	9f 91       	pop	r25
    26c8:	8f 91       	pop	r24
    26ca:	7f 91       	pop	r23
    26cc:	6f 91       	pop	r22
    26ce:	5f 91       	pop	r21
    26d0:	4f 91       	pop	r20
    26d2:	3f 91       	pop	r19
    26d4:	2f 91       	pop	r18
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	0f 90       	pop	r0
    26dc:	1f 90       	pop	r1
    26de:	18 95       	reti

000026e0 <__vector_2>:

void __vector_2(void) __attribute__((signal, used));
void __vector_2(void) {
    26e0:	1f 92       	push	r1
    26e2:	0f 92       	push	r0
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	0f 92       	push	r0
    26e8:	11 24       	eor	r1, r1
    26ea:	2f 93       	push	r18
    26ec:	3f 93       	push	r19
    26ee:	4f 93       	push	r20
    26f0:	5f 93       	push	r21
    26f2:	6f 93       	push	r22
    26f4:	7f 93       	push	r23
    26f6:	8f 93       	push	r24
    26f8:	9f 93       	push	r25
    26fa:	af 93       	push	r26
    26fc:	bf 93       	push	r27
    26fe:	ef 93       	push	r30
    2700:	ff 93       	push	r31
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT1 != NULL) {
    270a:	80 91 cf 01 	lds	r24, 0x01CF
    270e:	90 91 d0 01 	lds	r25, 0x01D0
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	29 f0       	breq	.+10     	; 0x2720 <__vector_2+0x40>
		CallBackPtr_INT1();
    2716:	e0 91 cf 01 	lds	r30, 0x01CF
    271a:	f0 91 d0 01 	lds	r31, 0x01D0
    271e:	09 95       	icall
	}
}
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	ff 91       	pop	r31
    2726:	ef 91       	pop	r30
    2728:	bf 91       	pop	r27
    272a:	af 91       	pop	r26
    272c:	9f 91       	pop	r25
    272e:	8f 91       	pop	r24
    2730:	7f 91       	pop	r23
    2732:	6f 91       	pop	r22
    2734:	5f 91       	pop	r21
    2736:	4f 91       	pop	r20
    2738:	3f 91       	pop	r19
    273a:	2f 91       	pop	r18
    273c:	0f 90       	pop	r0
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	0f 90       	pop	r0
    2742:	1f 90       	pop	r1
    2744:	18 95       	reti

00002746 <__vector_3>:

void __vector_3(void) __attribute__((signal, used));
void __vector_3(void) {
    2746:	1f 92       	push	r1
    2748:	0f 92       	push	r0
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	0f 92       	push	r0
    274e:	11 24       	eor	r1, r1
    2750:	2f 93       	push	r18
    2752:	3f 93       	push	r19
    2754:	4f 93       	push	r20
    2756:	5f 93       	push	r21
    2758:	6f 93       	push	r22
    275a:	7f 93       	push	r23
    275c:	8f 93       	push	r24
    275e:	9f 93       	push	r25
    2760:	af 93       	push	r26
    2762:	bf 93       	push	r27
    2764:	ef 93       	push	r30
    2766:	ff 93       	push	r31
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT2 != NULL) {
    2770:	80 91 cb 01 	lds	r24, 0x01CB
    2774:	90 91 cc 01 	lds	r25, 0x01CC
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	29 f0       	breq	.+10     	; 0x2786 <__vector_3+0x40>
		CallBackPtr_INT2();
    277c:	e0 91 cb 01 	lds	r30, 0x01CB
    2780:	f0 91 cc 01 	lds	r31, 0x01CC
    2784:	09 95       	icall
	}
}
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	ff 91       	pop	r31
    278c:	ef 91       	pop	r30
    278e:	bf 91       	pop	r27
    2790:	af 91       	pop	r26
    2792:	9f 91       	pop	r25
    2794:	8f 91       	pop	r24
    2796:	7f 91       	pop	r23
    2798:	6f 91       	pop	r22
    279a:	5f 91       	pop	r21
    279c:	4f 91       	pop	r20
    279e:	3f 91       	pop	r19
    27a0:	2f 91       	pop	r18
    27a2:	0f 90       	pop	r0
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	0f 90       	pop	r0
    27a8:	1f 90       	pop	r1
    27aa:	18 95       	reti

000027ac <ADC_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality
void ADC_voidInit(void) {
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
	 * 5, 	ADLAR   = 0 right adjusted
	 * 4:0, 	MUX4:0  = 00000 to choose channel 0 as initializationd
	 */

	// Sets REFS1:0 to '01'
	ADMUX_REG->REFS = AVCC;
    27b4:	e7 e2       	ldi	r30, 0x27	; 39
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	8f 73       	andi	r24, 0x3F	; 63
    27bc:	80 64       	ori	r24, 0x40	; 64
    27be:	80 83       	st	Z, r24
	ADMUX_REG->ADLAR = RIGHT_ADJUST;
    27c0:	e7 e2       	ldi	r30, 0x27	; 39
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 7d       	andi	r24, 0xDF	; 223
    27c8:	80 83       	st	Z, r24

	// Enables ADC & Choose Prescaler of 128
	ADCSRA_REG->ADEN = ADEN_ENABLE;
    27ca:	e6 e2       	ldi	r30, 0x26	; 38
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	80 68       	ori	r24, 0x80	; 128
    27d2:	80 83       	st	Z, r24
	ADCSRA_REG->ADPS = PRESCALER_128;
    27d4:	e6 e2       	ldi	r30, 0x26	; 38
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	87 60       	ori	r24, 0x07	; 7
    27dc:	80 83       	st	Z, r24
	ADCSRA_REG->ADATE = DISABLE_TRIGGER;
    27de:	e6 e2       	ldi	r30, 0x26	; 38
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8f 7d       	andi	r24, 0xDF	; 223
    27e6:	80 83       	st	Z, r24
	SFIOR_REG->ADTS = FREE_RUNNING;
    27e8:	e0 e5       	ldi	r30, 0x50	; 80
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	8f 71       	andi	r24, 0x1F	; 31
    27f0:	80 83       	st	Z, r24
	 * 3,	ADIE = 1 Enable ADC Interrupt
	 * 2:0, ADPS2:0 = 111 to choose
	 * ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz
	 * --> ADC must operate in range 50-200Khz
	 */
}
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <ADC_voidStartConversionPolling>:


// Start ADC Conversion using Polling
u16 ADC_voidStartConversionPolling(u8 copy_u8channelSelect) {
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	0f 92       	push	r0
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	89 83       	std	Y+1, r24	; 0x01
	// Insert Channel Number in ADMUX Procedure
	ADMUX_REG->MUX = copy_u8channelSelect;
    2804:	e7 e2       	ldi	r30, 0x27	; 39
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	8f 71       	andi	r24, 0x1F	; 31
    280c:	98 2f       	mov	r25, r24
    280e:	9f 71       	andi	r25, 0x1F	; 31
    2810:	80 81       	ld	r24, Z
    2812:	80 7e       	andi	r24, 0xE0	; 224
    2814:	89 2b       	or	r24, r25
    2816:	80 83       	st	Z, r24

	// Starts ADC Conversion
	ADCSRA_REG->ADSC = START_CONVERSION;
    2818:	e6 e2       	ldi	r30, 0x26	; 38
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	80 64       	ori	r24, 0x40	; 64
    2820:	80 83       	st	Z, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( ADCSRA_REG->ADIF == FLAG_NOTSET );
    2822:	e6 e2       	ldi	r30, 0x26	; 38
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	80 71       	andi	r24, 0x10	; 16
    282a:	88 23       	and	r24, r24
    282c:	d1 f3       	breq	.-12     	; 0x2822 <ADC_voidStartConversionPolling+0x2a>

	// Set Interrupt Flag by 1 by clearing it
	ADCSRA_REG->ADIF = FLAG_SET;
    282e:	e6 e2       	ldi	r30, 0x26	; 38
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 61       	ori	r24, 0x10	; 16
    2836:	80 83       	st	Z, r24

	// Read Data from ADCL Bits 0 -> 9
	return ADC_DATA_REG;
    2838:	e4 e2       	ldi	r30, 0x24	; 36
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <ADC_voidStartConversionISR>:

// Start ADC Conversion using Interrupts
void ADC_voidStartConversionISR(u8 copy_u8channelSelect) {
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	0f 92       	push	r0
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG->MUX = copy_u8channelSelect;
    2854:	e7 e2       	ldi	r30, 0x27	; 39
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	8f 71       	andi	r24, 0x1F	; 31
    285c:	98 2f       	mov	r25, r24
    285e:	9f 71       	andi	r25, 0x1F	; 31
    2860:	80 81       	ld	r24, Z
    2862:	80 7e       	andi	r24, 0xE0	; 224
    2864:	89 2b       	or	r24, r25
    2866:	80 83       	st	Z, r24

	// Starts ADC Conversion
	ADCSRA_REG->ADSC = START_CONVERSION;
    2868:	e6 e2       	ldi	r30, 0x26	; 38
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	80 64       	ori	r24, 0x40	; 64
    2870:	80 83       	st	Z, r24

	// Enables the Interrupt
	ADCSRA_REG->ADIE = ENABLE_INT;
    2872:	e6 e2       	ldi	r30, 0x26	; 38
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	88 60       	ori	r24, 0x08	; 8
    287a:	80 83       	st	Z, r24

}
    287c:	0f 90       	pop	r0
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <ADC_CallBackFunction>:
/*
 * Description :
 * Call Back function to use in ISR *
 */
void ADC_CallBackFunction(void (*Ptr_ADC)(void))
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	00 d0       	rcall	.+0      	; 0x288a <ADC_CallBackFunction+0x6>
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_ADC = Ptr_ADC;
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	9a 81       	ldd	r25, Y+2	; 0x02
    2896:	90 93 d2 01 	sts	0x01D2, r25
    289a:	80 93 d1 01 	sts	0x01D1, r24
}
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <__vector_16>:


void __vector_16(void) __attribute__((signal, used));
void __vector_16(void) {
    28a8:	1f 92       	push	r1
    28aa:	0f 92       	push	r0
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	0f 92       	push	r0
    28b0:	11 24       	eor	r1, r1
    28b2:	2f 93       	push	r18
    28b4:	3f 93       	push	r19
    28b6:	4f 93       	push	r20
    28b8:	5f 93       	push	r21
    28ba:	6f 93       	push	r22
    28bc:	7f 93       	push	r23
    28be:	8f 93       	push	r24
    28c0:	9f 93       	push	r25
    28c2:	af 93       	push	r26
    28c4:	bf 93       	push	r27
    28c6:	ef 93       	push	r30
    28c8:	ff 93       	push	r31
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_ADC != NULL) {
    28d2:	80 91 d1 01 	lds	r24, 0x01D1
    28d6:	90 91 d2 01 	lds	r25, 0x01D2
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	29 f0       	breq	.+10     	; 0x28e8 <__vector_16+0x40>
		CallBackPtr_ADC();
    28de:	e0 91 d1 01 	lds	r30, 0x01D1
    28e2:	f0 91 d2 01 	lds	r31, 0x01D2
    28e6:	09 95       	icall
	}
}
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	ff 91       	pop	r31
    28ee:	ef 91       	pop	r30
    28f0:	bf 91       	pop	r27
    28f2:	af 91       	pop	r26
    28f4:	9f 91       	pop	r25
    28f6:	8f 91       	pop	r24
    28f8:	7f 91       	pop	r23
    28fa:	6f 91       	pop	r22
    28fc:	5f 91       	pop	r21
    28fe:	4f 91       	pop	r20
    2900:	3f 91       	pop	r19
    2902:	2f 91       	pop	r18
    2904:	0f 90       	pop	r0
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	0f 90       	pop	r0
    290a:	1f 90       	pop	r1
    290c:	18 95       	reti

0000290e <SEGMENT_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes the 7 Segment Display Driver
SEGMENT_Error_t SEGMENT_voidInit(u8 copy_u8portID) {
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	00 d0       	rcall	.+0      	; 0x2914 <SEGMENT_voidInit+0x6>
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 SEGMENT_Driver_Checker = 0;
    291a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	84 30       	cpi	r24, 0x04	; 4
    2920:	18 f0       	brcs	.+6      	; 0x2928 <SEGMENT_voidInit+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	1f c0       	rjmp	.+62     	; 0x2966 <SEGMENT_voidInit+0x58>
#elif (DIGITS_USED == 3)
		GPIO_voidSetPinDirection(COM_3_PORT, COM_3, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#elif (DIGITS_USED == 2)
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	62 e0       	ldi	r22, 0x02	; 2
    292c:	41 e0       	ldi	r20, 0x01	; 1
    292e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	63 e0       	ldi	r22, 0x03	; 3
    2936:	41 e0       	ldi	r20, 0x01	; 1
    2938:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#endif

		/* These pins are for the BCD on the FARES Kit */
		GPIO_voidSetPinDirection(copy_u8portID, BCD_1, PIN_OUTPUT);
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_2, PIN_OUTPUT);
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_4, PIN_OUTPUT);
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	62 e0       	ldi	r22, 0x02	; 2
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_8, PIN_OUTPUT);
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	64 e0       	ldi	r22, 0x04	; 4
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>

		SEGMENT_Driver_Checker = SEGMENT_OK;
    2964:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2966:	89 81       	ldd	r24, Y+1	; 0x01
}
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <SEGMENT_voidDisplay>:


// Displays a value on the 7 Segment Display
SEGMENT_Error_t SEGMENT_voidDisplay(u8 copy_u8portID, u8 copy_u8pinValue) {
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	00 d0       	rcall	.+0      	; 0x2978 <SEGMENT_voidDisplay+0x6>
    2978:	00 d0       	rcall	.+0      	; 0x297a <SEGMENT_voidDisplay+0x8>
    297a:	0f 92       	push	r0
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	8a 83       	std	Y+2, r24	; 0x02
    2982:	6b 83       	std	Y+3, r22	; 0x03
	u8 SEGMENT_Driver_Checker = 0;
    2984:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	84 30       	cpi	r24, 0x04	; 4
    298a:	18 f0       	brcs	.+6      	; 0x2992 <SEGMENT_voidDisplay+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    298c:	82 e0       	ldi	r24, 0x02	; 2
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	24 c1       	rjmp	.+584    	; 0x2bda <SEGMENT_voidDisplay+0x268>
	}
	else if((copy_u8pinValue < 0 && copy_u8pinValue > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(copy_u8pinValue) {
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	28 2f       	mov	r18, r24
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	3d 83       	std	Y+5, r19	; 0x05
    299a:	2c 83       	std	Y+4, r18	; 0x04
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	91 05       	cpc	r25, r1
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <SEGMENT_voidDisplay+0x36>
    29a6:	9b c0       	rjmp	.+310    	; 0x2ade <SEGMENT_voidDisplay+0x16c>
    29a8:	2c 81       	ldd	r18, Y+4	; 0x04
    29aa:	3d 81       	ldd	r19, Y+5	; 0x05
    29ac:	25 30       	cpi	r18, 0x05	; 5
    29ae:	31 05       	cpc	r19, r1
    29b0:	ec f4       	brge	.+58     	; 0x29ec <SEGMENT_voidDisplay+0x7a>
    29b2:	8c 81       	ldd	r24, Y+4	; 0x04
    29b4:	9d 81       	ldd	r25, Y+5	; 0x05
    29b6:	81 30       	cpi	r24, 0x01	; 1
    29b8:	91 05       	cpc	r25, r1
    29ba:	09 f4       	brne	.+2      	; 0x29be <SEGMENT_voidDisplay+0x4c>
    29bc:	51 c0       	rjmp	.+162    	; 0x2a60 <SEGMENT_voidDisplay+0xee>
    29be:	2c 81       	ldd	r18, Y+4	; 0x04
    29c0:	3d 81       	ldd	r19, Y+5	; 0x05
    29c2:	22 30       	cpi	r18, 0x02	; 2
    29c4:	31 05       	cpc	r19, r1
    29c6:	2c f4       	brge	.+10     	; 0x29d2 <SEGMENT_voidDisplay+0x60>
    29c8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ca:	9d 81       	ldd	r25, Y+5	; 0x05
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	99 f1       	breq	.+102    	; 0x2a36 <SEGMENT_voidDisplay+0xc4>
    29d0:	03 c1       	rjmp	.+518    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
    29d2:	2c 81       	ldd	r18, Y+4	; 0x04
    29d4:	3d 81       	ldd	r19, Y+5	; 0x05
    29d6:	22 30       	cpi	r18, 0x02	; 2
    29d8:	31 05       	cpc	r19, r1
    29da:	09 f4       	brne	.+2      	; 0x29de <SEGMENT_voidDisplay+0x6c>
    29dc:	56 c0       	rjmp	.+172    	; 0x2a8a <SEGMENT_voidDisplay+0x118>
    29de:	8c 81       	ldd	r24, Y+4	; 0x04
    29e0:	9d 81       	ldd	r25, Y+5	; 0x05
    29e2:	83 30       	cpi	r24, 0x03	; 3
    29e4:	91 05       	cpc	r25, r1
    29e6:	09 f4       	brne	.+2      	; 0x29ea <SEGMENT_voidDisplay+0x78>
    29e8:	65 c0       	rjmp	.+202    	; 0x2ab4 <SEGMENT_voidDisplay+0x142>
    29ea:	f6 c0       	rjmp	.+492    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
    29ec:	2c 81       	ldd	r18, Y+4	; 0x04
    29ee:	3d 81       	ldd	r19, Y+5	; 0x05
    29f0:	27 30       	cpi	r18, 0x07	; 7
    29f2:	31 05       	cpc	r19, r1
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <SEGMENT_voidDisplay+0x86>
    29f6:	b2 c0       	rjmp	.+356    	; 0x2b5c <SEGMENT_voidDisplay+0x1ea>
    29f8:	8c 81       	ldd	r24, Y+4	; 0x04
    29fa:	9d 81       	ldd	r25, Y+5	; 0x05
    29fc:	88 30       	cpi	r24, 0x08	; 8
    29fe:	91 05       	cpc	r25, r1
    2a00:	6c f4       	brge	.+26     	; 0x2a1c <SEGMENT_voidDisplay+0xaa>
    2a02:	2c 81       	ldd	r18, Y+4	; 0x04
    2a04:	3d 81       	ldd	r19, Y+5	; 0x05
    2a06:	25 30       	cpi	r18, 0x05	; 5
    2a08:	31 05       	cpc	r19, r1
    2a0a:	09 f4       	brne	.+2      	; 0x2a0e <SEGMENT_voidDisplay+0x9c>
    2a0c:	7d c0       	rjmp	.+250    	; 0x2b08 <SEGMENT_voidDisplay+0x196>
    2a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a10:	9d 81       	ldd	r25, Y+5	; 0x05
    2a12:	86 30       	cpi	r24, 0x06	; 6
    2a14:	91 05       	cpc	r25, r1
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <SEGMENT_voidDisplay+0xa8>
    2a18:	8c c0       	rjmp	.+280    	; 0x2b32 <SEGMENT_voidDisplay+0x1c0>
    2a1a:	de c0       	rjmp	.+444    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
    2a1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a20:	28 30       	cpi	r18, 0x08	; 8
    2a22:	31 05       	cpc	r19, r1
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <SEGMENT_voidDisplay+0xb6>
    2a26:	af c0       	rjmp	.+350    	; 0x2b86 <SEGMENT_voidDisplay+0x214>
    2a28:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2c:	89 30       	cpi	r24, 0x09	; 9
    2a2e:	91 05       	cpc	r25, r1
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <SEGMENT_voidDisplay+0xc2>
    2a32:	be c0       	rjmp	.+380    	; 0x2bb0 <SEGMENT_voidDisplay+0x23e>
    2a34:	d1 c0       	rjmp	.+418    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
			case 0:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	61 e0       	ldi	r22, 0x01	; 1
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	62 e0       	ldi	r22, 0x02	; 2
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2a54:	8a 81       	ldd	r24, Y+2	; 0x02
    2a56:	64 e0       	ldi	r22, 0x04	; 4
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    2a5e:	bc c0       	rjmp	.+376    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
				break;
			case 1:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	41 e0       	ldi	r20, 0x01	; 1
    2a66:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	61 e0       	ldi	r22, 0x01	; 1
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	62 e0       	ldi	r22, 0x02	; 2
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	64 e0       	ldi	r22, 0x04	; 4
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    2a88:	a7 c0       	rjmp	.+334    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
				break;
			case 2:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	40 e0       	ldi	r20, 0x00	; 0
    2a90:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	61 e0       	ldi	r22, 0x01	; 1
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	62 e0       	ldi	r22, 0x02	; 2
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	64 e0       	ldi	r22, 0x04	; 4
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    2ab2:	92 c0       	rjmp	.+292    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
				break;
			case 3:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	41 e0       	ldi	r20, 0x01	; 1
    2aba:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	61 e0       	ldi	r22, 0x01	; 1
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	62 e0       	ldi	r22, 0x02	; 2
    2acc:	40 e0       	ldi	r20, 0x00	; 0
    2ace:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	64 e0       	ldi	r22, 0x04	; 4
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    2adc:	7d c0       	rjmp	.+250    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
				break;
			case 4:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	60 e0       	ldi	r22, 0x00	; 0
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	62 e0       	ldi	r22, 0x02	; 2
    2af6:	41 e0       	ldi	r20, 0x01	; 1
    2af8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	64 e0       	ldi	r22, 0x04	; 4
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    2b06:	68 c0       	rjmp	.+208    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
				break;
			case 5:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	60 e0       	ldi	r22, 0x00	; 0
    2b0c:	41 e0       	ldi	r20, 0x01	; 1
    2b0e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	61 e0       	ldi	r22, 0x01	; 1
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	62 e0       	ldi	r22, 0x02	; 2
    2b20:	41 e0       	ldi	r20, 0x01	; 1
    2b22:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	64 e0       	ldi	r22, 0x04	; 4
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    2b30:	53 c0       	rjmp	.+166    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
				break;
			case 6:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	60 e0       	ldi	r22, 0x00	; 0
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	61 e0       	ldi	r22, 0x01	; 1
    2b40:	41 e0       	ldi	r20, 0x01	; 1
    2b42:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	62 e0       	ldi	r22, 0x02	; 2
    2b4a:	41 e0       	ldi	r20, 0x01	; 1
    2b4c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	64 e0       	ldi	r22, 0x04	; 4
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    2b5a:	3e c0       	rjmp	.+124    	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
				break;
			case 7:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	61 e0       	ldi	r22, 0x01	; 1
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	62 e0       	ldi	r22, 0x02	; 2
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	64 e0       	ldi	r22, 0x04	; 4
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    2b84:	29 c0       	rjmp	.+82     	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
				break;
			case 8:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	61 e0       	ldi	r22, 0x01	; 1
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	62 e0       	ldi	r22, 0x02	; 2
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	64 e0       	ldi	r22, 0x04	; 4
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    2bae:	14 c0       	rjmp	.+40     	; 0x2bd8 <SEGMENT_voidDisplay+0x266>
				break;
			case 9:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	41 e0       	ldi	r20, 0x01	; 1
    2bb6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	62 e0       	ldi	r22, 0x02	; 2
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	64 e0       	ldi	r22, 0x04	; 4
    2bd2:	41 e0       	ldi	r20, 0x01	; 1
    2bd4:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    2bd8:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <SERVO_voidInit>:
u16 AngleValue 	= 0;
u16 CMP_Value 	= 0;


// Initializes the 7 Segment Display Driver
void SERVO_voidInit(void) {
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
	TIMER1_Initialization();
    2bf4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <TIMER1_Initialization>
	TIMER1A_SetTop_FASTPWM(SERVO_OP_RANGE);
    2bf8:	80 e2       	ldi	r24, 0x20	; 32
    2bfa:	9e e4       	ldi	r25, 0x4E	; 78
    2bfc:	0e 94 ed 08 	call	0x11da	; 0x11da <TIMER1A_SetTop_FASTPWM>
	ADC_voidInit();
    2c00:	0e 94 d6 13 	call	0x27ac	; 0x27ac <ADC_voidInit>
}
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <SERVO_voidAdjustAngle>:

// Displays a value on the 7 Segment Display
void SERVO_voidAdjustAngle(void) {
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
	ADC_Result = ADC_voidStartConversionPolling(CHANNEL_1);
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <ADC_voidStartConversionPolling>
    2c18:	90 93 b7 01 	sts	0x01B7, r25
    2c1c:	80 93 b6 01 	sts	0x01B6, r24
	AngleValue = mapServo(ADC_Result);
    2c20:	80 91 b6 01 	lds	r24, 0x01B6
    2c24:	90 91 b7 01 	lds	r25, 0x01B7
    2c28:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <mapServo>
    2c2c:	90 93 b9 01 	sts	0x01B9, r25
    2c30:	80 93 b8 01 	sts	0x01B8, r24
	CMP_Value = TIMER1A_SetCOMPAREMATCH_FASTPWM(AngleValue);
    2c34:	80 91 b8 01 	lds	r24, 0x01B8
    2c38:	90 91 b9 01 	lds	r25, 0x01B9
    2c3c:	0e 94 cd 08 	call	0x119a	; 0x119a <TIMER1A_SetCOMPAREMATCH_FASTPWM>
    2c40:	90 93 bb 01 	sts	0x01BB, r25
    2c44:	80 93 ba 01 	sts	0x01BA, r24
	LCD_voidSetCursor(1, 0);
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	0e 94 4e 22 	call	0x449c	; 0x449c <LCD_voidSetCursor>
	LCD_voidDisplayString("Angle: ");
    2c50:	80 e6       	ldi	r24, 0x60	; 96
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 25 22 	call	0x444a	; 0x444a <LCD_voidDisplayString>
	LCD_voidSetCursor(1, 7);
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	67 e0       	ldi	r22, 0x07	; 7
    2c5c:	0e 94 4e 22 	call	0x449c	; 0x449c <LCD_voidSetCursor>
	LCD_voidIntgerToString(CMP_Value);
    2c60:	80 91 ba 01 	lds	r24, 0x01BA
    2c64:	90 91 bb 01 	lds	r25, 0x01BB
    2c68:	cc 01       	movw	r24, r24
    2c6a:	a0 e0       	ldi	r26, 0x00	; 0
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	0e 94 90 22 	call	0x4520	; 0x4520 <LCD_voidIntgerToString>
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <mapServo>:

u16 mapServo(u16 copy_u16ADCValue){
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <mapServo+0x6>
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <mapServo+0x8>
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
	u16 servoAngle = (u16)(copy_u16ADCValue * 255) / 100;
    2c8c:	4b 81       	ldd	r20, Y+3	; 0x03
    2c8e:	5c 81       	ldd	r21, Y+4	; 0x04
    2c90:	ca 01       	movw	r24, r20
    2c92:	9c 01       	movw	r18, r24
    2c94:	22 0f       	add	r18, r18
    2c96:	33 1f       	adc	r19, r19
    2c98:	c9 01       	movw	r24, r18
    2c9a:	96 95       	lsr	r25
    2c9c:	98 2f       	mov	r25, r24
    2c9e:	88 27       	eor	r24, r24
    2ca0:	97 95       	ror	r25
    2ca2:	87 95       	ror	r24
    2ca4:	82 1b       	sub	r24, r18
    2ca6:	93 0b       	sbc	r25, r19
    2ca8:	84 0f       	add	r24, r20
    2caa:	95 1f       	adc	r25, r21
    2cac:	24 e6       	ldi	r18, 0x64	; 100
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	b9 01       	movw	r22, r18
    2cb2:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__udivmodhi4>
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	9a 83       	std	Y+2, r25	; 0x02
    2cba:	89 83       	std	Y+1, r24	; 0x01
	return servoAngle;
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	08 95       	ret

00002cce <LM35_u8getTemperature>:
/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality
u8 LM35_u8getTemperature(void) {
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	2f 97       	sbiw	r28, 0x0f	; 15
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
	u8 temperatureValue = 0;
    2ce2:	1f 86       	std	Y+15, r1	; 0x0f

	// Read ADC Channel that the LM35 is configured to
	ADC_voidStartConversionPolling(LM35_CHANNEL_ID);
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <ADC_voidStartConversionPolling>
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	a0 ea       	ldi	r26, 0xA0	; 160
    2cf0:	b0 e4       	ldi	r27, 0x40	; 64
    2cf2:	8b 87       	std	Y+11, r24	; 0x0b
    2cf4:	9c 87       	std	Y+12, r25	; 0x0c
    2cf6:	ad 87       	std	Y+13, r26	; 0x0d
    2cf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	4a ef       	ldi	r20, 0xFA	; 250
    2d08:	54 e4       	ldi	r21, 0x44	; 68
    2d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	8f 83       	std	Y+7, r24	; 0x07
    2d14:	98 87       	std	Y+8, r25	; 0x08
    2d16:	a9 87       	std	Y+9, r26	; 0x09
    2d18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1c:	78 85       	ldd	r23, Y+8	; 0x08
    2d1e:	89 85       	ldd	r24, Y+9	; 0x09
    2d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e8       	ldi	r20, 0x80	; 128
    2d28:	5f e3       	ldi	r21, 0x3F	; 63
    2d2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d2e:	88 23       	and	r24, r24
    2d30:	2c f4       	brge	.+10     	; 0x2d3c <LM35_u8getTemperature+0x6e>
		__ticks = 1;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	3f c0       	rjmp	.+126    	; 0x2dba <LM35_u8getTemperature+0xec>
	else if (__tmp > 65535)
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d50:	18 16       	cp	r1, r24
    2d52:	4c f5       	brge	.+82     	; 0x2da6 <LM35_u8getTemperature+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	0f c0       	rjmp	.+30     	; 0x2d9c <LM35_u8getTemperature+0xce>
    2d7e:	88 ec       	ldi	r24, 0xC8	; 200
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	9c 83       	std	Y+4, r25	; 0x04
    2d84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <LM35_u8getTemperature+0xbc>
    2d8e:	9c 83       	std	Y+4, r25	; 0x04
    2d90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d92:	8d 81       	ldd	r24, Y+5	; 0x05
    2d94:	9e 81       	ldd	r25, Y+6	; 0x06
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	9e 83       	std	Y+6, r25	; 0x06
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	69 f7       	brne	.-38     	; 0x2d7e <LM35_u8getTemperature+0xb0>
    2da4:	14 c0       	rjmp	.+40     	; 0x2dce <LM35_u8getTemperature+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da6:	6f 81       	ldd	r22, Y+7	; 0x07
    2da8:	78 85       	ldd	r23, Y+8	; 0x08
    2daa:	89 85       	ldd	r24, Y+9	; 0x09
    2dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbe:	9a 83       	std	Y+2, r25	; 0x02
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <LM35_u8getTemperature+0xf8>
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01

	// Add a small Delay for the global ADC result is set with Interrupt
	_delay_ms(5);

	// Calculate the temperature for the ADC
	temperatureValue = (((u32)LM35_MAX_TEMP * ADC_REF_VOLT) / (ADC_MAX_VAL * LM35_MAX_VOLT));
    2dce:	1f 86       	std	Y+15, r1	; 0x0f

	return temperatureValue;
    2dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2dd2:	2f 96       	adiw	r28, 0x0f	; 15
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <LED_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes the LED Driver
LED_Error_t LED_voidInit(u8 copy_u8portID, u8 copy_u8pinID) {
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <LED_voidInit+0x6>
    2dea:	0f 92       	push	r0
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	8a 83       	std	Y+2, r24	; 0x02
    2df2:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2df4:	19 82       	std	Y+1, r1	; 0x01
	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	88 30       	cpi	r24, 0x08	; 8
    2dfa:	18 f0       	brcs	.+6      	; 0x2e02 <LED_voidInit+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	0c c0       	rjmp	.+24     	; 0x2e1a <LED_voidInit+0x36>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	84 30       	cpi	r24, 0x04	; 4
    2e06:	18 f0       	brcs	.+6      	; 0x2e0e <LED_voidInit+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	06 c0       	rjmp	.+12     	; 0x2e1a <LED_voidInit+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_voidSetPinDirection(copy_u8portID, copy_u8pinID, PIN_OUTPUT);
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	6b 81       	ldd	r22, Y+3	; 0x03
    2e12:	41 e0       	ldi	r20, 0x01	; 1
    2e14:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		LED_Driver_Checker = LED_OK;
    2e18:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <LED_voidOn>:

// Turns on a LED
LED_Error_t LED_voidOn(u8 copy_u8portID, u8 copy_u8pinID) {
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <LED_voidOn+0x6>
    2e2e:	0f 92       	push	r0
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	8a 83       	std	Y+2, r24	; 0x02
    2e36:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2e38:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	88 30       	cpi	r24, 0x08	; 8
    2e3e:	18 f0       	brcs	.+6      	; 0x2e46 <LED_voidOn+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	89 83       	std	Y+1, r24	; 0x01
    2e44:	0c c0       	rjmp	.+24     	; 0x2e5e <LED_voidOn+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	84 30       	cpi	r24, 0x04	; 4
    2e4a:	18 f0       	brcs	.+6      	; 0x2e52 <LED_voidOn+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e4c:	82 e0       	ldi	r24, 0x02	; 2
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    2e50:	06 c0       	rjmp	.+12     	; 0x2e5e <LED_voidOn+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	6b 81       	ldd	r22, Y+3	; 0x03
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    2e5c:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <LED_voidOff>:

// Turns off a LED
LED_Error_t LED_voidOff(u8 copy_u8portID, u8 copy_u8pinID) {
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	00 d0       	rcall	.+0      	; 0x2e72 <LED_voidOff+0x6>
    2e72:	0f 92       	push	r0
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	8a 83       	std	Y+2, r24	; 0x02
    2e7a:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2e7c:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	88 30       	cpi	r24, 0x08	; 8
    2e82:	18 f0       	brcs	.+6      	; 0x2e8a <LED_voidOff+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	89 83       	std	Y+1, r24	; 0x01
    2e88:	0c c0       	rjmp	.+24     	; 0x2ea2 <LED_voidOff+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	84 30       	cpi	r24, 0x04	; 4
    2e8e:	18 f0       	brcs	.+6      	; 0x2e96 <LED_voidOff+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	89 83       	std	Y+1, r24	; 0x01
    2e94:	06 c0       	rjmp	.+12     	; 0x2ea2 <LED_voidOff+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	6b 81       	ldd	r22, Y+3	; 0x03
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    2ea0:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <LED_voidToggle>:

// Toggles a LED
LED_Error_t LED_voidToggle(u8 copy_u8portID, u8 copy_u8pinID) {
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <LED_voidToggle+0x6>
    2eb6:	0f 92       	push	r0
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	8a 83       	std	Y+2, r24	; 0x02
    2ebe:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2ec0:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	88 30       	cpi	r24, 0x08	; 8
    2ec6:	18 f0       	brcs	.+6      	; 0x2ece <LED_voidToggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	0b c0       	rjmp	.+22     	; 0x2ee4 <LED_voidToggle+0x34>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	84 30       	cpi	r24, 0x04	; 4
    2ed2:	18 f0       	brcs	.+6      	; 0x2eda <LED_voidToggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2ed4:	82 e0       	ldi	r24, 0x02	; 2
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    2ed8:	05 c0       	rjmp	.+10     	; 0x2ee4 <LED_voidToggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_voidTogglePin(copy_u8portID, copy_u8pinID);
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	6b 81       	ldd	r22, Y+3	; 0x03
    2ede:	0e 94 3d 10 	call	0x207a	; 0x207a <GPIO_voidTogglePin>
			LED_Driver_Checker = LED_OK;
    2ee2:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <LCD_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes and enables the LCD Module to start functionality
void LCD_voidInit(void) {
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	e8 97       	sbiw	r28, 0x38	; 56
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	63 e0       	ldi	r22, 0x03	; 3
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>

	// Initialize Enable Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	62 e0       	ldi	r22, 0x02	; 2
    2f14:	41 e0       	ldi	r20, 0x01	; 1
    2f16:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	a0 ea       	ldi	r26, 0xA0	; 160
    2f20:	b1 e4       	ldi	r27, 0x41	; 65
    2f22:	8d ab       	std	Y+53, r24	; 0x35
    2f24:	9e ab       	std	Y+54, r25	; 0x36
    2f26:	af ab       	std	Y+55, r26	; 0x37
    2f28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f30:	98 ad       	ldd	r25, Y+56	; 0x38
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	4a ef       	ldi	r20, 0xFA	; 250
    2f38:	54 e4       	ldi	r21, 0x44	; 68
    2f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	89 ab       	std	Y+49, r24	; 0x31
    2f44:	9a ab       	std	Y+50, r25	; 0x32
    2f46:	ab ab       	std	Y+51, r26	; 0x33
    2f48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f50:	9c a9       	ldd	r25, Y+52	; 0x34
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	2c f4       	brge	.+10     	; 0x2f6c <LCD_voidInit+0x7a>
		__ticks = 1;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	98 ab       	std	Y+48, r25	; 0x30
    2f68:	8f a7       	std	Y+47, r24	; 0x2f
    2f6a:	3f c0       	rjmp	.+126    	; 0x2fea <LCD_voidInit+0xf8>
	else if (__tmp > 65535)
    2f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f70:	8b a9       	ldd	r24, Y+51	; 0x33
    2f72:	9c a9       	ldd	r25, Y+52	; 0x34
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	3f ef       	ldi	r19, 0xFF	; 255
    2f78:	4f e7       	ldi	r20, 0x7F	; 127
    2f7a:	57 e4       	ldi	r21, 0x47	; 71
    2f7c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f80:	18 16       	cp	r1, r24
    2f82:	4c f5       	brge	.+82     	; 0x2fd6 <LCD_voidInit+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f84:	6d a9       	ldd	r22, Y+53	; 0x35
    2f86:	7e a9       	ldd	r23, Y+54	; 0x36
    2f88:	8f a9       	ldd	r24, Y+55	; 0x37
    2f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e2       	ldi	r20, 0x20	; 32
    2f92:	51 e4       	ldi	r21, 0x41	; 65
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	98 ab       	std	Y+48, r25	; 0x30
    2faa:	8f a7       	std	Y+47, r24	; 0x2f
    2fac:	0f c0       	rjmp	.+30     	; 0x2fcc <LCD_voidInit+0xda>
    2fae:	88 ec       	ldi	r24, 0xC8	; 200
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9e a7       	std	Y+46, r25	; 0x2e
    2fb4:	8d a7       	std	Y+45, r24	; 0x2d
    2fb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <LCD_voidInit+0xc8>
    2fbe:	9e a7       	std	Y+46, r25	; 0x2e
    2fc0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	98 ab       	std	Y+48, r25	; 0x30
    2fca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fce:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	69 f7       	brne	.-38     	; 0x2fae <LCD_voidInit+0xbc>
    2fd4:	14 c0       	rjmp	.+40     	; 0x2ffe <LCD_voidInit+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fd8:	7a a9       	ldd	r23, Y+50	; 0x32
    2fda:	8b a9       	ldd	r24, Y+51	; 0x33
    2fdc:	9c a9       	ldd	r25, Y+52	; 0x34
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	98 ab       	std	Y+48, r25	; 0x30
    2fe8:	8f a7       	std	Y+47, r24	; 0x2f
    2fea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fec:	98 a9       	ldd	r25, Y+48	; 0x30
    2fee:	9c a7       	std	Y+44, r25	; 0x2c
    2ff0:	8b a7       	std	Y+43, r24	; 0x2b
    2ff2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <LCD_voidInit+0x104>
    2ffa:	9c a7       	std	Y+44, r25	; 0x2c
    2ffc:	8b a7       	std	Y+43, r24	; 0x2b
	if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_voidSetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
		LCD_voidSendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}
	else {
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	41 e0       	ldi	r20, 0x01	; 1
    3004:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	61 e0       	ldi	r22, 0x01	; 1
    300c:	41 e0       	ldi	r20, 0x01	; 1
    300e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	62 e0       	ldi	r22, 0x02	; 2
    3016:	41 e0       	ldi	r20, 0x01	; 1
    3018:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	64 e0       	ldi	r22, 0x04	; 4
    3020:	41 e0       	ldi	r20, 0x01	; 1
    3022:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>


		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT1);
    3026:	83 e3       	ldi	r24, 0x33	; 51
    3028:	0e 94 81 19 	call	0x3302	; 0x3302 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT2);
    302c:	82 e3       	ldi	r24, 0x32	; 50
    302e:	0e 94 81 19 	call	0x3302	; 0x3302 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_5x7_DOTS);
    3032:	88 e2       	ldi	r24, 0x28	; 40
    3034:	0e 94 81 19 	call	0x3302	; 0x3302 <LCD_voidSendCommand>
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	a0 e0       	ldi	r26, 0x00	; 0
    303e:	b0 e4       	ldi	r27, 0x40	; 64
    3040:	8f a3       	std	Y+39, r24	; 0x27
    3042:	98 a7       	std	Y+40, r25	; 0x28
    3044:	a9 a7       	std	Y+41, r26	; 0x29
    3046:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3048:	6f a1       	ldd	r22, Y+39	; 0x27
    304a:	78 a5       	ldd	r23, Y+40	; 0x28
    304c:	89 a5       	ldd	r24, Y+41	; 0x29
    304e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	4a ef       	ldi	r20, 0xFA	; 250
    3056:	54 e4       	ldi	r21, 0x44	; 68
    3058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	8b a3       	std	Y+35, r24	; 0x23
    3062:	9c a3       	std	Y+36, r25	; 0x24
    3064:	ad a3       	std	Y+37, r26	; 0x25
    3066:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3068:	6b a1       	ldd	r22, Y+35	; 0x23
    306a:	7c a1       	ldd	r23, Y+36	; 0x24
    306c:	8d a1       	ldd	r24, Y+37	; 0x25
    306e:	9e a1       	ldd	r25, Y+38	; 0x26
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e8       	ldi	r20, 0x80	; 128
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	2c f4       	brge	.+10     	; 0x308a <LCD_voidInit+0x198>
		__ticks = 1;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	9a a3       	std	Y+34, r25	; 0x22
    3086:	89 a3       	std	Y+33, r24	; 0x21
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <LCD_voidInit+0x216>
	else if (__tmp > 65535)
    308a:	6b a1       	ldd	r22, Y+35	; 0x23
    308c:	7c a1       	ldd	r23, Y+36	; 0x24
    308e:	8d a1       	ldd	r24, Y+37	; 0x25
    3090:	9e a1       	ldd	r25, Y+38	; 0x26
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    309e:	18 16       	cp	r1, r24
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <LCD_voidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a2:	6f a1       	ldd	r22, Y+39	; 0x27
    30a4:	78 a5       	ldd	r23, Y+40	; 0x28
    30a6:	89 a5       	ldd	r24, Y+41	; 0x29
    30a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	51 e4       	ldi	r21, 0x41	; 65
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9a a3       	std	Y+34, r25	; 0x22
    30c8:	89 a3       	std	Y+33, r24	; 0x21
    30ca:	0f c0       	rjmp	.+30     	; 0x30ea <LCD_voidInit+0x1f8>
    30cc:	88 ec       	ldi	r24, 0xC8	; 200
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	98 a3       	std	Y+32, r25	; 0x20
    30d2:	8f 8f       	std	Y+31, r24	; 0x1f
    30d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30d6:	98 a1       	ldd	r25, Y+32	; 0x20
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <LCD_voidInit+0x1e6>
    30dc:	98 a3       	std	Y+32, r25	; 0x20
    30de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e0:	89 a1       	ldd	r24, Y+33	; 0x21
    30e2:	9a a1       	ldd	r25, Y+34	; 0x22
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	9a a3       	std	Y+34, r25	; 0x22
    30e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ea:	89 a1       	ldd	r24, Y+33	; 0x21
    30ec:	9a a1       	ldd	r25, Y+34	; 0x22
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	69 f7       	brne	.-38     	; 0x30cc <LCD_voidInit+0x1da>
    30f2:	14 c0       	rjmp	.+40     	; 0x311c <LCD_voidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	6b a1       	ldd	r22, Y+35	; 0x23
    30f6:	7c a1       	ldd	r23, Y+36	; 0x24
    30f8:	8d a1       	ldd	r24, Y+37	; 0x25
    30fa:	9e a1       	ldd	r25, Y+38	; 0x26
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9a a3       	std	Y+34, r25	; 0x22
    3106:	89 a3       	std	Y+33, r24	; 0x21
    3108:	89 a1       	ldd	r24, Y+33	; 0x21
    310a:	9a a1       	ldd	r25, Y+34	; 0x22
    310c:	9e 8f       	std	Y+30, r25	; 0x1e
    310e:	8d 8f       	std	Y+29, r24	; 0x1d
    3110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3112:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <LCD_voidInit+0x222>
    3118:	9e 8f       	std	Y+30, r25	; 0x1e
    311a:	8d 8f       	std	Y+29, r24	; 0x1d
		//LCD_voidSendCommand(LCD_2LINES_FOUR_BIT);
		_delay_ms(2);
	}

	LCD_voidSendCommand(LCD_CURSOR_OFF);
    311c:	8c e0       	ldi	r24, 0x0C	; 12
    311e:	0e 94 81 19 	call	0x3302	; 0x3302 <LCD_voidSendCommand>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	a0 e0       	ldi	r26, 0x00	; 0
    3128:	b0 e4       	ldi	r27, 0x40	; 64
    312a:	89 8f       	std	Y+25, r24	; 0x19
    312c:	9a 8f       	std	Y+26, r25	; 0x1a
    312e:	ab 8f       	std	Y+27, r26	; 0x1b
    3130:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3132:	69 8d       	ldd	r22, Y+25	; 0x19
    3134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3136:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3138:	9c 8d       	ldd	r25, Y+28	; 0x1c
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	4a ef       	ldi	r20, 0xFA	; 250
    3140:	54 e4       	ldi	r21, 0x44	; 68
    3142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	8d 8b       	std	Y+21, r24	; 0x15
    314c:	9e 8b       	std	Y+22, r25	; 0x16
    314e:	af 8b       	std	Y+23, r26	; 0x17
    3150:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3152:	6d 89       	ldd	r22, Y+21	; 0x15
    3154:	7e 89       	ldd	r23, Y+22	; 0x16
    3156:	8f 89       	ldd	r24, Y+23	; 0x17
    3158:	98 8d       	ldd	r25, Y+24	; 0x18
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e8       	ldi	r20, 0x80	; 128
    3160:	5f e3       	ldi	r21, 0x3F	; 63
    3162:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3166:	88 23       	and	r24, r24
    3168:	2c f4       	brge	.+10     	; 0x3174 <LCD_voidInit+0x282>
		__ticks = 1;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	9c 8b       	std	Y+20, r25	; 0x14
    3170:	8b 8b       	std	Y+19, r24	; 0x13
    3172:	3f c0       	rjmp	.+126    	; 0x31f2 <LCD_voidInit+0x300>
	else if (__tmp > 65535)
    3174:	6d 89       	ldd	r22, Y+21	; 0x15
    3176:	7e 89       	ldd	r23, Y+22	; 0x16
    3178:	8f 89       	ldd	r24, Y+23	; 0x17
    317a:	98 8d       	ldd	r25, Y+24	; 0x18
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	3f ef       	ldi	r19, 0xFF	; 255
    3180:	4f e7       	ldi	r20, 0x7F	; 127
    3182:	57 e4       	ldi	r21, 0x47	; 71
    3184:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3188:	18 16       	cp	r1, r24
    318a:	4c f5       	brge	.+82     	; 0x31de <LCD_voidInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318c:	69 8d       	ldd	r22, Y+25	; 0x19
    318e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e2       	ldi	r20, 0x20	; 32
    319a:	51 e4       	ldi	r21, 0x41	; 65
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	bc 01       	movw	r22, r24
    31a6:	cd 01       	movw	r24, r26
    31a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	9c 8b       	std	Y+20, r25	; 0x14
    31b2:	8b 8b       	std	Y+19, r24	; 0x13
    31b4:	0f c0       	rjmp	.+30     	; 0x31d4 <LCD_voidInit+0x2e2>
    31b6:	88 ec       	ldi	r24, 0xC8	; 200
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	9a 8b       	std	Y+18, r25	; 0x12
    31bc:	89 8b       	std	Y+17, r24	; 0x11
    31be:	89 89       	ldd	r24, Y+17	; 0x11
    31c0:	9a 89       	ldd	r25, Y+18	; 0x12
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <LCD_voidInit+0x2d0>
    31c6:	9a 8b       	std	Y+18, r25	; 0x12
    31c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ca:	8b 89       	ldd	r24, Y+19	; 0x13
    31cc:	9c 89       	ldd	r25, Y+20	; 0x14
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	9c 8b       	std	Y+20, r25	; 0x14
    31d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d4:	8b 89       	ldd	r24, Y+19	; 0x13
    31d6:	9c 89       	ldd	r25, Y+20	; 0x14
    31d8:	00 97       	sbiw	r24, 0x00	; 0
    31da:	69 f7       	brne	.-38     	; 0x31b6 <LCD_voidInit+0x2c4>
    31dc:	14 c0       	rjmp	.+40     	; 0x3206 <LCD_voidInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31de:	6d 89       	ldd	r22, Y+21	; 0x15
    31e0:	7e 89       	ldd	r23, Y+22	; 0x16
    31e2:	8f 89       	ldd	r24, Y+23	; 0x17
    31e4:	98 8d       	ldd	r25, Y+24	; 0x18
    31e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	9c 8b       	std	Y+20, r25	; 0x14
    31f0:	8b 8b       	std	Y+19, r24	; 0x13
    31f2:	8b 89       	ldd	r24, Y+19	; 0x13
    31f4:	9c 89       	ldd	r25, Y+20	; 0x14
    31f6:	98 8b       	std	Y+16, r25	; 0x10
    31f8:	8f 87       	std	Y+15, r24	; 0x0f
    31fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    31fc:	98 89       	ldd	r25, Y+16	; 0x10
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <LCD_voidInit+0x30c>
    3202:	98 8b       	std	Y+16, r25	; 0x10
    3204:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	0e 94 81 19 	call	0x3302	; 0x3302 <LCD_voidSendCommand>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	a0 e0       	ldi	r26, 0x00	; 0
    3212:	b0 e4       	ldi	r27, 0x40	; 64
    3214:	8b 87       	std	Y+11, r24	; 0x0b
    3216:	9c 87       	std	Y+12, r25	; 0x0c
    3218:	ad 87       	std	Y+13, r26	; 0x0d
    321a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321c:	6b 85       	ldd	r22, Y+11	; 0x0b
    321e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3220:	8d 85       	ldd	r24, Y+13	; 0x0d
    3222:	9e 85       	ldd	r25, Y+14	; 0x0e
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	4a ef       	ldi	r20, 0xFA	; 250
    322a:	54 e4       	ldi	r21, 0x44	; 68
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	8f 83       	std	Y+7, r24	; 0x07
    3236:	98 87       	std	Y+8, r25	; 0x08
    3238:	a9 87       	std	Y+9, r26	; 0x09
    323a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    323c:	6f 81       	ldd	r22, Y+7	; 0x07
    323e:	78 85       	ldd	r23, Y+8	; 0x08
    3240:	89 85       	ldd	r24, Y+9	; 0x09
    3242:	9a 85       	ldd	r25, Y+10	; 0x0a
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e8       	ldi	r20, 0x80	; 128
    324a:	5f e3       	ldi	r21, 0x3F	; 63
    324c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3250:	88 23       	and	r24, r24
    3252:	2c f4       	brge	.+10     	; 0x325e <LCD_voidInit+0x36c>
		__ticks = 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	9e 83       	std	Y+6, r25	; 0x06
    325a:	8d 83       	std	Y+5, r24	; 0x05
    325c:	3f c0       	rjmp	.+126    	; 0x32dc <LCD_voidInit+0x3ea>
	else if (__tmp > 65535)
    325e:	6f 81       	ldd	r22, Y+7	; 0x07
    3260:	78 85       	ldd	r23, Y+8	; 0x08
    3262:	89 85       	ldd	r24, Y+9	; 0x09
    3264:	9a 85       	ldd	r25, Y+10	; 0x0a
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	3f ef       	ldi	r19, 0xFF	; 255
    326a:	4f e7       	ldi	r20, 0x7F	; 127
    326c:	57 e4       	ldi	r21, 0x47	; 71
    326e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3272:	18 16       	cp	r1, r24
    3274:	4c f5       	brge	.+82     	; 0x32c8 <LCD_voidInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3276:	6b 85       	ldd	r22, Y+11	; 0x0b
    3278:	7c 85       	ldd	r23, Y+12	; 0x0c
    327a:	8d 85       	ldd	r24, Y+13	; 0x0d
    327c:	9e 85       	ldd	r25, Y+14	; 0x0e
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	40 e2       	ldi	r20, 0x20	; 32
    3284:	51 e4       	ldi	r21, 0x41	; 65
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	bc 01       	movw	r22, r24
    3290:	cd 01       	movw	r24, r26
    3292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	9e 83       	std	Y+6, r25	; 0x06
    329c:	8d 83       	std	Y+5, r24	; 0x05
    329e:	0f c0       	rjmp	.+30     	; 0x32be <LCD_voidInit+0x3cc>
    32a0:	88 ec       	ldi	r24, 0xC8	; 200
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	9c 83       	std	Y+4, r25	; 0x04
    32a6:	8b 83       	std	Y+3, r24	; 0x03
    32a8:	8b 81       	ldd	r24, Y+3	; 0x03
    32aa:	9c 81       	ldd	r25, Y+4	; 0x04
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <LCD_voidInit+0x3ba>
    32b0:	9c 83       	std	Y+4, r25	; 0x04
    32b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	9e 83       	std	Y+6, r25	; 0x06
    32bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32be:	8d 81       	ldd	r24, Y+5	; 0x05
    32c0:	9e 81       	ldd	r25, Y+6	; 0x06
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	69 f7       	brne	.-38     	; 0x32a0 <LCD_voidInit+0x3ae>
    32c6:	14 c0       	rjmp	.+40     	; 0x32f0 <LCD_voidInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ca:	78 85       	ldd	r23, Y+8	; 0x08
    32cc:	89 85       	ldd	r24, Y+9	; 0x09
    32ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	9e 83       	std	Y+6, r25	; 0x06
    32da:	8d 83       	std	Y+5, r24	; 0x05
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	9e 81       	ldd	r25, Y+6	; 0x06
    32e0:	9a 83       	std	Y+2, r25	; 0x02
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	9a 81       	ldd	r25, Y+2	; 0x02
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	f1 f7       	brne	.-4      	; 0x32e8 <LCD_voidInit+0x3f6>
    32ec:	9a 83       	std	Y+2, r25	; 0x02
    32ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//LCD_voidSendCommand(LCD_ENTRY_MODE);

}
    32f0:	e8 96       	adiw	r28, 0x38	; 56
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	08 95       	ret

00003302 <LCD_voidSendCommand>:


// Sends a command to the LCD
void LCD_voidSendCommand(u8 copy_u8Command) {
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	c3 56       	subi	r28, 0x63	; 99
    3310:	d0 40       	sbci	r29, 0x00	; 0
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	fe 01       	movw	r30, r28
    331e:	ed 59       	subi	r30, 0x9D	; 157
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	63 e0       	ldi	r22, 0x03	; 3
    3328:	40 e0       	ldi	r20, 0x00	; 0
    332a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    332e:	fe 01       	movw	r30, r28
    3330:	e1 5a       	subi	r30, 0xA1	; 161
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	a0 e8       	ldi	r26, 0x80	; 128
    333a:	bf e3       	ldi	r27, 0x3F	; 63
    333c:	80 83       	st	Z, r24
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	a2 83       	std	Z+2, r26	; 0x02
    3342:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3344:	8e 01       	movw	r16, r28
    3346:	05 5a       	subi	r16, 0xA5	; 165
    3348:	1f 4f       	sbci	r17, 0xFF	; 255
    334a:	fe 01       	movw	r30, r28
    334c:	e1 5a       	subi	r30, 0xA1	; 161
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	4a ef       	ldi	r20, 0xFA	; 250
    335e:	54 e4       	ldi	r21, 0x44	; 68
    3360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	f8 01       	movw	r30, r16
    336a:	80 83       	st	Z, r24
    336c:	91 83       	std	Z+1, r25	; 0x01
    336e:	a2 83       	std	Z+2, r26	; 0x02
    3370:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3372:	fe 01       	movw	r30, r28
    3374:	e5 5a       	subi	r30, 0xA5	; 165
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	60 81       	ld	r22, Z
    337a:	71 81       	ldd	r23, Z+1	; 0x01
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	93 81       	ldd	r25, Z+3	; 0x03
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e8       	ldi	r20, 0x80	; 128
    3386:	5f e3       	ldi	r21, 0x3F	; 63
    3388:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    338c:	88 23       	and	r24, r24
    338e:	44 f4       	brge	.+16     	; 0x33a0 <LCD_voidSendCommand+0x9e>
		__ticks = 1;
    3390:	fe 01       	movw	r30, r28
    3392:	e7 5a       	subi	r30, 0xA7	; 167
    3394:	ff 4f       	sbci	r31, 0xFF	; 255
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	91 83       	std	Z+1, r25	; 0x01
    339c:	80 83       	st	Z, r24
    339e:	64 c0       	rjmp	.+200    	; 0x3468 <LCD_voidSendCommand+0x166>
	else if (__tmp > 65535)
    33a0:	fe 01       	movw	r30, r28
    33a2:	e5 5a       	subi	r30, 0xA5	; 165
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	60 81       	ld	r22, Z
    33a8:	71 81       	ldd	r23, Z+1	; 0x01
    33aa:	82 81       	ldd	r24, Z+2	; 0x02
    33ac:	93 81       	ldd	r25, Z+3	; 0x03
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	3f ef       	ldi	r19, 0xFF	; 255
    33b2:	4f e7       	ldi	r20, 0x7F	; 127
    33b4:	57 e4       	ldi	r21, 0x47	; 71
    33b6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33ba:	18 16       	cp	r1, r24
    33bc:	0c f0       	brlt	.+2      	; 0x33c0 <LCD_voidSendCommand+0xbe>
    33be:	43 c0       	rjmp	.+134    	; 0x3446 <LCD_voidSendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c0:	fe 01       	movw	r30, r28
    33c2:	e1 5a       	subi	r30, 0xA1	; 161
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	60 81       	ld	r22, Z
    33c8:	71 81       	ldd	r23, Z+1	; 0x01
    33ca:	82 81       	ldd	r24, Z+2	; 0x02
    33cc:	93 81       	ldd	r25, Z+3	; 0x03
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	40 e2       	ldi	r20, 0x20	; 32
    33d4:	51 e4       	ldi	r21, 0x41	; 65
    33d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	8e 01       	movw	r16, r28
    33e0:	07 5a       	subi	r16, 0xA7	; 167
    33e2:	1f 4f       	sbci	r17, 0xFF	; 255
    33e4:	bc 01       	movw	r22, r24
    33e6:	cd 01       	movw	r24, r26
    33e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	f8 01       	movw	r30, r16
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	80 83       	st	Z, r24
    33f6:	1f c0       	rjmp	.+62     	; 0x3436 <LCD_voidSendCommand+0x134>
    33f8:	fe 01       	movw	r30, r28
    33fa:	e9 5a       	subi	r30, 0xA9	; 169
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	88 ec       	ldi	r24, 0xC8	; 200
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	91 83       	std	Z+1, r25	; 0x01
    3404:	80 83       	st	Z, r24
    3406:	fe 01       	movw	r30, r28
    3408:	e9 5a       	subi	r30, 0xA9	; 169
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	91 81       	ldd	r25, Z+1	; 0x01
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	f1 f7       	brne	.-4      	; 0x3410 <LCD_voidSendCommand+0x10e>
    3414:	fe 01       	movw	r30, r28
    3416:	e9 5a       	subi	r30, 0xA9	; 169
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341e:	de 01       	movw	r26, r28
    3420:	a7 5a       	subi	r26, 0xA7	; 167
    3422:	bf 4f       	sbci	r27, 0xFF	; 255
    3424:	fe 01       	movw	r30, r28
    3426:	e7 5a       	subi	r30, 0xA7	; 167
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	80 81       	ld	r24, Z
    342c:	91 81       	ldd	r25, Z+1	; 0x01
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	11 96       	adiw	r26, 0x01	; 1
    3432:	9c 93       	st	X, r25
    3434:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3436:	fe 01       	movw	r30, r28
    3438:	e7 5a       	subi	r30, 0xA7	; 167
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	80 81       	ld	r24, Z
    343e:	91 81       	ldd	r25, Z+1	; 0x01
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	d1 f6       	brne	.-76     	; 0x33f8 <LCD_voidSendCommand+0xf6>
    3444:	27 c0       	rjmp	.+78     	; 0x3494 <LCD_voidSendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3446:	8e 01       	movw	r16, r28
    3448:	07 5a       	subi	r16, 0xA7	; 167
    344a:	1f 4f       	sbci	r17, 0xFF	; 255
    344c:	fe 01       	movw	r30, r28
    344e:	e5 5a       	subi	r30, 0xA5	; 165
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	60 81       	ld	r22, Z
    3454:	71 81       	ldd	r23, Z+1	; 0x01
    3456:	82 81       	ldd	r24, Z+2	; 0x02
    3458:	93 81       	ldd	r25, Z+3	; 0x03
    345a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	f8 01       	movw	r30, r16
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	80 83       	st	Z, r24
    3468:	de 01       	movw	r26, r28
    346a:	ab 5a       	subi	r26, 0xAB	; 171
    346c:	bf 4f       	sbci	r27, 0xFF	; 255
    346e:	fe 01       	movw	r30, r28
    3470:	e7 5a       	subi	r30, 0xA7	; 167
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	91 81       	ldd	r25, Z+1	; 0x01
    3478:	8d 93       	st	X+, r24
    347a:	9c 93       	st	X, r25
    347c:	fe 01       	movw	r30, r28
    347e:	eb 5a       	subi	r30, 0xAB	; 171
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <LCD_voidSendCommand+0x184>
    348a:	fe 01       	movw	r30, r28
    348c:	eb 5a       	subi	r30, 0xAB	; 171
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	91 83       	std	Z+1, r25	; 0x01
    3492:	80 83       	st	Z, r24
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	62 e0       	ldi	r22, 0x02	; 2
    3498:	41 e0       	ldi	r20, 0x01	; 1
    349a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    349e:	fe 01       	movw	r30, r28
    34a0:	ef 5a       	subi	r30, 0xAF	; 175
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	a0 e8       	ldi	r26, 0x80	; 128
    34aa:	bf e3       	ldi	r27, 0x3F	; 63
    34ac:	80 83       	st	Z, r24
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	a2 83       	std	Z+2, r26	; 0x02
    34b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b4:	8e 01       	movw	r16, r28
    34b6:	03 5b       	subi	r16, 0xB3	; 179
    34b8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ba:	fe 01       	movw	r30, r28
    34bc:	ef 5a       	subi	r30, 0xAF	; 175
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	93 81       	ldd	r25, Z+3	; 0x03
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	4a ef       	ldi	r20, 0xFA	; 250
    34ce:	54 e4       	ldi	r21, 0x44	; 68
    34d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	f8 01       	movw	r30, r16
    34da:	80 83       	st	Z, r24
    34dc:	91 83       	std	Z+1, r25	; 0x01
    34de:	a2 83       	std	Z+2, r26	; 0x02
    34e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e2:	fe 01       	movw	r30, r28
    34e4:	e3 5b       	subi	r30, 0xB3	; 179
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	60 81       	ld	r22, Z
    34ea:	71 81       	ldd	r23, Z+1	; 0x01
    34ec:	82 81       	ldd	r24, Z+2	; 0x02
    34ee:	93 81       	ldd	r25, Z+3	; 0x03
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e8       	ldi	r20, 0x80	; 128
    34f6:	5f e3       	ldi	r21, 0x3F	; 63
    34f8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34fc:	88 23       	and	r24, r24
    34fe:	44 f4       	brge	.+16     	; 0x3510 <LCD_voidSendCommand+0x20e>
		__ticks = 1;
    3500:	fe 01       	movw	r30, r28
    3502:	e5 5b       	subi	r30, 0xB5	; 181
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	91 83       	std	Z+1, r25	; 0x01
    350c:	80 83       	st	Z, r24
    350e:	64 c0       	rjmp	.+200    	; 0x35d8 <LCD_voidSendCommand+0x2d6>
	else if (__tmp > 65535)
    3510:	fe 01       	movw	r30, r28
    3512:	e3 5b       	subi	r30, 0xB3	; 179
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	60 81       	ld	r22, Z
    3518:	71 81       	ldd	r23, Z+1	; 0x01
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	93 81       	ldd	r25, Z+3	; 0x03
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	3f ef       	ldi	r19, 0xFF	; 255
    3522:	4f e7       	ldi	r20, 0x7F	; 127
    3524:	57 e4       	ldi	r21, 0x47	; 71
    3526:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    352a:	18 16       	cp	r1, r24
    352c:	0c f0       	brlt	.+2      	; 0x3530 <LCD_voidSendCommand+0x22e>
    352e:	43 c0       	rjmp	.+134    	; 0x35b6 <LCD_voidSendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3530:	fe 01       	movw	r30, r28
    3532:	ef 5a       	subi	r30, 0xAF	; 175
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	60 81       	ld	r22, Z
    3538:	71 81       	ldd	r23, Z+1	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e2       	ldi	r20, 0x20	; 32
    3544:	51 e4       	ldi	r21, 0x41	; 65
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	8e 01       	movw	r16, r28
    3550:	05 5b       	subi	r16, 0xB5	; 181
    3552:	1f 4f       	sbci	r17, 0xFF	; 255
    3554:	bc 01       	movw	r22, r24
    3556:	cd 01       	movw	r24, r26
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	f8 01       	movw	r30, r16
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	80 83       	st	Z, r24
    3566:	1f c0       	rjmp	.+62     	; 0x35a6 <LCD_voidSendCommand+0x2a4>
    3568:	fe 01       	movw	r30, r28
    356a:	e7 5b       	subi	r30, 0xB7	; 183
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	88 ec       	ldi	r24, 0xC8	; 200
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	91 83       	std	Z+1, r25	; 0x01
    3574:	80 83       	st	Z, r24
    3576:	fe 01       	movw	r30, r28
    3578:	e7 5b       	subi	r30, 0xB7	; 183
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <LCD_voidSendCommand+0x27e>
    3584:	fe 01       	movw	r30, r28
    3586:	e7 5b       	subi	r30, 0xB7	; 183
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358e:	de 01       	movw	r26, r28
    3590:	a5 5b       	subi	r26, 0xB5	; 181
    3592:	bf 4f       	sbci	r27, 0xFF	; 255
    3594:	fe 01       	movw	r30, r28
    3596:	e5 5b       	subi	r30, 0xB5	; 181
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	11 96       	adiw	r26, 0x01	; 1
    35a2:	9c 93       	st	X, r25
    35a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a6:	fe 01       	movw	r30, r28
    35a8:	e5 5b       	subi	r30, 0xB5	; 181
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	80 81       	ld	r24, Z
    35ae:	91 81       	ldd	r25, Z+1	; 0x01
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	d1 f6       	brne	.-76     	; 0x3568 <LCD_voidSendCommand+0x266>
    35b4:	27 c0       	rjmp	.+78     	; 0x3604 <LCD_voidSendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b6:	8e 01       	movw	r16, r28
    35b8:	05 5b       	subi	r16, 0xB5	; 181
    35ba:	1f 4f       	sbci	r17, 0xFF	; 255
    35bc:	fe 01       	movw	r30, r28
    35be:	e3 5b       	subi	r30, 0xB3	; 179
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	60 81       	ld	r22, Z
    35c4:	71 81       	ldd	r23, Z+1	; 0x01
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	93 81       	ldd	r25, Z+3	; 0x03
    35ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	f8 01       	movw	r30, r16
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
    35d8:	de 01       	movw	r26, r28
    35da:	a9 5b       	subi	r26, 0xB9	; 185
    35dc:	bf 4f       	sbci	r27, 0xFF	; 255
    35de:	fe 01       	movw	r30, r28
    35e0:	e5 5b       	subi	r30, 0xB5	; 181
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	80 81       	ld	r24, Z
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	8d 93       	st	X+, r24
    35ea:	9c 93       	st	X, r25
    35ec:	fe 01       	movw	r30, r28
    35ee:	e9 5b       	subi	r30, 0xB9	; 185
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	80 81       	ld	r24, Z
    35f4:	91 81       	ldd	r25, Z+1	; 0x01
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <LCD_voidSendCommand+0x2f4>
    35fa:	fe 01       	movw	r30, r28
    35fc:	e9 5b       	subi	r30, 0xB9	; 185
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	91 83       	std	Z+1, r25	; 0x01
    3602:	80 83       	st	Z, r24
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
    3604:	fe 01       	movw	r30, r28
    3606:	ed 59       	subi	r30, 0x9D	; 157
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	80 81       	ld	r24, Z
    360c:	82 95       	swap	r24
    360e:	8f 70       	andi	r24, 0x0F	; 15
    3610:	98 2f       	mov	r25, r24
    3612:	91 70       	andi	r25, 0x01	; 1
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	49 2f       	mov	r20, r25
    361a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
    361e:	fe 01       	movw	r30, r28
    3620:	ed 59       	subi	r30, 0x9D	; 157
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	80 81       	ld	r24, Z
    3626:	82 95       	swap	r24
    3628:	86 95       	lsr	r24
    362a:	87 70       	andi	r24, 0x07	; 7
    362c:	98 2f       	mov	r25, r24
    362e:	91 70       	andi	r25, 0x01	; 1
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	61 e0       	ldi	r22, 0x01	; 1
    3634:	49 2f       	mov	r20, r25
    3636:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
    363a:	fe 01       	movw	r30, r28
    363c:	ed 59       	subi	r30, 0x9D	; 157
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	80 81       	ld	r24, Z
    3642:	82 95       	swap	r24
    3644:	86 95       	lsr	r24
    3646:	86 95       	lsr	r24
    3648:	83 70       	andi	r24, 0x03	; 3
    364a:	98 2f       	mov	r25, r24
    364c:	91 70       	andi	r25, 0x01	; 1
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	62 e0       	ldi	r22, 0x02	; 2
    3652:	49 2f       	mov	r20, r25
    3654:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
    3658:	fe 01       	movw	r30, r28
    365a:	ed 59       	subi	r30, 0x9D	; 157
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	80 81       	ld	r24, Z
    3660:	98 2f       	mov	r25, r24
    3662:	99 1f       	adc	r25, r25
    3664:	99 27       	eor	r25, r25
    3666:	99 1f       	adc	r25, r25
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	64 e0       	ldi	r22, 0x04	; 4
    366c:	49 2f       	mov	r20, r25
    366e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    3672:	fe 01       	movw	r30, r28
    3674:	ed 5b       	subi	r30, 0xBD	; 189
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	a0 e8       	ldi	r26, 0x80	; 128
    367e:	bf e3       	ldi	r27, 0x3F	; 63
    3680:	80 83       	st	Z, r24
    3682:	91 83       	std	Z+1, r25	; 0x01
    3684:	a2 83       	std	Z+2, r26	; 0x02
    3686:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3688:	8e 01       	movw	r16, r28
    368a:	01 5c       	subi	r16, 0xC1	; 193
    368c:	1f 4f       	sbci	r17, 0xFF	; 255
    368e:	fe 01       	movw	r30, r28
    3690:	ed 5b       	subi	r30, 0xBD	; 189
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	60 81       	ld	r22, Z
    3696:	71 81       	ldd	r23, Z+1	; 0x01
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	93 81       	ldd	r25, Z+3	; 0x03
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	4a ef       	ldi	r20, 0xFA	; 250
    36a2:	54 e4       	ldi	r21, 0x44	; 68
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	f8 01       	movw	r30, r16
    36ae:	80 83       	st	Z, r24
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	a2 83       	std	Z+2, r26	; 0x02
    36b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36b6:	fe 01       	movw	r30, r28
    36b8:	ff 96       	adiw	r30, 0x3f	; 63
    36ba:	60 81       	ld	r22, Z
    36bc:	71 81       	ldd	r23, Z+1	; 0x01
    36be:	82 81       	ldd	r24, Z+2	; 0x02
    36c0:	93 81       	ldd	r25, Z+3	; 0x03
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e8       	ldi	r20, 0x80	; 128
    36c8:	5f e3       	ldi	r21, 0x3F	; 63
    36ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36ce:	88 23       	and	r24, r24
    36d0:	2c f4       	brge	.+10     	; 0x36dc <LCD_voidSendCommand+0x3da>
		__ticks = 1;
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	9e af       	std	Y+62, r25	; 0x3e
    36d8:	8d af       	std	Y+61, r24	; 0x3d
    36da:	46 c0       	rjmp	.+140    	; 0x3768 <LCD_voidSendCommand+0x466>
	else if (__tmp > 65535)
    36dc:	fe 01       	movw	r30, r28
    36de:	ff 96       	adiw	r30, 0x3f	; 63
    36e0:	60 81       	ld	r22, Z
    36e2:	71 81       	ldd	r23, Z+1	; 0x01
    36e4:	82 81       	ldd	r24, Z+2	; 0x02
    36e6:	93 81       	ldd	r25, Z+3	; 0x03
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	3f ef       	ldi	r19, 0xFF	; 255
    36ec:	4f e7       	ldi	r20, 0x7F	; 127
    36ee:	57 e4       	ldi	r21, 0x47	; 71
    36f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36f4:	18 16       	cp	r1, r24
    36f6:	64 f5       	brge	.+88     	; 0x3750 <LCD_voidSendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f8:	fe 01       	movw	r30, r28
    36fa:	ed 5b       	subi	r30, 0xBD	; 189
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	60 81       	ld	r22, Z
    3700:	71 81       	ldd	r23, Z+1	; 0x01
    3702:	82 81       	ldd	r24, Z+2	; 0x02
    3704:	93 81       	ldd	r25, Z+3	; 0x03
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	40 e2       	ldi	r20, 0x20	; 32
    370c:	51 e4       	ldi	r21, 0x41	; 65
    370e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	bc 01       	movw	r22, r24
    3718:	cd 01       	movw	r24, r26
    371a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	9e af       	std	Y+62, r25	; 0x3e
    3724:	8d af       	std	Y+61, r24	; 0x3d
    3726:	0f c0       	rjmp	.+30     	; 0x3746 <LCD_voidSendCommand+0x444>
    3728:	88 ec       	ldi	r24, 0xC8	; 200
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	9c af       	std	Y+60, r25	; 0x3c
    372e:	8b af       	std	Y+59, r24	; 0x3b
    3730:	8b ad       	ldd	r24, Y+59	; 0x3b
    3732:	9c ad       	ldd	r25, Y+60	; 0x3c
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <LCD_voidSendCommand+0x432>
    3738:	9c af       	std	Y+60, r25	; 0x3c
    373a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373c:	8d ad       	ldd	r24, Y+61	; 0x3d
    373e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	9e af       	std	Y+62, r25	; 0x3e
    3744:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3746:	8d ad       	ldd	r24, Y+61	; 0x3d
    3748:	9e ad       	ldd	r25, Y+62	; 0x3e
    374a:	00 97       	sbiw	r24, 0x00	; 0
    374c:	69 f7       	brne	.-38     	; 0x3728 <LCD_voidSendCommand+0x426>
    374e:	16 c0       	rjmp	.+44     	; 0x377c <LCD_voidSendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3750:	fe 01       	movw	r30, r28
    3752:	ff 96       	adiw	r30, 0x3f	; 63
    3754:	60 81       	ld	r22, Z
    3756:	71 81       	ldd	r23, Z+1	; 0x01
    3758:	82 81       	ldd	r24, Z+2	; 0x02
    375a:	93 81       	ldd	r25, Z+3	; 0x03
    375c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	9e af       	std	Y+62, r25	; 0x3e
    3766:	8d af       	std	Y+61, r24	; 0x3d
    3768:	8d ad       	ldd	r24, Y+61	; 0x3d
    376a:	9e ad       	ldd	r25, Y+62	; 0x3e
    376c:	9a af       	std	Y+58, r25	; 0x3a
    376e:	89 af       	std	Y+57, r24	; 0x39
    3770:	89 ad       	ldd	r24, Y+57	; 0x39
    3772:	9a ad       	ldd	r25, Y+58	; 0x3a
    3774:	01 97       	sbiw	r24, 0x01	; 1
    3776:	f1 f7       	brne	.-4      	; 0x3774 <LCD_voidSendCommand+0x472>
    3778:	9a af       	std	Y+58, r25	; 0x3a
    377a:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	62 e0       	ldi	r22, 0x02	; 2
    3780:	40 e0       	ldi	r20, 0x00	; 0
    3782:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	a0 e8       	ldi	r26, 0x80	; 128
    378c:	bf e3       	ldi	r27, 0x3F	; 63
    378e:	8d ab       	std	Y+53, r24	; 0x35
    3790:	9e ab       	std	Y+54, r25	; 0x36
    3792:	af ab       	std	Y+55, r26	; 0x37
    3794:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3796:	6d a9       	ldd	r22, Y+53	; 0x35
    3798:	7e a9       	ldd	r23, Y+54	; 0x36
    379a:	8f a9       	ldd	r24, Y+55	; 0x37
    379c:	98 ad       	ldd	r25, Y+56	; 0x38
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	4a ef       	ldi	r20, 0xFA	; 250
    37a4:	54 e4       	ldi	r21, 0x44	; 68
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	89 ab       	std	Y+49, r24	; 0x31
    37b0:	9a ab       	std	Y+50, r25	; 0x32
    37b2:	ab ab       	std	Y+51, r26	; 0x33
    37b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37b6:	69 a9       	ldd	r22, Y+49	; 0x31
    37b8:	7a a9       	ldd	r23, Y+50	; 0x32
    37ba:	8b a9       	ldd	r24, Y+51	; 0x33
    37bc:	9c a9       	ldd	r25, Y+52	; 0x34
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e8       	ldi	r20, 0x80	; 128
    37c4:	5f e3       	ldi	r21, 0x3F	; 63
    37c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37ca:	88 23       	and	r24, r24
    37cc:	2c f4       	brge	.+10     	; 0x37d8 <LCD_voidSendCommand+0x4d6>
		__ticks = 1;
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	98 ab       	std	Y+48, r25	; 0x30
    37d4:	8f a7       	std	Y+47, r24	; 0x2f
    37d6:	3f c0       	rjmp	.+126    	; 0x3856 <LCD_voidSendCommand+0x554>
	else if (__tmp > 65535)
    37d8:	69 a9       	ldd	r22, Y+49	; 0x31
    37da:	7a a9       	ldd	r23, Y+50	; 0x32
    37dc:	8b a9       	ldd	r24, Y+51	; 0x33
    37de:	9c a9       	ldd	r25, Y+52	; 0x34
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	3f ef       	ldi	r19, 0xFF	; 255
    37e4:	4f e7       	ldi	r20, 0x7F	; 127
    37e6:	57 e4       	ldi	r21, 0x47	; 71
    37e8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    37ec:	18 16       	cp	r1, r24
    37ee:	4c f5       	brge	.+82     	; 0x3842 <LCD_voidSendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f0:	6d a9       	ldd	r22, Y+53	; 0x35
    37f2:	7e a9       	ldd	r23, Y+54	; 0x36
    37f4:	8f a9       	ldd	r24, Y+55	; 0x37
    37f6:	98 ad       	ldd	r25, Y+56	; 0x38
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	40 e2       	ldi	r20, 0x20	; 32
    37fe:	51 e4       	ldi	r21, 0x41	; 65
    3800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	bc 01       	movw	r22, r24
    380a:	cd 01       	movw	r24, r26
    380c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	98 ab       	std	Y+48, r25	; 0x30
    3816:	8f a7       	std	Y+47, r24	; 0x2f
    3818:	0f c0       	rjmp	.+30     	; 0x3838 <LCD_voidSendCommand+0x536>
    381a:	88 ec       	ldi	r24, 0xC8	; 200
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	9e a7       	std	Y+46, r25	; 0x2e
    3820:	8d a7       	std	Y+45, r24	; 0x2d
    3822:	8d a5       	ldd	r24, Y+45	; 0x2d
    3824:	9e a5       	ldd	r25, Y+46	; 0x2e
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	f1 f7       	brne	.-4      	; 0x3826 <LCD_voidSendCommand+0x524>
    382a:	9e a7       	std	Y+46, r25	; 0x2e
    382c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3830:	98 a9       	ldd	r25, Y+48	; 0x30
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	98 ab       	std	Y+48, r25	; 0x30
    3836:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3838:	8f a5       	ldd	r24, Y+47	; 0x2f
    383a:	98 a9       	ldd	r25, Y+48	; 0x30
    383c:	00 97       	sbiw	r24, 0x00	; 0
    383e:	69 f7       	brne	.-38     	; 0x381a <LCD_voidSendCommand+0x518>
    3840:	14 c0       	rjmp	.+40     	; 0x386a <LCD_voidSendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3842:	69 a9       	ldd	r22, Y+49	; 0x31
    3844:	7a a9       	ldd	r23, Y+50	; 0x32
    3846:	8b a9       	ldd	r24, Y+51	; 0x33
    3848:	9c a9       	ldd	r25, Y+52	; 0x34
    384a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	98 ab       	std	Y+48, r25	; 0x30
    3854:	8f a7       	std	Y+47, r24	; 0x2f
    3856:	8f a5       	ldd	r24, Y+47	; 0x2f
    3858:	98 a9       	ldd	r25, Y+48	; 0x30
    385a:	9c a7       	std	Y+44, r25	; 0x2c
    385c:	8b a7       	std	Y+43, r24	; 0x2b
    385e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3860:	9c a5       	ldd	r25, Y+44	; 0x2c
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	f1 f7       	brne	.-4      	; 0x3862 <LCD_voidSendCommand+0x560>
    3866:	9c a7       	std	Y+44, r25	; 0x2c
    3868:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	62 e0       	ldi	r22, 0x02	; 2
    386e:	41 e0       	ldi	r20, 0x01	; 1
    3870:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	a0 e8       	ldi	r26, 0x80	; 128
    387a:	bf e3       	ldi	r27, 0x3F	; 63
    387c:	8f a3       	std	Y+39, r24	; 0x27
    387e:	98 a7       	std	Y+40, r25	; 0x28
    3880:	a9 a7       	std	Y+41, r26	; 0x29
    3882:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3884:	6f a1       	ldd	r22, Y+39	; 0x27
    3886:	78 a5       	ldd	r23, Y+40	; 0x28
    3888:	89 a5       	ldd	r24, Y+41	; 0x29
    388a:	9a a5       	ldd	r25, Y+42	; 0x2a
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	4a ef       	ldi	r20, 0xFA	; 250
    3892:	54 e4       	ldi	r21, 0x44	; 68
    3894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	8b a3       	std	Y+35, r24	; 0x23
    389e:	9c a3       	std	Y+36, r25	; 0x24
    38a0:	ad a3       	std	Y+37, r26	; 0x25
    38a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38a4:	6b a1       	ldd	r22, Y+35	; 0x23
    38a6:	7c a1       	ldd	r23, Y+36	; 0x24
    38a8:	8d a1       	ldd	r24, Y+37	; 0x25
    38aa:	9e a1       	ldd	r25, Y+38	; 0x26
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e8       	ldi	r20, 0x80	; 128
    38b2:	5f e3       	ldi	r21, 0x3F	; 63
    38b4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    38b8:	88 23       	and	r24, r24
    38ba:	2c f4       	brge	.+10     	; 0x38c6 <LCD_voidSendCommand+0x5c4>
		__ticks = 1;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	9a a3       	std	Y+34, r25	; 0x22
    38c2:	89 a3       	std	Y+33, r24	; 0x21
    38c4:	3f c0       	rjmp	.+126    	; 0x3944 <LCD_voidSendCommand+0x642>
	else if (__tmp > 65535)
    38c6:	6b a1       	ldd	r22, Y+35	; 0x23
    38c8:	7c a1       	ldd	r23, Y+36	; 0x24
    38ca:	8d a1       	ldd	r24, Y+37	; 0x25
    38cc:	9e a1       	ldd	r25, Y+38	; 0x26
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	3f ef       	ldi	r19, 0xFF	; 255
    38d2:	4f e7       	ldi	r20, 0x7F	; 127
    38d4:	57 e4       	ldi	r21, 0x47	; 71
    38d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    38da:	18 16       	cp	r1, r24
    38dc:	4c f5       	brge	.+82     	; 0x3930 <LCD_voidSendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38de:	6f a1       	ldd	r22, Y+39	; 0x27
    38e0:	78 a5       	ldd	r23, Y+40	; 0x28
    38e2:	89 a5       	ldd	r24, Y+41	; 0x29
    38e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	40 e2       	ldi	r20, 0x20	; 32
    38ec:	51 e4       	ldi	r21, 0x41	; 65
    38ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	bc 01       	movw	r22, r24
    38f8:	cd 01       	movw	r24, r26
    38fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	9a a3       	std	Y+34, r25	; 0x22
    3904:	89 a3       	std	Y+33, r24	; 0x21
    3906:	0f c0       	rjmp	.+30     	; 0x3926 <LCD_voidSendCommand+0x624>
    3908:	88 ec       	ldi	r24, 0xC8	; 200
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	98 a3       	std	Y+32, r25	; 0x20
    390e:	8f 8f       	std	Y+31, r24	; 0x1f
    3910:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3912:	98 a1       	ldd	r25, Y+32	; 0x20
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	f1 f7       	brne	.-4      	; 0x3914 <LCD_voidSendCommand+0x612>
    3918:	98 a3       	std	Y+32, r25	; 0x20
    391a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391c:	89 a1       	ldd	r24, Y+33	; 0x21
    391e:	9a a1       	ldd	r25, Y+34	; 0x22
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	9a a3       	std	Y+34, r25	; 0x22
    3924:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3926:	89 a1       	ldd	r24, Y+33	; 0x21
    3928:	9a a1       	ldd	r25, Y+34	; 0x22
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	69 f7       	brne	.-38     	; 0x3908 <LCD_voidSendCommand+0x606>
    392e:	14 c0       	rjmp	.+40     	; 0x3958 <LCD_voidSendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3930:	6b a1       	ldd	r22, Y+35	; 0x23
    3932:	7c a1       	ldd	r23, Y+36	; 0x24
    3934:	8d a1       	ldd	r24, Y+37	; 0x25
    3936:	9e a1       	ldd	r25, Y+38	; 0x26
    3938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	9a a3       	std	Y+34, r25	; 0x22
    3942:	89 a3       	std	Y+33, r24	; 0x21
    3944:	89 a1       	ldd	r24, Y+33	; 0x21
    3946:	9a a1       	ldd	r25, Y+34	; 0x22
    3948:	9e 8f       	std	Y+30, r25	; 0x1e
    394a:	8d 8f       	std	Y+29, r24	; 0x1d
    394c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    394e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	f1 f7       	brne	.-4      	; 0x3950 <LCD_voidSendCommand+0x64e>
    3954:	9e 8f       	std	Y+30, r25	; 0x1e
    3956:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
    3958:	fe 01       	movw	r30, r28
    395a:	ed 59       	subi	r30, 0x9D	; 157
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	80 81       	ld	r24, Z
    3960:	98 2f       	mov	r25, r24
    3962:	91 70       	andi	r25, 0x01	; 1
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	49 2f       	mov	r20, r25
    396a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
    396e:	fe 01       	movw	r30, r28
    3970:	ed 59       	subi	r30, 0x9D	; 157
    3972:	ff 4f       	sbci	r31, 0xFF	; 255
    3974:	80 81       	ld	r24, Z
    3976:	86 95       	lsr	r24
    3978:	98 2f       	mov	r25, r24
    397a:	91 70       	andi	r25, 0x01	; 1
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	61 e0       	ldi	r22, 0x01	; 1
    3980:	49 2f       	mov	r20, r25
    3982:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
    3986:	fe 01       	movw	r30, r28
    3988:	ed 59       	subi	r30, 0x9D	; 157
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	80 81       	ld	r24, Z
    398e:	86 95       	lsr	r24
    3990:	86 95       	lsr	r24
    3992:	98 2f       	mov	r25, r24
    3994:	91 70       	andi	r25, 0x01	; 1
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	62 e0       	ldi	r22, 0x02	; 2
    399a:	49 2f       	mov	r20, r25
    399c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
    39a0:	fe 01       	movw	r30, r28
    39a2:	ed 59       	subi	r30, 0x9D	; 157
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	80 81       	ld	r24, Z
    39a8:	86 95       	lsr	r24
    39aa:	86 95       	lsr	r24
    39ac:	86 95       	lsr	r24
    39ae:	98 2f       	mov	r25, r24
    39b0:	91 70       	andi	r25, 0x01	; 1
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	64 e0       	ldi	r22, 0x04	; 4
    39b6:	49 2f       	mov	r20, r25
    39b8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	a0 e8       	ldi	r26, 0x80	; 128
    39c2:	bf e3       	ldi	r27, 0x3F	; 63
    39c4:	89 8f       	std	Y+25, r24	; 0x19
    39c6:	9a 8f       	std	Y+26, r25	; 0x1a
    39c8:	ab 8f       	std	Y+27, r26	; 0x1b
    39ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39cc:	69 8d       	ldd	r22, Y+25	; 0x19
    39ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	4a ef       	ldi	r20, 0xFA	; 250
    39da:	54 e4       	ldi	r21, 0x44	; 68
    39dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	8d 8b       	std	Y+21, r24	; 0x15
    39e6:	9e 8b       	std	Y+22, r25	; 0x16
    39e8:	af 8b       	std	Y+23, r26	; 0x17
    39ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39ec:	6d 89       	ldd	r22, Y+21	; 0x15
    39ee:	7e 89       	ldd	r23, Y+22	; 0x16
    39f0:	8f 89       	ldd	r24, Y+23	; 0x17
    39f2:	98 8d       	ldd	r25, Y+24	; 0x18
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e8       	ldi	r20, 0x80	; 128
    39fa:	5f e3       	ldi	r21, 0x3F	; 63
    39fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a00:	88 23       	and	r24, r24
    3a02:	2c f4       	brge	.+10     	; 0x3a0e <LCD_voidSendCommand+0x70c>
		__ticks = 1;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9c 8b       	std	Y+20, r25	; 0x14
    3a0a:	8b 8b       	std	Y+19, r24	; 0x13
    3a0c:	3f c0       	rjmp	.+126    	; 0x3a8c <LCD_voidSendCommand+0x78a>
	else if (__tmp > 65535)
    3a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a10:	7e 89       	ldd	r23, Y+22	; 0x16
    3a12:	8f 89       	ldd	r24, Y+23	; 0x17
    3a14:	98 8d       	ldd	r25, Y+24	; 0x18
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	3f ef       	ldi	r19, 0xFF	; 255
    3a1a:	4f e7       	ldi	r20, 0x7F	; 127
    3a1c:	57 e4       	ldi	r21, 0x47	; 71
    3a1e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a22:	18 16       	cp	r1, r24
    3a24:	4c f5       	brge	.+82     	; 0x3a78 <LCD_voidSendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a26:	69 8d       	ldd	r22, Y+25	; 0x19
    3a28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e2       	ldi	r20, 0x20	; 32
    3a34:	51 e4       	ldi	r21, 0x41	; 65
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9c 8b       	std	Y+20, r25	; 0x14
    3a4c:	8b 8b       	std	Y+19, r24	; 0x13
    3a4e:	0f c0       	rjmp	.+30     	; 0x3a6e <LCD_voidSendCommand+0x76c>
    3a50:	88 ec       	ldi	r24, 0xC8	; 200
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	9a 8b       	std	Y+18, r25	; 0x12
    3a56:	89 8b       	std	Y+17, r24	; 0x11
    3a58:	89 89       	ldd	r24, Y+17	; 0x11
    3a5a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <LCD_voidSendCommand+0x75a>
    3a60:	9a 8b       	std	Y+18, r25	; 0x12
    3a62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a64:	8b 89       	ldd	r24, Y+19	; 0x13
    3a66:	9c 89       	ldd	r25, Y+20	; 0x14
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	9c 8b       	std	Y+20, r25	; 0x14
    3a6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a70:	9c 89       	ldd	r25, Y+20	; 0x14
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	69 f7       	brne	.-38     	; 0x3a50 <LCD_voidSendCommand+0x74e>
    3a76:	14 c0       	rjmp	.+40     	; 0x3aa0 <LCD_voidSendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a78:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	9c 8b       	std	Y+20, r25	; 0x14
    3a8a:	8b 8b       	std	Y+19, r24	; 0x13
    3a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a90:	98 8b       	std	Y+16, r25	; 0x10
    3a92:	8f 87       	std	Y+15, r24	; 0x0f
    3a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a96:	98 89       	ldd	r25, Y+16	; 0x10
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <LCD_voidSendCommand+0x796>
    3a9c:	98 8b       	std	Y+16, r25	; 0x10
    3a9e:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	62 e0       	ldi	r22, 0x02	; 2
    3aa4:	40 e0       	ldi	r20, 0x00	; 0
    3aa6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	a0 e8       	ldi	r26, 0x80	; 128
    3ab0:	bf e3       	ldi	r27, 0x3F	; 63
    3ab2:	8b 87       	std	Y+11, r24	; 0x0b
    3ab4:	9c 87       	std	Y+12, r25	; 0x0c
    3ab6:	ad 87       	std	Y+13, r26	; 0x0d
    3ab8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	4a ef       	ldi	r20, 0xFA	; 250
    3ac8:	54 e4       	ldi	r21, 0x44	; 68
    3aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	8f 83       	std	Y+7, r24	; 0x07
    3ad4:	98 87       	std	Y+8, r25	; 0x08
    3ad6:	a9 87       	std	Y+9, r26	; 0x09
    3ad8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ada:	6f 81       	ldd	r22, Y+7	; 0x07
    3adc:	78 85       	ldd	r23, Y+8	; 0x08
    3ade:	89 85       	ldd	r24, Y+9	; 0x09
    3ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e8       	ldi	r20, 0x80	; 128
    3ae8:	5f e3       	ldi	r21, 0x3F	; 63
    3aea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3aee:	88 23       	and	r24, r24
    3af0:	2c f4       	brge	.+10     	; 0x3afc <LCD_voidSendCommand+0x7fa>
		__ticks = 1;
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	9e 83       	std	Y+6, r25	; 0x06
    3af8:	8d 83       	std	Y+5, r24	; 0x05
    3afa:	3f c0       	rjmp	.+126    	; 0x3b7a <LCD_voidSendCommand+0x878>
	else if (__tmp > 65535)
    3afc:	6f 81       	ldd	r22, Y+7	; 0x07
    3afe:	78 85       	ldd	r23, Y+8	; 0x08
    3b00:	89 85       	ldd	r24, Y+9	; 0x09
    3b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	3f ef       	ldi	r19, 0xFF	; 255
    3b08:	4f e7       	ldi	r20, 0x7F	; 127
    3b0a:	57 e4       	ldi	r21, 0x47	; 71
    3b0c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b10:	18 16       	cp	r1, r24
    3b12:	4c f5       	brge	.+82     	; 0x3b66 <LCD_voidSendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	40 e2       	ldi	r20, 0x20	; 32
    3b22:	51 e4       	ldi	r21, 0x41	; 65
    3b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	cd 01       	movw	r24, r26
    3b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	9e 83       	std	Y+6, r25	; 0x06
    3b3a:	8d 83       	std	Y+5, r24	; 0x05
    3b3c:	0f c0       	rjmp	.+30     	; 0x3b5c <LCD_voidSendCommand+0x85a>
    3b3e:	88 ec       	ldi	r24, 0xC8	; 200
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	9c 83       	std	Y+4, r25	; 0x04
    3b44:	8b 83       	std	Y+3, r24	; 0x03
    3b46:	8b 81       	ldd	r24, Y+3	; 0x03
    3b48:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	f1 f7       	brne	.-4      	; 0x3b4a <LCD_voidSendCommand+0x848>
    3b4e:	9c 83       	std	Y+4, r25	; 0x04
    3b50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b52:	8d 81       	ldd	r24, Y+5	; 0x05
    3b54:	9e 81       	ldd	r25, Y+6	; 0x06
    3b56:	01 97       	sbiw	r24, 0x01	; 1
    3b58:	9e 83       	std	Y+6, r25	; 0x06
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	69 f7       	brne	.-38     	; 0x3b3e <LCD_voidSendCommand+0x83c>
    3b64:	14 c0       	rjmp	.+40     	; 0x3b8e <LCD_voidSendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b66:	6f 81       	ldd	r22, Y+7	; 0x07
    3b68:	78 85       	ldd	r23, Y+8	; 0x08
    3b6a:	89 85       	ldd	r24, Y+9	; 0x09
    3b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	9e 83       	std	Y+6, r25	; 0x06
    3b78:	8d 83       	std	Y+5, r24	; 0x05
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	9a 83       	std	Y+2, r25	; 0x02
    3b80:	89 83       	std	Y+1, r24	; 0x01
    3b82:	89 81       	ldd	r24, Y+1	; 0x01
    3b84:	9a 81       	ldd	r25, Y+2	; 0x02
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	f1 f7       	brne	.-4      	; 0x3b86 <LCD_voidSendCommand+0x884>
    3b8a:	9a 83       	std	Y+2, r25	; 0x02
    3b8c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif
}
    3b8e:	cd 59       	subi	r28, 0x9D	; 157
    3b90:	df 4f       	sbci	r29, 0xFF	; 255
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	cf 91       	pop	r28
    3b9e:	df 91       	pop	r29
    3ba0:	1f 91       	pop	r17
    3ba2:	0f 91       	pop	r16
    3ba4:	08 95       	ret

00003ba6 <LCD_voidSendData>:


// Displays a character on the LCD
void LCD_voidSendData(u8 copy_u8data) {
    3ba6:	0f 93       	push	r16
    3ba8:	1f 93       	push	r17
    3baa:	df 93       	push	r29
    3bac:	cf 93       	push	r28
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62
    3bb2:	c3 56       	subi	r28, 0x63	; 99
    3bb4:	d0 40       	sbci	r29, 0x00	; 0
    3bb6:	0f b6       	in	r0, 0x3f	; 63
    3bb8:	f8 94       	cli
    3bba:	de bf       	out	0x3e, r29	; 62
    3bbc:	0f be       	out	0x3f, r0	; 63
    3bbe:	cd bf       	out	0x3d, r28	; 61
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	ed 59       	subi	r30, 0x9D	; 157
    3bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc6:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	63 e0       	ldi	r22, 0x03	; 3
    3bcc:	41 e0       	ldi	r20, 0x01	; 1
    3bce:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	e1 5a       	subi	r30, 0xA1	; 161
    3bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	a0 e8       	ldi	r26, 0x80	; 128
    3bde:	bf e3       	ldi	r27, 0x3F	; 63
    3be0:	80 83       	st	Z, r24
    3be2:	91 83       	std	Z+1, r25	; 0x01
    3be4:	a2 83       	std	Z+2, r26	; 0x02
    3be6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be8:	8e 01       	movw	r16, r28
    3bea:	05 5a       	subi	r16, 0xA5	; 165
    3bec:	1f 4f       	sbci	r17, 0xFF	; 255
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e1 5a       	subi	r30, 0xA1	; 161
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	60 81       	ld	r22, Z
    3bf6:	71 81       	ldd	r23, Z+1	; 0x01
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	93 81       	ldd	r25, Z+3	; 0x03
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	4a ef       	ldi	r20, 0xFA	; 250
    3c02:	54 e4       	ldi	r21, 0x44	; 68
    3c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	80 83       	st	Z, r24
    3c10:	91 83       	std	Z+1, r25	; 0x01
    3c12:	a2 83       	std	Z+2, r26	; 0x02
    3c14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c16:	fe 01       	movw	r30, r28
    3c18:	e5 5a       	subi	r30, 0xA5	; 165
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	60 81       	ld	r22, Z
    3c1e:	71 81       	ldd	r23, Z+1	; 0x01
    3c20:	82 81       	ldd	r24, Z+2	; 0x02
    3c22:	93 81       	ldd	r25, Z+3	; 0x03
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	40 e8       	ldi	r20, 0x80	; 128
    3c2a:	5f e3       	ldi	r21, 0x3F	; 63
    3c2c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c30:	88 23       	and	r24, r24
    3c32:	44 f4       	brge	.+16     	; 0x3c44 <LCD_voidSendData+0x9e>
		__ticks = 1;
    3c34:	fe 01       	movw	r30, r28
    3c36:	e7 5a       	subi	r30, 0xA7	; 167
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	91 83       	std	Z+1, r25	; 0x01
    3c40:	80 83       	st	Z, r24
    3c42:	64 c0       	rjmp	.+200    	; 0x3d0c <LCD_voidSendData+0x166>
	else if (__tmp > 65535)
    3c44:	fe 01       	movw	r30, r28
    3c46:	e5 5a       	subi	r30, 0xA5	; 165
    3c48:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4a:	60 81       	ld	r22, Z
    3c4c:	71 81       	ldd	r23, Z+1	; 0x01
    3c4e:	82 81       	ldd	r24, Z+2	; 0x02
    3c50:	93 81       	ldd	r25, Z+3	; 0x03
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	3f ef       	ldi	r19, 0xFF	; 255
    3c56:	4f e7       	ldi	r20, 0x7F	; 127
    3c58:	57 e4       	ldi	r21, 0x47	; 71
    3c5a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c5e:	18 16       	cp	r1, r24
    3c60:	0c f0       	brlt	.+2      	; 0x3c64 <LCD_voidSendData+0xbe>
    3c62:	43 c0       	rjmp	.+134    	; 0x3cea <LCD_voidSendData+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c64:	fe 01       	movw	r30, r28
    3c66:	e1 5a       	subi	r30, 0xA1	; 161
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	60 81       	ld	r22, Z
    3c6c:	71 81       	ldd	r23, Z+1	; 0x01
    3c6e:	82 81       	ldd	r24, Z+2	; 0x02
    3c70:	93 81       	ldd	r25, Z+3	; 0x03
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	40 e2       	ldi	r20, 0x20	; 32
    3c78:	51 e4       	ldi	r21, 0x41	; 65
    3c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	8e 01       	movw	r16, r28
    3c84:	07 5a       	subi	r16, 0xA7	; 167
    3c86:	1f 4f       	sbci	r17, 0xFF	; 255
    3c88:	bc 01       	movw	r22, r24
    3c8a:	cd 01       	movw	r24, r26
    3c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c90:	dc 01       	movw	r26, r24
    3c92:	cb 01       	movw	r24, r22
    3c94:	f8 01       	movw	r30, r16
    3c96:	91 83       	std	Z+1, r25	; 0x01
    3c98:	80 83       	st	Z, r24
    3c9a:	1f c0       	rjmp	.+62     	; 0x3cda <LCD_voidSendData+0x134>
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e9 5a       	subi	r30, 0xA9	; 169
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	88 ec       	ldi	r24, 0xC8	; 200
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	91 83       	std	Z+1, r25	; 0x01
    3ca8:	80 83       	st	Z, r24
    3caa:	fe 01       	movw	r30, r28
    3cac:	e9 5a       	subi	r30, 0xA9	; 169
    3cae:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb0:	80 81       	ld	r24, Z
    3cb2:	91 81       	ldd	r25, Z+1	; 0x01
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	f1 f7       	brne	.-4      	; 0x3cb4 <LCD_voidSendData+0x10e>
    3cb8:	fe 01       	movw	r30, r28
    3cba:	e9 5a       	subi	r30, 0xA9	; 169
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc2:	de 01       	movw	r26, r28
    3cc4:	a7 5a       	subi	r26, 0xA7	; 167
    3cc6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cc8:	fe 01       	movw	r30, r28
    3cca:	e7 5a       	subi	r30, 0xA7	; 167
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	80 81       	ld	r24, Z
    3cd0:	91 81       	ldd	r25, Z+1	; 0x01
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	11 96       	adiw	r26, 0x01	; 1
    3cd6:	9c 93       	st	X, r25
    3cd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e7 5a       	subi	r30, 0xA7	; 167
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	80 81       	ld	r24, Z
    3ce2:	91 81       	ldd	r25, Z+1	; 0x01
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	d1 f6       	brne	.-76     	; 0x3c9c <LCD_voidSendData+0xf6>
    3ce8:	27 c0       	rjmp	.+78     	; 0x3d38 <LCD_voidSendData+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cea:	8e 01       	movw	r16, r28
    3cec:	07 5a       	subi	r16, 0xA7	; 167
    3cee:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	e5 5a       	subi	r30, 0xA5	; 165
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	60 81       	ld	r22, Z
    3cf8:	71 81       	ldd	r23, Z+1	; 0x01
    3cfa:	82 81       	ldd	r24, Z+2	; 0x02
    3cfc:	93 81       	ldd	r25, Z+3	; 0x03
    3cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	f8 01       	movw	r30, r16
    3d08:	91 83       	std	Z+1, r25	; 0x01
    3d0a:	80 83       	st	Z, r24
    3d0c:	de 01       	movw	r26, r28
    3d0e:	ab 5a       	subi	r26, 0xAB	; 171
    3d10:	bf 4f       	sbci	r27, 0xFF	; 255
    3d12:	fe 01       	movw	r30, r28
    3d14:	e7 5a       	subi	r30, 0xA7	; 167
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	80 81       	ld	r24, Z
    3d1a:	91 81       	ldd	r25, Z+1	; 0x01
    3d1c:	8d 93       	st	X+, r24
    3d1e:	9c 93       	st	X, r25
    3d20:	fe 01       	movw	r30, r28
    3d22:	eb 5a       	subi	r30, 0xAB	; 171
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	80 81       	ld	r24, Z
    3d28:	91 81       	ldd	r25, Z+1	; 0x01
    3d2a:	01 97       	sbiw	r24, 0x01	; 1
    3d2c:	f1 f7       	brne	.-4      	; 0x3d2a <LCD_voidSendData+0x184>
    3d2e:	fe 01       	movw	r30, r28
    3d30:	eb 5a       	subi	r30, 0xAB	; 171
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	91 83       	std	Z+1, r25	; 0x01
    3d36:	80 83       	st	Z, r24
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	62 e0       	ldi	r22, 0x02	; 2
    3d3c:	41 e0       	ldi	r20, 0x01	; 1
    3d3e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    3d42:	fe 01       	movw	r30, r28
    3d44:	ef 5a       	subi	r30, 0xAF	; 175
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	80 e0       	ldi	r24, 0x00	; 0
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	a0 e8       	ldi	r26, 0x80	; 128
    3d4e:	bf e3       	ldi	r27, 0x3F	; 63
    3d50:	80 83       	st	Z, r24
    3d52:	91 83       	std	Z+1, r25	; 0x01
    3d54:	a2 83       	std	Z+2, r26	; 0x02
    3d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d58:	8e 01       	movw	r16, r28
    3d5a:	03 5b       	subi	r16, 0xB3	; 179
    3d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5e:	fe 01       	movw	r30, r28
    3d60:	ef 5a       	subi	r30, 0xAF	; 175
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	60 81       	ld	r22, Z
    3d66:	71 81       	ldd	r23, Z+1	; 0x01
    3d68:	82 81       	ldd	r24, Z+2	; 0x02
    3d6a:	93 81       	ldd	r25, Z+3	; 0x03
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	4a ef       	ldi	r20, 0xFA	; 250
    3d72:	54 e4       	ldi	r21, 0x44	; 68
    3d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	80 83       	st	Z, r24
    3d80:	91 83       	std	Z+1, r25	; 0x01
    3d82:	a2 83       	std	Z+2, r26	; 0x02
    3d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d86:	fe 01       	movw	r30, r28
    3d88:	e3 5b       	subi	r30, 0xB3	; 179
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	60 81       	ld	r22, Z
    3d8e:	71 81       	ldd	r23, Z+1	; 0x01
    3d90:	82 81       	ldd	r24, Z+2	; 0x02
    3d92:	93 81       	ldd	r25, Z+3	; 0x03
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e8       	ldi	r20, 0x80	; 128
    3d9a:	5f e3       	ldi	r21, 0x3F	; 63
    3d9c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3da0:	88 23       	and	r24, r24
    3da2:	44 f4       	brge	.+16     	; 0x3db4 <LCD_voidSendData+0x20e>
		__ticks = 1;
    3da4:	fe 01       	movw	r30, r28
    3da6:	e5 5b       	subi	r30, 0xB5	; 181
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	91 83       	std	Z+1, r25	; 0x01
    3db0:	80 83       	st	Z, r24
    3db2:	64 c0       	rjmp	.+200    	; 0x3e7c <LCD_voidSendData+0x2d6>
	else if (__tmp > 65535)
    3db4:	fe 01       	movw	r30, r28
    3db6:	e3 5b       	subi	r30, 0xB3	; 179
    3db8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dba:	60 81       	ld	r22, Z
    3dbc:	71 81       	ldd	r23, Z+1	; 0x01
    3dbe:	82 81       	ldd	r24, Z+2	; 0x02
    3dc0:	93 81       	ldd	r25, Z+3	; 0x03
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	3f ef       	ldi	r19, 0xFF	; 255
    3dc6:	4f e7       	ldi	r20, 0x7F	; 127
    3dc8:	57 e4       	ldi	r21, 0x47	; 71
    3dca:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3dce:	18 16       	cp	r1, r24
    3dd0:	0c f0       	brlt	.+2      	; 0x3dd4 <LCD_voidSendData+0x22e>
    3dd2:	43 c0       	rjmp	.+134    	; 0x3e5a <LCD_voidSendData+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	ef 5a       	subi	r30, 0xAF	; 175
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	60 81       	ld	r22, Z
    3ddc:	71 81       	ldd	r23, Z+1	; 0x01
    3dde:	82 81       	ldd	r24, Z+2	; 0x02
    3de0:	93 81       	ldd	r25, Z+3	; 0x03
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e2       	ldi	r20, 0x20	; 32
    3de8:	51 e4       	ldi	r21, 0x41	; 65
    3dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	8e 01       	movw	r16, r28
    3df4:	05 5b       	subi	r16, 0xB5	; 181
    3df6:	1f 4f       	sbci	r17, 0xFF	; 255
    3df8:	bc 01       	movw	r22, r24
    3dfa:	cd 01       	movw	r24, r26
    3dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	f8 01       	movw	r30, r16
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	80 83       	st	Z, r24
    3e0a:	1f c0       	rjmp	.+62     	; 0x3e4a <LCD_voidSendData+0x2a4>
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e7 5b       	subi	r30, 0xB7	; 183
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	88 ec       	ldi	r24, 0xC8	; 200
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	80 83       	st	Z, r24
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	e7 5b       	subi	r30, 0xB7	; 183
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	80 81       	ld	r24, Z
    3e22:	91 81       	ldd	r25, Z+1	; 0x01
    3e24:	01 97       	sbiw	r24, 0x01	; 1
    3e26:	f1 f7       	brne	.-4      	; 0x3e24 <LCD_voidSendData+0x27e>
    3e28:	fe 01       	movw	r30, r28
    3e2a:	e7 5b       	subi	r30, 0xB7	; 183
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	91 83       	std	Z+1, r25	; 0x01
    3e30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e32:	de 01       	movw	r26, r28
    3e34:	a5 5b       	subi	r26, 0xB5	; 181
    3e36:	bf 4f       	sbci	r27, 0xFF	; 255
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e5 5b       	subi	r30, 0xB5	; 181
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	80 81       	ld	r24, Z
    3e40:	91 81       	ldd	r25, Z+1	; 0x01
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	11 96       	adiw	r26, 0x01	; 1
    3e46:	9c 93       	st	X, r25
    3e48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	e5 5b       	subi	r30, 0xB5	; 181
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	80 81       	ld	r24, Z
    3e52:	91 81       	ldd	r25, Z+1	; 0x01
    3e54:	00 97       	sbiw	r24, 0x00	; 0
    3e56:	d1 f6       	brne	.-76     	; 0x3e0c <LCD_voidSendData+0x266>
    3e58:	27 c0       	rjmp	.+78     	; 0x3ea8 <LCD_voidSendData+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5a:	8e 01       	movw	r16, r28
    3e5c:	05 5b       	subi	r16, 0xB5	; 181
    3e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e60:	fe 01       	movw	r30, r28
    3e62:	e3 5b       	subi	r30, 0xB3	; 179
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	60 81       	ld	r22, Z
    3e68:	71 81       	ldd	r23, Z+1	; 0x01
    3e6a:	82 81       	ldd	r24, Z+2	; 0x02
    3e6c:	93 81       	ldd	r25, Z+3	; 0x03
    3e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	f8 01       	movw	r30, r16
    3e78:	91 83       	std	Z+1, r25	; 0x01
    3e7a:	80 83       	st	Z, r24
    3e7c:	de 01       	movw	r26, r28
    3e7e:	a9 5b       	subi	r26, 0xB9	; 185
    3e80:	bf 4f       	sbci	r27, 0xFF	; 255
    3e82:	fe 01       	movw	r30, r28
    3e84:	e5 5b       	subi	r30, 0xB5	; 181
    3e86:	ff 4f       	sbci	r31, 0xFF	; 255
    3e88:	80 81       	ld	r24, Z
    3e8a:	91 81       	ldd	r25, Z+1	; 0x01
    3e8c:	8d 93       	st	X+, r24
    3e8e:	9c 93       	st	X, r25
    3e90:	fe 01       	movw	r30, r28
    3e92:	e9 5b       	subi	r30, 0xB9	; 185
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	80 81       	ld	r24, Z
    3e98:	91 81       	ldd	r25, Z+1	; 0x01
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	f1 f7       	brne	.-4      	; 0x3e9a <LCD_voidSendData+0x2f4>
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	e9 5b       	subi	r30, 0xB9	; 185
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	91 83       	std	Z+1, r25	; 0x01
    3ea6:	80 83       	st	Z, r24
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	ed 59       	subi	r30, 0x9D	; 157
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	80 81       	ld	r24, Z
    3eb0:	82 95       	swap	r24
    3eb2:	8f 70       	andi	r24, 0x0F	; 15
    3eb4:	98 2f       	mov	r25, r24
    3eb6:	91 70       	andi	r25, 0x01	; 1
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	49 2f       	mov	r20, r25
    3ebe:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	ed 59       	subi	r30, 0x9D	; 157
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
    3eca:	82 95       	swap	r24
    3ecc:	86 95       	lsr	r24
    3ece:	87 70       	andi	r24, 0x07	; 7
    3ed0:	98 2f       	mov	r25, r24
    3ed2:	91 70       	andi	r25, 0x01	; 1
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	61 e0       	ldi	r22, 0x01	; 1
    3ed8:	49 2f       	mov	r20, r25
    3eda:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
    3ede:	fe 01       	movw	r30, r28
    3ee0:	ed 59       	subi	r30, 0x9D	; 157
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	80 81       	ld	r24, Z
    3ee6:	82 95       	swap	r24
    3ee8:	86 95       	lsr	r24
    3eea:	86 95       	lsr	r24
    3eec:	83 70       	andi	r24, 0x03	; 3
    3eee:	98 2f       	mov	r25, r24
    3ef0:	91 70       	andi	r25, 0x01	; 1
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	62 e0       	ldi	r22, 0x02	; 2
    3ef6:	49 2f       	mov	r20, r25
    3ef8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
    3efc:	fe 01       	movw	r30, r28
    3efe:	ed 59       	subi	r30, 0x9D	; 157
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	80 81       	ld	r24, Z
    3f04:	98 2f       	mov	r25, r24
    3f06:	99 1f       	adc	r25, r25
    3f08:	99 27       	eor	r25, r25
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	64 e0       	ldi	r22, 0x04	; 4
    3f10:	49 2f       	mov	r20, r25
    3f12:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    3f16:	fe 01       	movw	r30, r28
    3f18:	ed 5b       	subi	r30, 0xBD	; 189
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	a0 e8       	ldi	r26, 0x80	; 128
    3f22:	bf e3       	ldi	r27, 0x3F	; 63
    3f24:	80 83       	st	Z, r24
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	a2 83       	std	Z+2, r26	; 0x02
    3f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f2c:	8e 01       	movw	r16, r28
    3f2e:	01 5c       	subi	r16, 0xC1	; 193
    3f30:	1f 4f       	sbci	r17, 0xFF	; 255
    3f32:	fe 01       	movw	r30, r28
    3f34:	ed 5b       	subi	r30, 0xBD	; 189
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	60 81       	ld	r22, Z
    3f3a:	71 81       	ldd	r23, Z+1	; 0x01
    3f3c:	82 81       	ldd	r24, Z+2	; 0x02
    3f3e:	93 81       	ldd	r25, Z+3	; 0x03
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	4a ef       	ldi	r20, 0xFA	; 250
    3f46:	54 e4       	ldi	r21, 0x44	; 68
    3f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4c:	dc 01       	movw	r26, r24
    3f4e:	cb 01       	movw	r24, r22
    3f50:	f8 01       	movw	r30, r16
    3f52:	80 83       	st	Z, r24
    3f54:	91 83       	std	Z+1, r25	; 0x01
    3f56:	a2 83       	std	Z+2, r26	; 0x02
    3f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	ff 96       	adiw	r30, 0x3f	; 63
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	40 e8       	ldi	r20, 0x80	; 128
    3f6c:	5f e3       	ldi	r21, 0x3F	; 63
    3f6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f72:	88 23       	and	r24, r24
    3f74:	2c f4       	brge	.+10     	; 0x3f80 <LCD_voidSendData+0x3da>
		__ticks = 1;
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	9e af       	std	Y+62, r25	; 0x3e
    3f7c:	8d af       	std	Y+61, r24	; 0x3d
    3f7e:	46 c0       	rjmp	.+140    	; 0x400c <LCD_voidSendData+0x466>
	else if (__tmp > 65535)
    3f80:	fe 01       	movw	r30, r28
    3f82:	ff 96       	adiw	r30, 0x3f	; 63
    3f84:	60 81       	ld	r22, Z
    3f86:	71 81       	ldd	r23, Z+1	; 0x01
    3f88:	82 81       	ldd	r24, Z+2	; 0x02
    3f8a:	93 81       	ldd	r25, Z+3	; 0x03
    3f8c:	20 e0       	ldi	r18, 0x00	; 0
    3f8e:	3f ef       	ldi	r19, 0xFF	; 255
    3f90:	4f e7       	ldi	r20, 0x7F	; 127
    3f92:	57 e4       	ldi	r21, 0x47	; 71
    3f94:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f98:	18 16       	cp	r1, r24
    3f9a:	64 f5       	brge	.+88     	; 0x3ff4 <LCD_voidSendData+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	ed 5b       	subi	r30, 0xBD	; 189
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	60 81       	ld	r22, Z
    3fa4:	71 81       	ldd	r23, Z+1	; 0x01
    3fa6:	82 81       	ldd	r24, Z+2	; 0x02
    3fa8:	93 81       	ldd	r25, Z+3	; 0x03
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	40 e2       	ldi	r20, 0x20	; 32
    3fb0:	51 e4       	ldi	r21, 0x41	; 65
    3fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb6:	dc 01       	movw	r26, r24
    3fb8:	cb 01       	movw	r24, r22
    3fba:	bc 01       	movw	r22, r24
    3fbc:	cd 01       	movw	r24, r26
    3fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	9e af       	std	Y+62, r25	; 0x3e
    3fc8:	8d af       	std	Y+61, r24	; 0x3d
    3fca:	0f c0       	rjmp	.+30     	; 0x3fea <LCD_voidSendData+0x444>
    3fcc:	88 ec       	ldi	r24, 0xC8	; 200
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	9c af       	std	Y+60, r25	; 0x3c
    3fd2:	8b af       	std	Y+59, r24	; 0x3b
    3fd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fd6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <LCD_voidSendData+0x432>
    3fdc:	9c af       	std	Y+60, r25	; 0x3c
    3fde:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	9e af       	std	Y+62, r25	; 0x3e
    3fe8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fee:	00 97       	sbiw	r24, 0x00	; 0
    3ff0:	69 f7       	brne	.-38     	; 0x3fcc <LCD_voidSendData+0x426>
    3ff2:	16 c0       	rjmp	.+44     	; 0x4020 <LCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff4:	fe 01       	movw	r30, r28
    3ff6:	ff 96       	adiw	r30, 0x3f	; 63
    3ff8:	60 81       	ld	r22, Z
    3ffa:	71 81       	ldd	r23, Z+1	; 0x01
    3ffc:	82 81       	ldd	r24, Z+2	; 0x02
    3ffe:	93 81       	ldd	r25, Z+3	; 0x03
    4000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	9e af       	std	Y+62, r25	; 0x3e
    400a:	8d af       	std	Y+61, r24	; 0x3d
    400c:	8d ad       	ldd	r24, Y+61	; 0x3d
    400e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4010:	9a af       	std	Y+58, r25	; 0x3a
    4012:	89 af       	std	Y+57, r24	; 0x39
    4014:	89 ad       	ldd	r24, Y+57	; 0x39
    4016:	9a ad       	ldd	r25, Y+58	; 0x3a
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	f1 f7       	brne	.-4      	; 0x4018 <LCD_voidSendData+0x472>
    401c:	9a af       	std	Y+58, r25	; 0x3a
    401e:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	62 e0       	ldi	r22, 0x02	; 2
    4024:	40 e0       	ldi	r20, 0x00	; 0
    4026:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	a0 e8       	ldi	r26, 0x80	; 128
    4030:	bf e3       	ldi	r27, 0x3F	; 63
    4032:	8d ab       	std	Y+53, r24	; 0x35
    4034:	9e ab       	std	Y+54, r25	; 0x36
    4036:	af ab       	std	Y+55, r26	; 0x37
    4038:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403a:	6d a9       	ldd	r22, Y+53	; 0x35
    403c:	7e a9       	ldd	r23, Y+54	; 0x36
    403e:	8f a9       	ldd	r24, Y+55	; 0x37
    4040:	98 ad       	ldd	r25, Y+56	; 0x38
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	4a ef       	ldi	r20, 0xFA	; 250
    4048:	54 e4       	ldi	r21, 0x44	; 68
    404a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	89 ab       	std	Y+49, r24	; 0x31
    4054:	9a ab       	std	Y+50, r25	; 0x32
    4056:	ab ab       	std	Y+51, r26	; 0x33
    4058:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    405a:	69 a9       	ldd	r22, Y+49	; 0x31
    405c:	7a a9       	ldd	r23, Y+50	; 0x32
    405e:	8b a9       	ldd	r24, Y+51	; 0x33
    4060:	9c a9       	ldd	r25, Y+52	; 0x34
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e8       	ldi	r20, 0x80	; 128
    4068:	5f e3       	ldi	r21, 0x3F	; 63
    406a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    406e:	88 23       	and	r24, r24
    4070:	2c f4       	brge	.+10     	; 0x407c <LCD_voidSendData+0x4d6>
		__ticks = 1;
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	98 ab       	std	Y+48, r25	; 0x30
    4078:	8f a7       	std	Y+47, r24	; 0x2f
    407a:	3f c0       	rjmp	.+126    	; 0x40fa <LCD_voidSendData+0x554>
	else if (__tmp > 65535)
    407c:	69 a9       	ldd	r22, Y+49	; 0x31
    407e:	7a a9       	ldd	r23, Y+50	; 0x32
    4080:	8b a9       	ldd	r24, Y+51	; 0x33
    4082:	9c a9       	ldd	r25, Y+52	; 0x34
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	3f ef       	ldi	r19, 0xFF	; 255
    4088:	4f e7       	ldi	r20, 0x7F	; 127
    408a:	57 e4       	ldi	r21, 0x47	; 71
    408c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4090:	18 16       	cp	r1, r24
    4092:	4c f5       	brge	.+82     	; 0x40e6 <LCD_voidSendData+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4094:	6d a9       	ldd	r22, Y+53	; 0x35
    4096:	7e a9       	ldd	r23, Y+54	; 0x36
    4098:	8f a9       	ldd	r24, Y+55	; 0x37
    409a:	98 ad       	ldd	r25, Y+56	; 0x38
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e2       	ldi	r20, 0x20	; 32
    40a2:	51 e4       	ldi	r21, 0x41	; 65
    40a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	bc 01       	movw	r22, r24
    40ae:	cd 01       	movw	r24, r26
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	98 ab       	std	Y+48, r25	; 0x30
    40ba:	8f a7       	std	Y+47, r24	; 0x2f
    40bc:	0f c0       	rjmp	.+30     	; 0x40dc <LCD_voidSendData+0x536>
    40be:	88 ec       	ldi	r24, 0xC8	; 200
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	9e a7       	std	Y+46, r25	; 0x2e
    40c4:	8d a7       	std	Y+45, r24	; 0x2d
    40c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    40c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	f1 f7       	brne	.-4      	; 0x40ca <LCD_voidSendData+0x524>
    40ce:	9e a7       	std	Y+46, r25	; 0x2e
    40d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    40d4:	98 a9       	ldd	r25, Y+48	; 0x30
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	98 ab       	std	Y+48, r25	; 0x30
    40da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    40de:	98 a9       	ldd	r25, Y+48	; 0x30
    40e0:	00 97       	sbiw	r24, 0x00	; 0
    40e2:	69 f7       	brne	.-38     	; 0x40be <LCD_voidSendData+0x518>
    40e4:	14 c0       	rjmp	.+40     	; 0x410e <LCD_voidSendData+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e6:	69 a9       	ldd	r22, Y+49	; 0x31
    40e8:	7a a9       	ldd	r23, Y+50	; 0x32
    40ea:	8b a9       	ldd	r24, Y+51	; 0x33
    40ec:	9c a9       	ldd	r25, Y+52	; 0x34
    40ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	98 ab       	std	Y+48, r25	; 0x30
    40f8:	8f a7       	std	Y+47, r24	; 0x2f
    40fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    40fc:	98 a9       	ldd	r25, Y+48	; 0x30
    40fe:	9c a7       	std	Y+44, r25	; 0x2c
    4100:	8b a7       	std	Y+43, r24	; 0x2b
    4102:	8b a5       	ldd	r24, Y+43	; 0x2b
    4104:	9c a5       	ldd	r25, Y+44	; 0x2c
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	f1 f7       	brne	.-4      	; 0x4106 <LCD_voidSendData+0x560>
    410a:	9c a7       	std	Y+44, r25	; 0x2c
    410c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	62 e0       	ldi	r22, 0x02	; 2
    4112:	41 e0       	ldi	r20, 0x01	; 1
    4114:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	a0 e8       	ldi	r26, 0x80	; 128
    411e:	bf e3       	ldi	r27, 0x3F	; 63
    4120:	8f a3       	std	Y+39, r24	; 0x27
    4122:	98 a7       	std	Y+40, r25	; 0x28
    4124:	a9 a7       	std	Y+41, r26	; 0x29
    4126:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4128:	6f a1       	ldd	r22, Y+39	; 0x27
    412a:	78 a5       	ldd	r23, Y+40	; 0x28
    412c:	89 a5       	ldd	r24, Y+41	; 0x29
    412e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	4a ef       	ldi	r20, 0xFA	; 250
    4136:	54 e4       	ldi	r21, 0x44	; 68
    4138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	8b a3       	std	Y+35, r24	; 0x23
    4142:	9c a3       	std	Y+36, r25	; 0x24
    4144:	ad a3       	std	Y+37, r26	; 0x25
    4146:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4148:	6b a1       	ldd	r22, Y+35	; 0x23
    414a:	7c a1       	ldd	r23, Y+36	; 0x24
    414c:	8d a1       	ldd	r24, Y+37	; 0x25
    414e:	9e a1       	ldd	r25, Y+38	; 0x26
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e8       	ldi	r20, 0x80	; 128
    4156:	5f e3       	ldi	r21, 0x3F	; 63
    4158:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    415c:	88 23       	and	r24, r24
    415e:	2c f4       	brge	.+10     	; 0x416a <LCD_voidSendData+0x5c4>
		__ticks = 1;
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	9a a3       	std	Y+34, r25	; 0x22
    4166:	89 a3       	std	Y+33, r24	; 0x21
    4168:	3f c0       	rjmp	.+126    	; 0x41e8 <LCD_voidSendData+0x642>
	else if (__tmp > 65535)
    416a:	6b a1       	ldd	r22, Y+35	; 0x23
    416c:	7c a1       	ldd	r23, Y+36	; 0x24
    416e:	8d a1       	ldd	r24, Y+37	; 0x25
    4170:	9e a1       	ldd	r25, Y+38	; 0x26
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	3f ef       	ldi	r19, 0xFF	; 255
    4176:	4f e7       	ldi	r20, 0x7F	; 127
    4178:	57 e4       	ldi	r21, 0x47	; 71
    417a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    417e:	18 16       	cp	r1, r24
    4180:	4c f5       	brge	.+82     	; 0x41d4 <LCD_voidSendData+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4182:	6f a1       	ldd	r22, Y+39	; 0x27
    4184:	78 a5       	ldd	r23, Y+40	; 0x28
    4186:	89 a5       	ldd	r24, Y+41	; 0x29
    4188:	9a a5       	ldd	r25, Y+42	; 0x2a
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	40 e2       	ldi	r20, 0x20	; 32
    4190:	51 e4       	ldi	r21, 0x41	; 65
    4192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	bc 01       	movw	r22, r24
    419c:	cd 01       	movw	r24, r26
    419e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	9a a3       	std	Y+34, r25	; 0x22
    41a8:	89 a3       	std	Y+33, r24	; 0x21
    41aa:	0f c0       	rjmp	.+30     	; 0x41ca <LCD_voidSendData+0x624>
    41ac:	88 ec       	ldi	r24, 0xC8	; 200
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	98 a3       	std	Y+32, r25	; 0x20
    41b2:	8f 8f       	std	Y+31, r24	; 0x1f
    41b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41b6:	98 a1       	ldd	r25, Y+32	; 0x20
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	f1 f7       	brne	.-4      	; 0x41b8 <LCD_voidSendData+0x612>
    41bc:	98 a3       	std	Y+32, r25	; 0x20
    41be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c0:	89 a1       	ldd	r24, Y+33	; 0x21
    41c2:	9a a1       	ldd	r25, Y+34	; 0x22
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	9a a3       	std	Y+34, r25	; 0x22
    41c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ca:	89 a1       	ldd	r24, Y+33	; 0x21
    41cc:	9a a1       	ldd	r25, Y+34	; 0x22
    41ce:	00 97       	sbiw	r24, 0x00	; 0
    41d0:	69 f7       	brne	.-38     	; 0x41ac <LCD_voidSendData+0x606>
    41d2:	14 c0       	rjmp	.+40     	; 0x41fc <LCD_voidSendData+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d4:	6b a1       	ldd	r22, Y+35	; 0x23
    41d6:	7c a1       	ldd	r23, Y+36	; 0x24
    41d8:	8d a1       	ldd	r24, Y+37	; 0x25
    41da:	9e a1       	ldd	r25, Y+38	; 0x26
    41dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	9a a3       	std	Y+34, r25	; 0x22
    41e6:	89 a3       	std	Y+33, r24	; 0x21
    41e8:	89 a1       	ldd	r24, Y+33	; 0x21
    41ea:	9a a1       	ldd	r25, Y+34	; 0x22
    41ec:	9e 8f       	std	Y+30, r25	; 0x1e
    41ee:	8d 8f       	std	Y+29, r24	; 0x1d
    41f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <LCD_voidSendData+0x64e>
    41f8:	9e 8f       	std	Y+30, r25	; 0x1e
    41fa:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
    41fc:	fe 01       	movw	r30, r28
    41fe:	ed 59       	subi	r30, 0x9D	; 157
    4200:	ff 4f       	sbci	r31, 0xFF	; 255
    4202:	80 81       	ld	r24, Z
    4204:	98 2f       	mov	r25, r24
    4206:	91 70       	andi	r25, 0x01	; 1
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	60 e0       	ldi	r22, 0x00	; 0
    420c:	49 2f       	mov	r20, r25
    420e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
    4212:	fe 01       	movw	r30, r28
    4214:	ed 59       	subi	r30, 0x9D	; 157
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	80 81       	ld	r24, Z
    421a:	86 95       	lsr	r24
    421c:	98 2f       	mov	r25, r24
    421e:	91 70       	andi	r25, 0x01	; 1
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	61 e0       	ldi	r22, 0x01	; 1
    4224:	49 2f       	mov	r20, r25
    4226:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
    422a:	fe 01       	movw	r30, r28
    422c:	ed 59       	subi	r30, 0x9D	; 157
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	80 81       	ld	r24, Z
    4232:	86 95       	lsr	r24
    4234:	86 95       	lsr	r24
    4236:	98 2f       	mov	r25, r24
    4238:	91 70       	andi	r25, 0x01	; 1
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	62 e0       	ldi	r22, 0x02	; 2
    423e:	49 2f       	mov	r20, r25
    4240:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
    4244:	fe 01       	movw	r30, r28
    4246:	ed 59       	subi	r30, 0x9D	; 157
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	80 81       	ld	r24, Z
    424c:	86 95       	lsr	r24
    424e:	86 95       	lsr	r24
    4250:	86 95       	lsr	r24
    4252:	98 2f       	mov	r25, r24
    4254:	91 70       	andi	r25, 0x01	; 1
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	64 e0       	ldi	r22, 0x04	; 4
    425a:	49 2f       	mov	r20, r25
    425c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	a0 e8       	ldi	r26, 0x80	; 128
    4266:	bf e3       	ldi	r27, 0x3F	; 63
    4268:	89 8f       	std	Y+25, r24	; 0x19
    426a:	9a 8f       	std	Y+26, r25	; 0x1a
    426c:	ab 8f       	std	Y+27, r26	; 0x1b
    426e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4270:	69 8d       	ldd	r22, Y+25	; 0x19
    4272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	4a ef       	ldi	r20, 0xFA	; 250
    427e:	54 e4       	ldi	r21, 0x44	; 68
    4280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	8d 8b       	std	Y+21, r24	; 0x15
    428a:	9e 8b       	std	Y+22, r25	; 0x16
    428c:	af 8b       	std	Y+23, r26	; 0x17
    428e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4290:	6d 89       	ldd	r22, Y+21	; 0x15
    4292:	7e 89       	ldd	r23, Y+22	; 0x16
    4294:	8f 89       	ldd	r24, Y+23	; 0x17
    4296:	98 8d       	ldd	r25, Y+24	; 0x18
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 e8       	ldi	r20, 0x80	; 128
    429e:	5f e3       	ldi	r21, 0x3F	; 63
    42a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    42a4:	88 23       	and	r24, r24
    42a6:	2c f4       	brge	.+10     	; 0x42b2 <LCD_voidSendData+0x70c>
		__ticks = 1;
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	9c 8b       	std	Y+20, r25	; 0x14
    42ae:	8b 8b       	std	Y+19, r24	; 0x13
    42b0:	3f c0       	rjmp	.+126    	; 0x4330 <LCD_voidSendData+0x78a>
	else if (__tmp > 65535)
    42b2:	6d 89       	ldd	r22, Y+21	; 0x15
    42b4:	7e 89       	ldd	r23, Y+22	; 0x16
    42b6:	8f 89       	ldd	r24, Y+23	; 0x17
    42b8:	98 8d       	ldd	r25, Y+24	; 0x18
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	3f ef       	ldi	r19, 0xFF	; 255
    42be:	4f e7       	ldi	r20, 0x7F	; 127
    42c0:	57 e4       	ldi	r21, 0x47	; 71
    42c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42c6:	18 16       	cp	r1, r24
    42c8:	4c f5       	brge	.+82     	; 0x431c <LCD_voidSendData+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ca:	69 8d       	ldd	r22, Y+25	; 0x19
    42cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	40 e2       	ldi	r20, 0x20	; 32
    42d8:	51 e4       	ldi	r21, 0x41	; 65
    42da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	bc 01       	movw	r22, r24
    42e4:	cd 01       	movw	r24, r26
    42e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ea:	dc 01       	movw	r26, r24
    42ec:	cb 01       	movw	r24, r22
    42ee:	9c 8b       	std	Y+20, r25	; 0x14
    42f0:	8b 8b       	std	Y+19, r24	; 0x13
    42f2:	0f c0       	rjmp	.+30     	; 0x4312 <LCD_voidSendData+0x76c>
    42f4:	88 ec       	ldi	r24, 0xC8	; 200
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	9a 8b       	std	Y+18, r25	; 0x12
    42fa:	89 8b       	std	Y+17, r24	; 0x11
    42fc:	89 89       	ldd	r24, Y+17	; 0x11
    42fe:	9a 89       	ldd	r25, Y+18	; 0x12
    4300:	01 97       	sbiw	r24, 0x01	; 1
    4302:	f1 f7       	brne	.-4      	; 0x4300 <LCD_voidSendData+0x75a>
    4304:	9a 8b       	std	Y+18, r25	; 0x12
    4306:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4308:	8b 89       	ldd	r24, Y+19	; 0x13
    430a:	9c 89       	ldd	r25, Y+20	; 0x14
    430c:	01 97       	sbiw	r24, 0x01	; 1
    430e:	9c 8b       	std	Y+20, r25	; 0x14
    4310:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4312:	8b 89       	ldd	r24, Y+19	; 0x13
    4314:	9c 89       	ldd	r25, Y+20	; 0x14
    4316:	00 97       	sbiw	r24, 0x00	; 0
    4318:	69 f7       	brne	.-38     	; 0x42f4 <LCD_voidSendData+0x74e>
    431a:	14 c0       	rjmp	.+40     	; 0x4344 <LCD_voidSendData+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    431c:	6d 89       	ldd	r22, Y+21	; 0x15
    431e:	7e 89       	ldd	r23, Y+22	; 0x16
    4320:	8f 89       	ldd	r24, Y+23	; 0x17
    4322:	98 8d       	ldd	r25, Y+24	; 0x18
    4324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
    432c:	9c 8b       	std	Y+20, r25	; 0x14
    432e:	8b 8b       	std	Y+19, r24	; 0x13
    4330:	8b 89       	ldd	r24, Y+19	; 0x13
    4332:	9c 89       	ldd	r25, Y+20	; 0x14
    4334:	98 8b       	std	Y+16, r25	; 0x10
    4336:	8f 87       	std	Y+15, r24	; 0x0f
    4338:	8f 85       	ldd	r24, Y+15	; 0x0f
    433a:	98 89       	ldd	r25, Y+16	; 0x10
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	f1 f7       	brne	.-4      	; 0x433c <LCD_voidSendData+0x796>
    4340:	98 8b       	std	Y+16, r25	; 0x10
    4342:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	62 e0       	ldi	r22, 0x02	; 2
    4348:	40 e0       	ldi	r20, 0x00	; 0
    434a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
    434e:	80 e0       	ldi	r24, 0x00	; 0
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	a0 e8       	ldi	r26, 0x80	; 128
    4354:	bf e3       	ldi	r27, 0x3F	; 63
    4356:	8b 87       	std	Y+11, r24	; 0x0b
    4358:	9c 87       	std	Y+12, r25	; 0x0c
    435a:	ad 87       	std	Y+13, r26	; 0x0d
    435c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    435e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4360:	7c 85       	ldd	r23, Y+12	; 0x0c
    4362:	8d 85       	ldd	r24, Y+13	; 0x0d
    4364:	9e 85       	ldd	r25, Y+14	; 0x0e
    4366:	20 e0       	ldi	r18, 0x00	; 0
    4368:	30 e0       	ldi	r19, 0x00	; 0
    436a:	4a ef       	ldi	r20, 0xFA	; 250
    436c:	54 e4       	ldi	r21, 0x44	; 68
    436e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	8f 83       	std	Y+7, r24	; 0x07
    4378:	98 87       	std	Y+8, r25	; 0x08
    437a:	a9 87       	std	Y+9, r26	; 0x09
    437c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    437e:	6f 81       	ldd	r22, Y+7	; 0x07
    4380:	78 85       	ldd	r23, Y+8	; 0x08
    4382:	89 85       	ldd	r24, Y+9	; 0x09
    4384:	9a 85       	ldd	r25, Y+10	; 0x0a
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	40 e8       	ldi	r20, 0x80	; 128
    438c:	5f e3       	ldi	r21, 0x3F	; 63
    438e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4392:	88 23       	and	r24, r24
    4394:	2c f4       	brge	.+10     	; 0x43a0 <LCD_voidSendData+0x7fa>
		__ticks = 1;
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	9e 83       	std	Y+6, r25	; 0x06
    439c:	8d 83       	std	Y+5, r24	; 0x05
    439e:	3f c0       	rjmp	.+126    	; 0x441e <LCD_voidSendData+0x878>
	else if (__tmp > 65535)
    43a0:	6f 81       	ldd	r22, Y+7	; 0x07
    43a2:	78 85       	ldd	r23, Y+8	; 0x08
    43a4:	89 85       	ldd	r24, Y+9	; 0x09
    43a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a8:	20 e0       	ldi	r18, 0x00	; 0
    43aa:	3f ef       	ldi	r19, 0xFF	; 255
    43ac:	4f e7       	ldi	r20, 0x7F	; 127
    43ae:	57 e4       	ldi	r21, 0x47	; 71
    43b0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    43b4:	18 16       	cp	r1, r24
    43b6:	4c f5       	brge	.+82     	; 0x440a <LCD_voidSendData+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    43bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    43be:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c0:	20 e0       	ldi	r18, 0x00	; 0
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	40 e2       	ldi	r20, 0x20	; 32
    43c6:	51 e4       	ldi	r21, 0x41	; 65
    43c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	bc 01       	movw	r22, r24
    43d2:	cd 01       	movw	r24, r26
    43d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d8:	dc 01       	movw	r26, r24
    43da:	cb 01       	movw	r24, r22
    43dc:	9e 83       	std	Y+6, r25	; 0x06
    43de:	8d 83       	std	Y+5, r24	; 0x05
    43e0:	0f c0       	rjmp	.+30     	; 0x4400 <LCD_voidSendData+0x85a>
    43e2:	88 ec       	ldi	r24, 0xC8	; 200
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	9c 83       	std	Y+4, r25	; 0x04
    43e8:	8b 83       	std	Y+3, r24	; 0x03
    43ea:	8b 81       	ldd	r24, Y+3	; 0x03
    43ec:	9c 81       	ldd	r25, Y+4	; 0x04
    43ee:	01 97       	sbiw	r24, 0x01	; 1
    43f0:	f1 f7       	brne	.-4      	; 0x43ee <LCD_voidSendData+0x848>
    43f2:	9c 83       	std	Y+4, r25	; 0x04
    43f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f6:	8d 81       	ldd	r24, Y+5	; 0x05
    43f8:	9e 81       	ldd	r25, Y+6	; 0x06
    43fa:	01 97       	sbiw	r24, 0x01	; 1
    43fc:	9e 83       	std	Y+6, r25	; 0x06
    43fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4400:	8d 81       	ldd	r24, Y+5	; 0x05
    4402:	9e 81       	ldd	r25, Y+6	; 0x06
    4404:	00 97       	sbiw	r24, 0x00	; 0
    4406:	69 f7       	brne	.-38     	; 0x43e2 <LCD_voidSendData+0x83c>
    4408:	14 c0       	rjmp	.+40     	; 0x4432 <LCD_voidSendData+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    440a:	6f 81       	ldd	r22, Y+7	; 0x07
    440c:	78 85       	ldd	r23, Y+8	; 0x08
    440e:	89 85       	ldd	r24, Y+9	; 0x09
    4410:	9a 85       	ldd	r25, Y+10	; 0x0a
    4412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	9e 83       	std	Y+6, r25	; 0x06
    441c:	8d 83       	std	Y+5, r24	; 0x05
    441e:	8d 81       	ldd	r24, Y+5	; 0x05
    4420:	9e 81       	ldd	r25, Y+6	; 0x06
    4422:	9a 83       	std	Y+2, r25	; 0x02
    4424:	89 83       	std	Y+1, r24	; 0x01
    4426:	89 81       	ldd	r24, Y+1	; 0x01
    4428:	9a 81       	ldd	r25, Y+2	; 0x02
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	f1 f7       	brne	.-4      	; 0x442a <LCD_voidSendData+0x884>
    442e:	9a 83       	std	Y+2, r25	; 0x02
    4430:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif
}
    4432:	cd 59       	subi	r28, 0x9D	; 157
    4434:	df 4f       	sbci	r29, 0xFF	; 255
    4436:	0f b6       	in	r0, 0x3f	; 63
    4438:	f8 94       	cli
    443a:	de bf       	out	0x3e, r29	; 62
    443c:	0f be       	out	0x3f, r0	; 63
    443e:	cd bf       	out	0x3d, r28	; 61
    4440:	cf 91       	pop	r28
    4442:	df 91       	pop	r29
    4444:	1f 91       	pop	r17
    4446:	0f 91       	pop	r16
    4448:	08 95       	ret

0000444a <LCD_voidDisplayString>:


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
    444a:	df 93       	push	r29
    444c:	cf 93       	push	r28
    444e:	00 d0       	rcall	.+0      	; 0x4450 <LCD_voidDisplayString+0x6>
    4450:	0f 92       	push	r0
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    4456:	9b 83       	std	Y+3, r25	; 0x03
    4458:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    445a:	19 82       	std	Y+1, r1	; 0x01
    445c:	0e c0       	rjmp	.+28     	; 0x447a <LCD_voidDisplayString+0x30>
	while(str[i] != '\0') {
		LCD_voidSendData(str[i]);
    445e:	89 81       	ldd	r24, Y+1	; 0x01
    4460:	28 2f       	mov	r18, r24
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	8a 81       	ldd	r24, Y+2	; 0x02
    4466:	9b 81       	ldd	r25, Y+3	; 0x03
    4468:	fc 01       	movw	r30, r24
    446a:	e2 0f       	add	r30, r18
    446c:	f3 1f       	adc	r31, r19
    446e:	80 81       	ld	r24, Z
    4470:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <LCD_voidSendData>
		i++;
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	8f 5f       	subi	r24, 0xFF	; 255
    4478:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
	u8 i = 0;
	while(str[i] != '\0') {
    447a:	89 81       	ldd	r24, Y+1	; 0x01
    447c:	28 2f       	mov	r18, r24
    447e:	30 e0       	ldi	r19, 0x00	; 0
    4480:	8a 81       	ldd	r24, Y+2	; 0x02
    4482:	9b 81       	ldd	r25, Y+3	; 0x03
    4484:	fc 01       	movw	r30, r24
    4486:	e2 0f       	add	r30, r18
    4488:	f3 1f       	adc	r31, r19
    448a:	80 81       	ld	r24, Z
    448c:	88 23       	and	r24, r24
    448e:	39 f7       	brne	.-50     	; 0x445e <LCD_voidDisplayString+0x14>
		LCD_voidSendData(str[i]);
		i++;
	}
}
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	cf 91       	pop	r28
    4498:	df 91       	pop	r29
    449a:	08 95       	ret

0000449c <LCD_voidSetCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_voidSetCursor(u8 copy_u8row, u8 copy_u8_col) {
    449c:	df 93       	push	r29
    449e:	cf 93       	push	r28
    44a0:	00 d0       	rcall	.+0      	; 0x44a2 <LCD_voidSetCursor+0x6>
    44a2:	00 d0       	rcall	.+0      	; 0x44a4 <LCD_voidSetCursor+0x8>
    44a4:	0f 92       	push	r0
    44a6:	cd b7       	in	r28, 0x3d	; 61
    44a8:	de b7       	in	r29, 0x3e	; 62
    44aa:	8a 83       	std	Y+2, r24	; 0x02
    44ac:	6b 83       	std	Y+3, r22	; 0x03
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
    44ae:	8a 81       	ldd	r24, Y+2	; 0x02
    44b0:	28 2f       	mov	r18, r24
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	3d 83       	std	Y+5, r19	; 0x05
    44b6:	2c 83       	std	Y+4, r18	; 0x04
    44b8:	8c 81       	ldd	r24, Y+4	; 0x04
    44ba:	9d 81       	ldd	r25, Y+5	; 0x05
    44bc:	81 30       	cpi	r24, 0x01	; 1
    44be:	91 05       	cpc	r25, r1
    44c0:	c1 f0       	breq	.+48     	; 0x44f2 <LCD_voidSetCursor+0x56>
    44c2:	2c 81       	ldd	r18, Y+4	; 0x04
    44c4:	3d 81       	ldd	r19, Y+5	; 0x05
    44c6:	22 30       	cpi	r18, 0x02	; 2
    44c8:	31 05       	cpc	r19, r1
    44ca:	2c f4       	brge	.+10     	; 0x44d6 <LCD_voidSetCursor+0x3a>
    44cc:	8c 81       	ldd	r24, Y+4	; 0x04
    44ce:	9d 81       	ldd	r25, Y+5	; 0x05
    44d0:	00 97       	sbiw	r24, 0x00	; 0
    44d2:	61 f0       	breq	.+24     	; 0x44ec <LCD_voidSetCursor+0x50>
    44d4:	19 c0       	rjmp	.+50     	; 0x4508 <LCD_voidSetCursor+0x6c>
    44d6:	2c 81       	ldd	r18, Y+4	; 0x04
    44d8:	3d 81       	ldd	r19, Y+5	; 0x05
    44da:	22 30       	cpi	r18, 0x02	; 2
    44dc:	31 05       	cpc	r19, r1
    44de:	69 f0       	breq	.+26     	; 0x44fa <LCD_voidSetCursor+0x5e>
    44e0:	8c 81       	ldd	r24, Y+4	; 0x04
    44e2:	9d 81       	ldd	r25, Y+5	; 0x05
    44e4:	83 30       	cpi	r24, 0x03	; 3
    44e6:	91 05       	cpc	r25, r1
    44e8:	61 f0       	breq	.+24     	; 0x4502 <LCD_voidSetCursor+0x66>
    44ea:	0e c0       	rjmp	.+28     	; 0x4508 <LCD_voidSetCursor+0x6c>
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
    44ec:	8b 81       	ldd	r24, Y+3	; 0x03
    44ee:	89 83       	std	Y+1, r24	; 0x01
    44f0:	0b c0       	rjmp	.+22     	; 0x4508 <LCD_voidSetCursor+0x6c>
			break;
		case LINE1:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x40;
    44f2:	8b 81       	ldd	r24, Y+3	; 0x03
    44f4:	80 5c       	subi	r24, 0xC0	; 192
    44f6:	89 83       	std	Y+1, r24	; 0x01
    44f8:	07 c0       	rjmp	.+14     	; 0x4508 <LCD_voidSetCursor+0x6c>
			break;
		case LINE2:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x10;
    44fa:	8b 81       	ldd	r24, Y+3	; 0x03
    44fc:	80 5f       	subi	r24, 0xF0	; 240
    44fe:	89 83       	std	Y+1, r24	; 0x01
    4500:	03 c0       	rjmp	.+6      	; 0x4508 <LCD_voidSetCursor+0x6c>
			break;
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
    4502:	8b 81       	ldd	r24, Y+3	; 0x03
    4504:	80 5b       	subi	r24, 0xB0	; 176
    4506:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_voidSendCommand(LCD_MEMORY_ADDRESS | LINE0_ADDRESS);
    4508:	89 81       	ldd	r24, Y+1	; 0x01
    450a:	80 68       	ori	r24, 0x80	; 128
    450c:	0e 94 81 19 	call	0x3302	; 0x3302 <LCD_voidSendCommand>
//					break;
//			default:
//				LCD_voidDisplayString("default", 0, 0);
//				break;
//		}
}
    4510:	0f 90       	pop	r0
    4512:	0f 90       	pop	r0
    4514:	0f 90       	pop	r0
    4516:	0f 90       	pop	r0
    4518:	0f 90       	pop	r0
    451a:	cf 91       	pop	r28
    451c:	df 91       	pop	r29
    451e:	08 95       	ret

00004520 <LCD_voidIntgerToString>:


// LCD only understands ASCII, so this converts Int to a string
void LCD_voidIntgerToString(u32 copy_u32data) {
    4520:	df 93       	push	r29
    4522:	cf 93       	push	r28
    4524:	cd b7       	in	r28, 0x3d	; 61
    4526:	de b7       	in	r29, 0x3e	; 62
    4528:	64 97       	sbiw	r28, 0x14	; 20
    452a:	0f b6       	in	r0, 0x3f	; 63
    452c:	f8 94       	cli
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	cd bf       	out	0x3d, r28	; 61
    4534:	69 8b       	std	Y+17, r22	; 0x11
    4536:	7a 8b       	std	Y+18, r23	; 0x12
    4538:	8b 8b       	std	Y+19, r24	; 0x13
    453a:	9c 8b       	std	Y+20, r25	; 0x14
	// A string to hold the ASCII values
	cu8 buffer[16];

	// Converts data to its ASCII
	itoa(copy_u32data, buffer, 10);
    453c:	89 89       	ldd	r24, Y+17	; 0x11
    453e:	9a 89       	ldd	r25, Y+18	; 0x12
    4540:	9e 01       	movw	r18, r28
    4542:	2f 5f       	subi	r18, 0xFF	; 255
    4544:	3f 4f       	sbci	r19, 0xFF	; 255
    4546:	b9 01       	movw	r22, r18
    4548:	4a e0       	ldi	r20, 0x0A	; 10
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <itoa>

	// Display string with the results in the buffer
	LCD_voidDisplayString(buffer);
    4550:	ce 01       	movw	r24, r28
    4552:	01 96       	adiw	r24, 0x01	; 1
    4554:	0e 94 25 22 	call	0x444a	; 0x444a <LCD_voidDisplayString>
}
    4558:	64 96       	adiw	r28, 0x14	; 20
    455a:	0f b6       	in	r0, 0x3f	; 63
    455c:	f8 94       	cli
    455e:	de bf       	out	0x3e, r29	; 62
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	cd bf       	out	0x3d, r28	; 61
    4564:	cf 91       	pop	r28
    4566:	df 91       	pop	r29
    4568:	08 95       	ret

0000456a <LCD_voidClearScreen>:

// Clears the LCD from any garbage
void LCD_voidClearScreen(void) {
    456a:	df 93       	push	r29
    456c:	cf 93       	push	r28
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	0e 94 81 19 	call	0x3302	; 0x3302 <LCD_voidSendCommand>
}
    4578:	cf 91       	pop	r28
    457a:	df 91       	pop	r29
    457c:	08 95       	ret

0000457e <KEYPAD_voidInit>:
u8 KPD_COL_PIN_VAL [] = KPD_ARR_COL_PIN;

u8 KPD_DATA [KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VALUES;


void KEYPAD_voidInit(void) {
    457e:	df 93       	push	r29
    4580:	cf 93       	push	r28
    4582:	00 d0       	rcall	.+0      	; 0x4584 <KEYPAD_voidInit+0x6>
    4584:	cd b7       	in	r28, 0x3d	; 61
    4586:	de b7       	in	r29, 0x3e	; 62
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    4588:	1a 82       	std	Y+2, r1	; 0x02
    458a:	29 c0       	rjmp	.+82     	; 0x45de <KEYPAD_voidInit+0x60>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
    458c:	8a 81       	ldd	r24, Y+2	; 0x02
    458e:	88 2f       	mov	r24, r24
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	fc 01       	movw	r30, r24
    4594:	e1 57       	subi	r30, 0x71	; 113
    4596:	fe 4f       	sbci	r31, 0xFE	; 254
    4598:	20 81       	ld	r18, Z
    459a:	8a 81       	ldd	r24, Y+2	; 0x02
    459c:	88 2f       	mov	r24, r24
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	fc 01       	movw	r30, r24
    45a2:	ed 56       	subi	r30, 0x6D	; 109
    45a4:	fe 4f       	sbci	r31, 0xFE	; 254
    45a6:	90 81       	ld	r25, Z
    45a8:	82 2f       	mov	r24, r18
    45aa:	69 2f       	mov	r22, r25
    45ac:	41 e0       	ldi	r20, 0x01	; 1
    45ae:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
    45b2:	8a 81       	ldd	r24, Y+2	; 0x02
    45b4:	88 2f       	mov	r24, r24
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	fc 01       	movw	r30, r24
    45ba:	e1 57       	subi	r30, 0x71	; 113
    45bc:	fe 4f       	sbci	r31, 0xFE	; 254
    45be:	20 81       	ld	r18, Z
    45c0:	8a 81       	ldd	r24, Y+2	; 0x02
    45c2:	88 2f       	mov	r24, r24
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	fc 01       	movw	r30, r24
    45c8:	ed 56       	subi	r30, 0x6D	; 109
    45ca:	fe 4f       	sbci	r31, 0xFE	; 254
    45cc:	90 81       	ld	r25, Z
    45ce:	82 2f       	mov	r24, r18
    45d0:	69 2f       	mov	r22, r25
    45d2:	41 e0       	ldi	r20, 0x01	; 1
    45d4:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>

void KEYPAD_voidInit(void) {
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    45d8:	8a 81       	ldd	r24, Y+2	; 0x02
    45da:	8f 5f       	subi	r24, 0xFF	; 255
    45dc:	8a 83       	std	Y+2, r24	; 0x02
    45de:	8a 81       	ldd	r24, Y+2	; 0x02
    45e0:	84 30       	cpi	r24, 0x04	; 4
    45e2:	a0 f2       	brcs	.-88     	; 0x458c <KEYPAD_voidInit+0xe>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    45e4:	19 82       	std	Y+1, r1	; 0x01
    45e6:	16 c0       	rjmp	.+44     	; 0x4614 <KEYPAD_voidInit+0x96>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
    45ea:	88 2f       	mov	r24, r24
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	fc 01       	movw	r30, r24
    45f0:	e9 56       	subi	r30, 0x69	; 105
    45f2:	fe 4f       	sbci	r31, 0xFE	; 254
    45f4:	20 81       	ld	r18, Z
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	88 2f       	mov	r24, r24
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	fc 01       	movw	r30, r24
    45fe:	e5 56       	subi	r30, 0x65	; 101
    4600:	fe 4f       	sbci	r31, 0xFE	; 254
    4602:	90 81       	ld	r25, Z
    4604:	82 2f       	mov	r24, r18
    4606:	69 2f       	mov	r22, r25
    4608:	40 e0       	ldi	r20, 0x00	; 0
    460a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    460e:	89 81       	ldd	r24, Y+1	; 0x01
    4610:	8f 5f       	subi	r24, 0xFF	; 255
    4612:	89 83       	std	Y+1, r24	; 0x01
    4614:	89 81       	ldd	r24, Y+1	; 0x01
    4616:	84 30       	cpi	r24, 0x04	; 4
    4618:	38 f3       	brcs	.-50     	; 0x45e8 <KEYPAD_voidInit+0x6a>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
	}
}
    461a:	0f 90       	pop	r0
    461c:	0f 90       	pop	r0
    461e:	cf 91       	pop	r28
    4620:	df 91       	pop	r29
    4622:	08 95       	ret

00004624 <KEYPAD_u8getPressedKey>:


u8 KEYPAD_u8getPressedKey(void) {
    4624:	df 93       	push	r29
    4626:	cf 93       	push	r28
    4628:	00 d0       	rcall	.+0      	; 0x462a <KEYPAD_u8getPressedKey+0x6>
    462a:	0f 92       	push	r0
    462c:	cd b7       	in	r28, 0x3d	; 61
    462e:	de b7       	in	r29, 0x3e	; 62
	u8 row, col, dataValue = 0xff;
    4630:	8f ef       	ldi	r24, 0xFF	; 255
    4632:	89 83       	std	Y+1, r24	; 0x01
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    4634:	1b 82       	std	Y+3, r1	; 0x03
    4636:	6a c0       	rjmp	.+212    	; 0x470c <KEYPAD_u8getPressedKey+0xe8>

			// I set the pin by '1' for the row, and will iterate
			GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], PIN_OUTPUT);
    4638:	8b 81       	ldd	r24, Y+3	; 0x03
    463a:	88 2f       	mov	r24, r24
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	fc 01       	movw	r30, r24
    4640:	e1 57       	subi	r30, 0x71	; 113
    4642:	fe 4f       	sbci	r31, 0xFE	; 254
    4644:	20 81       	ld	r18, Z
    4646:	8b 81       	ldd	r24, Y+3	; 0x03
    4648:	88 2f       	mov	r24, r24
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	fc 01       	movw	r30, r24
    464e:	ed 56       	subi	r30, 0x6D	; 109
    4650:	fe 4f       	sbci	r31, 0xFE	; 254
    4652:	90 81       	ld	r25, Z
    4654:	82 2f       	mov	r24, r18
    4656:	69 2f       	mov	r22, r25
    4658:	41 e0       	ldi	r20, 0x01	; 1
    465a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
    465e:	8b 81       	ldd	r24, Y+3	; 0x03
    4660:	88 2f       	mov	r24, r24
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	fc 01       	movw	r30, r24
    4666:	e1 57       	subi	r30, 0x71	; 113
    4668:	fe 4f       	sbci	r31, 0xFE	; 254
    466a:	20 81       	ld	r18, Z
    466c:	8b 81       	ldd	r24, Y+3	; 0x03
    466e:	88 2f       	mov	r24, r24
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	fc 01       	movw	r30, r24
    4674:	ed 56       	subi	r30, 0x6D	; 109
    4676:	fe 4f       	sbci	r31, 0xFE	; 254
    4678:	90 81       	ld	r25, Z
    467a:	82 2f       	mov	r24, r18
    467c:	69 2f       	mov	r22, r25
    467e:	40 e0       	ldi	r20, 0x00	; 0
    4680:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    4684:	1a 82       	std	Y+2, r1	; 0x02
    4686:	29 c0       	rjmp	.+82     	; 0x46da <KEYPAD_u8getPressedKey+0xb6>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
    4688:	8a 81       	ldd	r24, Y+2	; 0x02
    468a:	88 2f       	mov	r24, r24
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	fc 01       	movw	r30, r24
    4690:	e9 56       	subi	r30, 0x69	; 105
    4692:	fe 4f       	sbci	r31, 0xFE	; 254
    4694:	20 81       	ld	r18, Z
    4696:	8a 81       	ldd	r24, Y+2	; 0x02
    4698:	88 2f       	mov	r24, r24
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	fc 01       	movw	r30, r24
    469e:	e5 56       	subi	r30, 0x65	; 101
    46a0:	fe 4f       	sbci	r31, 0xFE	; 254
    46a2:	90 81       	ld	r25, Z
    46a4:	82 2f       	mov	r24, r18
    46a6:	69 2f       	mov	r22, r25
    46a8:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <GPIO_u8GetPinValue>
    46ac:	88 23       	and	r24, r24
    46ae:	91 f4       	brne	.+36     	; 0x46d4 <KEYPAD_u8getPressedKey+0xb0>
					dataValue = KPD_DATA[row][col];
    46b0:	8b 81       	ldd	r24, Y+3	; 0x03
    46b2:	48 2f       	mov	r20, r24
    46b4:	50 e0       	ldi	r21, 0x00	; 0
    46b6:	8a 81       	ldd	r24, Y+2	; 0x02
    46b8:	28 2f       	mov	r18, r24
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	ca 01       	movw	r24, r20
    46be:	88 0f       	add	r24, r24
    46c0:	99 1f       	adc	r25, r25
    46c2:	88 0f       	add	r24, r24
    46c4:	99 1f       	adc	r25, r25
    46c6:	82 0f       	add	r24, r18
    46c8:	93 1f       	adc	r25, r19
    46ca:	fc 01       	movw	r30, r24
    46cc:	e1 56       	subi	r30, 0x61	; 97
    46ce:	fe 4f       	sbci	r31, 0xFE	; 254
    46d0:	80 81       	ld	r24, Z
    46d2:	89 83       	std	Y+1, r24	; 0x01

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    46d4:	8a 81       	ldd	r24, Y+2	; 0x02
    46d6:	8f 5f       	subi	r24, 0xFF	; 255
    46d8:	8a 83       	std	Y+2, r24	; 0x02
    46da:	8a 81       	ldd	r24, Y+2	; 0x02
    46dc:	84 30       	cpi	r24, 0x04	; 4
    46de:	a0 f2       	brcs	.-88     	; 0x4688 <KEYPAD_u8getPressedKey+0x64>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
					dataValue = KPD_DATA[row][col];
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
    46e0:	8b 81       	ldd	r24, Y+3	; 0x03
    46e2:	88 2f       	mov	r24, r24
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	fc 01       	movw	r30, r24
    46e8:	e1 57       	subi	r30, 0x71	; 113
    46ea:	fe 4f       	sbci	r31, 0xFE	; 254
    46ec:	20 81       	ld	r18, Z
    46ee:	8b 81       	ldd	r24, Y+3	; 0x03
    46f0:	88 2f       	mov	r24, r24
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	fc 01       	movw	r30, r24
    46f6:	ed 56       	subi	r30, 0x6D	; 109
    46f8:	fe 4f       	sbci	r31, 0xFE	; 254
    46fa:	90 81       	ld	r25, Z
    46fc:	82 2f       	mov	r24, r18
    46fe:	69 2f       	mov	r22, r25
    4700:	41 e0       	ldi	r20, 0x01	; 1
    4702:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <GPIO_voidSetPinValue>


u8 KEYPAD_u8getPressedKey(void) {
	u8 row, col, dataValue = 0xff;
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    4706:	8b 81       	ldd	r24, Y+3	; 0x03
    4708:	8f 5f       	subi	r24, 0xFF	; 255
    470a:	8b 83       	std	Y+3, r24	; 0x03
    470c:	8b 81       	ldd	r24, Y+3	; 0x03
    470e:	84 30       	cpi	r24, 0x04	; 4
    4710:	08 f4       	brcc	.+2      	; 0x4714 <KEYPAD_u8getPressedKey+0xf0>
    4712:	92 cf       	rjmp	.-220    	; 0x4638 <KEYPAD_u8getPressedKey+0x14>
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
		//}
	}
	return dataValue;
    4714:	89 81       	ldd	r24, Y+1	; 0x01
}
    4716:	0f 90       	pop	r0
    4718:	0f 90       	pop	r0
    471a:	0f 90       	pop	r0
    471c:	cf 91       	pop	r28
    471e:	df 91       	pop	r29
    4720:	08 95       	ret

00004722 <System_Initialization>:
 *******************************************************************************/

u8 KeyData = 0;
u8* stringReceived = 0;

void System_Initialization(void) {
    4722:	df 93       	push	r29
    4724:	cf 93       	push	r28
    4726:	cd b7       	in	r28, 0x3d	; 61
    4728:	de b7       	in	r29, 0x3e	; 62
	// Initializing LCD Module
	LCD_voidInit();
    472a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <LCD_voidInit>
	LCD_voidSetCursor(0, 0);
    472e:	80 e0       	ldi	r24, 0x00	; 0
    4730:	60 e0       	ldi	r22, 0x00	; 0
    4732:	0e 94 4e 22 	call	0x449c	; 0x449c <LCD_voidSetCursor>
	LCD_voidDisplayString("UART RECEIVE");
    4736:	88 e6       	ldi	r24, 0x68	; 104
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	0e 94 25 22 	call	0x444a	; 0x444a <LCD_voidDisplayString>

	// Initializing UART Pins
	UART_Initialization();
    473e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <UART_Initialization>
	GPIO_voidSetPinDirection(PORT_D, PIN_1, PIN_OUTPUT);
    4742:	83 e0       	ldi	r24, 0x03	; 3
    4744:	61 e0       	ldi	r22, 0x01	; 1
    4746:	41 e0       	ldi	r20, 0x01	; 1
    4748:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORT_D, PIN_0, PIN_INPUT);
    474c:	83 e0       	ldi	r24, 0x03	; 3
    474e:	60 e0       	ldi	r22, 0x00	; 0
    4750:	40 e0       	ldi	r20, 0x00	; 0
    4752:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <GPIO_voidSetPinDirection>

	// Initializing Keypad
	//KEYPAD_voidInit();


}
    4756:	cf 91       	pop	r28
    4758:	df 91       	pop	r29
    475a:	08 95       	ret

0000475c <executeMain_RXD>:

void executeMain_RXD(void) {
    475c:	df 93       	push	r29
    475e:	cf 93       	push	r28
    4760:	cd b7       	in	r28, 0x3d	; 61
    4762:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetCursor(1, 0);
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	60 e0       	ldi	r22, 0x00	; 0
    4768:	0e 94 4e 22 	call	0x449c	; 0x449c <LCD_voidSetCursor>
	LCD_voidDisplayString("Receiving..");
    476c:	85 e7       	ldi	r24, 0x75	; 117
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	0e 94 25 22 	call	0x444a	; 0x444a <LCD_voidDisplayString>
	UART_voidReceiveString(stringReceived);
    4774:	80 91 bd 01 	lds	r24, 0x01BD
    4778:	90 91 be 01 	lds	r25, 0x01BE
    477c:	0e 94 1f 08 	call	0x103e	; 0x103e <UART_voidReceiveString>
	LCD_voidSetCursor(2, 0);
    4780:	82 e0       	ldi	r24, 0x02	; 2
    4782:	60 e0       	ldi	r22, 0x00	; 0
    4784:	0e 94 4e 22 	call	0x449c	; 0x449c <LCD_voidSetCursor>
	LCD_voidDisplayString(stringReceived);
    4788:	80 91 bd 01 	lds	r24, 0x01BD
    478c:	90 91 be 01 	lds	r25, 0x01BE
    4790:	0e 94 25 22 	call	0x444a	; 0x444a <LCD_voidDisplayString>
	//LCD_voidSendData(UDR_REG);
	LCD_voidSetCursor(3, 0);
    4794:	83 e0       	ldi	r24, 0x03	; 3
    4796:	60 e0       	ldi	r22, 0x00	; 0
    4798:	0e 94 4e 22 	call	0x449c	; 0x449c <LCD_voidSetCursor>
	LCD_voidDisplayString("Done!");
    479c:	81 e8       	ldi	r24, 0x81	; 129
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	0e 94 25 22 	call	0x444a	; 0x444a <LCD_voidDisplayString>

}
    47a4:	cf 91       	pop	r28
    47a6:	df 91       	pop	r29
    47a8:	08 95       	ret

000047aa <main>:
/*******************************************************************************
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void)
{
    47aa:	df 93       	push	r29
    47ac:	cf 93       	push	r28
    47ae:	cd b7       	in	r28, 0x3d	; 61
    47b0:	de b7       	in	r29, 0x3e	; 62
	System_Initialization();
    47b2:	0e 94 91 23 	call	0x4722	; 0x4722 <System_Initialization>

	while (1)
	{
		executeMain_RXD();
    47b6:	0e 94 ae 23 	call	0x475c	; 0x475c <executeMain_RXD>
    47ba:	fd cf       	rjmp	.-6      	; 0x47b6 <main+0xc>

000047bc <__mulsi3>:
    47bc:	62 9f       	mul	r22, r18
    47be:	d0 01       	movw	r26, r0
    47c0:	73 9f       	mul	r23, r19
    47c2:	f0 01       	movw	r30, r0
    47c4:	82 9f       	mul	r24, r18
    47c6:	e0 0d       	add	r30, r0
    47c8:	f1 1d       	adc	r31, r1
    47ca:	64 9f       	mul	r22, r20
    47cc:	e0 0d       	add	r30, r0
    47ce:	f1 1d       	adc	r31, r1
    47d0:	92 9f       	mul	r25, r18
    47d2:	f0 0d       	add	r31, r0
    47d4:	83 9f       	mul	r24, r19
    47d6:	f0 0d       	add	r31, r0
    47d8:	74 9f       	mul	r23, r20
    47da:	f0 0d       	add	r31, r0
    47dc:	65 9f       	mul	r22, r21
    47de:	f0 0d       	add	r31, r0
    47e0:	99 27       	eor	r25, r25
    47e2:	72 9f       	mul	r23, r18
    47e4:	b0 0d       	add	r27, r0
    47e6:	e1 1d       	adc	r30, r1
    47e8:	f9 1f       	adc	r31, r25
    47ea:	63 9f       	mul	r22, r19
    47ec:	b0 0d       	add	r27, r0
    47ee:	e1 1d       	adc	r30, r1
    47f0:	f9 1f       	adc	r31, r25
    47f2:	bd 01       	movw	r22, r26
    47f4:	cf 01       	movw	r24, r30
    47f6:	11 24       	eor	r1, r1
    47f8:	08 95       	ret

000047fa <__udivmodhi4>:
    47fa:	aa 1b       	sub	r26, r26
    47fc:	bb 1b       	sub	r27, r27
    47fe:	51 e1       	ldi	r21, 0x11	; 17
    4800:	07 c0       	rjmp	.+14     	; 0x4810 <__udivmodhi4_ep>

00004802 <__udivmodhi4_loop>:
    4802:	aa 1f       	adc	r26, r26
    4804:	bb 1f       	adc	r27, r27
    4806:	a6 17       	cp	r26, r22
    4808:	b7 07       	cpc	r27, r23
    480a:	10 f0       	brcs	.+4      	; 0x4810 <__udivmodhi4_ep>
    480c:	a6 1b       	sub	r26, r22
    480e:	b7 0b       	sbc	r27, r23

00004810 <__udivmodhi4_ep>:
    4810:	88 1f       	adc	r24, r24
    4812:	99 1f       	adc	r25, r25
    4814:	5a 95       	dec	r21
    4816:	a9 f7       	brne	.-22     	; 0x4802 <__udivmodhi4_loop>
    4818:	80 95       	com	r24
    481a:	90 95       	com	r25
    481c:	bc 01       	movw	r22, r24
    481e:	cd 01       	movw	r24, r26
    4820:	08 95       	ret

00004822 <__udivmodsi4>:
    4822:	a1 e2       	ldi	r26, 0x21	; 33
    4824:	1a 2e       	mov	r1, r26
    4826:	aa 1b       	sub	r26, r26
    4828:	bb 1b       	sub	r27, r27
    482a:	fd 01       	movw	r30, r26
    482c:	0d c0       	rjmp	.+26     	; 0x4848 <__udivmodsi4_ep>

0000482e <__udivmodsi4_loop>:
    482e:	aa 1f       	adc	r26, r26
    4830:	bb 1f       	adc	r27, r27
    4832:	ee 1f       	adc	r30, r30
    4834:	ff 1f       	adc	r31, r31
    4836:	a2 17       	cp	r26, r18
    4838:	b3 07       	cpc	r27, r19
    483a:	e4 07       	cpc	r30, r20
    483c:	f5 07       	cpc	r31, r21
    483e:	20 f0       	brcs	.+8      	; 0x4848 <__udivmodsi4_ep>
    4840:	a2 1b       	sub	r26, r18
    4842:	b3 0b       	sbc	r27, r19
    4844:	e4 0b       	sbc	r30, r20
    4846:	f5 0b       	sbc	r31, r21

00004848 <__udivmodsi4_ep>:
    4848:	66 1f       	adc	r22, r22
    484a:	77 1f       	adc	r23, r23
    484c:	88 1f       	adc	r24, r24
    484e:	99 1f       	adc	r25, r25
    4850:	1a 94       	dec	r1
    4852:	69 f7       	brne	.-38     	; 0x482e <__udivmodsi4_loop>
    4854:	60 95       	com	r22
    4856:	70 95       	com	r23
    4858:	80 95       	com	r24
    485a:	90 95       	com	r25
    485c:	9b 01       	movw	r18, r22
    485e:	ac 01       	movw	r20, r24
    4860:	bd 01       	movw	r22, r26
    4862:	cf 01       	movw	r24, r30
    4864:	08 95       	ret

00004866 <__prologue_saves__>:
    4866:	2f 92       	push	r2
    4868:	3f 92       	push	r3
    486a:	4f 92       	push	r4
    486c:	5f 92       	push	r5
    486e:	6f 92       	push	r6
    4870:	7f 92       	push	r7
    4872:	8f 92       	push	r8
    4874:	9f 92       	push	r9
    4876:	af 92       	push	r10
    4878:	bf 92       	push	r11
    487a:	cf 92       	push	r12
    487c:	df 92       	push	r13
    487e:	ef 92       	push	r14
    4880:	ff 92       	push	r15
    4882:	0f 93       	push	r16
    4884:	1f 93       	push	r17
    4886:	cf 93       	push	r28
    4888:	df 93       	push	r29
    488a:	cd b7       	in	r28, 0x3d	; 61
    488c:	de b7       	in	r29, 0x3e	; 62
    488e:	ca 1b       	sub	r28, r26
    4890:	db 0b       	sbc	r29, r27
    4892:	0f b6       	in	r0, 0x3f	; 63
    4894:	f8 94       	cli
    4896:	de bf       	out	0x3e, r29	; 62
    4898:	0f be       	out	0x3f, r0	; 63
    489a:	cd bf       	out	0x3d, r28	; 61
    489c:	09 94       	ijmp

0000489e <__epilogue_restores__>:
    489e:	2a 88       	ldd	r2, Y+18	; 0x12
    48a0:	39 88       	ldd	r3, Y+17	; 0x11
    48a2:	48 88       	ldd	r4, Y+16	; 0x10
    48a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    48a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    48a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    48aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    48ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    48ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    48b0:	b9 84       	ldd	r11, Y+9	; 0x09
    48b2:	c8 84       	ldd	r12, Y+8	; 0x08
    48b4:	df 80       	ldd	r13, Y+7	; 0x07
    48b6:	ee 80       	ldd	r14, Y+6	; 0x06
    48b8:	fd 80       	ldd	r15, Y+5	; 0x05
    48ba:	0c 81       	ldd	r16, Y+4	; 0x04
    48bc:	1b 81       	ldd	r17, Y+3	; 0x03
    48be:	aa 81       	ldd	r26, Y+2	; 0x02
    48c0:	b9 81       	ldd	r27, Y+1	; 0x01
    48c2:	ce 0f       	add	r28, r30
    48c4:	d1 1d       	adc	r29, r1
    48c6:	0f b6       	in	r0, 0x3f	; 63
    48c8:	f8 94       	cli
    48ca:	de bf       	out	0x3e, r29	; 62
    48cc:	0f be       	out	0x3f, r0	; 63
    48ce:	cd bf       	out	0x3d, r28	; 61
    48d0:	ed 01       	movw	r28, r26
    48d2:	08 95       	ret

000048d4 <itoa>:
    48d4:	fb 01       	movw	r30, r22
    48d6:	9f 01       	movw	r18, r30
    48d8:	e8 94       	clt
    48da:	42 30       	cpi	r20, 0x02	; 2
    48dc:	c4 f0       	brlt	.+48     	; 0x490e <itoa+0x3a>
    48de:	45 32       	cpi	r20, 0x25	; 37
    48e0:	b4 f4       	brge	.+44     	; 0x490e <itoa+0x3a>
    48e2:	4a 30       	cpi	r20, 0x0A	; 10
    48e4:	29 f4       	brne	.+10     	; 0x48f0 <itoa+0x1c>
    48e6:	97 fb       	bst	r25, 7
    48e8:	1e f4       	brtc	.+6      	; 0x48f0 <itoa+0x1c>
    48ea:	90 95       	com	r25
    48ec:	81 95       	neg	r24
    48ee:	9f 4f       	sbci	r25, 0xFF	; 255
    48f0:	64 2f       	mov	r22, r20
    48f2:	77 27       	eor	r23, r23
    48f4:	0e 94 fd 23 	call	0x47fa	; 0x47fa <__udivmodhi4>
    48f8:	80 5d       	subi	r24, 0xD0	; 208
    48fa:	8a 33       	cpi	r24, 0x3A	; 58
    48fc:	0c f0       	brlt	.+2      	; 0x4900 <itoa+0x2c>
    48fe:	89 5d       	subi	r24, 0xD9	; 217
    4900:	81 93       	st	Z+, r24
    4902:	cb 01       	movw	r24, r22
    4904:	00 97       	sbiw	r24, 0x00	; 0
    4906:	a1 f7       	brne	.-24     	; 0x48f0 <itoa+0x1c>
    4908:	16 f4       	brtc	.+4      	; 0x490e <itoa+0x3a>
    490a:	5d e2       	ldi	r21, 0x2D	; 45
    490c:	51 93       	st	Z+, r21
    490e:	10 82       	st	Z, r1
    4910:	c9 01       	movw	r24, r18
    4912:	0c 94 e5 24 	jmp	0x49ca	; 0x49ca <strrev>

00004916 <ceil>:
    4916:	3b d0       	rcall	.+118    	; 0x498e <__fp_trunc>
    4918:	80 f0       	brcs	.+32     	; 0x493a <ceil+0x24>
    491a:	9f 37       	cpi	r25, 0x7F	; 127
    491c:	40 f4       	brcc	.+16     	; 0x492e <ceil+0x18>
    491e:	91 11       	cpse	r25, r1
    4920:	0e f4       	brtc	.+2      	; 0x4924 <ceil+0xe>
    4922:	4d c0       	rjmp	.+154    	; 0x49be <__fp_szero>
    4924:	60 e0       	ldi	r22, 0x00	; 0
    4926:	70 e0       	ldi	r23, 0x00	; 0
    4928:	80 e8       	ldi	r24, 0x80	; 128
    492a:	9f e3       	ldi	r25, 0x3F	; 63
    492c:	08 95       	ret
    492e:	26 f0       	brts	.+8      	; 0x4938 <ceil+0x22>
    4930:	1b 16       	cp	r1, r27
    4932:	61 1d       	adc	r22, r1
    4934:	71 1d       	adc	r23, r1
    4936:	81 1d       	adc	r24, r1
    4938:	01 c0       	rjmp	.+2      	; 0x493c <__fp_mintl>
    493a:	1b c0       	rjmp	.+54     	; 0x4972 <__fp_mpack>

0000493c <__fp_mintl>:
    493c:	88 23       	and	r24, r24
    493e:	71 f4       	brne	.+28     	; 0x495c <__fp_mintl+0x20>
    4940:	77 23       	and	r23, r23
    4942:	21 f0       	breq	.+8      	; 0x494c <__fp_mintl+0x10>
    4944:	98 50       	subi	r25, 0x08	; 8
    4946:	87 2b       	or	r24, r23
    4948:	76 2f       	mov	r23, r22
    494a:	07 c0       	rjmp	.+14     	; 0x495a <__fp_mintl+0x1e>
    494c:	66 23       	and	r22, r22
    494e:	11 f4       	brne	.+4      	; 0x4954 <__fp_mintl+0x18>
    4950:	99 27       	eor	r25, r25
    4952:	0d c0       	rjmp	.+26     	; 0x496e <__fp_mintl+0x32>
    4954:	90 51       	subi	r25, 0x10	; 16
    4956:	86 2b       	or	r24, r22
    4958:	70 e0       	ldi	r23, 0x00	; 0
    495a:	60 e0       	ldi	r22, 0x00	; 0
    495c:	2a f0       	brmi	.+10     	; 0x4968 <__fp_mintl+0x2c>
    495e:	9a 95       	dec	r25
    4960:	66 0f       	add	r22, r22
    4962:	77 1f       	adc	r23, r23
    4964:	88 1f       	adc	r24, r24
    4966:	da f7       	brpl	.-10     	; 0x495e <__fp_mintl+0x22>
    4968:	88 0f       	add	r24, r24
    496a:	96 95       	lsr	r25
    496c:	87 95       	ror	r24
    496e:	97 f9       	bld	r25, 7
    4970:	08 95       	ret

00004972 <__fp_mpack>:
    4972:	9f 3f       	cpi	r25, 0xFF	; 255
    4974:	31 f0       	breq	.+12     	; 0x4982 <__fp_mpack_finite+0xc>

00004976 <__fp_mpack_finite>:
    4976:	91 50       	subi	r25, 0x01	; 1
    4978:	20 f4       	brcc	.+8      	; 0x4982 <__fp_mpack_finite+0xc>
    497a:	87 95       	ror	r24
    497c:	77 95       	ror	r23
    497e:	67 95       	ror	r22
    4980:	b7 95       	ror	r27
    4982:	88 0f       	add	r24, r24
    4984:	91 1d       	adc	r25, r1
    4986:	96 95       	lsr	r25
    4988:	87 95       	ror	r24
    498a:	97 f9       	bld	r25, 7
    498c:	08 95       	ret

0000498e <__fp_trunc>:
    498e:	35 d0       	rcall	.+106    	; 0x49fa <__fp_splitA>
    4990:	a0 f0       	brcs	.+40     	; 0x49ba <__fp_trunc+0x2c>
    4992:	be e7       	ldi	r27, 0x7E	; 126
    4994:	b9 17       	cp	r27, r25
    4996:	88 f4       	brcc	.+34     	; 0x49ba <__fp_trunc+0x2c>
    4998:	bb 27       	eor	r27, r27
    499a:	9f 38       	cpi	r25, 0x8F	; 143
    499c:	60 f4       	brcc	.+24     	; 0x49b6 <__fp_trunc+0x28>
    499e:	16 16       	cp	r1, r22
    49a0:	b1 1d       	adc	r27, r1
    49a2:	67 2f       	mov	r22, r23
    49a4:	78 2f       	mov	r23, r24
    49a6:	88 27       	eor	r24, r24
    49a8:	98 5f       	subi	r25, 0xF8	; 248
    49aa:	f7 cf       	rjmp	.-18     	; 0x499a <__fp_trunc+0xc>
    49ac:	86 95       	lsr	r24
    49ae:	77 95       	ror	r23
    49b0:	67 95       	ror	r22
    49b2:	b1 1d       	adc	r27, r1
    49b4:	93 95       	inc	r25
    49b6:	96 39       	cpi	r25, 0x96	; 150
    49b8:	c8 f3       	brcs	.-14     	; 0x49ac <__fp_trunc+0x1e>
    49ba:	08 95       	ret

000049bc <__fp_zero>:
    49bc:	e8 94       	clt

000049be <__fp_szero>:
    49be:	bb 27       	eor	r27, r27
    49c0:	66 27       	eor	r22, r22
    49c2:	77 27       	eor	r23, r23
    49c4:	cb 01       	movw	r24, r22
    49c6:	97 f9       	bld	r25, 7
    49c8:	08 95       	ret

000049ca <strrev>:
    49ca:	dc 01       	movw	r26, r24
    49cc:	fc 01       	movw	r30, r24
    49ce:	67 2f       	mov	r22, r23
    49d0:	71 91       	ld	r23, Z+
    49d2:	77 23       	and	r23, r23
    49d4:	e1 f7       	brne	.-8      	; 0x49ce <strrev+0x4>
    49d6:	32 97       	sbiw	r30, 0x02	; 2
    49d8:	04 c0       	rjmp	.+8      	; 0x49e2 <strrev+0x18>
    49da:	7c 91       	ld	r23, X
    49dc:	6d 93       	st	X+, r22
    49de:	70 83       	st	Z, r23
    49e0:	62 91       	ld	r22, -Z
    49e2:	ae 17       	cp	r26, r30
    49e4:	bf 07       	cpc	r27, r31
    49e6:	c8 f3       	brcs	.-14     	; 0x49da <strrev+0x10>
    49e8:	08 95       	ret

000049ea <__fp_split3>:
    49ea:	57 fd       	sbrc	r21, 7
    49ec:	90 58       	subi	r25, 0x80	; 128
    49ee:	44 0f       	add	r20, r20
    49f0:	55 1f       	adc	r21, r21
    49f2:	59 f0       	breq	.+22     	; 0x4a0a <__fp_splitA+0x10>
    49f4:	5f 3f       	cpi	r21, 0xFF	; 255
    49f6:	71 f0       	breq	.+28     	; 0x4a14 <__fp_splitA+0x1a>
    49f8:	47 95       	ror	r20

000049fa <__fp_splitA>:
    49fa:	88 0f       	add	r24, r24
    49fc:	97 fb       	bst	r25, 7
    49fe:	99 1f       	adc	r25, r25
    4a00:	61 f0       	breq	.+24     	; 0x4a1a <__fp_splitA+0x20>
    4a02:	9f 3f       	cpi	r25, 0xFF	; 255
    4a04:	79 f0       	breq	.+30     	; 0x4a24 <__fp_splitA+0x2a>
    4a06:	87 95       	ror	r24
    4a08:	08 95       	ret
    4a0a:	12 16       	cp	r1, r18
    4a0c:	13 06       	cpc	r1, r19
    4a0e:	14 06       	cpc	r1, r20
    4a10:	55 1f       	adc	r21, r21
    4a12:	f2 cf       	rjmp	.-28     	; 0x49f8 <__fp_split3+0xe>
    4a14:	46 95       	lsr	r20
    4a16:	f1 df       	rcall	.-30     	; 0x49fa <__fp_splitA>
    4a18:	08 c0       	rjmp	.+16     	; 0x4a2a <__fp_splitA+0x30>
    4a1a:	16 16       	cp	r1, r22
    4a1c:	17 06       	cpc	r1, r23
    4a1e:	18 06       	cpc	r1, r24
    4a20:	99 1f       	adc	r25, r25
    4a22:	f1 cf       	rjmp	.-30     	; 0x4a06 <__fp_splitA+0xc>
    4a24:	86 95       	lsr	r24
    4a26:	71 05       	cpc	r23, r1
    4a28:	61 05       	cpc	r22, r1
    4a2a:	08 94       	sec
    4a2c:	08 95       	ret

00004a2e <_exit>:
    4a2e:	f8 94       	cli

00004a30 <__stop_program>:
    4a30:	ff cf       	rjmp	.-2      	; 0x4a30 <__stop_program>
