
TASK30_UART-STR-RXD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  00004a16  00004aaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008001b0  008001b0  00004bfa  2**0
                  ALLOC
  3 .stab         00006354  00000000  00000000  00004bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004f35  00000000  00000000  0000af50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000fe85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00010065  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00010297  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00012b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00014150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00015530  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00015730  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00015a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016495  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__vector_1>
       8:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__vector_2>
       c:	0c 94 95 13 	jmp	0x272a	; 0x272a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__vector_6>
      1c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_7>
      20:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__vector_8>
      24:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__vector_9>
      28:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__vector_10>
      2c:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 46 14 	jmp	0x288c	; 0x288c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3d       	cpi	r26, 0xD3	; 211
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 23 	call	0x478e	; 0x478e <main>
      8a:	0c 94 09 25 	jmp	0x4a12	; 0x4a12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 25 24 	jmp	0x484a	; 0x484a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e8       	ldi	r26, 0x87	; 135
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 41 24 	jmp	0x4882	; 0x4882 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 25 24 	jmp	0x484a	; 0x484a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e8       	ldi	r24, 0x87	; 135
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 41 24 	jmp	0x4882	; 0x4882 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e8       	ldi	r22, 0x87	; 135
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 31 24 	jmp	0x4862	; 0x4862 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 2e 24 	jmp	0x485c	; 0x485c <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 4a 24 	jmp	0x4894	; 0x4894 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 35 24 	jmp	0x486a	; 0x486a <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 51 24 	jmp	0x48a2	; 0x48a2 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 2d 24 	jmp	0x485a	; 0x485a <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 49 24 	jmp	0x4892	; 0x4892 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e1 57       	subi	r30, 0x71	; 113
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <UART_Initialization>:

/*******************************************************************************
 *                              				FUNCTION IMPLEMENTATIONS				                   	   *
 *******************************************************************************/

void UART_Initialization(void) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	// When will this eqn be in -Ve? if the Fcpu is less than '1'
	// What does the -Ve UBBR mean? it means i can't use this baud rate @ this Fcpu
	// The Fcpu must be atleast 8 times larger than the Baud Rate!!!
	// So if my Fcpu = 16Mhz & Baud = 9600, then the UBBR = 207.
*/
	UCSRA_REG->U2X = UART_SPEED;
     f54:	eb e2       	ldi	r30, 0x2B	; 43
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	80 83       	st	Z, r24
	UCSRB_REG->TXEN = 1;
     f5e:	ea e2       	ldi	r30, 0x2A	; 42
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 60       	ori	r24, 0x08	; 8
     f66:	80 83       	st	Z, r24
	UCSRB_REG->RXEN = 1;
     f68:	ea e2       	ldi	r30, 0x2A	; 42
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 61       	ori	r24, 0x10	; 16
     f70:	80 83       	st	Z, r24

	u8 UCSRC_Value = 0;
     f72:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRC_Value, UCSRC_URSEL);
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	80 68       	ori	r24, 0x80	; 128
     f78:	89 83       	std	Y+1, r24	; 0x01
#elif (UART_BITSIZE == UART_9_BITSIZE)
	SET_BIT(UCSRC_Value, UCSRC_UCSZ0);
	SET_BIT(UCSRC_Value, UCSRC_UCSZ1);
	SET_BIT(UCSRB_REG, UCSZ2);
#else
	SET_BIT(UCSRC_Value, UCSRC_UCSZ0);
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_Value, UCSRC_UCSZ1);
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	84 60       	ori	r24, 0x04	; 4
     f84:	89 83       	std	Y+1, r24	; 0x01
#endif
	UCSRC_REG = UCSRC_Value;
     f86:	e0 e4       	ldi	r30, 0x40	; 64
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	80 83       	st	Z, r24

	// For F_CPU: 16 MHz & Baud: 9600, My UBRR: 103
	UBRRL_REG = (u8)(UBRR_VALUE);
     f8e:	e9 e2       	ldi	r30, 0x29	; 41
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	83 e3       	ldi	r24, 0x33	; 51
     f94:	80 83       	st	Z, r24
	UBRRH_REG = (u8)(UBRR_VALUE >> 8);
     f96:	e0 e4       	ldi	r30, 0x40	; 64
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	10 82       	st	Z, r1
	UCSRB_REG->RXCIE = 1;
	UCSRB_REG->TXCIE = 1;
	UCSRB_REG->UDRIE = 1;
#endif

}
     f9c:	0f 90       	pop	r0
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <UART_voidSendByte_Polling>:


// Responsible for the USART to send a byte
void UART_voidSendByte_Polling(const u8 data) {
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	89 83       	std	Y+1, r24	; 0x01
	while(UCSRA_REG->UDRE == 0);
     fb0:	eb e2       	ldi	r30, 0x2B	; 43
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	80 72       	andi	r24, 0x20	; 32
     fb8:	88 23       	and	r24, r24
     fba:	d1 f3       	breq	.-12     	; 0xfb0 <UART_voidSendByte_Polling+0xc>
	//UCSRA_REG->TXC = 1;

	UDR_REG = data;
     fbc:	ec e2       	ldi	r30, 0x2C	; 44
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	80 83       	st	Z, r24

	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	// This is waiting for the flag to be set to '0' to know that I received data
	*******************************************************************/
}
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <UART_voidReceiveByte_Polling>:


// Responsible for the USART to receive a byte
u8 UART_voidReceiveByte_Polling(void) {
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
	// This is waiting for the flag to be set to '0' to know that I received data
	while(UCSRA_REG->RXC == 0);
     fd4:	eb e2       	ldi	r30, 0x2B	; 43
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 78       	andi	r24, 0x80	; 128
     fdc:	88 23       	and	r24, r24
     fde:	d1 f3       	breq	.-12     	; 0xfd4 <UART_voidReceiveByte_Polling+0x8>
	//UCSRA_REG->RXC = 1;

	return UDR_REG;		// When reading
     fe0:	ec e2       	ldi	r30, 0x2C	; 44
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
}
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <UART_voidSendString>:


// Responsible for the USART to send an array of bytes, a string
void UART_voidSendString(const u8 *str) {
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <UART_voidSendString+0x6>
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9b 83       	std	Y+3, r25	; 0x03
     ffa:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     ffc:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0 ; str[i] ; i++)
     ffe:	19 82       	std	Y+1, r1	; 0x01
    1000:	0e c0       	rjmp	.+28     	; 0x101e <UART_voidSendString+0x32>
	{
		UART_voidSendByte_Polling(str[i]);
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	9b 81       	ldd	r25, Y+3	; 0x03
    100c:	fc 01       	movw	r30, r24
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	80 81       	ld	r24, Z
    1014:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <UART_voidSendByte_Polling>


// Responsible for the USART to send an array of bytes, a string
void UART_voidSendString(const u8 *str) {
	u8 i = 0;
	for(i = 0 ; str[i] ; i++)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	8f 5f       	subi	r24, 0xFF	; 255
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	fc 01       	movw	r30, r24
    102a:	e2 0f       	add	r30, r18
    102c:	f3 1f       	adc	r31, r19
    102e:	80 81       	ld	r24, Z
    1030:	88 23       	and	r24, r24
    1032:	39 f7       	brne	.-50     	; 0x1002 <UART_voidSendString+0x16>
	{
		UART_voidSendByte_Polling(str[i]);
	}
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <UART_voidReceiveString>:


// Responsible for the USART to receive an array of bytes, a string
void UART_voidReceiveString(u8 *str) {
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <UART_voidReceiveString+0xa>
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	9b 83       	std	Y+3, r25	; 0x03
    1052:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1054:	19 82       	std	Y+1, r1	; 0x01
	str[0] = UART_voidReceiveByte_Polling();
    1056:	0e 94 e6 07 	call	0xfcc	; 0xfcc <UART_voidReceiveByte_Polling>
    105a:	ea 81       	ldd	r30, Y+2	; 0x02
    105c:	fb 81       	ldd	r31, Y+3	; 0x03
    105e:	80 83       	st	Z, r24
    1060:	0f c0       	rjmp	.+30     	; 0x1080 <UART_voidReceiveString+0x40>
	for(; str[i] != 0x0d ;)
	{
		i++;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_voidReceiveByte_Polling();
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	8c 01       	movw	r16, r24
    1074:	02 0f       	add	r16, r18
    1076:	13 1f       	adc	r17, r19
    1078:	0e 94 e6 07 	call	0xfcc	; 0xfcc <UART_voidReceiveByte_Polling>
    107c:	f8 01       	movw	r30, r16
    107e:	80 83       	st	Z, r24

// Responsible for the USART to receive an array of bytes, a string
void UART_voidReceiveString(u8 *str) {
	u8 i = 0;
	str[0] = UART_voidReceiveByte_Polling();
	for(; str[i] != 0x0d ;)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	9b 81       	ldd	r25, Y+3	; 0x03
    108a:	fc 01       	movw	r30, r24
    108c:	e2 0f       	add	r30, r18
    108e:	f3 1f       	adc	r31, r19
    1090:	80 81       	ld	r24, Z
    1092:	8d 30       	cpi	r24, 0x0D	; 13
    1094:	31 f7       	brne	.-52     	; 0x1062 <UART_voidReceiveString+0x22>
	{
		i++;
		str[i] = UART_voidReceiveByte_Polling();
	}
	str[i] = 0;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	9b 81       	ldd	r25, Y+3	; 0x03
    10a0:	fc 01       	movw	r30, r24
    10a2:	e2 0f       	add	r30, r18
    10a4:	f3 1f       	adc	r31, r19
    10a6:	10 82       	st	Z, r1
}
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	08 95       	ret

000010b8 <TIMER1_Initialization>:

/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

void TIMER1_Initialization(void) {
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG->WGM1x = 0b01;
	TCCR1B_REG->WGM1x = 0b10;
	TCCR1A_REG->COM1Bx 	= 0b10; // Non Inverting Mode
	TCCR1A_REG->COM1Ax 	= 0b10; // Non Inverting Mode
#elif (TIMER1_FASTPWM_MODE)
	TCCR1A_REG->FOC1A 	= 0;
    10c0:	ef e4       	ldi	r30, 0x4F	; 79
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	87 7f       	andi	r24, 0xF7	; 247
    10c8:	80 83       	st	Z, r24
	TCCR1A_REG->FOC1B 	= 0;
    10ca:	ef e4       	ldi	r30, 0x4F	; 79
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8b 7f       	andi	r24, 0xFB	; 251
    10d2:	80 83       	st	Z, r24
	TCCR1A_REG->WGM1x 	= 0b10;
    10d4:	ef e4       	ldi	r30, 0x4F	; 79
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8c 7f       	andi	r24, 0xFC	; 252
    10dc:	82 60       	ori	r24, 0x02	; 2
    10de:	80 83       	st	Z, r24
	TCCR1B_REG->WGM1x 	= 0b11;
    10e0:	ee e4       	ldi	r30, 0x4E	; 78
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	88 61       	ori	r24, 0x18	; 24
    10e8:	80 83       	st	Z, r24
	TCCR1A_REG->COM1Bx 	= 0b10; // Non Inverting Mode
    10ea:	ef e4       	ldi	r30, 0x4F	; 79
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8f 7c       	andi	r24, 0xCF	; 207
    10f2:	80 62       	ori	r24, 0x20	; 32
    10f4:	80 83       	st	Z, r24
	TCCR1A_REG->COM1Ax 	= 0b10; // Non Inverting Mode
    10f6:	ef e4       	ldi	r30, 0x4F	; 79
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 73       	andi	r24, 0x3F	; 63
    10fe:	80 68       	ori	r24, 0x80	; 128
    1100:	80 83       	st	Z, r24
#endif

	TCCR1B_REG->CS1x = TIMER1_PRESCALER;
    1102:	ee e4       	ldi	r30, 0x4E	; 78
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	88 7f       	andi	r24, 0xF8	; 248
    110a:	82 60       	ori	r24, 0x02	; 2
    110c:	80 83       	st	Z, r24
	OCR1AL_REG = 500;
    110e:	ea e4       	ldi	r30, 0x4A	; 74
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	84 ef       	ldi	r24, 0xF4	; 244
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	80 83       	st	Z, r24
	TIMSK_REG->TICIE1 = TIMER1_SET;
	TIMSK_REG->OCIE1A = TIMER1_SET;
	TIMSK_REG->OCIE1B = TIMER1_SET;
	TIMSK_REG->TOIE1 = TIMER1_SET;
#endif
}
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <TIMER1_voidStart>:

void TIMER1_voidStart(void) {
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	//TCCR1B_REG->CS1x = TIMER1_PRESCALER;
}
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <TIMER1_voidStop>:


void TIMER1_voidStop(void) {
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	TCCR1B_REG->CS1x = TIMER1_NO_TIME;
    1136:	ee e4       	ldi	r30, 0x4E	; 78
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	88 7f       	andi	r24, 0xF8	; 248
    113e:	80 83       	st	Z, r24
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <TIMER1_voidSetPreload>:


void TIMER1_voidSetPreload(u8 copy_u8preloadValue) {
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	0f 92       	push	r0
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	89 83       	std	Y+1, r24	; 0x01
	// Choose Timer PRESCALER
	TCNT1L_REG = copy_u8preloadValue;
    1152:	ec e4       	ldi	r30, 0x4C	; 76
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	80 83       	st	Z, r24
}
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <TIMER1_u16GetTime>:


u16 TIMER1_u16GetTime(void) {
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	return (u16)TCNT1L_REG;
    1170:	ec e4       	ldi	r30, 0x4C	; 76
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <TIMER1A_SetCOMPAREMATCH_FASTPWM>:


u16 TIMER1A_SetCOMPAREMATCH_FASTPWM(u16 copy_u16CMP)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <TIMER1A_SetCOMPAREMATCH_FASTPWM+0x6>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <TIMER1A_SetCOMPAREMATCH_FASTPWM+0x8>
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	9c 83       	std	Y+4, r25	; 0x04
    118c:	8b 83       	std	Y+3, r24	; 0x03
	 u16 Value = copy_u16CMP;
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_D, PIN_5, PIN_OUTPUT);
    1196:	83 e0       	ldi	r24, 0x03	; 3
    1198:	65 e0       	ldi	r22, 0x05	; 5
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
	 OCR1AL_REG = copy_u16CMP;
    11a0:	ea e4       	ldi	r30, 0x4A	; 74
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
	 return Value;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <TIMER1A_SetTop_FASTPWM>:

void TIMER1A_SetTop_FASTPWM(u16 copy_u16ICRValue)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <TIMER1A_SetTop_FASTPWM+0x6>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
	 ICR1L_REG = copy_u16ICRValue;
    11cc:	e6 e4       	ldi	r30, 0x46	; 70
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	91 83       	std	Z+1, r25	; 0x01
    11d6:	80 83       	st	Z, r24
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <TIMER1A_SetDutyCycle_FASTPWM>:

u16 TIMER1A_SetDutyCycle_FASTPWM(u8 copy_u8Duty)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <TIMER1A_SetDutyCycle_FASTPWM+0x6>
    11e8:	0f 92       	push	r0
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	8b 83       	std	Y+3, r24	; 0x03
	 u16 PWMValue = (u16)(copy_u8Duty * 255) / 100;
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	48 2f       	mov	r20, r24
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	ca 01       	movw	r24, r20
    11f8:	9c 01       	movw	r18, r24
    11fa:	22 0f       	add	r18, r18
    11fc:	33 1f       	adc	r19, r19
    11fe:	c9 01       	movw	r24, r18
    1200:	96 95       	lsr	r25
    1202:	98 2f       	mov	r25, r24
    1204:	88 27       	eor	r24, r24
    1206:	97 95       	ror	r25
    1208:	87 95       	ror	r24
    120a:	82 1b       	sub	r24, r18
    120c:	93 0b       	sbc	r25, r19
    120e:	84 0f       	add	r24, r20
    1210:	95 1f       	adc	r25, r21
    1212:	24 e6       	ldi	r18, 0x64	; 100
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	b9 01       	movw	r22, r18
    1218:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodhi4>
    121c:	cb 01       	movw	r24, r22
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_D, PIN_5, PIN_OUTPUT);
    1222:	83 e0       	ldi	r24, 0x03	; 3
    1224:	65 e0       	ldi	r22, 0x05	; 5
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
	 OCR1AL_REG = PWMValue;
    122c:	ea e4       	ldi	r30, 0x4A	; 74
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
	 return PWMValue;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <TIMER1B_SetDutyCycle_FASTPWM>:

u16 TIMER1B_SetDutyCycle_FASTPWM(u8 copy_u8Duty)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <TIMER1B_SetDutyCycle_FASTPWM+0x6>
    124e:	0f 92       	push	r0
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	8b 83       	std	Y+3, r24	; 0x03
	 u16 PWMValue = (u16)(copy_u8Duty * 255) / 100;
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	48 2f       	mov	r20, r24
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	ca 01       	movw	r24, r20
    125e:	9c 01       	movw	r18, r24
    1260:	22 0f       	add	r18, r18
    1262:	33 1f       	adc	r19, r19
    1264:	c9 01       	movw	r24, r18
    1266:	96 95       	lsr	r25
    1268:	98 2f       	mov	r25, r24
    126a:	88 27       	eor	r24, r24
    126c:	97 95       	ror	r25
    126e:	87 95       	ror	r24
    1270:	82 1b       	sub	r24, r18
    1272:	93 0b       	sbc	r25, r19
    1274:	84 0f       	add	r24, r20
    1276:	95 1f       	adc	r25, r21
    1278:	24 e6       	ldi	r18, 0x64	; 100
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	b9 01       	movw	r22, r18
    127e:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodhi4>
    1282:	cb 01       	movw	r24, r22
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_D, PIN_4, PIN_OUTPUT);
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	64 e0       	ldi	r22, 0x04	; 4
    128c:	41 e0       	ldi	r20, 0x01	; 1
    128e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
	 OCR1BL_REG = PWMValue;
    1292:	e8 e4       	ldi	r30, 0x48	; 72
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	80 83       	st	Z, r24
	 return PWMValue;
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <TIMER1A_setDelay_ms_CTC>:

void TIMER1A_setDelay_ms_CTC(u16 copy_u16Delay)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	28 97       	sbiw	r28, 0x08	; 8
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	98 87       	std	Y+8, r25	; 0x08
    12c0:	8f 83       	std	Y+7, r24	; 0x07
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0.001;
    12c2:	8f e6       	ldi	r24, 0x6F	; 111
    12c4:	92 e1       	ldi	r25, 0x12	; 18
    12c6:	a3 e8       	ldi	r26, 0x83	; 131
    12c8:	ba e3       	ldi	r27, 0x3A	; 58
    12ca:	8b 83       	std	Y+3, r24	; 0x03
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	ad 83       	std	Y+5, r26	; 0x05
    12d0:	be 83       	std	Y+6, r27	; 0x06
			// This will set the Tick Time 1mS
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
    12d2:	6b 81       	ldd	r22, Y+3	; 0x03
    12d4:	7c 81       	ldd	r23, Y+4	; 0x04
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	34 e2       	ldi	r19, 0x24	; 36
    12de:	44 ef       	ldi	r20, 0xF4	; 244
    12e0:	5a e4       	ldi	r21, 0x4A	; 74
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	bc 01       	movw	r22, r24
    12ec:	cd 01       	movw	r24, r26
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e4       	ldi	r20, 0x40	; 64
    12f4:	50 e4       	ldi	r21, 0x40	; 64
    12f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
			TCNT1L_REG = compareValue;
    130e:	ec e4       	ldi	r30, 0x4C	; 76
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
    131a:	10 c0       	rjmp	.+32     	; 0x133c <TIMER1A_setDelay_ms_CTC+0x92>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
				// This condition is a Busy Wait
				while(TIFR_REG->OCF1A == TIMER1_NOTSET);
    131c:	e8 e5       	ldi	r30, 0x58	; 88
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 71       	andi	r24, 0x10	; 16
    1324:	88 23       	and	r24, r24
    1326:	d1 f3       	breq	.-12     	; 0x131c <TIMER1A_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1A = TIMER1_SET;
    1328:	e8 e5       	ldi	r30, 0x58	; 88
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 61       	ori	r24, 0x10	; 16
    1330:	80 83       	st	Z, r24
				overFlowCounter++;
    1332:	80 91 b0 01 	lds	r24, 0x01B0
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	80 93 b0 01 	sts	0x01B0, r24
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
			TCNT1L_REG = compareValue;

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
    133c:	80 91 b0 01 	lds	r24, 0x01B0
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8f 81       	ldd	r24, Y+7	; 0x07
    1346:	98 85       	ldd	r25, Y+8	; 0x08
    1348:	28 17       	cp	r18, r24
    134a:	39 07       	cpc	r19, r25
    134c:	39 f7       	brne	.-50     	; 0x131c <TIMER1A_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1A = TIMER1_SET;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    134e:	10 92 b0 01 	sts	0x01B0, r1
}
    1352:	28 96       	adiw	r28, 0x08	; 8
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <TIMER1B_setDelay_ms_CTC>:

void TIMER1B_setDelay_ms_CTC(u16 copy_u16Delay)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	28 97       	sbiw	r28, 0x08	; 8
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	98 87       	std	Y+8, r25	; 0x08
    137a:	8f 83       	std	Y+7, r24	; 0x07
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0.001;
    137c:	8f e6       	ldi	r24, 0x6F	; 111
    137e:	92 e1       	ldi	r25, 0x12	; 18
    1380:	a3 e8       	ldi	r26, 0x83	; 131
    1382:	ba e3       	ldi	r27, 0x3A	; 58
    1384:	8b 83       	std	Y+3, r24	; 0x03
    1386:	9c 83       	std	Y+4, r25	; 0x04
    1388:	ad 83       	std	Y+5, r26	; 0x05
    138a:	be 83       	std	Y+6, r27	; 0x06
			// This will set the Tick Time 1mS
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
    138c:	6b 81       	ldd	r22, Y+3	; 0x03
    138e:	7c 81       	ldd	r23, Y+4	; 0x04
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	34 e2       	ldi	r19, 0x24	; 36
    1398:	44 ef       	ldi	r20, 0xF4	; 244
    139a:	5a e4       	ldi	r21, 0x4A	; 74
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e4       	ldi	r20, 0x40	; 64
    13ae:	50 e4       	ldi	r21, 0x40	; 64
    13b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9a 83       	std	Y+2, r25	; 0x02
    13c6:	89 83       	std	Y+1, r24	; 0x01
			TCNT1L_REG = compareValue;
    13c8:	ec e4       	ldi	r30, 0x4C	; 76
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	80 83       	st	Z, r24
    13d4:	10 c0       	rjmp	.+32     	; 0x13f6 <TIMER1B_setDelay_ms_CTC+0x92>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
				// This condition is a Busy Wait
				while(TIFR_REG->OCF1B == TIMER1_NOTSET);
    13d6:	e8 e5       	ldi	r30, 0x58	; 88
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	88 70       	andi	r24, 0x08	; 8
    13de:	88 23       	and	r24, r24
    13e0:	d1 f3       	breq	.-12     	; 0x13d6 <TIMER1B_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1B = TIMER1_SET;
    13e2:	e8 e5       	ldi	r30, 0x58	; 88
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	88 60       	ori	r24, 0x08	; 8
    13ea:	80 83       	st	Z, r24
				overFlowCounter++;
    13ec:	80 91 b1 01 	lds	r24, 0x01B1
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	80 93 b1 01 	sts	0x01B1, r24
			u16 compareValue = (Tick_Time * (float)F_CPU) / TIMER1_PRESCALER_64;
			TCNT1L_REG = compareValue;

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
    13f6:	80 91 b1 01 	lds	r24, 0x01B1
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1400:	98 85       	ldd	r25, Y+8	; 0x08
    1402:	28 17       	cp	r18, r24
    1404:	39 07       	cpc	r19, r25
    1406:	39 f7       	brne	.-50     	; 0x13d6 <TIMER1B_setDelay_ms_CTC+0x72>

				// Clear the overflow flag
				TIFR_REG->OCF1B = TIMER1_SET;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    1408:	10 92 b1 01 	sts	0x01B1, r1
}
    140c:	28 96       	adiw	r28, 0x08	; 8
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <TIMER1_setDelay_ms_OVF>:

void TIMER1_setDelay_ms_OVF(u16 copy_u16Delay)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	2e 97       	sbiw	r28, 0x0e	; 14
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	9e 87       	std	Y+14, r25	; 0x0e
    1434:	8d 87       	std	Y+13, r24	; 0x0d
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0;
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 e0       	ldi	r26, 0x00	; 0
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	89 87       	std	Y+9, r24	; 0x09
    1440:	9a 87       	std	Y+10, r25	; 0x0a
    1442:	ab 87       	std	Y+11, r26	; 0x0b
    1444:	bc 87       	std	Y+12, r27	; 0x0c
			Tick_Time = TIMER1_PRESCALER / (float)F_CPU;
    1446:	8d eb       	ldi	r24, 0xBD	; 189
    1448:	97 e3       	ldi	r25, 0x37	; 55
    144a:	a6 e8       	ldi	r26, 0x86	; 134
    144c:	b4 e3       	ldi	r27, 0x34	; 52
    144e:	89 87       	std	Y+9, r24	; 0x09
    1450:	9a 87       	std	Y+10, r25	; 0x0a
    1452:	ab 87       	std	Y+11, r26	; 0x0b
    1454:	bc 87       	std	Y+12, r27	; 0x0c
			float Time_Overflow = Tick_Time * TIMER1_SIZE;
    1456:	69 85       	ldd	r22, Y+9	; 0x09
    1458:	7a 85       	ldd	r23, Y+10	; 0x0a
    145a:	8b 85       	ldd	r24, Y+11	; 0x0b
    145c:	9c 85       	ldd	r25, Y+12	; 0x0c
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e8       	ldi	r20, 0x80	; 128
    1464:	53 e4       	ldi	r21, 0x43	; 67
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	af 83       	std	Y+7, r26	; 0x07
    1474:	b8 87       	std	Y+8, r27	; 0x08
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));
    1476:	8d 85       	ldd	r24, Y+13	; 0x0d
    1478:	9e 85       	ldd	r25, Y+14	; 0x0e
    147a:	cc 01       	movw	r24, r24
    147c:	a0 e0       	ldi	r26, 0x00	; 0
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	2d 81       	ldd	r18, Y+5	; 0x05
    1492:	3e 81       	ldd	r19, Y+6	; 0x06
    1494:	4f 81       	ldd	r20, Y+7	; 0x07
    1496:	58 85       	ldd	r21, Y+8	; 0x08
    1498:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 7d 24 	call	0x48fa	; 0x48fa <ceil>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	ab 83       	std	Y+3, r26	; 0x03
    14b2:	bc 83       	std	Y+4, r27	; 0x04
    14b4:	10 c0       	rjmp	.+32     	; 0x14d6 <TIMER1_setDelay_ms_OVF+0xb8>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
				// This condition is a Busy Wait
				while(TIFR_REG->TOV1 == TIMER1_NOTSET);
    14b6:	e8 e5       	ldi	r30, 0x58	; 88
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	84 70       	andi	r24, 0x04	; 4
    14be:	88 23       	and	r24, r24
    14c0:	d1 f3       	breq	.-12     	; 0x14b6 <TIMER1_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV1 = TIMER1_SET;
    14c2:	e8 e5       	ldi	r30, 0x58	; 88
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	84 60       	ori	r24, 0x04	; 4
    14ca:	80 83       	st	Z, r24
				overFlowCounter++;
    14cc:	80 91 b2 01 	lds	r24, 0x01B2
    14d0:	8f 5f       	subi	r24, 0xFF	; 255
    14d2:	80 93 b2 01 	sts	0x01B2, r24
			float Time_Overflow = Tick_Time * TIMER1_SIZE;
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
    14d6:	80 91 b2 01 	lds	r24, 0x01B2
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	aa 27       	eor	r26, r26
    14e0:	97 fd       	sbrc	r25, 7
    14e2:	a0 95       	com	r26
    14e4:	ba 2f       	mov	r27, r26
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	29 81       	ldd	r18, Y+1	; 0x01
    14f8:	3a 81       	ldd	r19, Y+2	; 0x02
    14fa:	4b 81       	ldd	r20, Y+3	; 0x03
    14fc:	5c 81       	ldd	r21, Y+4	; 0x04
    14fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1502:	88 23       	and	r24, r24
    1504:	c1 f6       	brne	.-80     	; 0x14b6 <TIMER1_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV1 = TIMER1_SET;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    1506:	10 92 b2 01 	sts	0x01B2, r1
}
    150a:	2e 96       	adiw	r28, 0x0e	; 14
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <TIMER1_CallBackFunction_CAPT>:

void TIMER1_CallBackFunction_CAPT(void (*Ptr_TIMER)(void))
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <TIMER1_CallBackFunction_CAPT+0x6>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_CAPT = Ptr_TIMER;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	90 93 c4 01 	sts	0x01C4, r25
    1532:	80 93 c3 01 	sts	0x01C3, r24
}
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <TIMER1_CallBackFunction_COMPA>:

void TIMER1_CallBackFunction_COMPA(void (*Ptr_TIMER)(void))
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <TIMER1_CallBackFunction_COMPA+0x6>
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_COMPA = Ptr_TIMER;
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	90 93 c6 01 	sts	0x01C6, r25
    1556:	80 93 c5 01 	sts	0x01C5, r24
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <TIMER1_CallBackFunction_COMPB>:

void TIMER1_CallBackFunction_COMPB(void (*Ptr_TIMER)(void))
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <TIMER1_CallBackFunction_COMPB+0x6>
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_COMPB = Ptr_TIMER;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	90 93 c0 01 	sts	0x01C0, r25
    157a:	80 93 bf 01 	sts	0x01BF, r24
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <TIMER1_CallBackFunction_OVF>:

void TIMER1_CallBackFunction_OVF(void (*Ptr_TIMER)(void))
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	00 d0       	rcall	.+0      	; 0x158e <TIMER1_CallBackFunction_OVF+0x6>
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER1_OVF = Ptr_TIMER;
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	90 93 c2 01 	sts	0x01C2, r25
    159e:	80 93 c1 01 	sts	0x01C1, r24
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <__vector_6>:


void __vector_6(void) __attribute__((signal, used));
void __vector_6(void) {
    15ac:	1f 92       	push	r1
    15ae:	0f 92       	push	r0
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	2f 93       	push	r18
    15b8:	3f 93       	push	r19
    15ba:	4f 93       	push	r20
    15bc:	5f 93       	push	r21
    15be:	6f 93       	push	r22
    15c0:	7f 93       	push	r23
    15c2:	8f 93       	push	r24
    15c4:	9f 93       	push	r25
    15c6:	af 93       	push	r26
    15c8:	bf 93       	push	r27
    15ca:	ef 93       	push	r30
    15cc:	ff 93       	push	r31
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_CAPT != NULL) {
    15d6:	80 91 c3 01 	lds	r24, 0x01C3
    15da:	90 91 c4 01 	lds	r25, 0x01C4
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	29 f0       	breq	.+10     	; 0x15ec <__vector_6+0x40>
		CallBackPtr_TIMER1_CAPT();
    15e2:	e0 91 c3 01 	lds	r30, 0x01C3
    15e6:	f0 91 c4 01 	lds	r31, 0x01C4
    15ea:	09 95       	icall
	}
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	0f 90       	pop	r0
    160e:	1f 90       	pop	r1
    1610:	18 95       	reti

00001612 <__vector_7>:

void __vector_7(void) __attribute__((signal, used));
void __vector_7(void) {
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_COMPA != NULL) {
    163c:	80 91 c5 01 	lds	r24, 0x01C5
    1640:	90 91 c6 01 	lds	r25, 0x01C6
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	29 f0       	breq	.+10     	; 0x1652 <__vector_7+0x40>
		CallBackPtr_TIMER1_COMPA();
    1648:	e0 91 c5 01 	lds	r30, 0x01C5
    164c:	f0 91 c6 01 	lds	r31, 0x01C6
    1650:	09 95       	icall
	}
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	ff 91       	pop	r31
    1658:	ef 91       	pop	r30
    165a:	bf 91       	pop	r27
    165c:	af 91       	pop	r26
    165e:	9f 91       	pop	r25
    1660:	8f 91       	pop	r24
    1662:	7f 91       	pop	r23
    1664:	6f 91       	pop	r22
    1666:	5f 91       	pop	r21
    1668:	4f 91       	pop	r20
    166a:	3f 91       	pop	r19
    166c:	2f 91       	pop	r18
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <__vector_8>:

void __vector_8(void) __attribute__((signal, used));
void __vector_8(void) {
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_COMPB != NULL) {
    16a2:	80 91 bf 01 	lds	r24, 0x01BF
    16a6:	90 91 c0 01 	lds	r25, 0x01C0
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <__vector_8+0x40>
		CallBackPtr_TIMER1_COMPB();
    16ae:	e0 91 bf 01 	lds	r30, 0x01BF
    16b2:	f0 91 c0 01 	lds	r31, 0x01C0
    16b6:	09 95       	icall
	}
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	ff 91       	pop	r31
    16be:	ef 91       	pop	r30
    16c0:	bf 91       	pop	r27
    16c2:	af 91       	pop	r26
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	7f 91       	pop	r23
    16ca:	6f 91       	pop	r22
    16cc:	5f 91       	pop	r21
    16ce:	4f 91       	pop	r20
    16d0:	3f 91       	pop	r19
    16d2:	2f 91       	pop	r18
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	0f 90       	pop	r0
    16da:	1f 90       	pop	r1
    16dc:	18 95       	reti

000016de <__vector_9>:

void __vector_9(void) __attribute__((signal, used));
void __vector_9(void) {
    16de:	1f 92       	push	r1
    16e0:	0f 92       	push	r0
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	0f 92       	push	r0
    16e6:	11 24       	eor	r1, r1
    16e8:	2f 93       	push	r18
    16ea:	3f 93       	push	r19
    16ec:	4f 93       	push	r20
    16ee:	5f 93       	push	r21
    16f0:	6f 93       	push	r22
    16f2:	7f 93       	push	r23
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	af 93       	push	r26
    16fa:	bf 93       	push	r27
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER1_OVF != NULL) {
    1708:	80 91 c1 01 	lds	r24, 0x01C1
    170c:	90 91 c2 01 	lds	r25, 0x01C2
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	29 f0       	breq	.+10     	; 0x171e <__vector_9+0x40>
		CallBackPtr_TIMER1_OVF();
    1714:	e0 91 c1 01 	lds	r30, 0x01C1
    1718:	f0 91 c2 01 	lds	r31, 0x01C2
    171c:	09 95       	icall
	}
}
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	ff 91       	pop	r31
    1724:	ef 91       	pop	r30
    1726:	bf 91       	pop	r27
    1728:	af 91       	pop	r26
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	0f 90       	pop	r0
    1740:	1f 90       	pop	r1
    1742:	18 95       	reti

00001744 <TIMER0_INITIALIZATION>:

/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

void TIMER0_INITIALIZATION(void) {
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
#endif

#if (ISR_ENABLE)
	TIMSK_REG->TOIE0 = 1;
#endif
}
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <TIMER0_START>:


void TIMER0_START(void) {
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	TCCR0_REG->CS0x = TIMER0_PRESCALER;
    175a:	e3 e5       	ldi	r30, 0x53	; 83
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	88 7f       	andi	r24, 0xF8	; 248
    1762:	82 60       	ori	r24, 0x02	; 2
    1764:	80 83       	st	Z, r24
}
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <TIMER0_STOP>:


void TIMER0_STOP(void) {
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	TCCR0_REG->CS0x = NO_TIME;
    1774:	e3 e5       	ldi	r30, 0x53	; 83
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	88 7f       	andi	r24, 0xF8	; 248
    177c:	80 83       	st	Z, r24
}
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <TIMER0_setPreload>:


void TIMER0_setPreload(u8 preloadValue) {
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	0f 92       	push	r0
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	89 83       	std	Y+1, r24	; 0x01
	// Choose Timer PRESCALER
	TCNT0_REG = preloadValue;
    1790:	e2 e5       	ldi	r30, 0x52	; 82
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	80 83       	st	Z, r24
}
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <TIMER0_getTime>:


u8 TIMER0_getTime(void) {
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
	// Choose Timer PRESCALER
	return TCNT0_REG;
    17a8:	e2 e5       	ldi	r30, 0x52	; 82
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <TIMER0_voidSetDutyCycle_FASTPWM>:

u8 TIMER0_voidSetDutyCycle_FASTPWM(u8 copy_u8Duty)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <TIMER0_voidSetDutyCycle_FASTPWM+0x6>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	8a 83       	std	Y+2, r24	; 0x02
	 u8 pwmValue = (u16)(copy_u8Duty * 255) / 100;
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	48 2f       	mov	r20, r24
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	ca 01       	movw	r24, r20
    17c8:	9c 01       	movw	r18, r24
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	c9 01       	movw	r24, r18
    17d0:	96 95       	lsr	r25
    17d2:	98 2f       	mov	r25, r24
    17d4:	88 27       	eor	r24, r24
    17d6:	97 95       	ror	r25
    17d8:	87 95       	ror	r24
    17da:	82 1b       	sub	r24, r18
    17dc:	93 0b       	sbc	r25, r19
    17de:	84 0f       	add	r24, r20
    17e0:	95 1f       	adc	r25, r21
    17e2:	24 e6       	ldi	r18, 0x64	; 100
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	b9 01       	movw	r22, r18
    17e8:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodhi4>
    17ec:	cb 01       	movw	r24, r22
    17ee:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_voidSetPinDirection(PORT_B, PIN_3, PIN_OUTPUT);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	63 e0       	ldi	r22, 0x03	; 3
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
	 OCR0_REG = pwmValue;
    17fa:	ec e5       	ldi	r30, 0x5C	; 92
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	80 83       	st	Z, r24
	 return pwmValue;
    1802:	89 81       	ldd	r24, Y+1	; 0x01
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <TIMER0_setDelay_ms_CTC>:

void TIMER0_setDelay_ms_CTC(u16 copy_u16Delay)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	27 97       	sbiw	r28, 0x07	; 7
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	9f 83       	std	Y+7, r25	; 0x07
    1824:	8e 83       	std	Y+6, r24	; 0x06
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0.001;
    1826:	8f e6       	ldi	r24, 0x6F	; 111
    1828:	92 e1       	ldi	r25, 0x12	; 18
    182a:	a3 e8       	ldi	r26, 0x83	; 131
    182c:	ba e3       	ldi	r27, 0x3A	; 58
    182e:	8a 83       	std	Y+2, r24	; 0x02
    1830:	9b 83       	std	Y+3, r25	; 0x03
    1832:	ac 83       	std	Y+4, r26	; 0x04
    1834:	bd 83       	std	Y+5, r27	; 0x05
			// This will set the Tick Time 1mS
			u8 compareValue = (Tick_Time * (float)F_CPU) / TIMER0_PRESCALER_64;
    1836:	6a 81       	ldd	r22, Y+2	; 0x02
    1838:	7b 81       	ldd	r23, Y+3	; 0x03
    183a:	8c 81       	ldd	r24, Y+4	; 0x04
    183c:	9d 81       	ldd	r25, Y+5	; 0x05
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	34 e2       	ldi	r19, 0x24	; 36
    1842:	44 ef       	ldi	r20, 0xF4	; 244
    1844:	5a e4       	ldi	r21, 0x4A	; 74
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e4       	ldi	r20, 0x40	; 64
    1858:	50 e4       	ldi	r21, 0x40	; 64
    185a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	89 83       	std	Y+1, r24	; 0x01
			TCNT0_REG = compareValue;
    1870:	e2 e5       	ldi	r30, 0x52	; 82
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	80 83       	st	Z, r24
    1878:	10 c0       	rjmp	.+32     	; 0x189a <TIMER0_setDelay_ms_CTC+0x8c>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
				// This condition is a Busy Wait
				while(TIFR_REG->OCF0 == 0);
    187a:	e8 e5       	ldi	r30, 0x58	; 88
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	82 70       	andi	r24, 0x02	; 2
    1882:	88 23       	and	r24, r24
    1884:	d1 f3       	breq	.-12     	; 0x187a <TIMER0_setDelay_ms_CTC+0x6c>

				// Clear the overflow flag
				TIFR_REG->OCF0 = 1;
    1886:	e8 e5       	ldi	r30, 0x58	; 88
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	82 60       	ori	r24, 0x02	; 2
    188e:	80 83       	st	Z, r24
				overFlowCounter++;
    1890:	80 91 b3 01 	lds	r24, 0x01B3
    1894:	8f 5f       	subi	r24, 0xFF	; 255
    1896:	80 93 b3 01 	sts	0x01B3, r24
			u8 compareValue = (Tick_Time * (float)F_CPU) / TIMER0_PRESCALER_64;
			TCNT0_REG = compareValue;

			static u8 overFlowCounter = 0;

			while (overFlowCounter != copy_u16Delay) {
    189a:	80 91 b3 01 	lds	r24, 0x01B3
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8e 81       	ldd	r24, Y+6	; 0x06
    18a4:	9f 81       	ldd	r25, Y+7	; 0x07
    18a6:	28 17       	cp	r18, r24
    18a8:	39 07       	cpc	r19, r25
    18aa:	39 f7       	brne	.-50     	; 0x187a <TIMER0_setDelay_ms_CTC+0x6c>

				// Clear the overflow flag
				TIFR_REG->OCF0 = 1;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    18ac:	10 92 b3 01 	sts	0x01B3, r1
}
    18b0:	27 96       	adiw	r28, 0x07	; 7
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <TIMER0_setDelay_ms_OVF>:


void TIMER0_setDelay_ms_OVF(u16 copy_u16Delay)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	2e 97       	sbiw	r28, 0x0e	; 14
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	9e 87       	std	Y+14, r25	; 0x0e
    18d8:	8d 87       	std	Y+13, r24	; 0x0d
	// Prepare Calculations to calculate OVERFLOWS
			float Tick_Time = 0;
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	89 87       	std	Y+9, r24	; 0x09
    18e4:	9a 87       	std	Y+10, r25	; 0x0a
    18e6:	ab 87       	std	Y+11, r26	; 0x0b
    18e8:	bc 87       	std	Y+12, r27	; 0x0c
			Tick_Time = TIMER0_PRESCALER / (float)F_CPU;
    18ea:	8d eb       	ldi	r24, 0xBD	; 189
    18ec:	97 e3       	ldi	r25, 0x37	; 55
    18ee:	a6 e8       	ldi	r26, 0x86	; 134
    18f0:	b4 e3       	ldi	r27, 0x34	; 52
    18f2:	89 87       	std	Y+9, r24	; 0x09
    18f4:	9a 87       	std	Y+10, r25	; 0x0a
    18f6:	ab 87       	std	Y+11, r26	; 0x0b
    18f8:	bc 87       	std	Y+12, r27	; 0x0c
			float Time_Overflow = Tick_Time * TIMER0_SIZE;
    18fa:	69 85       	ldd	r22, Y+9	; 0x09
    18fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    18fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1900:	9c 85       	ldd	r25, Y+12	; 0x0c
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	53 e4       	ldi	r21, 0x43	; 67
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8d 83       	std	Y+5, r24	; 0x05
    1914:	9e 83       	std	Y+6, r25	; 0x06
    1916:	af 83       	std	Y+7, r26	; 0x07
    1918:	b8 87       	std	Y+8, r27	; 0x08
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));
    191a:	8d 85       	ldd	r24, Y+13	; 0x0d
    191c:	9e 85       	ldd	r25, Y+14	; 0x0e
    191e:	cc 01       	movw	r24, r24
    1920:	a0 e0       	ldi	r26, 0x00	; 0
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	2d 81       	ldd	r18, Y+5	; 0x05
    1936:	3e 81       	ldd	r19, Y+6	; 0x06
    1938:	4f 81       	ldd	r20, Y+7	; 0x07
    193a:	58 85       	ldd	r21, Y+8	; 0x08
    193c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 7d 24 	call	0x48fa	; 0x48fa <ceil>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	9a 83       	std	Y+2, r25	; 0x02
    1954:	ab 83       	std	Y+3, r26	; 0x03
    1956:	bc 83       	std	Y+4, r27	; 0x04
    1958:	10 c0       	rjmp	.+32     	; 0x197a <TIMER0_setDelay_ms_OVF+0xb8>

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
				// This condition is a Busy Wait
				while(TIFR_REG->TOV0 == 0);
    195a:	e8 e5       	ldi	r30, 0x58	; 88
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	81 70       	andi	r24, 0x01	; 1
    1962:	88 23       	and	r24, r24
    1964:	d1 f3       	breq	.-12     	; 0x195a <TIMER0_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV0 = 1;
    1966:	e8 e5       	ldi	r30, 0x58	; 88
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	81 60       	ori	r24, 0x01	; 1
    196e:	80 83       	st	Z, r24
				overFlowCounter++;
    1970:	80 91 b4 01 	lds	r24, 0x01B4
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	80 93 b4 01 	sts	0x01B4, r24
			float Time_Overflow = Tick_Time * TIMER0_SIZE;
			float Number_Overflow = ceil((copy_u16Delay) / (Time_Overflow));

			static u8 overFlowCounter = 0;

			while (overFlowCounter != Number_Overflow) {
    197a:	80 91 b4 01 	lds	r24, 0x01B4
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	aa 27       	eor	r26, r26
    1984:	97 fd       	sbrc	r25, 7
    1986:	a0 95       	com	r26
    1988:	ba 2f       	mov	r27, r26
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	29 81       	ldd	r18, Y+1	; 0x01
    199c:	3a 81       	ldd	r19, Y+2	; 0x02
    199e:	4b 81       	ldd	r20, Y+3	; 0x03
    19a0:	5c 81       	ldd	r21, Y+4	; 0x04
    19a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    19a6:	88 23       	and	r24, r24
    19a8:	c1 f6       	brne	.-80     	; 0x195a <TIMER0_setDelay_ms_OVF+0x98>

				// Clear the overflow flag
				TIFR_REG->TOV0 = 1;
				overFlowCounter++;
			}
			overFlowCounter = 0;
    19aa:	10 92 b4 01 	sts	0x01B4, r1
}
    19ae:	2e 96       	adiw	r28, 0x0e	; 14
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <DutyCycle_ADC_Mapping>:

u16 DutyCycle_ADC_Mapping(u16 copy_u16Data)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <DutyCycle_ADC_Mapping+0x6>
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	9b 83       	std	Y+3, r25	; 0x03
    19ce:	8a 83       	std	Y+2, r24	; 0x02
	u8 dutyCycleValue = ((u32)copy_u16Data * 100) / 1023;
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	9b 81       	ldd	r25, Y+3	; 0x03
    19d4:	cc 01       	movw	r24, r24
    19d6:	a0 e0       	ldi	r26, 0x00	; 0
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	24 e6       	ldi	r18, 0x64	; 100
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	bc 01       	movw	r22, r24
    19e4:	cd 01       	movw	r24, r26
    19e6:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__mulsi3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	2f ef       	ldi	r18, 0xFF	; 255
    19f0:	33 e0       	ldi	r19, 0x03	; 3
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 03 24 	call	0x4806	; 0x4806 <__udivmodsi4>
    19fe:	da 01       	movw	r26, r20
    1a00:	c9 01       	movw	r24, r18
    1a02:	89 83       	std	Y+1, r24	; 0x01
	return  dutyCycleValue ;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	88 2f       	mov	r24, r24
    1a08:	90 e0       	ldi	r25, 0x00	; 0
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <TIMER0_CallBackFunction_COMP>:

void TIMER0_CallBackFunction_COMP(void (*Ptr_TIMER)(void))
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <TIMER0_CallBackFunction_COMP+0x6>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	9a 83       	std	Y+2, r25	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER0_COMP = Ptr_TIMER;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	90 93 c8 01 	sts	0x01C8, r25
    1a2c:	80 93 c7 01 	sts	0x01C7, r24
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <TIMER0_CallBackFunction_OVF>:

void TIMER0_CallBackFunction_OVF(void (*Ptr_TIMER)(void))
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <TIMER0_CallBackFunction_OVF+0x6>
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_TIMER0_OVF = Ptr_TIMER;
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4c:	90 93 ca 01 	sts	0x01CA, r25
    1a50:	80 93 c9 01 	sts	0x01C9, r24
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <__vector_10>:


void __vector_10(void) __attribute__((signal, used));
void __vector_10(void) {
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
    1a68:	2f 93       	push	r18
    1a6a:	3f 93       	push	r19
    1a6c:	4f 93       	push	r20
    1a6e:	5f 93       	push	r21
    1a70:	6f 93       	push	r22
    1a72:	7f 93       	push	r23
    1a74:	8f 93       	push	r24
    1a76:	9f 93       	push	r25
    1a78:	af 93       	push	r26
    1a7a:	bf 93       	push	r27
    1a7c:	ef 93       	push	r30
    1a7e:	ff 93       	push	r31
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER0_COMP != NULL) {
    1a88:	80 91 c7 01 	lds	r24, 0x01C7
    1a8c:	90 91 c8 01 	lds	r25, 0x01C8
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	29 f0       	breq	.+10     	; 0x1a9e <__vector_10+0x40>
		CallBackPtr_TIMER0_COMP();
    1a94:	e0 91 c7 01 	lds	r30, 0x01C7
    1a98:	f0 91 c8 01 	lds	r31, 0x01C8
    1a9c:	09 95       	icall
	}
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	ff 91       	pop	r31
    1aa4:	ef 91       	pop	r30
    1aa6:	bf 91       	pop	r27
    1aa8:	af 91       	pop	r26
    1aaa:	9f 91       	pop	r25
    1aac:	8f 91       	pop	r24
    1aae:	7f 91       	pop	r23
    1ab0:	6f 91       	pop	r22
    1ab2:	5f 91       	pop	r21
    1ab4:	4f 91       	pop	r20
    1ab6:	3f 91       	pop	r19
    1ab8:	2f 91       	pop	r18
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	0f 90       	pop	r0
    1ac0:	1f 90       	pop	r1
    1ac2:	18 95       	reti

00001ac4 <__vector_11>:

void __vector_11(void) __attribute__((signal, used));
void __vector_11(void) {
    1ac4:	1f 92       	push	r1
    1ac6:	0f 92       	push	r0
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	0f 92       	push	r0
    1acc:	11 24       	eor	r1, r1
    1ace:	2f 93       	push	r18
    1ad0:	3f 93       	push	r19
    1ad2:	4f 93       	push	r20
    1ad4:	5f 93       	push	r21
    1ad6:	6f 93       	push	r22
    1ad8:	7f 93       	push	r23
    1ada:	8f 93       	push	r24
    1adc:	9f 93       	push	r25
    1ade:	af 93       	push	r26
    1ae0:	bf 93       	push	r27
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_TIMER0_OVF != NULL) {
    1aee:	80 91 c9 01 	lds	r24, 0x01C9
    1af2:	90 91 ca 01 	lds	r25, 0x01CA
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	29 f0       	breq	.+10     	; 0x1b04 <__vector_11+0x40>
		CallBackPtr_TIMER0_OVF();
    1afa:	e0 91 c9 01 	lds	r30, 0x01C9
    1afe:	f0 91 ca 01 	lds	r31, 0x01CA
    1b02:	09 95       	icall
	}
}
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <GPIO_voidSetPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPinDirection(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinDIR) {
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <GPIO_voidSetPinDirection+0x6>
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <GPIO_voidSetPinDirection+0x8>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <GPIO_voidSetPinDirection+0xa>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	8a 83       	std	Y+2, r24	; 0x02
    1b3a:	6b 83       	std	Y+3, r22	; 0x03
    1b3c:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
    1b3e:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	88 30       	cpi	r24, 0x08	; 8
    1b44:	18 f0       	brcs	.+6      	; 0x1b4c <GPIO_voidSetPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	e1 c0       	rjmp	.+450    	; 0x1d0e <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	84 30       	cpi	r24, 0x04	; 4
    1b50:	18 f0       	brcs	.+6      	; 0x1b58 <GPIO_voidSetPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	db c0       	rjmp	.+438    	; 0x1d0e <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	88 23       	and	r24, r24
    1b5c:	31 f0       	breq	.+12     	; 0x1b6a <GPIO_voidSetPinDirection+0x40>
    1b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <GPIO_voidSetPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1b64:	83 e0       	ldi	r24, 0x03	; 3
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	d2 c0       	rjmp	.+420    	; 0x1d0e <GPIO_voidSetPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	3e 83       	std	Y+6, r19	; 0x06
    1b72:	2d 83       	std	Y+5, r18	; 0x05
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <GPIO_voidSetPinDirection+0x56>
    1b7e:	43 c0       	rjmp	.+134    	; 0x1c06 <GPIO_voidSetPinDirection+0xdc>
    1b80:	2d 81       	ldd	r18, Y+5	; 0x05
    1b82:	3e 81       	ldd	r19, Y+6	; 0x06
    1b84:	22 30       	cpi	r18, 0x02	; 2
    1b86:	31 05       	cpc	r19, r1
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <GPIO_voidSetPinDirection+0x6a>
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	71 f0       	breq	.+28     	; 0x1bae <GPIO_voidSetPinDirection+0x84>
    1b92:	bc c0       	rjmp	.+376    	; 0x1d0c <GPIO_voidSetPinDirection+0x1e2>
    1b94:	2d 81       	ldd	r18, Y+5	; 0x05
    1b96:	3e 81       	ldd	r19, Y+6	; 0x06
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <GPIO_voidSetPinDirection+0x76>
    1b9e:	5f c0       	rjmp	.+190    	; 0x1c5e <GPIO_voidSetPinDirection+0x134>
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <GPIO_voidSetPinDirection+0x82>
    1baa:	85 c0       	rjmp	.+266    	; 0x1cb6 <GPIO_voidSetPinDirection+0x18c>
    1bac:	af c0       	rjmp	.+350    	; 0x1d0c <GPIO_voidSetPinDirection+0x1e2>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	a1 f4       	brne	.+40     	; 0x1bdc <GPIO_voidSetPinDirection+0xb2>
					SET_BIT(DDRA_REG, copy_u8pinID);
    1bb4:	aa e3       	ldi	r26, 0x3A	; 58
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	ea e3       	ldi	r30, 0x3A	; 58
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <GPIO_voidSetPinDirection+0xa8>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <GPIO_voidSetPinDirection+0xa4>
    1bd6:	84 2b       	or	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	98 c0       	rjmp	.+304    	; 0x1d0c <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
    1bdc:	aa e3       	ldi	r26, 0x3A	; 58
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	ea e3       	ldi	r30, 0x3A	; 58
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <GPIO_voidSetPinDirection+0xd0>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <GPIO_voidSetPinDirection+0xcc>
    1bfe:	80 95       	com	r24
    1c00:	84 23       	and	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	83 c0       	rjmp	.+262    	; 0x1d0c <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	a1 f4       	brne	.+40     	; 0x1c34 <GPIO_voidSetPinDirection+0x10a>
					SET_BIT(DDRB_REG, copy_u8pinID);
    1c0c:	a7 e3       	ldi	r26, 0x37	; 55
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e7 e3       	ldi	r30, 0x37	; 55
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <GPIO_voidSetPinDirection+0x100>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <GPIO_voidSetPinDirection+0xfc>
    1c2e:	84 2b       	or	r24, r20
    1c30:	8c 93       	st	X, r24
    1c32:	6c c0       	rjmp	.+216    	; 0x1d0c <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
    1c34:	a7 e3       	ldi	r26, 0x37	; 55
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e7 e3       	ldi	r30, 0x37	; 55
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	02 2e       	mov	r0, r18
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <GPIO_voidSetPinDirection+0x128>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	0a 94       	dec	r0
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <GPIO_voidSetPinDirection+0x124>
    1c56:	80 95       	com	r24
    1c58:	84 23       	and	r24, r20
    1c5a:	8c 93       	st	X, r24
    1c5c:	57 c0       	rjmp	.+174    	; 0x1d0c <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	a1 f4       	brne	.+40     	; 0x1c8c <GPIO_voidSetPinDirection+0x162>
					SET_BIT(DDRC_REG, copy_u8pinID);
    1c64:	a4 e3       	ldi	r26, 0x34	; 52
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e4 e3       	ldi	r30, 0x34	; 52
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <GPIO_voidSetPinDirection+0x158>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <GPIO_voidSetPinDirection+0x154>
    1c86:	84 2b       	or	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	40 c0       	rjmp	.+128    	; 0x1d0c <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
    1c8c:	a4 e3       	ldi	r26, 0x34	; 52
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e4 e3       	ldi	r30, 0x34	; 52
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <GPIO_voidSetPinDirection+0x180>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <GPIO_voidSetPinDirection+0x17c>
    1cae:	80 95       	com	r24
    1cb0:	84 23       	and	r24, r20
    1cb2:	8c 93       	st	X, r24
    1cb4:	2b c0       	rjmp	.+86     	; 0x1d0c <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	a1 f4       	brne	.+40     	; 0x1ce4 <GPIO_voidSetPinDirection+0x1ba>
					SET_BIT(DDRD_REG, copy_u8pinID);
    1cbc:	a1 e3       	ldi	r26, 0x31	; 49
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e1 e3       	ldi	r30, 0x31	; 49
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <GPIO_voidSetPinDirection+0x1b0>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <GPIO_voidSetPinDirection+0x1ac>
    1cde:	84 2b       	or	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
    1ce4:	a1 e3       	ldi	r26, 0x31	; 49
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e1 e3       	ldi	r30, 0x31	; 49
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <GPIO_voidSetPinDirection+0x1d8>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <GPIO_voidSetPinDirection+0x1d4>
    1d06:	80 95       	com	r24
    1d08:	84 23       	and	r24, r20
    1d0a:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1d0c:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d10:	26 96       	adiw	r28, 0x06	; 6
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <GPIO_voidSetPinValue>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_voidSetPinValue(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinValue)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <GPIO_voidSetPinValue+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <GPIO_voidSetPinValue+0x8>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <GPIO_voidSetPinValue+0xa>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	8a 83       	std	Y+2, r24	; 0x02
    1d32:	6b 83       	std	Y+3, r22	; 0x03
    1d34:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
    1d36:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	88 30       	cpi	r24, 0x08	; 8
    1d3c:	18 f0       	brcs	.+6      	; 0x1d44 <GPIO_voidSetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	e1 c0       	rjmp	.+450    	; 0x1f06 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	84 30       	cpi	r24, 0x04	; 4
    1d48:	18 f0       	brcs	.+6      	; 0x1d50 <GPIO_voidSetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	db c0       	rjmp	.+438    	; 0x1f06 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
    1d50:	8c 81       	ldd	r24, Y+4	; 0x04
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <GPIO_voidSetPinValue+0x40>
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	88 23       	and	r24, r24
    1d5a:	19 f0       	breq	.+6      	; 0x1d62 <GPIO_voidSetPinValue+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1d5c:	83 e0       	ldi	r24, 0x03	; 3
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	d2 c0       	rjmp	.+420    	; 0x1f06 <GPIO_voidSetPinValue+0x1e4>
	}
	else {
		switch(copy_u8portID)
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	3e 83       	std	Y+6, r19	; 0x06
    1d6a:	2d 83       	std	Y+5, r18	; 0x05
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	91 05       	cpc	r25, r1
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <GPIO_voidSetPinValue+0x56>
    1d76:	43 c0       	rjmp	.+134    	; 0x1dfe <GPIO_voidSetPinValue+0xdc>
    1d78:	2d 81       	ldd	r18, Y+5	; 0x05
    1d7a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d7c:	22 30       	cpi	r18, 0x02	; 2
    1d7e:	31 05       	cpc	r19, r1
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <GPIO_voidSetPinValue+0x6a>
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	71 f0       	breq	.+28     	; 0x1da6 <GPIO_voidSetPinValue+0x84>
    1d8a:	bc c0       	rjmp	.+376    	; 0x1f04 <GPIO_voidSetPinValue+0x1e2>
    1d8c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d8e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d90:	22 30       	cpi	r18, 0x02	; 2
    1d92:	31 05       	cpc	r19, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <GPIO_voidSetPinValue+0x76>
    1d96:	5f c0       	rjmp	.+190    	; 0x1e56 <GPIO_voidSetPinValue+0x134>
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	91 05       	cpc	r25, r1
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <GPIO_voidSetPinValue+0x82>
    1da2:	85 c0       	rjmp	.+266    	; 0x1eae <GPIO_voidSetPinValue+0x18c>
    1da4:	af c0       	rjmp	.+350    	; 0x1f04 <GPIO_voidSetPinValue+0x1e2>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	a1 f4       	brne	.+40     	; 0x1dd4 <GPIO_voidSetPinValue+0xb2>
					SET_BIT(PORTA_REG ,copy_u8pinID);
    1dac:	ab e3       	ldi	r26, 0x3B	; 59
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	eb e3       	ldi	r30, 0x3B	; 59
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <GPIO_voidSetPinValue+0xa8>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <GPIO_voidSetPinValue+0xa4>
    1dce:	84 2b       	or	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	98 c0       	rjmp	.+304    	; 0x1f04 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
    1dd4:	ab e3       	ldi	r26, 0x3B	; 59
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	eb e3       	ldi	r30, 0x3B	; 59
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <GPIO_voidSetPinValue+0xd0>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <GPIO_voidSetPinValue+0xcc>
    1df6:	80 95       	com	r24
    1df8:	84 23       	and	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	83 c0       	rjmp	.+262    	; 0x1f04 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	a1 f4       	brne	.+40     	; 0x1e2c <GPIO_voidSetPinValue+0x10a>
					SET_BIT(PORTB_REG ,copy_u8pinID);
    1e04:	a8 e3       	ldi	r26, 0x38	; 56
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e8 e3       	ldi	r30, 0x38	; 56
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <GPIO_voidSetPinValue+0x100>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <GPIO_voidSetPinValue+0xfc>
    1e26:	84 2b       	or	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	6c c0       	rjmp	.+216    	; 0x1f04 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
    1e2c:	a8 e3       	ldi	r26, 0x38	; 56
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e8 e3       	ldi	r30, 0x38	; 56
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <GPIO_voidSetPinValue+0x128>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <GPIO_voidSetPinValue+0x124>
    1e4e:	80 95       	com	r24
    1e50:	84 23       	and	r24, r20
    1e52:	8c 93       	st	X, r24
    1e54:	57 c0       	rjmp	.+174    	; 0x1f04 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	a1 f4       	brne	.+40     	; 0x1e84 <GPIO_voidSetPinValue+0x162>
					SET_BIT(PORTC_REG ,copy_u8pinID);
    1e5c:	a5 e3       	ldi	r26, 0x35	; 53
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e5 e3       	ldi	r30, 0x35	; 53
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <GPIO_voidSetPinValue+0x158>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <GPIO_voidSetPinValue+0x154>
    1e7e:	84 2b       	or	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	40 c0       	rjmp	.+128    	; 0x1f04 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
    1e84:	a5 e3       	ldi	r26, 0x35	; 53
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e5 e3       	ldi	r30, 0x35	; 53
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <GPIO_voidSetPinValue+0x180>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <GPIO_voidSetPinValue+0x17c>
    1ea6:	80 95       	com	r24
    1ea8:	84 23       	and	r24, r20
    1eaa:	8c 93       	st	X, r24
    1eac:	2b c0       	rjmp	.+86     	; 0x1f04 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	a1 f4       	brne	.+40     	; 0x1edc <GPIO_voidSetPinValue+0x1ba>
					SET_BIT(PORTD_REG ,copy_u8pinID);
    1eb4:	a2 e3       	ldi	r26, 0x32	; 50
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e2 e3       	ldi	r30, 0x32	; 50
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	02 2e       	mov	r0, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <GPIO_voidSetPinValue+0x1b0>
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	0a 94       	dec	r0
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <GPIO_voidSetPinValue+0x1ac>
    1ed6:	84 2b       	or	r24, r20
    1ed8:	8c 93       	st	X, r24
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
    1edc:	a2 e3       	ldi	r26, 0x32	; 50
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e2 e3       	ldi	r30, 0x32	; 50
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 2e       	mov	r0, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <GPIO_voidSetPinValue+0x1d8>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <GPIO_voidSetPinValue+0x1d4>
    1efe:	80 95       	com	r24
    1f00:	84 23       	and	r24, r20
    1f02:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1f04:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f08:	26 96       	adiw	r28, 0x06	; 6
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <GPIO_u8GetPinValue>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
u8 GPIO_u8GetPinValue(u8 copy_u8portID, u8 copy_u8pinID) {
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <GPIO_u8GetPinValue+0x6>
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <GPIO_u8GetPinValue+0x8>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <GPIO_u8GetPinValue+0xa>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	8b 83       	std	Y+3, r24	; 0x03
    1f2a:	6c 83       	std	Y+4, r22	; 0x04
	u8 GPIO_Driver_Checker = 0;
    1f2c:	1a 82       	std	Y+2, r1	; 0x02
	u8 pin_value = LOGIC_LOW;
    1f2e:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	88 30       	cpi	r24, 0x08	; 8
    1f34:	18 f0       	brcs	.+6      	; 0x1f3c <GPIO_u8GetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    1f3a:	87 c0       	rjmp	.+270    	; 0x204a <GPIO_u8GetPinValue+0x130>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	84 30       	cpi	r24, 0x04	; 4
    1f40:	18 f0       	brcs	.+6      	; 0x1f48 <GPIO_u8GetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	8a 83       	std	Y+2, r24	; 0x02
    1f46:	81 c0       	rjmp	.+258    	; 0x204a <GPIO_u8GetPinValue+0x130>
	}
	else {
		/* Read the pin value as required */
		switch(copy_u8portID) {
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3e 83       	std	Y+6, r19	; 0x06
    1f50:	2d 83       	std	Y+5, r18	; 0x05
    1f52:	4d 81       	ldd	r20, Y+5	; 0x05
    1f54:	5e 81       	ldd	r21, Y+6	; 0x06
    1f56:	41 30       	cpi	r20, 0x01	; 1
    1f58:	51 05       	cpc	r21, r1
    1f5a:	79 f1       	breq	.+94     	; 0x1fba <GPIO_u8GetPinValue+0xa0>
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	82 30       	cpi	r24, 0x02	; 2
    1f62:	91 05       	cpc	r25, r1
    1f64:	34 f4       	brge	.+12     	; 0x1f72 <GPIO_u8GetPinValue+0x58>
    1f66:	2d 81       	ldd	r18, Y+5	; 0x05
    1f68:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6a:	21 15       	cp	r18, r1
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	69 f0       	breq	.+26     	; 0x1f8a <GPIO_u8GetPinValue+0x70>
    1f70:	6b c0       	rjmp	.+214    	; 0x2048 <GPIO_u8GetPinValue+0x12e>
    1f72:	4d 81       	ldd	r20, Y+5	; 0x05
    1f74:	5e 81       	ldd	r21, Y+6	; 0x06
    1f76:	42 30       	cpi	r20, 0x02	; 2
    1f78:	51 05       	cpc	r21, r1
    1f7a:	b9 f1       	breq	.+110    	; 0x1fea <GPIO_u8GetPinValue+0xd0>
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	83 30       	cpi	r24, 0x03	; 3
    1f82:	91 05       	cpc	r25, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <GPIO_u8GetPinValue+0x6e>
    1f86:	49 c0       	rjmp	.+146    	; 0x201a <GPIO_u8GetPinValue+0x100>
    1f88:	5f c0       	rjmp	.+190    	; 0x2048 <GPIO_u8GetPinValue+0x12e>
			case PORT_A:
				// Checks if the bit equals '1' or not
				if(BIT_IS_SET(PINA_REG, copy_u8pinID)) {
    1f8a:	e9 e3       	ldi	r30, 0x39	; 57
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8c 81       	ldd	r24, Y+4	; 0x04
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a9 01       	movw	r20, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <GPIO_u8GetPinValue+0x88>
    1f9e:	55 95       	asr	r21
    1fa0:	47 95       	ror	r20
    1fa2:	8a 95       	dec	r24
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <GPIO_u8GetPinValue+0x84>
    1fa6:	ca 01       	movw	r24, r20
    1fa8:	81 70       	andi	r24, 0x01	; 1
    1faa:	90 70       	andi	r25, 0x00	; 0
    1fac:	88 23       	and	r24, r24
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <GPIO_u8GetPinValue+0x9c>
					pin_value = LOGIC_HIGH;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	89 83       	std	Y+1, r24	; 0x01
    1fb4:	49 c0       	rjmp	.+146    	; 0x2048 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1fb6:	19 82       	std	Y+1, r1	; 0x01
    1fb8:	47 c0       	rjmp	.+142    	; 0x2048 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_B:
				if(BIT_IS_SET(PINB_REG,copy_u8pinID)) {
    1fba:	e6 e3       	ldi	r30, 0x36	; 54
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a9 01       	movw	r20, r18
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <GPIO_u8GetPinValue+0xb8>
    1fce:	55 95       	asr	r21
    1fd0:	47 95       	ror	r20
    1fd2:	8a 95       	dec	r24
    1fd4:	e2 f7       	brpl	.-8      	; 0x1fce <GPIO_u8GetPinValue+0xb4>
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	81 70       	andi	r24, 0x01	; 1
    1fda:	90 70       	andi	r25, 0x00	; 0
    1fdc:	88 23       	and	r24, r24
    1fde:	19 f0       	breq	.+6      	; 0x1fe6 <GPIO_u8GetPinValue+0xcc>
					pin_value = LOGIC_HIGH;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	31 c0       	rjmp	.+98     	; 0x2048 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1fe6:	19 82       	std	Y+1, r1	; 0x01
    1fe8:	2f c0       	rjmp	.+94     	; 0x2048 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_C:
				if(BIT_IS_SET(PINC_REG,copy_u8pinID)) {
    1fea:	e3 e3       	ldi	r30, 0x33	; 51
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	88 2f       	mov	r24, r24
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a9 01       	movw	r20, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <GPIO_u8GetPinValue+0xe8>
    1ffe:	55 95       	asr	r21
    2000:	47 95       	ror	r20
    2002:	8a 95       	dec	r24
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <GPIO_u8GetPinValue+0xe4>
    2006:	ca 01       	movw	r24, r20
    2008:	81 70       	andi	r24, 0x01	; 1
    200a:	90 70       	andi	r25, 0x00	; 0
    200c:	88 23       	and	r24, r24
    200e:	19 f0       	breq	.+6      	; 0x2016 <GPIO_u8GetPinValue+0xfc>
					pin_value = LOGIC_HIGH;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	19 c0       	rjmp	.+50     	; 0x2048 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    2016:	19 82       	std	Y+1, r1	; 0x01
    2018:	17 c0       	rjmp	.+46     	; 0x2048 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_D:
				if(BIT_IS_SET(PIND_REG,copy_u8pinID)) {
    201a:	e0 e3       	ldi	r30, 0x30	; 48
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a9 01       	movw	r20, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <GPIO_u8GetPinValue+0x118>
    202e:	55 95       	asr	r21
    2030:	47 95       	ror	r20
    2032:	8a 95       	dec	r24
    2034:	e2 f7       	brpl	.-8      	; 0x202e <GPIO_u8GetPinValue+0x114>
    2036:	ca 01       	movw	r24, r20
    2038:	81 70       	andi	r24, 0x01	; 1
    203a:	90 70       	andi	r25, 0x00	; 0
    203c:	88 23       	and	r24, r24
    203e:	19 f0       	breq	.+6      	; 0x2046 <GPIO_u8GetPinValue+0x12c>
					pin_value = LOGIC_HIGH;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    2046:	19 82       	std	Y+1, r1	; 0x01
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2048:	1a 82       	std	Y+2, r1	; 0x02
	}
	return pin_value;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
}
    204c:	26 96       	adiw	r28, 0x06	; 6
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <GPIO_voidTogglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_voidTogglePin(u8 copy_u8portID, u8 copy_u8pinID) {
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <GPIO_voidTogglePin+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <GPIO_voidTogglePin+0x8>
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	8a 83       	std	Y+2, r24	; 0x02
    206e:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    2070:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	88 30       	cpi	r24, 0x08	; 8
    2076:	18 f0       	brcs	.+6      	; 0x207e <GPIO_voidTogglePin+0x20>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	75 c0       	rjmp	.+234    	; 0x2168 <GPIO_voidTogglePin+0x10a>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	18 f0       	brcs	.+6      	; 0x208a <GPIO_voidTogglePin+0x2c>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	6f c0       	rjmp	.+222    	; 0x2168 <GPIO_voidTogglePin+0x10a>
	}
	else {
		switch(copy_u8portID) {
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	3d 83       	std	Y+5, r19	; 0x05
    2092:	2c 83       	std	Y+4, r18	; 0x04
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	9d 81       	ldd	r25, Y+5	; 0x05
    2098:	81 30       	cpi	r24, 0x01	; 1
    209a:	91 05       	cpc	r25, r1
    209c:	49 f1       	breq	.+82     	; 0x20f0 <GPIO_voidTogglePin+0x92>
    209e:	2c 81       	ldd	r18, Y+4	; 0x04
    20a0:	3d 81       	ldd	r19, Y+5	; 0x05
    20a2:	22 30       	cpi	r18, 0x02	; 2
    20a4:	31 05       	cpc	r19, r1
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <GPIO_voidTogglePin+0x54>
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	61 f0       	breq	.+24     	; 0x20c8 <GPIO_voidTogglePin+0x6a>
    20b0:	5a c0       	rjmp	.+180    	; 0x2166 <GPIO_voidTogglePin+0x108>
    20b2:	2c 81       	ldd	r18, Y+4	; 0x04
    20b4:	3d 81       	ldd	r19, Y+5	; 0x05
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	71 f1       	breq	.+92     	; 0x2118 <GPIO_voidTogglePin+0xba>
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	9d 81       	ldd	r25, Y+5	; 0x05
    20c0:	83 30       	cpi	r24, 0x03	; 3
    20c2:	91 05       	cpc	r25, r1
    20c4:	e9 f1       	breq	.+122    	; 0x2140 <GPIO_voidTogglePin+0xe2>
    20c6:	4f c0       	rjmp	.+158    	; 0x2166 <GPIO_voidTogglePin+0x108>
			case PORT_A:
				TOG_BIT(PORTA_REG, copy_u8pinID);
    20c8:	ab e3       	ldi	r26, 0x3B	; 59
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	eb e3       	ldi	r30, 0x3B	; 59
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	48 2f       	mov	r20, r24
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	02 2e       	mov	r0, r18
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <GPIO_voidTogglePin+0x88>
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	0a 94       	dec	r0
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <GPIO_voidTogglePin+0x84>
    20ea:	84 27       	eor	r24, r20
    20ec:	8c 93       	st	X, r24
    20ee:	3b c0       	rjmp	.+118    	; 0x2166 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_B:
				TOG_BIT(PORTB_REG, copy_u8pinID);
    20f0:	a8 e3       	ldi	r26, 0x38	; 56
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e8 e3       	ldi	r30, 0x38	; 56
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	48 2f       	mov	r20, r24
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	02 2e       	mov	r0, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <GPIO_voidTogglePin+0xb0>
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	0a 94       	dec	r0
    2110:	e2 f7       	brpl	.-8      	; 0x210a <GPIO_voidTogglePin+0xac>
    2112:	84 27       	eor	r24, r20
    2114:	8c 93       	st	X, r24
    2116:	27 c0       	rjmp	.+78     	; 0x2166 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_C:
				TOG_BIT(PORTC_REG, copy_u8pinID);
    2118:	a5 e3       	ldi	r26, 0x35	; 53
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e5 e3       	ldi	r30, 0x35	; 53
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	48 2f       	mov	r20, r24
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	02 2e       	mov	r0, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <GPIO_voidTogglePin+0xd8>
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	0a 94       	dec	r0
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <GPIO_voidTogglePin+0xd4>
    213a:	84 27       	eor	r24, r20
    213c:	8c 93       	st	X, r24
    213e:	13 c0       	rjmp	.+38     	; 0x2166 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_D:
				TOG_BIT(PORTD_REG, copy_u8pinID);
    2140:	a2 e3       	ldi	r26, 0x32	; 50
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e2 e3       	ldi	r30, 0x32	; 50
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	48 2f       	mov	r20, r24
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 2e       	mov	r0, r18
    2158:	02 c0       	rjmp	.+4      	; 0x215e <GPIO_voidTogglePin+0x100>
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	0a 94       	dec	r0
    2160:	e2 f7       	brpl	.-8      	; 0x215a <GPIO_voidTogglePin+0xfc>
    2162:	84 27       	eor	r24, r20
    2164:	8c 93       	st	X, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2166:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2168:	89 81       	ldd	r24, Y+1	; 0x01
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <GPIO_voidSetPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortDirection(u8 copy_u8portID, u8 copy_u8portDIR) {
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <GPIO_voidSetPortDirection+0x6>
    2180:	00 d0       	rcall	.+0      	; 0x2182 <GPIO_voidSetPortDirection+0x8>
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	8a 83       	std	Y+2, r24	; 0x02
    218a:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    218c:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	84 30       	cpi	r24, 0x04	; 4
    2192:	18 f0       	brcs	.+6      	; 0x219a <GPIO_voidSetPortDirection+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	3c c0       	rjmp	.+120    	; 0x2212 <GPIO_voidSetPortDirection+0x98>
	}
	else if((copy_u8portDIR != PORT_INPUT) && (copy_u8portDIR != PORT_OUTPUT)) {
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	88 23       	and	r24, r24
    219e:	31 f0       	breq	.+12     	; 0x21ac <GPIO_voidSetPortDirection+0x32>
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	8f 3f       	cpi	r24, 0xFF	; 255
    21a4:	19 f0       	breq	.+6      	; 0x21ac <GPIO_voidSetPortDirection+0x32>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	33 c0       	rjmp	.+102    	; 0x2212 <GPIO_voidSetPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	3d 83       	std	Y+5, r19	; 0x05
    21b4:	2c 83       	std	Y+4, r18	; 0x04
    21b6:	8c 81       	ldd	r24, Y+4	; 0x04
    21b8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	91 05       	cpc	r25, r1
    21be:	d1 f0       	breq	.+52     	; 0x21f4 <GPIO_voidSetPortDirection+0x7a>
    21c0:	2c 81       	ldd	r18, Y+4	; 0x04
    21c2:	3d 81       	ldd	r19, Y+5	; 0x05
    21c4:	22 30       	cpi	r18, 0x02	; 2
    21c6:	31 05       	cpc	r19, r1
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <GPIO_voidSetPortDirection+0x5a>
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	9d 81       	ldd	r25, Y+5	; 0x05
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	61 f0       	breq	.+24     	; 0x21ea <GPIO_voidSetPortDirection+0x70>
    21d2:	1e c0       	rjmp	.+60     	; 0x2210 <GPIO_voidSetPortDirection+0x96>
    21d4:	2c 81       	ldd	r18, Y+4	; 0x04
    21d6:	3d 81       	ldd	r19, Y+5	; 0x05
    21d8:	22 30       	cpi	r18, 0x02	; 2
    21da:	31 05       	cpc	r19, r1
    21dc:	81 f0       	breq	.+32     	; 0x21fe <GPIO_voidSetPortDirection+0x84>
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	91 05       	cpc	r25, r1
    21e6:	81 f0       	breq	.+32     	; 0x2208 <GPIO_voidSetPortDirection+0x8e>
    21e8:	13 c0       	rjmp	.+38     	; 0x2210 <GPIO_voidSetPortDirection+0x96>
			case PORT_A:
				DDRA_REG = copy_u8portDIR;
    21ea:	ea e3       	ldi	r30, 0x3A	; 58
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	80 83       	st	Z, r24
    21f2:	0e c0       	rjmp	.+28     	; 0x2210 <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_B:
				DDRB_REG = copy_u8portDIR;
    21f4:	e7 e3       	ldi	r30, 0x37	; 55
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	80 83       	st	Z, r24
    21fc:	09 c0       	rjmp	.+18     	; 0x2210 <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_C:
				DDRC_REG = copy_u8portDIR;
    21fe:	e4 e3       	ldi	r30, 0x34	; 52
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	80 83       	st	Z, r24
    2206:	04 c0       	rjmp	.+8      	; 0x2210 <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_D:
				DDRD_REG = copy_u8portDIR;
    2208:	e1 e3       	ldi	r30, 0x31	; 49
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2210:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <GPIO_voidSetPortValue>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortValue(u8 copy_u8portID, u8 copy_u8portValue) {
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	00 d0       	rcall	.+0      	; 0x222a <GPIO_voidSetPortValue+0x6>
    222a:	00 d0       	rcall	.+0      	; 0x222c <GPIO_voidSetPortValue+0x8>
    222c:	0f 92       	push	r0
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	8a 83       	std	Y+2, r24	; 0x02
    2234:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    2236:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	84 30       	cpi	r24, 0x04	; 4
    223c:	18 f0       	brcs	.+6      	; 0x2244 <GPIO_voidSetPortValue+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	33 c0       	rjmp	.+102    	; 0x22aa <GPIO_voidSetPortValue+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	3d 83       	std	Y+5, r19	; 0x05
    224c:	2c 83       	std	Y+4, r18	; 0x04
    224e:	8c 81       	ldd	r24, Y+4	; 0x04
    2250:	9d 81       	ldd	r25, Y+5	; 0x05
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	91 05       	cpc	r25, r1
    2256:	d1 f0       	breq	.+52     	; 0x228c <GPIO_voidSetPortValue+0x68>
    2258:	2c 81       	ldd	r18, Y+4	; 0x04
    225a:	3d 81       	ldd	r19, Y+5	; 0x05
    225c:	22 30       	cpi	r18, 0x02	; 2
    225e:	31 05       	cpc	r19, r1
    2260:	2c f4       	brge	.+10     	; 0x226c <GPIO_voidSetPortValue+0x48>
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	9d 81       	ldd	r25, Y+5	; 0x05
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	61 f0       	breq	.+24     	; 0x2282 <GPIO_voidSetPortValue+0x5e>
    226a:	1e c0       	rjmp	.+60     	; 0x22a8 <GPIO_voidSetPortValue+0x84>
    226c:	2c 81       	ldd	r18, Y+4	; 0x04
    226e:	3d 81       	ldd	r19, Y+5	; 0x05
    2270:	22 30       	cpi	r18, 0x02	; 2
    2272:	31 05       	cpc	r19, r1
    2274:	81 f0       	breq	.+32     	; 0x2296 <GPIO_voidSetPortValue+0x72>
    2276:	8c 81       	ldd	r24, Y+4	; 0x04
    2278:	9d 81       	ldd	r25, Y+5	; 0x05
    227a:	83 30       	cpi	r24, 0x03	; 3
    227c:	91 05       	cpc	r25, r1
    227e:	81 f0       	breq	.+32     	; 0x22a0 <GPIO_voidSetPortValue+0x7c>
    2280:	13 c0       	rjmp	.+38     	; 0x22a8 <GPIO_voidSetPortValue+0x84>
			case PORT_A:
				PORTA_REG = copy_u8portValue;
    2282:	eb e3       	ldi	r30, 0x3B	; 59
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	80 83       	st	Z, r24
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_B:
				PORTB_REG = copy_u8portValue;
    228c:	e8 e3       	ldi	r30, 0x38	; 56
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	80 83       	st	Z, r24
    2294:	09 c0       	rjmp	.+18     	; 0x22a8 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_C:
				PORTC_REG = copy_u8portValue;
    2296:	e5 e3       	ldi	r30, 0x35	; 53
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	80 83       	st	Z, r24
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_D:
				PORTD_REG = copy_u8portValue;
    22a0:	e2 e3       	ldi	r30, 0x32	; 50
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    22a8:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <GPIO_u8GetPortValue>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_u8GetPortValue(u8 copy_u8portID) {
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <GPIO_u8GetPortValue+0x6>
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <GPIO_u8GetPortValue+0x8>
    22c4:	0f 92       	push	r0
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	8b 83       	std	Y+3, r24	; 0x03
	u8 value = LOGIC_LOW;
    22cc:	1a 82       	std	Y+2, r1	; 0x02
	u8 GPIO_Driver_Checker = 0;
    22ce:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	84 30       	cpi	r24, 0x04	; 4
    22d4:	18 f0       	brcs	.+6      	; 0x22dc <GPIO_u8GetPortValue+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    22d6:	82 e0       	ldi	r24, 0x02	; 2
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	33 c0       	rjmp	.+102    	; 0x2342 <GPIO_u8GetPortValue+0x86>
	}
	else {
		switch(copy_u8portID) {
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	3d 83       	std	Y+5, r19	; 0x05
    22e4:	2c 83       	std	Y+4, r18	; 0x04
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	81 30       	cpi	r24, 0x01	; 1
    22ec:	91 05       	cpc	r25, r1
    22ee:	d1 f0       	breq	.+52     	; 0x2324 <GPIO_u8GetPortValue+0x68>
    22f0:	2c 81       	ldd	r18, Y+4	; 0x04
    22f2:	3d 81       	ldd	r19, Y+5	; 0x05
    22f4:	22 30       	cpi	r18, 0x02	; 2
    22f6:	31 05       	cpc	r19, r1
    22f8:	2c f4       	brge	.+10     	; 0x2304 <GPIO_u8GetPortValue+0x48>
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	9d 81       	ldd	r25, Y+5	; 0x05
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	61 f0       	breq	.+24     	; 0x231a <GPIO_u8GetPortValue+0x5e>
    2302:	1e c0       	rjmp	.+60     	; 0x2340 <GPIO_u8GetPortValue+0x84>
    2304:	2c 81       	ldd	r18, Y+4	; 0x04
    2306:	3d 81       	ldd	r19, Y+5	; 0x05
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	81 f0       	breq	.+32     	; 0x232e <GPIO_u8GetPortValue+0x72>
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	9d 81       	ldd	r25, Y+5	; 0x05
    2312:	83 30       	cpi	r24, 0x03	; 3
    2314:	91 05       	cpc	r25, r1
    2316:	81 f0       	breq	.+32     	; 0x2338 <GPIO_u8GetPortValue+0x7c>
    2318:	13 c0       	rjmp	.+38     	; 0x2340 <GPIO_u8GetPortValue+0x84>
			case PORT_A:
				// Why value equals PINA?
				value = PORTA_REG;
    231a:	eb e3       	ldi	r30, 0x3B	; 59
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8a 83       	std	Y+2, r24	; 0x02
    2322:	0e c0       	rjmp	.+28     	; 0x2340 <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_B:
				value = PORTB_REG;
    2324:	e8 e3       	ldi	r30, 0x38	; 56
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	8a 83       	std	Y+2, r24	; 0x02
    232c:	09 c0       	rjmp	.+18     	; 0x2340 <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_C:
				value = PORTC_REG;
    232e:	e5 e3       	ldi	r30, 0x35	; 53
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8a 83       	std	Y+2, r24	; 0x02
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_D:
				value = PORTD_REG;
    2338:	e2 e3       	ldi	r30, 0x32	; 50
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8a 83       	std	Y+2, r24	; 0x02
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2340:	19 82       	std	Y+1, r1	; 0x01
	}
	return value;
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <GLOBINT_voidSetEnableFlag>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Enables the Global Interrupt Enable Flag in the Status Register
void GLOBINT_voidSetEnableFlag(void) {
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, SREG_I_BIT);
    235c:	af e5       	ldi	r26, 0x5F	; 95
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	ef e5       	ldi	r30, 0x5F	; 95
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	80 68       	ori	r24, 0x80	; 128
    2368:	8c 93       	st	X, r24
}
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <GLOBINT_voidSetDisableFlag>:

// Disables the Global Interrupt Disable Flag in the Status Register
void GLOBINT_voidSetDisableFlag(void) {
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, SREG_I_BIT);
    2378:	af e5       	ldi	r26, 0x5F	; 95
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	ef e5       	ldi	r30, 0x5F	; 95
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	8f 77       	andi	r24, 0x7F	; 127
    2384:	8c 93       	st	X, r24
}
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <EXTINT_voidSetSenseINTx>:
void (*CallBackPtr_INT1) (void);
void (*CallBackPtr_INT2) (void);


// Initialize INT0 & INT1 & INT2 Sense Control System
void EXTINT_voidSetSenseINTx(u8 copyINTx, u8 CopySense) {
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	00 d0       	rcall	.+0      	; 0x2392 <EXTINT_voidSetSenseINTx+0x6>
    2392:	00 d0       	rcall	.+0      	; 0x2394 <EXTINT_voidSetSenseINTx+0x8>
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	3c 83       	std	Y+4, r19	; 0x04
    23a4:	2b 83       	std	Y+3, r18	; 0x03
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	82 30       	cpi	r24, 0x02	; 2
    23ac:	91 05       	cpc	r25, r1
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <EXTINT_voidSetSenseINTx+0x26>
    23b0:	55 c0       	rjmp	.+170    	; 0x245c <EXTINT_voidSetSenseINTx+0xd0>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	23 30       	cpi	r18, 0x03	; 3
    23b8:	31 05       	cpc	r19, r1
    23ba:	09 f4       	brne	.+2      	; 0x23be <EXTINT_voidSetSenseINTx+0x32>
    23bc:	97 c0       	rjmp	.+302    	; 0x24ec <EXTINT_voidSetSenseINTx+0x160>
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	81 30       	cpi	r24, 0x01	; 1
    23c4:	91 05       	cpc	r25, r1
    23c6:	09 f0       	breq	.+2      	; 0x23ca <EXTINT_voidSetSenseINTx+0x3e>
    23c8:	a6 c0       	rjmp	.+332    	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
	case EXT_INT0:
		if(CopySense == EXTINT_Low_Level) {
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	88 23       	and	r24, r24
    23ce:	79 f4       	brne	.+30     	; 0x23ee <EXTINT_voidSetSenseINTx+0x62>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    23d0:	a5 e5       	ldi	r26, 0x55	; 85
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e5 e5       	ldi	r30, 0x55	; 85
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	8d 7f       	andi	r24, 0xFD	; 253
    23dc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    23de:	a5 e5       	ldi	r26, 0x55	; 85
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 e5       	ldi	r30, 0x55	; 85
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	8e 7f       	andi	r24, 0xFE	; 254
    23ea:	8c 93       	st	X, r24
    23ec:	94 c0       	rjmp	.+296    	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Logical_Change) {
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	79 f4       	brne	.+30     	; 0x2412 <EXTINT_voidSetSenseINTx+0x86>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    23f4:	a5 e5       	ldi	r26, 0x55	; 85
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e5 e5       	ldi	r30, 0x55	; 85
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8d 7f       	andi	r24, 0xFD	; 253
    2400:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    2402:	a5 e5       	ldi	r26, 0x55	; 85
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e5 e5       	ldi	r30, 0x55	; 85
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	81 60       	ori	r24, 0x01	; 1
    240e:	8c 93       	st	X, r24
    2410:	82 c0       	rjmp	.+260    	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Falling_Edge) {
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	82 30       	cpi	r24, 0x02	; 2
    2416:	79 f4       	brne	.+30     	; 0x2436 <EXTINT_voidSetSenseINTx+0xaa>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    2418:	a5 e5       	ldi	r26, 0x55	; 85
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e5 e5       	ldi	r30, 0x55	; 85
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	82 60       	ori	r24, 0x02	; 2
    2424:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    2426:	a5 e5       	ldi	r26, 0x55	; 85
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e5 e5       	ldi	r30, 0x55	; 85
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8e 7f       	andi	r24, 0xFE	; 254
    2432:	8c 93       	st	X, r24
    2434:	70 c0       	rjmp	.+224    	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Rising_Edge) {
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	83 30       	cpi	r24, 0x03	; 3
    243a:	09 f0       	breq	.+2      	; 0x243e <EXTINT_voidSetSenseINTx+0xb2>
    243c:	6c c0       	rjmp	.+216    	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    243e:	a5 e5       	ldi	r26, 0x55	; 85
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e5 e5       	ldi	r30, 0x55	; 85
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	82 60       	ori	r24, 0x02	; 2
    244a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    244c:	a5 e5       	ldi	r26, 0x55	; 85
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e5 e5       	ldi	r30, 0x55	; 85
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	81 60       	ori	r24, 0x01	; 1
    2458:	8c 93       	st	X, r24
    245a:	5d c0       	rjmp	.+186    	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
		}
		break;
	case EXT_INT1:
		if(CopySense == EXTINT_Low_Level) {
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	88 23       	and	r24, r24
    2460:	79 f4       	brne	.+30     	; 0x2480 <EXTINT_voidSetSenseINTx+0xf4>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    2462:	a5 e5       	ldi	r26, 0x55	; 85
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e5 e5       	ldi	r30, 0x55	; 85
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	87 7f       	andi	r24, 0xF7	; 247
    246e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    2470:	a5 e5       	ldi	r26, 0x55	; 85
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e5 e5       	ldi	r30, 0x55	; 85
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8b 7f       	andi	r24, 0xFB	; 251
    247c:	8c 93       	st	X, r24
    247e:	4b c0       	rjmp	.+150    	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Logical_Change) {
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	79 f4       	brne	.+30     	; 0x24a4 <EXTINT_voidSetSenseINTx+0x118>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    2486:	a5 e5       	ldi	r26, 0x55	; 85
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	e5 e5       	ldi	r30, 0x55	; 85
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	87 7f       	andi	r24, 0xF7	; 247
    2492:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    2494:	a5 e5       	ldi	r26, 0x55	; 85
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e5 e5       	ldi	r30, 0x55	; 85
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	84 60       	ori	r24, 0x04	; 4
    24a0:	8c 93       	st	X, r24
    24a2:	39 c0       	rjmp	.+114    	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Falling_Edge) {
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	79 f4       	brne	.+30     	; 0x24c8 <EXTINT_voidSetSenseINTx+0x13c>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    24aa:	a5 e5       	ldi	r26, 0x55	; 85
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e5 e5       	ldi	r30, 0x55	; 85
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	88 60       	ori	r24, 0x08	; 8
    24b6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    24b8:	a5 e5       	ldi	r26, 0x55	; 85
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e5 e5       	ldi	r30, 0x55	; 85
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	8b 7f       	andi	r24, 0xFB	; 251
    24c4:	8c 93       	st	X, r24
    24c6:	27 c0       	rjmp	.+78     	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Rising_Edge) {
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	83 30       	cpi	r24, 0x03	; 3
    24cc:	21 f5       	brne	.+72     	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    24ce:	a5 e5       	ldi	r26, 0x55	; 85
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e5 e5       	ldi	r30, 0x55	; 85
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	88 60       	ori	r24, 0x08	; 8
    24da:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    24dc:	a5 e5       	ldi	r26, 0x55	; 85
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e5 e5       	ldi	r30, 0x55	; 85
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	84 60       	ori	r24, 0x04	; 4
    24e8:	8c 93       	st	X, r24
    24ea:	15 c0       	rjmp	.+42     	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
		}
		break;
	case EXT_INT2:
		if(CopySense == EXTINT_INT2_Falling_Edge) {
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	88 23       	and	r24, r24
    24f0:	41 f4       	brne	.+16     	; 0x2502 <EXTINT_voidSetSenseINTx+0x176>
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2);
    24f2:	a4 e5       	ldi	r26, 0x54	; 84
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e4 e5       	ldi	r30, 0x54	; 84
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	8f 7b       	andi	r24, 0xBF	; 191
    24fe:	8c 93       	st	X, r24
    2500:	0a c0       	rjmp	.+20     	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_INT2_Rising_Edge) {
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	81 30       	cpi	r24, 0x01	; 1
    2506:	39 f4       	brne	.+14     	; 0x2516 <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2);
    2508:	a4 e5       	ldi	r26, 0x54	; 84
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e4 e5       	ldi	r30, 0x54	; 84
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	80 64       	ori	r24, 0x40	; 64
    2514:	8c 93       	st	X, r24
		}
		break;
	}
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <EXTINT_voidEnableINTx>:


// Enable External Interrupt INT0 & INT1 & INT2 and pass a function to ISR
void EXTINT_voidEnableINTx(u8 copyINTx, void (*copy_PtrtoFunc) (void)) {
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <EXTINT_voidEnableINTx+0x6>
    252a:	00 d0       	rcall	.+0      	; 0x252c <EXTINT_voidEnableINTx+0x8>
    252c:	0f 92       	push	r0
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	7b 83       	std	Y+3, r23	; 0x03
    2536:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	3d 83       	std	Y+5, r19	; 0x05
    2540:	2c 83       	std	Y+4, r18	; 0x04
    2542:	8c 81       	ldd	r24, Y+4	; 0x04
    2544:	9d 81       	ldd	r25, Y+5	; 0x05
    2546:	82 30       	cpi	r24, 0x02	; 2
    2548:	91 05       	cpc	r25, r1
    254a:	c1 f0       	breq	.+48     	; 0x257c <EXTINT_voidEnableINTx+0x58>
    254c:	2c 81       	ldd	r18, Y+4	; 0x04
    254e:	3d 81       	ldd	r19, Y+5	; 0x05
    2550:	23 30       	cpi	r18, 0x03	; 3
    2552:	31 05       	cpc	r19, r1
    2554:	09 f1       	breq	.+66     	; 0x2598 <EXTINT_voidEnableINTx+0x74>
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	9d 81       	ldd	r25, Y+5	; 0x05
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	91 05       	cpc	r25, r1
    255e:	51 f5       	brne	.+84     	; 0x25b4 <EXTINT_voidEnableINTx+0x90>
	case EXT_INT0:
		SET_BIT(GICR_REG, GICR_INT0);
    2560:	ab e5       	ldi	r26, 0x5B	; 91
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	eb e5       	ldi	r30, 0x5B	; 91
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	80 64       	ori	r24, 0x40	; 64
    256c:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	9b 81       	ldd	r25, Y+3	; 0x03
    2572:	90 93 ce 01 	sts	0x01CE, r25
    2576:	80 93 cd 01 	sts	0x01CD, r24
    257a:	29 c0       	rjmp	.+82     	; 0x25ce <EXTINT_voidEnableINTx+0xaa>
		break;
	case EXT_INT1:
		SET_BIT(GICR_REG, GICR_INT1);
    257c:	ab e5       	ldi	r26, 0x5B	; 91
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	eb e5       	ldi	r30, 0x5B	; 91
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	80 68       	ori	r24, 0x80	; 128
    2588:	8c 93       	st	X, r24
		CallBackPtr_INT1 = copy_PtrtoFunc;
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	9b 81       	ldd	r25, Y+3	; 0x03
    258e:	90 93 d0 01 	sts	0x01D0, r25
    2592:	80 93 cf 01 	sts	0x01CF, r24
    2596:	1b c0       	rjmp	.+54     	; 0x25ce <EXTINT_voidEnableINTx+0xaa>
		break;
	case EXT_INT2:
		SET_BIT(GICR_REG, GICR_INT2);
    2598:	ab e5       	ldi	r26, 0x5B	; 91
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	eb e5       	ldi	r30, 0x5B	; 91
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	80 62       	ori	r24, 0x20	; 32
    25a4:	8c 93       	st	X, r24
		CallBackPtr_INT2 = copy_PtrtoFunc;
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	90 93 cc 01 	sts	0x01CC, r25
    25ae:	80 93 cb 01 	sts	0x01CB, r24
    25b2:	0d c0       	rjmp	.+26     	; 0x25ce <EXTINT_voidEnableINTx+0xaa>
		break;
	default:
		SET_BIT(GICR_REG, GICR_INT0);
    25b4:	ab e5       	ldi	r26, 0x5B	; 91
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e5       	ldi	r30, 0x5B	; 91
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 64       	ori	r24, 0x40	; 64
    25c0:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	9b 81       	ldd	r25, Y+3	; 0x03
    25c6:	90 93 ce 01 	sts	0x01CE, r25
    25ca:	80 93 cd 01 	sts	0x01CD, r24
		break;
	}
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <EXTINT_voidDisableINTx>:


// Disable External Interrupt INT0 & INT1 & INT2
void EXTINT_voidDisableINTx(u8 copyINTx) {
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <EXTINT_voidDisableINTx+0x6>
    25e4:	0f 92       	push	r0
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	89 83       	std	Y+1, r24	; 0x01
	switch(copyINTx) {
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	3b 83       	std	Y+3, r19	; 0x03
    25f4:	2a 83       	std	Y+2, r18	; 0x02
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	9b 81       	ldd	r25, Y+3	; 0x03
    25fa:	82 30       	cpi	r24, 0x02	; 2
    25fc:	91 05       	cpc	r25, r1
    25fe:	91 f0       	breq	.+36     	; 0x2624 <EXTINT_voidDisableINTx+0x46>
    2600:	2a 81       	ldd	r18, Y+2	; 0x02
    2602:	3b 81       	ldd	r19, Y+3	; 0x03
    2604:	23 30       	cpi	r18, 0x03	; 3
    2606:	31 05       	cpc	r19, r1
    2608:	a9 f0       	breq	.+42     	; 0x2634 <EXTINT_voidDisableINTx+0x56>
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	9b 81       	ldd	r25, Y+3	; 0x03
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	91 05       	cpc	r25, r1
    2612:	c1 f4       	brne	.+48     	; 0x2644 <EXTINT_voidDisableINTx+0x66>
	case EXT_INT0:
		CLR_BIT(GICR_REG, GICR_INT0);
    2614:	ab e5       	ldi	r26, 0x5B	; 91
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	eb e5       	ldi	r30, 0x5B	; 91
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	8f 7b       	andi	r24, 0xBF	; 191
    2620:	8c 93       	st	X, r24
    2622:	17 c0       	rjmp	.+46     	; 0x2652 <EXTINT_voidDisableINTx+0x74>
		break;
	case EXT_INT1:
		CLR_BIT(GICR_REG, GICR_INT1);
    2624:	ab e5       	ldi	r26, 0x5B	; 91
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	eb e5       	ldi	r30, 0x5B	; 91
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	8f 77       	andi	r24, 0x7F	; 127
    2630:	8c 93       	st	X, r24
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <EXTINT_voidDisableINTx+0x74>
		break;
	case EXT_INT2:
		CLR_BIT(GICR_REG, GICR_INT2);
    2634:	ab e5       	ldi	r26, 0x5B	; 91
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	eb e5       	ldi	r30, 0x5B	; 91
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	8f 7d       	andi	r24, 0xDF	; 223
    2640:	8c 93       	st	X, r24
    2642:	07 c0       	rjmp	.+14     	; 0x2652 <EXTINT_voidDisableINTx+0x74>
		break;
	default:
		CLR_BIT(GICR_REG, GICR_INT0);
    2644:	ab e5       	ldi	r26, 0x5B	; 91
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	eb e5       	ldi	r30, 0x5B	; 91
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	8f 7b       	andi	r24, 0xBF	; 191
    2650:	8c 93       	st	X, r24
		break;
	}
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <__vector_1>:


// Disables Compiler Optimizations & verifies callback not empty
void __vector_1(void) __attribute__((signal, used));
void __vector_1(void) {
    265e:	1f 92       	push	r1
    2660:	0f 92       	push	r0
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	0f 92       	push	r0
    2666:	11 24       	eor	r1, r1
    2668:	2f 93       	push	r18
    266a:	3f 93       	push	r19
    266c:	4f 93       	push	r20
    266e:	5f 93       	push	r21
    2670:	6f 93       	push	r22
    2672:	7f 93       	push	r23
    2674:	8f 93       	push	r24
    2676:	9f 93       	push	r25
    2678:	af 93       	push	r26
    267a:	bf 93       	push	r27
    267c:	ef 93       	push	r30
    267e:	ff 93       	push	r31
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT0 != NULL) {
    2688:	80 91 cd 01 	lds	r24, 0x01CD
    268c:	90 91 ce 01 	lds	r25, 0x01CE
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	29 f0       	breq	.+10     	; 0x269e <__vector_1+0x40>
		CallBackPtr_INT0();
    2694:	e0 91 cd 01 	lds	r30, 0x01CD
    2698:	f0 91 ce 01 	lds	r31, 0x01CE
    269c:	09 95       	icall
	}
}
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	ff 91       	pop	r31
    26a4:	ef 91       	pop	r30
    26a6:	bf 91       	pop	r27
    26a8:	af 91       	pop	r26
    26aa:	9f 91       	pop	r25
    26ac:	8f 91       	pop	r24
    26ae:	7f 91       	pop	r23
    26b0:	6f 91       	pop	r22
    26b2:	5f 91       	pop	r21
    26b4:	4f 91       	pop	r20
    26b6:	3f 91       	pop	r19
    26b8:	2f 91       	pop	r18
    26ba:	0f 90       	pop	r0
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	0f 90       	pop	r0
    26c0:	1f 90       	pop	r1
    26c2:	18 95       	reti

000026c4 <__vector_2>:

void __vector_2(void) __attribute__((signal, used));
void __vector_2(void) {
    26c4:	1f 92       	push	r1
    26c6:	0f 92       	push	r0
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	0f 92       	push	r0
    26cc:	11 24       	eor	r1, r1
    26ce:	2f 93       	push	r18
    26d0:	3f 93       	push	r19
    26d2:	4f 93       	push	r20
    26d4:	5f 93       	push	r21
    26d6:	6f 93       	push	r22
    26d8:	7f 93       	push	r23
    26da:	8f 93       	push	r24
    26dc:	9f 93       	push	r25
    26de:	af 93       	push	r26
    26e0:	bf 93       	push	r27
    26e2:	ef 93       	push	r30
    26e4:	ff 93       	push	r31
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT1 != NULL) {
    26ee:	80 91 cf 01 	lds	r24, 0x01CF
    26f2:	90 91 d0 01 	lds	r25, 0x01D0
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	29 f0       	breq	.+10     	; 0x2704 <__vector_2+0x40>
		CallBackPtr_INT1();
    26fa:	e0 91 cf 01 	lds	r30, 0x01CF
    26fe:	f0 91 d0 01 	lds	r31, 0x01D0
    2702:	09 95       	icall
	}
}
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	ff 91       	pop	r31
    270a:	ef 91       	pop	r30
    270c:	bf 91       	pop	r27
    270e:	af 91       	pop	r26
    2710:	9f 91       	pop	r25
    2712:	8f 91       	pop	r24
    2714:	7f 91       	pop	r23
    2716:	6f 91       	pop	r22
    2718:	5f 91       	pop	r21
    271a:	4f 91       	pop	r20
    271c:	3f 91       	pop	r19
    271e:	2f 91       	pop	r18
    2720:	0f 90       	pop	r0
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	0f 90       	pop	r0
    2726:	1f 90       	pop	r1
    2728:	18 95       	reti

0000272a <__vector_3>:

void __vector_3(void) __attribute__((signal, used));
void __vector_3(void) {
    272a:	1f 92       	push	r1
    272c:	0f 92       	push	r0
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	0f 92       	push	r0
    2732:	11 24       	eor	r1, r1
    2734:	2f 93       	push	r18
    2736:	3f 93       	push	r19
    2738:	4f 93       	push	r20
    273a:	5f 93       	push	r21
    273c:	6f 93       	push	r22
    273e:	7f 93       	push	r23
    2740:	8f 93       	push	r24
    2742:	9f 93       	push	r25
    2744:	af 93       	push	r26
    2746:	bf 93       	push	r27
    2748:	ef 93       	push	r30
    274a:	ff 93       	push	r31
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT2 != NULL) {
    2754:	80 91 cb 01 	lds	r24, 0x01CB
    2758:	90 91 cc 01 	lds	r25, 0x01CC
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	29 f0       	breq	.+10     	; 0x276a <__vector_3+0x40>
		CallBackPtr_INT2();
    2760:	e0 91 cb 01 	lds	r30, 0x01CB
    2764:	f0 91 cc 01 	lds	r31, 0x01CC
    2768:	09 95       	icall
	}
}
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	ff 91       	pop	r31
    2770:	ef 91       	pop	r30
    2772:	bf 91       	pop	r27
    2774:	af 91       	pop	r26
    2776:	9f 91       	pop	r25
    2778:	8f 91       	pop	r24
    277a:	7f 91       	pop	r23
    277c:	6f 91       	pop	r22
    277e:	5f 91       	pop	r21
    2780:	4f 91       	pop	r20
    2782:	3f 91       	pop	r19
    2784:	2f 91       	pop	r18
    2786:	0f 90       	pop	r0
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	0f 90       	pop	r0
    278c:	1f 90       	pop	r1
    278e:	18 95       	reti

00002790 <ADC_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality
void ADC_voidInit(void) {
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
	 * 5, 	ADLAR   = 0 right adjusted
	 * 4:0, 	MUX4:0  = 00000 to choose channel 0 as initializationd
	 */

	// Sets REFS1:0 to '01'
	ADMUX_REG->REFS = AVCC;
    2798:	e7 e2       	ldi	r30, 0x27	; 39
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	8f 73       	andi	r24, 0x3F	; 63
    27a0:	80 64       	ori	r24, 0x40	; 64
    27a2:	80 83       	st	Z, r24
	ADMUX_REG->ADLAR = RIGHT_ADJUST;
    27a4:	e7 e2       	ldi	r30, 0x27	; 39
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	8f 7d       	andi	r24, 0xDF	; 223
    27ac:	80 83       	st	Z, r24

	// Enables ADC & Choose Prescaler of 128
	ADCSRA_REG->ADEN = ADEN_ENABLE;
    27ae:	e6 e2       	ldi	r30, 0x26	; 38
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	80 68       	ori	r24, 0x80	; 128
    27b6:	80 83       	st	Z, r24
	ADCSRA_REG->ADPS = PRESCALER_128;
    27b8:	e6 e2       	ldi	r30, 0x26	; 38
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	87 60       	ori	r24, 0x07	; 7
    27c0:	80 83       	st	Z, r24
	ADCSRA_REG->ADATE = DISABLE_TRIGGER;
    27c2:	e6 e2       	ldi	r30, 0x26	; 38
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 7d       	andi	r24, 0xDF	; 223
    27ca:	80 83       	st	Z, r24
	SFIOR_REG->ADTS = FREE_RUNNING;
    27cc:	e0 e5       	ldi	r30, 0x50	; 80
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	8f 71       	andi	r24, 0x1F	; 31
    27d4:	80 83       	st	Z, r24
	 * 3,	ADIE = 1 Enable ADC Interrupt
	 * 2:0, ADPS2:0 = 111 to choose
	 * ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz
	 * --> ADC must operate in range 50-200Khz
	 */
}
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <ADC_voidStartConversionPolling>:


// Start ADC Conversion using Polling
u16 ADC_voidStartConversionPolling(u8 copy_u8channelSelect) {
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	0f 92       	push	r0
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	89 83       	std	Y+1, r24	; 0x01
	// Insert Channel Number in ADMUX Procedure
	ADMUX_REG->MUX = copy_u8channelSelect;
    27e8:	e7 e2       	ldi	r30, 0x27	; 39
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	8f 71       	andi	r24, 0x1F	; 31
    27f0:	98 2f       	mov	r25, r24
    27f2:	9f 71       	andi	r25, 0x1F	; 31
    27f4:	80 81       	ld	r24, Z
    27f6:	80 7e       	andi	r24, 0xE0	; 224
    27f8:	89 2b       	or	r24, r25
    27fa:	80 83       	st	Z, r24

	// Starts ADC Conversion
	ADCSRA_REG->ADSC = START_CONVERSION;
    27fc:	e6 e2       	ldi	r30, 0x26	; 38
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	80 64       	ori	r24, 0x40	; 64
    2804:	80 83       	st	Z, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( ADCSRA_REG->ADIF == FLAG_NOTSET );
    2806:	e6 e2       	ldi	r30, 0x26	; 38
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	80 71       	andi	r24, 0x10	; 16
    280e:	88 23       	and	r24, r24
    2810:	d1 f3       	breq	.-12     	; 0x2806 <ADC_voidStartConversionPolling+0x2a>

	// Set Interrupt Flag by 1 by clearing it
	ADCSRA_REG->ADIF = FLAG_SET;
    2812:	e6 e2       	ldi	r30, 0x26	; 38
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	80 61       	ori	r24, 0x10	; 16
    281a:	80 83       	st	Z, r24

	// Read Data from ADCL Bits 0 -> 9
	return ADC_DATA_REG;
    281c:	e4 e2       	ldi	r30, 0x24	; 36
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	91 81       	ldd	r25, Z+1	; 0x01
}
    2824:	0f 90       	pop	r0
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <ADC_voidStartConversionISR>:

// Start ADC Conversion using Interrupts
void ADC_voidStartConversionISR(u8 copy_u8channelSelect) {
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	0f 92       	push	r0
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG->MUX = copy_u8channelSelect;
    2838:	e7 e2       	ldi	r30, 0x27	; 39
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	8f 71       	andi	r24, 0x1F	; 31
    2840:	98 2f       	mov	r25, r24
    2842:	9f 71       	andi	r25, 0x1F	; 31
    2844:	80 81       	ld	r24, Z
    2846:	80 7e       	andi	r24, 0xE0	; 224
    2848:	89 2b       	or	r24, r25
    284a:	80 83       	st	Z, r24

	// Starts ADC Conversion
	ADCSRA_REG->ADSC = START_CONVERSION;
    284c:	e6 e2       	ldi	r30, 0x26	; 38
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	80 64       	ori	r24, 0x40	; 64
    2854:	80 83       	st	Z, r24

	// Enables the Interrupt
	ADCSRA_REG->ADIE = ENABLE_INT;
    2856:	e6 e2       	ldi	r30, 0x26	; 38
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	88 60       	ori	r24, 0x08	; 8
    285e:	80 83       	st	Z, r24

}
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <ADC_CallBackFunction>:
/*
 * Description :
 * Call Back function to use in ISR *
 */
void ADC_CallBackFunction(void (*Ptr_ADC)(void))
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	00 d0       	rcall	.+0      	; 0x286e <ADC_CallBackFunction+0x6>
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	9a 83       	std	Y+2, r25	; 0x02
    2874:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr_ADC = Ptr_ADC;
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	9a 81       	ldd	r25, Y+2	; 0x02
    287a:	90 93 d2 01 	sts	0x01D2, r25
    287e:	80 93 d1 01 	sts	0x01D1, r24
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <__vector_16>:


void __vector_16(void) __attribute__((signal, used));
void __vector_16(void) {
    288c:	1f 92       	push	r1
    288e:	0f 92       	push	r0
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	0f 92       	push	r0
    2894:	11 24       	eor	r1, r1
    2896:	2f 93       	push	r18
    2898:	3f 93       	push	r19
    289a:	4f 93       	push	r20
    289c:	5f 93       	push	r21
    289e:	6f 93       	push	r22
    28a0:	7f 93       	push	r23
    28a2:	8f 93       	push	r24
    28a4:	9f 93       	push	r25
    28a6:	af 93       	push	r26
    28a8:	bf 93       	push	r27
    28aa:	ef 93       	push	r30
    28ac:	ff 93       	push	r31
    28ae:	df 93       	push	r29
    28b0:	cf 93       	push	r28
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_ADC != NULL) {
    28b6:	80 91 d1 01 	lds	r24, 0x01D1
    28ba:	90 91 d2 01 	lds	r25, 0x01D2
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	29 f0       	breq	.+10     	; 0x28cc <__vector_16+0x40>
		CallBackPtr_ADC();
    28c2:	e0 91 d1 01 	lds	r30, 0x01D1
    28c6:	f0 91 d2 01 	lds	r31, 0x01D2
    28ca:	09 95       	icall
	}
}
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	ff 91       	pop	r31
    28d2:	ef 91       	pop	r30
    28d4:	bf 91       	pop	r27
    28d6:	af 91       	pop	r26
    28d8:	9f 91       	pop	r25
    28da:	8f 91       	pop	r24
    28dc:	7f 91       	pop	r23
    28de:	6f 91       	pop	r22
    28e0:	5f 91       	pop	r21
    28e2:	4f 91       	pop	r20
    28e4:	3f 91       	pop	r19
    28e6:	2f 91       	pop	r18
    28e8:	0f 90       	pop	r0
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	0f 90       	pop	r0
    28ee:	1f 90       	pop	r1
    28f0:	18 95       	reti

000028f2 <SEGMENT_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes the 7 Segment Display Driver
SEGMENT_Error_t SEGMENT_voidInit(u8 copy_u8portID) {
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <SEGMENT_voidInit+0x6>
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 SEGMENT_Driver_Checker = 0;
    28fe:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	84 30       	cpi	r24, 0x04	; 4
    2904:	18 f0       	brcs	.+6      	; 0x290c <SEGMENT_voidInit+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	1f c0       	rjmp	.+62     	; 0x294a <SEGMENT_voidInit+0x58>
#elif (DIGITS_USED == 3)
		GPIO_voidSetPinDirection(COM_3_PORT, COM_3, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#elif (DIGITS_USED == 2)
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	62 e0       	ldi	r22, 0x02	; 2
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	63 e0       	ldi	r22, 0x03	; 3
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#endif

		/* These pins are for the BCD on the FARES Kit */
		GPIO_voidSetPinDirection(copy_u8portID, BCD_1, PIN_OUTPUT);
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	60 e0       	ldi	r22, 0x00	; 0
    2924:	41 e0       	ldi	r20, 0x01	; 1
    2926:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_2, PIN_OUTPUT);
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	61 e0       	ldi	r22, 0x01	; 1
    292e:	41 e0       	ldi	r20, 0x01	; 1
    2930:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_4, PIN_OUTPUT);
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	62 e0       	ldi	r22, 0x02	; 2
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_8, PIN_OUTPUT);
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	64 e0       	ldi	r22, 0x04	; 4
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>

		SEGMENT_Driver_Checker = SEGMENT_OK;
    2948:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    294a:	89 81       	ldd	r24, Y+1	; 0x01
}
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <SEGMENT_voidDisplay>:


// Displays a value on the 7 Segment Display
SEGMENT_Error_t SEGMENT_voidDisplay(u8 copy_u8portID, u8 copy_u8pinValue) {
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	00 d0       	rcall	.+0      	; 0x295c <SEGMENT_voidDisplay+0x6>
    295c:	00 d0       	rcall	.+0      	; 0x295e <SEGMENT_voidDisplay+0x8>
    295e:	0f 92       	push	r0
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	8a 83       	std	Y+2, r24	; 0x02
    2966:	6b 83       	std	Y+3, r22	; 0x03
	u8 SEGMENT_Driver_Checker = 0;
    2968:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	84 30       	cpi	r24, 0x04	; 4
    296e:	18 f0       	brcs	.+6      	; 0x2976 <SEGMENT_voidDisplay+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	24 c1       	rjmp	.+584    	; 0x2bbe <SEGMENT_voidDisplay+0x268>
	}
	else if((copy_u8pinValue < 0 && copy_u8pinValue > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(copy_u8pinValue) {
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	28 2f       	mov	r18, r24
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	3d 83       	std	Y+5, r19	; 0x05
    297e:	2c 83       	std	Y+4, r18	; 0x04
    2980:	8c 81       	ldd	r24, Y+4	; 0x04
    2982:	9d 81       	ldd	r25, Y+5	; 0x05
    2984:	84 30       	cpi	r24, 0x04	; 4
    2986:	91 05       	cpc	r25, r1
    2988:	09 f4       	brne	.+2      	; 0x298c <SEGMENT_voidDisplay+0x36>
    298a:	9b c0       	rjmp	.+310    	; 0x2ac2 <SEGMENT_voidDisplay+0x16c>
    298c:	2c 81       	ldd	r18, Y+4	; 0x04
    298e:	3d 81       	ldd	r19, Y+5	; 0x05
    2990:	25 30       	cpi	r18, 0x05	; 5
    2992:	31 05       	cpc	r19, r1
    2994:	ec f4       	brge	.+58     	; 0x29d0 <SEGMENT_voidDisplay+0x7a>
    2996:	8c 81       	ldd	r24, Y+4	; 0x04
    2998:	9d 81       	ldd	r25, Y+5	; 0x05
    299a:	81 30       	cpi	r24, 0x01	; 1
    299c:	91 05       	cpc	r25, r1
    299e:	09 f4       	brne	.+2      	; 0x29a2 <SEGMENT_voidDisplay+0x4c>
    29a0:	51 c0       	rjmp	.+162    	; 0x2a44 <SEGMENT_voidDisplay+0xee>
    29a2:	2c 81       	ldd	r18, Y+4	; 0x04
    29a4:	3d 81       	ldd	r19, Y+5	; 0x05
    29a6:	22 30       	cpi	r18, 0x02	; 2
    29a8:	31 05       	cpc	r19, r1
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <SEGMENT_voidDisplay+0x60>
    29ac:	8c 81       	ldd	r24, Y+4	; 0x04
    29ae:	9d 81       	ldd	r25, Y+5	; 0x05
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	99 f1       	breq	.+102    	; 0x2a1a <SEGMENT_voidDisplay+0xc4>
    29b4:	03 c1       	rjmp	.+518    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
    29b6:	2c 81       	ldd	r18, Y+4	; 0x04
    29b8:	3d 81       	ldd	r19, Y+5	; 0x05
    29ba:	22 30       	cpi	r18, 0x02	; 2
    29bc:	31 05       	cpc	r19, r1
    29be:	09 f4       	brne	.+2      	; 0x29c2 <SEGMENT_voidDisplay+0x6c>
    29c0:	56 c0       	rjmp	.+172    	; 0x2a6e <SEGMENT_voidDisplay+0x118>
    29c2:	8c 81       	ldd	r24, Y+4	; 0x04
    29c4:	9d 81       	ldd	r25, Y+5	; 0x05
    29c6:	83 30       	cpi	r24, 0x03	; 3
    29c8:	91 05       	cpc	r25, r1
    29ca:	09 f4       	brne	.+2      	; 0x29ce <SEGMENT_voidDisplay+0x78>
    29cc:	65 c0       	rjmp	.+202    	; 0x2a98 <SEGMENT_voidDisplay+0x142>
    29ce:	f6 c0       	rjmp	.+492    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
    29d0:	2c 81       	ldd	r18, Y+4	; 0x04
    29d2:	3d 81       	ldd	r19, Y+5	; 0x05
    29d4:	27 30       	cpi	r18, 0x07	; 7
    29d6:	31 05       	cpc	r19, r1
    29d8:	09 f4       	brne	.+2      	; 0x29dc <SEGMENT_voidDisplay+0x86>
    29da:	b2 c0       	rjmp	.+356    	; 0x2b40 <SEGMENT_voidDisplay+0x1ea>
    29dc:	8c 81       	ldd	r24, Y+4	; 0x04
    29de:	9d 81       	ldd	r25, Y+5	; 0x05
    29e0:	88 30       	cpi	r24, 0x08	; 8
    29e2:	91 05       	cpc	r25, r1
    29e4:	6c f4       	brge	.+26     	; 0x2a00 <SEGMENT_voidDisplay+0xaa>
    29e6:	2c 81       	ldd	r18, Y+4	; 0x04
    29e8:	3d 81       	ldd	r19, Y+5	; 0x05
    29ea:	25 30       	cpi	r18, 0x05	; 5
    29ec:	31 05       	cpc	r19, r1
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <SEGMENT_voidDisplay+0x9c>
    29f0:	7d c0       	rjmp	.+250    	; 0x2aec <SEGMENT_voidDisplay+0x196>
    29f2:	8c 81       	ldd	r24, Y+4	; 0x04
    29f4:	9d 81       	ldd	r25, Y+5	; 0x05
    29f6:	86 30       	cpi	r24, 0x06	; 6
    29f8:	91 05       	cpc	r25, r1
    29fa:	09 f4       	brne	.+2      	; 0x29fe <SEGMENT_voidDisplay+0xa8>
    29fc:	8c c0       	rjmp	.+280    	; 0x2b16 <SEGMENT_voidDisplay+0x1c0>
    29fe:	de c0       	rjmp	.+444    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
    2a00:	2c 81       	ldd	r18, Y+4	; 0x04
    2a02:	3d 81       	ldd	r19, Y+5	; 0x05
    2a04:	28 30       	cpi	r18, 0x08	; 8
    2a06:	31 05       	cpc	r19, r1
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <SEGMENT_voidDisplay+0xb6>
    2a0a:	af c0       	rjmp	.+350    	; 0x2b6a <SEGMENT_voidDisplay+0x214>
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a10:	89 30       	cpi	r24, 0x09	; 9
    2a12:	91 05       	cpc	r25, r1
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <SEGMENT_voidDisplay+0xc2>
    2a16:	be c0       	rjmp	.+380    	; 0x2b94 <SEGMENT_voidDisplay+0x23e>
    2a18:	d1 c0       	rjmp	.+418    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
			case 0:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1c:	60 e0       	ldi	r22, 0x00	; 0
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	40 e0       	ldi	r20, 0x00	; 0
    2a2a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	62 e0       	ldi	r22, 0x02	; 2
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	64 e0       	ldi	r22, 0x04	; 4
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    2a42:	bc c0       	rjmp	.+376    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
				break;
			case 1:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	62 e0       	ldi	r22, 0x02	; 2
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	64 e0       	ldi	r22, 0x04	; 4
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    2a6c:	a7 c0       	rjmp	.+334    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
				break;
			case 2:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	41 e0       	ldi	r20, 0x01	; 1
    2a7e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	62 e0       	ldi	r22, 0x02	; 2
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	64 e0       	ldi	r22, 0x04	; 4
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    2a96:	92 c0       	rjmp	.+292    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
				break;
			case 3:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	41 e0       	ldi	r20, 0x01	; 1
    2a9e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	61 e0       	ldi	r22, 0x01	; 1
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	62 e0       	ldi	r22, 0x02	; 2
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	64 e0       	ldi	r22, 0x04	; 4
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    2ac0:	7d c0       	rjmp	.+250    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
				break;
			case 4:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	40 e0       	ldi	r20, 0x00	; 0
    2ad2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	62 e0       	ldi	r22, 0x02	; 2
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	64 e0       	ldi	r22, 0x04	; 4
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    2aea:	68 c0       	rjmp	.+208    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
				break;
			case 5:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	41 e0       	ldi	r20, 0x01	; 1
    2af2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	62 e0       	ldi	r22, 0x02	; 2
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	64 e0       	ldi	r22, 0x04	; 4
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    2b14:	53 c0       	rjmp	.+166    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
				break;
			case 6:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2c:	62 e0       	ldi	r22, 0x02	; 2
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	64 e0       	ldi	r22, 0x04	; 4
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    2b3e:	3e c0       	rjmp	.+124    	; 0x2bbc <SEGMENT_voidDisplay+0x266>
				break;
			case 7:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	60 e0       	ldi	r22, 0x00	; 0
    2b44:	41 e0       	ldi	r20, 0x01	; 1
    2b46:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	61 e0       	ldi	r22, 0x01	; 1
    2b4e:	41 e0       	ldi	r20, 0x01	; 1
    2b50:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	62 e0       	ldi	r22, 0x02	; 2
    2b58:	41 e0       	ldi	r20, 0x01	; 1
    2b5a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	64 e0       	ldi	r22, 0x04	; 4
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    2b68:	29 c0       	rjmp	.+82     	; 0x2bbc <SEGMENT_voidDisplay+0x266>
				break;
			case 8:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	61 e0       	ldi	r22, 0x01	; 1
    2b78:	40 e0       	ldi	r20, 0x00	; 0
    2b7a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	62 e0       	ldi	r22, 0x02	; 2
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	64 e0       	ldi	r22, 0x04	; 4
    2b8c:	41 e0       	ldi	r20, 0x01	; 1
    2b8e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    2b92:	14 c0       	rjmp	.+40     	; 0x2bbc <SEGMENT_voidDisplay+0x266>
				break;
			case 9:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	61 e0       	ldi	r22, 0x01	; 1
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	62 e0       	ldi	r22, 0x02	; 2
    2bac:	40 e0       	ldi	r20, 0x00	; 0
    2bae:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	64 e0       	ldi	r22, 0x04	; 4
    2bb6:	41 e0       	ldi	r20, 0x01	; 1
    2bb8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    2bbc:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <SERVO_voidInit>:
u16 AngleValue 	= 0;
u16 CMP_Value 	= 0;


// Initializes the 7 Segment Display Driver
void SERVO_voidInit(void) {
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
	TIMER1_Initialization();
    2bd8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <TIMER1_Initialization>
	TIMER1A_SetTop_FASTPWM(SERVO_OP_RANGE);
    2bdc:	80 e2       	ldi	r24, 0x20	; 32
    2bde:	9e e4       	ldi	r25, 0x4E	; 78
    2be0:	0e 94 df 08 	call	0x11be	; 0x11be <TIMER1A_SetTop_FASTPWM>
	ADC_voidInit();
    2be4:	0e 94 c8 13 	call	0x2790	; 0x2790 <ADC_voidInit>
}
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <SERVO_voidAdjustAngle>:

// Displays a value on the 7 Segment Display
void SERVO_voidAdjustAngle(void) {
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	ADC_Result = ADC_voidStartConversionPolling(CHANNEL_1);
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	0e 94 ee 13 	call	0x27dc	; 0x27dc <ADC_voidStartConversionPolling>
    2bfc:	90 93 b7 01 	sts	0x01B7, r25
    2c00:	80 93 b6 01 	sts	0x01B6, r24
	AngleValue = mapServo(ADC_Result);
    2c04:	80 91 b6 01 	lds	r24, 0x01B6
    2c08:	90 91 b7 01 	lds	r25, 0x01B7
    2c0c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <mapServo>
    2c10:	90 93 b9 01 	sts	0x01B9, r25
    2c14:	80 93 b8 01 	sts	0x01B8, r24
	CMP_Value = TIMER1A_SetCOMPAREMATCH_FASTPWM(AngleValue);
    2c18:	80 91 b8 01 	lds	r24, 0x01B8
    2c1c:	90 91 b9 01 	lds	r25, 0x01B9
    2c20:	0e 94 bf 08 	call	0x117e	; 0x117e <TIMER1A_SetCOMPAREMATCH_FASTPWM>
    2c24:	90 93 bb 01 	sts	0x01BB, r25
    2c28:	80 93 ba 01 	sts	0x01BA, r24
	LCD_voidSetCursor(1, 0);
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSetCursor>
	LCD_voidDisplayString("Angle: ");
    2c34:	80 e6       	ldi	r24, 0x60	; 96
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 17 22 	call	0x442e	; 0x442e <LCD_voidDisplayString>
	LCD_voidSetCursor(1, 7);
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	67 e0       	ldi	r22, 0x07	; 7
    2c40:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSetCursor>
	LCD_voidIntgerToString(CMP_Value);
    2c44:	80 91 ba 01 	lds	r24, 0x01BA
    2c48:	90 91 bb 01 	lds	r25, 0x01BB
    2c4c:	cc 01       	movw	r24, r24
    2c4e:	a0 e0       	ldi	r26, 0x00	; 0
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 82 22 	call	0x4504	; 0x4504 <LCD_voidIntgerToString>
}
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <mapServo>:

u16 mapServo(u16 copy_u16ADCValue){
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <mapServo+0x6>
    2c66:	00 d0       	rcall	.+0      	; 0x2c68 <mapServo+0x8>
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	9c 83       	std	Y+4, r25	; 0x04
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
	u16 servoAngle = (u16)(copy_u16ADCValue * 255) / 100;
    2c70:	4b 81       	ldd	r20, Y+3	; 0x03
    2c72:	5c 81       	ldd	r21, Y+4	; 0x04
    2c74:	ca 01       	movw	r24, r20
    2c76:	9c 01       	movw	r18, r24
    2c78:	22 0f       	add	r18, r18
    2c7a:	33 1f       	adc	r19, r19
    2c7c:	c9 01       	movw	r24, r18
    2c7e:	96 95       	lsr	r25
    2c80:	98 2f       	mov	r25, r24
    2c82:	88 27       	eor	r24, r24
    2c84:	97 95       	ror	r25
    2c86:	87 95       	ror	r24
    2c88:	82 1b       	sub	r24, r18
    2c8a:	93 0b       	sbc	r25, r19
    2c8c:	84 0f       	add	r24, r20
    2c8e:	95 1f       	adc	r25, r21
    2c90:	24 e6       	ldi	r18, 0x64	; 100
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	b9 01       	movw	r22, r18
    2c96:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodhi4>
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9a 83       	std	Y+2, r25	; 0x02
    2c9e:	89 83       	std	Y+1, r24	; 0x01
	return servoAngle;
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <LM35_u8getTemperature>:
/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality
u8 LM35_u8getTemperature(void) {
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	2f 97       	sbiw	r28, 0x0f	; 15
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
	u8 temperatureValue = 0;
    2cc6:	1f 86       	std	Y+15, r1	; 0x0f

	// Read ADC Channel that the LM35 is configured to
	ADC_voidStartConversionPolling(LM35_CHANNEL_ID);
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	0e 94 ee 13 	call	0x27dc	; 0x27dc <ADC_voidStartConversionPolling>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a0 ea       	ldi	r26, 0xA0	; 160
    2cd4:	b0 e4       	ldi	r27, 0x40	; 64
    2cd6:	8b 87       	std	Y+11, r24	; 0x0b
    2cd8:	9c 87       	std	Y+12, r25	; 0x0c
    2cda:	ad 87       	std	Y+13, r26	; 0x0d
    2cdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a ef       	ldi	r20, 0xFA	; 250
    2cec:	54 e4       	ldi	r21, 0x44	; 68
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	8f 83       	std	Y+7, r24	; 0x07
    2cf8:	98 87       	std	Y+8, r25	; 0x08
    2cfa:	a9 87       	std	Y+9, r26	; 0x09
    2cfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2d00:	78 85       	ldd	r23, Y+8	; 0x08
    2d02:	89 85       	ldd	r24, Y+9	; 0x09
    2d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d12:	88 23       	and	r24, r24
    2d14:	2c f4       	brge	.+10     	; 0x2d20 <LM35_u8getTemperature+0x6e>
		__ticks = 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
    2d1e:	3f c0       	rjmp	.+126    	; 0x2d9e <LM35_u8getTemperature+0xec>
	else if (__tmp > 65535)
    2d20:	6f 81       	ldd	r22, Y+7	; 0x07
    2d22:	78 85       	ldd	r23, Y+8	; 0x08
    2d24:	89 85       	ldd	r24, Y+9	; 0x09
    2d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	3f ef       	ldi	r19, 0xFF	; 255
    2d2c:	4f e7       	ldi	r20, 0x7F	; 127
    2d2e:	57 e4       	ldi	r21, 0x47	; 71
    2d30:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d34:	18 16       	cp	r1, r24
    2d36:	4c f5       	brge	.+82     	; 0x2d8a <LM35_u8getTemperature+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e2       	ldi	r20, 0x20	; 32
    2d46:	51 e4       	ldi	r21, 0x41	; 65
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	0f c0       	rjmp	.+30     	; 0x2d80 <LM35_u8getTemperature+0xce>
    2d62:	88 ec       	ldi	r24, 0xC8	; 200
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	9c 83       	std	Y+4, r25	; 0x04
    2d68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <LM35_u8getTemperature+0xbc>
    2d72:	9c 83       	std	Y+4, r25	; 0x04
    2d74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	9e 81       	ldd	r25, Y+6	; 0x06
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	69 f7       	brne	.-38     	; 0x2d62 <LM35_u8getTemperature+0xb0>
    2d88:	14 c0       	rjmp	.+40     	; 0x2db2 <LM35_u8getTemperature+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8c:	78 85       	ldd	r23, Y+8	; 0x08
    2d8e:	89 85       	ldd	r24, Y+9	; 0x09
    2d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2da0:	9e 81       	ldd	r25, Y+6	; 0x06
    2da2:	9a 83       	std	Y+2, r25	; 0x02
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	9a 81       	ldd	r25, Y+2	; 0x02
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <LM35_u8getTemperature+0xf8>
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	89 83       	std	Y+1, r24	; 0x01

	// Add a small Delay for the global ADC result is set with Interrupt
	_delay_ms(5);

	// Calculate the temperature for the ADC
	temperatureValue = (((u32)LM35_MAX_TEMP * ADC_REF_VOLT) / (ADC_MAX_VAL * LM35_MAX_VOLT));
    2db2:	1f 86       	std	Y+15, r1	; 0x0f

	return temperatureValue;
    2db4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2db6:	2f 96       	adiw	r28, 0x0f	; 15
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <LED_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes the LED Driver
LED_Error_t LED_voidInit(u8 copy_u8portID, u8 copy_u8pinID) {
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <LED_voidInit+0x6>
    2dce:	0f 92       	push	r0
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	8a 83       	std	Y+2, r24	; 0x02
    2dd6:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2dd8:	19 82       	std	Y+1, r1	; 0x01
	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	88 30       	cpi	r24, 0x08	; 8
    2dde:	18 f0       	brcs	.+6      	; 0x2de6 <LED_voidInit+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	0c c0       	rjmp	.+24     	; 0x2dfe <LED_voidInit+0x36>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	84 30       	cpi	r24, 0x04	; 4
    2dea:	18 f0       	brcs	.+6      	; 0x2df2 <LED_voidInit+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2dec:	82 e0       	ldi	r24, 0x02	; 2
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	06 c0       	rjmp	.+12     	; 0x2dfe <LED_voidInit+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_voidSetPinDirection(copy_u8portID, copy_u8pinID, PIN_OUTPUT);
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	6b 81       	ldd	r22, Y+3	; 0x03
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		LED_Driver_Checker = LED_OK;
    2dfc:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	08 95       	ret

00002e0c <LED_voidOn>:

// Turns on a LED
LED_Error_t LED_voidOn(u8 copy_u8portID, u8 copy_u8pinID) {
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <LED_voidOn+0x6>
    2e12:	0f 92       	push	r0
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	8a 83       	std	Y+2, r24	; 0x02
    2e1a:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2e1c:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	88 30       	cpi	r24, 0x08	; 8
    2e22:	18 f0       	brcs	.+6      	; 0x2e2a <LED_voidOn+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	89 83       	std	Y+1, r24	; 0x01
    2e28:	0c c0       	rjmp	.+24     	; 0x2e42 <LED_voidOn+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	84 30       	cpi	r24, 0x04	; 4
    2e2e:	18 f0       	brcs	.+6      	; 0x2e36 <LED_voidOn+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e30:	82 e0       	ldi	r24, 0x02	; 2
    2e32:	89 83       	std	Y+1, r24	; 0x01
    2e34:	06 c0       	rjmp	.+12     	; 0x2e42 <LED_voidOn+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	6b 81       	ldd	r22, Y+3	; 0x03
    2e3a:	41 e0       	ldi	r20, 0x01	; 1
    2e3c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    2e40:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <LED_voidOff>:

// Turns off a LED
LED_Error_t LED_voidOff(u8 copy_u8portID, u8 copy_u8pinID) {
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <LED_voidOff+0x6>
    2e56:	0f 92       	push	r0
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
    2e5e:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2e60:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2e62:	8b 81       	ldd	r24, Y+3	; 0x03
    2e64:	88 30       	cpi	r24, 0x08	; 8
    2e66:	18 f0       	brcs	.+6      	; 0x2e6e <LED_voidOff+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	0c c0       	rjmp	.+24     	; 0x2e86 <LED_voidOff+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	84 30       	cpi	r24, 0x04	; 4
    2e72:	18 f0       	brcs	.+6      	; 0x2e7a <LED_voidOff+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e74:	82 e0       	ldi	r24, 0x02	; 2
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	06 c0       	rjmp	.+12     	; 0x2e86 <LED_voidOff+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e7e:	40 e0       	ldi	r20, 0x00	; 0
    2e80:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    2e84:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <LED_voidToggle>:

// Toggles a LED
LED_Error_t LED_voidToggle(u8 copy_u8portID, u8 copy_u8pinID) {
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	00 d0       	rcall	.+0      	; 0x2e9a <LED_voidToggle+0x6>
    2e9a:	0f 92       	push	r0
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	8a 83       	std	Y+2, r24	; 0x02
    2ea2:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    2ea4:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	88 30       	cpi	r24, 0x08	; 8
    2eaa:	18 f0       	brcs	.+6      	; 0x2eb2 <LED_voidToggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	0b c0       	rjmp	.+22     	; 0x2ec8 <LED_voidToggle+0x34>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	84 30       	cpi	r24, 0x04	; 4
    2eb6:	18 f0       	brcs	.+6      	; 0x2ebe <LED_voidToggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2eb8:	82 e0       	ldi	r24, 0x02	; 2
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	05 c0       	rjmp	.+10     	; 0x2ec8 <LED_voidToggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_voidTogglePin(copy_u8portID, copy_u8pinID);
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ec2:	0e 94 2f 10 	call	0x205e	; 0x205e <GPIO_voidTogglePin>
			LED_Driver_Checker = LED_OK;
    2ec6:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <LCD_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes and enables the LCD Module to start functionality
void LCD_voidInit(void) {
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	e8 97       	sbiw	r28, 0x38	; 56
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	63 e0       	ldi	r22, 0x03	; 3
    2eee:	41 e0       	ldi	r20, 0x01	; 1
    2ef0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>

	// Initialize Enable Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	62 e0       	ldi	r22, 0x02	; 2
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	a0 ea       	ldi	r26, 0xA0	; 160
    2f04:	b1 e4       	ldi	r27, 0x41	; 65
    2f06:	8d ab       	std	Y+53, r24	; 0x35
    2f08:	9e ab       	std	Y+54, r25	; 0x36
    2f0a:	af ab       	std	Y+55, r26	; 0x37
    2f0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f10:	7e a9       	ldd	r23, Y+54	; 0x36
    2f12:	8f a9       	ldd	r24, Y+55	; 0x37
    2f14:	98 ad       	ldd	r25, Y+56	; 0x38
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	4a ef       	ldi	r20, 0xFA	; 250
    2f1c:	54 e4       	ldi	r21, 0x44	; 68
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	89 ab       	std	Y+49, r24	; 0x31
    2f28:	9a ab       	std	Y+50, r25	; 0x32
    2f2a:	ab ab       	std	Y+51, r26	; 0x33
    2f2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f30:	7a a9       	ldd	r23, Y+50	; 0x32
    2f32:	8b a9       	ldd	r24, Y+51	; 0x33
    2f34:	9c a9       	ldd	r25, Y+52	; 0x34
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e8       	ldi	r20, 0x80	; 128
    2f3c:	5f e3       	ldi	r21, 0x3F	; 63
    2f3e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f42:	88 23       	and	r24, r24
    2f44:	2c f4       	brge	.+10     	; 0x2f50 <LCD_voidInit+0x7a>
		__ticks = 1;
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	98 ab       	std	Y+48, r25	; 0x30
    2f4c:	8f a7       	std	Y+47, r24	; 0x2f
    2f4e:	3f c0       	rjmp	.+126    	; 0x2fce <LCD_voidInit+0xf8>
	else if (__tmp > 65535)
    2f50:	69 a9       	ldd	r22, Y+49	; 0x31
    2f52:	7a a9       	ldd	r23, Y+50	; 0x32
    2f54:	8b a9       	ldd	r24, Y+51	; 0x33
    2f56:	9c a9       	ldd	r25, Y+52	; 0x34
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	3f ef       	ldi	r19, 0xFF	; 255
    2f5c:	4f e7       	ldi	r20, 0x7F	; 127
    2f5e:	57 e4       	ldi	r21, 0x47	; 71
    2f60:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f64:	18 16       	cp	r1, r24
    2f66:	4c f5       	brge	.+82     	; 0x2fba <LCD_voidInit+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f68:	6d a9       	ldd	r22, Y+53	; 0x35
    2f6a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f6c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e2       	ldi	r20, 0x20	; 32
    2f76:	51 e4       	ldi	r21, 0x41	; 65
    2f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	98 ab       	std	Y+48, r25	; 0x30
    2f8e:	8f a7       	std	Y+47, r24	; 0x2f
    2f90:	0f c0       	rjmp	.+30     	; 0x2fb0 <LCD_voidInit+0xda>
    2f92:	88 ec       	ldi	r24, 0xC8	; 200
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	9e a7       	std	Y+46, r25	; 0x2e
    2f98:	8d a7       	std	Y+45, r24	; 0x2d
    2f9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <LCD_voidInit+0xc8>
    2fa2:	9e a7       	std	Y+46, r25	; 0x2e
    2fa4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa8:	98 a9       	ldd	r25, Y+48	; 0x30
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	98 ab       	std	Y+48, r25	; 0x30
    2fae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	69 f7       	brne	.-38     	; 0x2f92 <LCD_voidInit+0xbc>
    2fb8:	14 c0       	rjmp	.+40     	; 0x2fe2 <LCD_voidInit+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fba:	69 a9       	ldd	r22, Y+49	; 0x31
    2fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    2fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	98 ab       	std	Y+48, r25	; 0x30
    2fcc:	8f a7       	std	Y+47, r24	; 0x2f
    2fce:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fd0:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd2:	9c a7       	std	Y+44, r25	; 0x2c
    2fd4:	8b a7       	std	Y+43, r24	; 0x2b
    2fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <LCD_voidInit+0x104>
    2fde:	9c a7       	std	Y+44, r25	; 0x2c
    2fe0:	8b a7       	std	Y+43, r24	; 0x2b
	if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_voidSetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
		LCD_voidSendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}
	else {
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	41 e0       	ldi	r20, 0x01	; 1
    2fe8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	61 e0       	ldi	r22, 0x01	; 1
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	62 e0       	ldi	r22, 0x02	; 2
    2ffa:	41 e0       	ldi	r20, 0x01	; 1
    2ffc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	63 e0       	ldi	r22, 0x03	; 3
    3004:	41 e0       	ldi	r20, 0x01	; 1
    3006:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>


		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT1);
    300a:	83 e3       	ldi	r24, 0x33	; 51
    300c:	0e 94 73 19 	call	0x32e6	; 0x32e6 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT2);
    3010:	82 e3       	ldi	r24, 0x32	; 50
    3012:	0e 94 73 19 	call	0x32e6	; 0x32e6 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_5x7_DOTS);
    3016:	88 e2       	ldi	r24, 0x28	; 40
    3018:	0e 94 73 19 	call	0x32e6	; 0x32e6 <LCD_voidSendCommand>
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	a0 e0       	ldi	r26, 0x00	; 0
    3022:	b0 e4       	ldi	r27, 0x40	; 64
    3024:	8f a3       	std	Y+39, r24	; 0x27
    3026:	98 a7       	std	Y+40, r25	; 0x28
    3028:	a9 a7       	std	Y+41, r26	; 0x29
    302a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302c:	6f a1       	ldd	r22, Y+39	; 0x27
    302e:	78 a5       	ldd	r23, Y+40	; 0x28
    3030:	89 a5       	ldd	r24, Y+41	; 0x29
    3032:	9a a5       	ldd	r25, Y+42	; 0x2a
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	4a ef       	ldi	r20, 0xFA	; 250
    303a:	54 e4       	ldi	r21, 0x44	; 68
    303c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	8b a3       	std	Y+35, r24	; 0x23
    3046:	9c a3       	std	Y+36, r25	; 0x24
    3048:	ad a3       	std	Y+37, r26	; 0x25
    304a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    304c:	6b a1       	ldd	r22, Y+35	; 0x23
    304e:	7c a1       	ldd	r23, Y+36	; 0x24
    3050:	8d a1       	ldd	r24, Y+37	; 0x25
    3052:	9e a1       	ldd	r25, Y+38	; 0x26
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e8       	ldi	r20, 0x80	; 128
    305a:	5f e3       	ldi	r21, 0x3F	; 63
    305c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3060:	88 23       	and	r24, r24
    3062:	2c f4       	brge	.+10     	; 0x306e <LCD_voidInit+0x198>
		__ticks = 1;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	9a a3       	std	Y+34, r25	; 0x22
    306a:	89 a3       	std	Y+33, r24	; 0x21
    306c:	3f c0       	rjmp	.+126    	; 0x30ec <LCD_voidInit+0x216>
	else if (__tmp > 65535)
    306e:	6b a1       	ldd	r22, Y+35	; 0x23
    3070:	7c a1       	ldd	r23, Y+36	; 0x24
    3072:	8d a1       	ldd	r24, Y+37	; 0x25
    3074:	9e a1       	ldd	r25, Y+38	; 0x26
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	3f ef       	ldi	r19, 0xFF	; 255
    307a:	4f e7       	ldi	r20, 0x7F	; 127
    307c:	57 e4       	ldi	r21, 0x47	; 71
    307e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3082:	18 16       	cp	r1, r24
    3084:	4c f5       	brge	.+82     	; 0x30d8 <LCD_voidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3086:	6f a1       	ldd	r22, Y+39	; 0x27
    3088:	78 a5       	ldd	r23, Y+40	; 0x28
    308a:	89 a5       	ldd	r24, Y+41	; 0x29
    308c:	9a a5       	ldd	r25, Y+42	; 0x2a
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e2       	ldi	r20, 0x20	; 32
    3094:	51 e4       	ldi	r21, 0x41	; 65
    3096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	bc 01       	movw	r22, r24
    30a0:	cd 01       	movw	r24, r26
    30a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	9a a3       	std	Y+34, r25	; 0x22
    30ac:	89 a3       	std	Y+33, r24	; 0x21
    30ae:	0f c0       	rjmp	.+30     	; 0x30ce <LCD_voidInit+0x1f8>
    30b0:	88 ec       	ldi	r24, 0xC8	; 200
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	98 a3       	std	Y+32, r25	; 0x20
    30b6:	8f 8f       	std	Y+31, r24	; 0x1f
    30b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30ba:	98 a1       	ldd	r25, Y+32	; 0x20
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	f1 f7       	brne	.-4      	; 0x30bc <LCD_voidInit+0x1e6>
    30c0:	98 a3       	std	Y+32, r25	; 0x20
    30c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c4:	89 a1       	ldd	r24, Y+33	; 0x21
    30c6:	9a a1       	ldd	r25, Y+34	; 0x22
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	9a a3       	std	Y+34, r25	; 0x22
    30cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ce:	89 a1       	ldd	r24, Y+33	; 0x21
    30d0:	9a a1       	ldd	r25, Y+34	; 0x22
    30d2:	00 97       	sbiw	r24, 0x00	; 0
    30d4:	69 f7       	brne	.-38     	; 0x30b0 <LCD_voidInit+0x1da>
    30d6:	14 c0       	rjmp	.+40     	; 0x3100 <LCD_voidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d8:	6b a1       	ldd	r22, Y+35	; 0x23
    30da:	7c a1       	ldd	r23, Y+36	; 0x24
    30dc:	8d a1       	ldd	r24, Y+37	; 0x25
    30de:	9e a1       	ldd	r25, Y+38	; 0x26
    30e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	9a a3       	std	Y+34, r25	; 0x22
    30ea:	89 a3       	std	Y+33, r24	; 0x21
    30ec:	89 a1       	ldd	r24, Y+33	; 0x21
    30ee:	9a a1       	ldd	r25, Y+34	; 0x22
    30f0:	9e 8f       	std	Y+30, r25	; 0x1e
    30f2:	8d 8f       	std	Y+29, r24	; 0x1d
    30f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <LCD_voidInit+0x222>
    30fc:	9e 8f       	std	Y+30, r25	; 0x1e
    30fe:	8d 8f       	std	Y+29, r24	; 0x1d
		//LCD_voidSendCommand(LCD_2LINES_FOUR_BIT);
		_delay_ms(2);
	}

	LCD_voidSendCommand(LCD_CURSOR_OFF);
    3100:	8c e0       	ldi	r24, 0x0C	; 12
    3102:	0e 94 73 19 	call	0x32e6	; 0x32e6 <LCD_voidSendCommand>
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	a0 e0       	ldi	r26, 0x00	; 0
    310c:	b0 e4       	ldi	r27, 0x40	; 64
    310e:	89 8f       	std	Y+25, r24	; 0x19
    3110:	9a 8f       	std	Y+26, r25	; 0x1a
    3112:	ab 8f       	std	Y+27, r26	; 0x1b
    3114:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3116:	69 8d       	ldd	r22, Y+25	; 0x19
    3118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    311a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    311c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a ef       	ldi	r20, 0xFA	; 250
    3124:	54 e4       	ldi	r21, 0x44	; 68
    3126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	8d 8b       	std	Y+21, r24	; 0x15
    3130:	9e 8b       	std	Y+22, r25	; 0x16
    3132:	af 8b       	std	Y+23, r26	; 0x17
    3134:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3136:	6d 89       	ldd	r22, Y+21	; 0x15
    3138:	7e 89       	ldd	r23, Y+22	; 0x16
    313a:	8f 89       	ldd	r24, Y+23	; 0x17
    313c:	98 8d       	ldd	r25, Y+24	; 0x18
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e8       	ldi	r20, 0x80	; 128
    3144:	5f e3       	ldi	r21, 0x3F	; 63
    3146:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    314a:	88 23       	and	r24, r24
    314c:	2c f4       	brge	.+10     	; 0x3158 <LCD_voidInit+0x282>
		__ticks = 1;
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	9c 8b       	std	Y+20, r25	; 0x14
    3154:	8b 8b       	std	Y+19, r24	; 0x13
    3156:	3f c0       	rjmp	.+126    	; 0x31d6 <LCD_voidInit+0x300>
	else if (__tmp > 65535)
    3158:	6d 89       	ldd	r22, Y+21	; 0x15
    315a:	7e 89       	ldd	r23, Y+22	; 0x16
    315c:	8f 89       	ldd	r24, Y+23	; 0x17
    315e:	98 8d       	ldd	r25, Y+24	; 0x18
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	3f ef       	ldi	r19, 0xFF	; 255
    3164:	4f e7       	ldi	r20, 0x7F	; 127
    3166:	57 e4       	ldi	r21, 0x47	; 71
    3168:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    316c:	18 16       	cp	r1, r24
    316e:	4c f5       	brge	.+82     	; 0x31c2 <LCD_voidInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3170:	69 8d       	ldd	r22, Y+25	; 0x19
    3172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e2       	ldi	r20, 0x20	; 32
    317e:	51 e4       	ldi	r21, 0x41	; 65
    3180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	bc 01       	movw	r22, r24
    318a:	cd 01       	movw	r24, r26
    318c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	9c 8b       	std	Y+20, r25	; 0x14
    3196:	8b 8b       	std	Y+19, r24	; 0x13
    3198:	0f c0       	rjmp	.+30     	; 0x31b8 <LCD_voidInit+0x2e2>
    319a:	88 ec       	ldi	r24, 0xC8	; 200
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	9a 8b       	std	Y+18, r25	; 0x12
    31a0:	89 8b       	std	Y+17, r24	; 0x11
    31a2:	89 89       	ldd	r24, Y+17	; 0x11
    31a4:	9a 89       	ldd	r25, Y+18	; 0x12
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <LCD_voidInit+0x2d0>
    31aa:	9a 8b       	std	Y+18, r25	; 0x12
    31ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ae:	8b 89       	ldd	r24, Y+19	; 0x13
    31b0:	9c 89       	ldd	r25, Y+20	; 0x14
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	9c 8b       	std	Y+20, r25	; 0x14
    31b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b8:	8b 89       	ldd	r24, Y+19	; 0x13
    31ba:	9c 89       	ldd	r25, Y+20	; 0x14
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	69 f7       	brne	.-38     	; 0x319a <LCD_voidInit+0x2c4>
    31c0:	14 c0       	rjmp	.+40     	; 0x31ea <LCD_voidInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c2:	6d 89       	ldd	r22, Y+21	; 0x15
    31c4:	7e 89       	ldd	r23, Y+22	; 0x16
    31c6:	8f 89       	ldd	r24, Y+23	; 0x17
    31c8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9c 8b       	std	Y+20, r25	; 0x14
    31d4:	8b 8b       	std	Y+19, r24	; 0x13
    31d6:	8b 89       	ldd	r24, Y+19	; 0x13
    31d8:	9c 89       	ldd	r25, Y+20	; 0x14
    31da:	98 8b       	std	Y+16, r25	; 0x10
    31dc:	8f 87       	std	Y+15, r24	; 0x0f
    31de:	8f 85       	ldd	r24, Y+15	; 0x0f
    31e0:	98 89       	ldd	r25, Y+16	; 0x10
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <LCD_voidInit+0x30c>
    31e6:	98 8b       	std	Y+16, r25	; 0x10
    31e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	0e 94 73 19 	call	0x32e6	; 0x32e6 <LCD_voidSendCommand>
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	a0 e0       	ldi	r26, 0x00	; 0
    31f6:	b0 e4       	ldi	r27, 0x40	; 64
    31f8:	8b 87       	std	Y+11, r24	; 0x0b
    31fa:	9c 87       	std	Y+12, r25	; 0x0c
    31fc:	ad 87       	std	Y+13, r26	; 0x0d
    31fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3200:	6b 85       	ldd	r22, Y+11	; 0x0b
    3202:	7c 85       	ldd	r23, Y+12	; 0x0c
    3204:	8d 85       	ldd	r24, Y+13	; 0x0d
    3206:	9e 85       	ldd	r25, Y+14	; 0x0e
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	4a ef       	ldi	r20, 0xFA	; 250
    320e:	54 e4       	ldi	r21, 0x44	; 68
    3210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	8f 83       	std	Y+7, r24	; 0x07
    321a:	98 87       	std	Y+8, r25	; 0x08
    321c:	a9 87       	std	Y+9, r26	; 0x09
    321e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3220:	6f 81       	ldd	r22, Y+7	; 0x07
    3222:	78 85       	ldd	r23, Y+8	; 0x08
    3224:	89 85       	ldd	r24, Y+9	; 0x09
    3226:	9a 85       	ldd	r25, Y+10	; 0x0a
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e8       	ldi	r20, 0x80	; 128
    322e:	5f e3       	ldi	r21, 0x3F	; 63
    3230:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3234:	88 23       	and	r24, r24
    3236:	2c f4       	brge	.+10     	; 0x3242 <LCD_voidInit+0x36c>
		__ticks = 1;
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	9e 83       	std	Y+6, r25	; 0x06
    323e:	8d 83       	std	Y+5, r24	; 0x05
    3240:	3f c0       	rjmp	.+126    	; 0x32c0 <LCD_voidInit+0x3ea>
	else if (__tmp > 65535)
    3242:	6f 81       	ldd	r22, Y+7	; 0x07
    3244:	78 85       	ldd	r23, Y+8	; 0x08
    3246:	89 85       	ldd	r24, Y+9	; 0x09
    3248:	9a 85       	ldd	r25, Y+10	; 0x0a
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	3f ef       	ldi	r19, 0xFF	; 255
    324e:	4f e7       	ldi	r20, 0x7F	; 127
    3250:	57 e4       	ldi	r21, 0x47	; 71
    3252:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3256:	18 16       	cp	r1, r24
    3258:	4c f5       	brge	.+82     	; 0x32ac <LCD_voidInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325a:	6b 85       	ldd	r22, Y+11	; 0x0b
    325c:	7c 85       	ldd	r23, Y+12	; 0x0c
    325e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3260:	9e 85       	ldd	r25, Y+14	; 0x0e
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e2       	ldi	r20, 0x20	; 32
    3268:	51 e4       	ldi	r21, 0x41	; 65
    326a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	bc 01       	movw	r22, r24
    3274:	cd 01       	movw	r24, r26
    3276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	9e 83       	std	Y+6, r25	; 0x06
    3280:	8d 83       	std	Y+5, r24	; 0x05
    3282:	0f c0       	rjmp	.+30     	; 0x32a2 <LCD_voidInit+0x3cc>
    3284:	88 ec       	ldi	r24, 0xC8	; 200
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	9c 83       	std	Y+4, r25	; 0x04
    328a:	8b 83       	std	Y+3, r24	; 0x03
    328c:	8b 81       	ldd	r24, Y+3	; 0x03
    328e:	9c 81       	ldd	r25, Y+4	; 0x04
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <LCD_voidInit+0x3ba>
    3294:	9c 83       	std	Y+4, r25	; 0x04
    3296:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	9e 81       	ldd	r25, Y+6	; 0x06
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	9e 83       	std	Y+6, r25	; 0x06
    32a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a2:	8d 81       	ldd	r24, Y+5	; 0x05
    32a4:	9e 81       	ldd	r25, Y+6	; 0x06
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	69 f7       	brne	.-38     	; 0x3284 <LCD_voidInit+0x3ae>
    32aa:	14 c0       	rjmp	.+40     	; 0x32d4 <LCD_voidInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ac:	6f 81       	ldd	r22, Y+7	; 0x07
    32ae:	78 85       	ldd	r23, Y+8	; 0x08
    32b0:	89 85       	ldd	r24, Y+9	; 0x09
    32b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
    32c0:	8d 81       	ldd	r24, Y+5	; 0x05
    32c2:	9e 81       	ldd	r25, Y+6	; 0x06
    32c4:	9a 83       	std	Y+2, r25	; 0x02
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	9a 81       	ldd	r25, Y+2	; 0x02
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	f1 f7       	brne	.-4      	; 0x32cc <LCD_voidInit+0x3f6>
    32d0:	9a 83       	std	Y+2, r25	; 0x02
    32d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//LCD_voidSendCommand(LCD_ENTRY_MODE);

}
    32d4:	e8 96       	adiw	r28, 0x38	; 56
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	08 95       	ret

000032e6 <LCD_voidSendCommand>:


// Sends a command to the LCD
void LCD_voidSendCommand(u8 copy_u8Command) {
    32e6:	0f 93       	push	r16
    32e8:	1f 93       	push	r17
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	c3 56       	subi	r28, 0x63	; 99
    32f4:	d0 40       	sbci	r29, 0x00	; 0
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	fe 01       	movw	r30, r28
    3302:	ed 59       	subi	r30, 0x9D	; 157
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	63 e0       	ldi	r22, 0x03	; 3
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    3312:	fe 01       	movw	r30, r28
    3314:	e1 5a       	subi	r30, 0xA1	; 161
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	a0 e8       	ldi	r26, 0x80	; 128
    331e:	bf e3       	ldi	r27, 0x3F	; 63
    3320:	80 83       	st	Z, r24
    3322:	91 83       	std	Z+1, r25	; 0x01
    3324:	a2 83       	std	Z+2, r26	; 0x02
    3326:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3328:	8e 01       	movw	r16, r28
    332a:	05 5a       	subi	r16, 0xA5	; 165
    332c:	1f 4f       	sbci	r17, 0xFF	; 255
    332e:	fe 01       	movw	r30, r28
    3330:	e1 5a       	subi	r30, 0xA1	; 161
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	60 81       	ld	r22, Z
    3336:	71 81       	ldd	r23, Z+1	; 0x01
    3338:	82 81       	ldd	r24, Z+2	; 0x02
    333a:	93 81       	ldd	r25, Z+3	; 0x03
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	4a ef       	ldi	r20, 0xFA	; 250
    3342:	54 e4       	ldi	r21, 0x44	; 68
    3344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	f8 01       	movw	r30, r16
    334e:	80 83       	st	Z, r24
    3350:	91 83       	std	Z+1, r25	; 0x01
    3352:	a2 83       	std	Z+2, r26	; 0x02
    3354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3356:	fe 01       	movw	r30, r28
    3358:	e5 5a       	subi	r30, 0xA5	; 165
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	60 81       	ld	r22, Z
    335e:	71 81       	ldd	r23, Z+1	; 0x01
    3360:	82 81       	ldd	r24, Z+2	; 0x02
    3362:	93 81       	ldd	r25, Z+3	; 0x03
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e8       	ldi	r20, 0x80	; 128
    336a:	5f e3       	ldi	r21, 0x3F	; 63
    336c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3370:	88 23       	and	r24, r24
    3372:	44 f4       	brge	.+16     	; 0x3384 <LCD_voidSendCommand+0x9e>
		__ticks = 1;
    3374:	fe 01       	movw	r30, r28
    3376:	e7 5a       	subi	r30, 0xA7	; 167
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	80 83       	st	Z, r24
    3382:	64 c0       	rjmp	.+200    	; 0x344c <LCD_voidSendCommand+0x166>
	else if (__tmp > 65535)
    3384:	fe 01       	movw	r30, r28
    3386:	e5 5a       	subi	r30, 0xA5	; 165
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	60 81       	ld	r22, Z
    338c:	71 81       	ldd	r23, Z+1	; 0x01
    338e:	82 81       	ldd	r24, Z+2	; 0x02
    3390:	93 81       	ldd	r25, Z+3	; 0x03
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	3f ef       	ldi	r19, 0xFF	; 255
    3396:	4f e7       	ldi	r20, 0x7F	; 127
    3398:	57 e4       	ldi	r21, 0x47	; 71
    339a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    339e:	18 16       	cp	r1, r24
    33a0:	0c f0       	brlt	.+2      	; 0x33a4 <LCD_voidSendCommand+0xbe>
    33a2:	43 c0       	rjmp	.+134    	; 0x342a <LCD_voidSendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a4:	fe 01       	movw	r30, r28
    33a6:	e1 5a       	subi	r30, 0xA1	; 161
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	60 81       	ld	r22, Z
    33ac:	71 81       	ldd	r23, Z+1	; 0x01
    33ae:	82 81       	ldd	r24, Z+2	; 0x02
    33b0:	93 81       	ldd	r25, Z+3	; 0x03
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e2       	ldi	r20, 0x20	; 32
    33b8:	51 e4       	ldi	r21, 0x41	; 65
    33ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	8e 01       	movw	r16, r28
    33c4:	07 5a       	subi	r16, 0xA7	; 167
    33c6:	1f 4f       	sbci	r17, 0xFF	; 255
    33c8:	bc 01       	movw	r22, r24
    33ca:	cd 01       	movw	r24, r26
    33cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	f8 01       	movw	r30, r16
    33d6:	91 83       	std	Z+1, r25	; 0x01
    33d8:	80 83       	st	Z, r24
    33da:	1f c0       	rjmp	.+62     	; 0x341a <LCD_voidSendCommand+0x134>
    33dc:	fe 01       	movw	r30, r28
    33de:	e9 5a       	subi	r30, 0xA9	; 169
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	88 ec       	ldi	r24, 0xC8	; 200
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	91 83       	std	Z+1, r25	; 0x01
    33e8:	80 83       	st	Z, r24
    33ea:	fe 01       	movw	r30, r28
    33ec:	e9 5a       	subi	r30, 0xA9	; 169
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 81       	ld	r24, Z
    33f2:	91 81       	ldd	r25, Z+1	; 0x01
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <LCD_voidSendCommand+0x10e>
    33f8:	fe 01       	movw	r30, r28
    33fa:	e9 5a       	subi	r30, 0xA9	; 169
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3402:	de 01       	movw	r26, r28
    3404:	a7 5a       	subi	r26, 0xA7	; 167
    3406:	bf 4f       	sbci	r27, 0xFF	; 255
    3408:	fe 01       	movw	r30, r28
    340a:	e7 5a       	subi	r30, 0xA7	; 167
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	11 96       	adiw	r26, 0x01	; 1
    3416:	9c 93       	st	X, r25
    3418:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    341a:	fe 01       	movw	r30, r28
    341c:	e7 5a       	subi	r30, 0xA7	; 167
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	80 81       	ld	r24, Z
    3422:	91 81       	ldd	r25, Z+1	; 0x01
    3424:	00 97       	sbiw	r24, 0x00	; 0
    3426:	d1 f6       	brne	.-76     	; 0x33dc <LCD_voidSendCommand+0xf6>
    3428:	27 c0       	rjmp	.+78     	; 0x3478 <LCD_voidSendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342a:	8e 01       	movw	r16, r28
    342c:	07 5a       	subi	r16, 0xA7	; 167
    342e:	1f 4f       	sbci	r17, 0xFF	; 255
    3430:	fe 01       	movw	r30, r28
    3432:	e5 5a       	subi	r30, 0xA5	; 165
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	60 81       	ld	r22, Z
    3438:	71 81       	ldd	r23, Z+1	; 0x01
    343a:	82 81       	ldd	r24, Z+2	; 0x02
    343c:	93 81       	ldd	r25, Z+3	; 0x03
    343e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	f8 01       	movw	r30, r16
    3448:	91 83       	std	Z+1, r25	; 0x01
    344a:	80 83       	st	Z, r24
    344c:	de 01       	movw	r26, r28
    344e:	ab 5a       	subi	r26, 0xAB	; 171
    3450:	bf 4f       	sbci	r27, 0xFF	; 255
    3452:	fe 01       	movw	r30, r28
    3454:	e7 5a       	subi	r30, 0xA7	; 167
    3456:	ff 4f       	sbci	r31, 0xFF	; 255
    3458:	80 81       	ld	r24, Z
    345a:	91 81       	ldd	r25, Z+1	; 0x01
    345c:	8d 93       	st	X+, r24
    345e:	9c 93       	st	X, r25
    3460:	fe 01       	movw	r30, r28
    3462:	eb 5a       	subi	r30, 0xAB	; 171
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	91 81       	ldd	r25, Z+1	; 0x01
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <LCD_voidSendCommand+0x184>
    346e:	fe 01       	movw	r30, r28
    3470:	eb 5a       	subi	r30, 0xAB	; 171
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	91 83       	std	Z+1, r25	; 0x01
    3476:	80 83       	st	Z, r24
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	62 e0       	ldi	r22, 0x02	; 2
    347c:	41 e0       	ldi	r20, 0x01	; 1
    347e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    3482:	fe 01       	movw	r30, r28
    3484:	ef 5a       	subi	r30, 0xAF	; 175
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	a0 e8       	ldi	r26, 0x80	; 128
    348e:	bf e3       	ldi	r27, 0x3F	; 63
    3490:	80 83       	st	Z, r24
    3492:	91 83       	std	Z+1, r25	; 0x01
    3494:	a2 83       	std	Z+2, r26	; 0x02
    3496:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3498:	8e 01       	movw	r16, r28
    349a:	03 5b       	subi	r16, 0xB3	; 179
    349c:	1f 4f       	sbci	r17, 0xFF	; 255
    349e:	fe 01       	movw	r30, r28
    34a0:	ef 5a       	subi	r30, 0xAF	; 175
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	60 81       	ld	r22, Z
    34a6:	71 81       	ldd	r23, Z+1	; 0x01
    34a8:	82 81       	ldd	r24, Z+2	; 0x02
    34aa:	93 81       	ldd	r25, Z+3	; 0x03
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	4a ef       	ldi	r20, 0xFA	; 250
    34b2:	54 e4       	ldi	r21, 0x44	; 68
    34b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	f8 01       	movw	r30, r16
    34be:	80 83       	st	Z, r24
    34c0:	91 83       	std	Z+1, r25	; 0x01
    34c2:	a2 83       	std	Z+2, r26	; 0x02
    34c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34c6:	fe 01       	movw	r30, r28
    34c8:	e3 5b       	subi	r30, 0xB3	; 179
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	60 81       	ld	r22, Z
    34ce:	71 81       	ldd	r23, Z+1	; 0x01
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	93 81       	ldd	r25, Z+3	; 0x03
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e8       	ldi	r20, 0x80	; 128
    34da:	5f e3       	ldi	r21, 0x3F	; 63
    34dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34e0:	88 23       	and	r24, r24
    34e2:	44 f4       	brge	.+16     	; 0x34f4 <LCD_voidSendCommand+0x20e>
		__ticks = 1;
    34e4:	fe 01       	movw	r30, r28
    34e6:	e5 5b       	subi	r30, 0xB5	; 181
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	80 83       	st	Z, r24
    34f2:	64 c0       	rjmp	.+200    	; 0x35bc <LCD_voidSendCommand+0x2d6>
	else if (__tmp > 65535)
    34f4:	fe 01       	movw	r30, r28
    34f6:	e3 5b       	subi	r30, 0xB3	; 179
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	60 81       	ld	r22, Z
    34fc:	71 81       	ldd	r23, Z+1	; 0x01
    34fe:	82 81       	ldd	r24, Z+2	; 0x02
    3500:	93 81       	ldd	r25, Z+3	; 0x03
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	3f ef       	ldi	r19, 0xFF	; 255
    3506:	4f e7       	ldi	r20, 0x7F	; 127
    3508:	57 e4       	ldi	r21, 0x47	; 71
    350a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    350e:	18 16       	cp	r1, r24
    3510:	0c f0       	brlt	.+2      	; 0x3514 <LCD_voidSendCommand+0x22e>
    3512:	43 c0       	rjmp	.+134    	; 0x359a <LCD_voidSendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3514:	fe 01       	movw	r30, r28
    3516:	ef 5a       	subi	r30, 0xAF	; 175
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	82 81       	ldd	r24, Z+2	; 0x02
    3520:	93 81       	ldd	r25, Z+3	; 0x03
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	40 e2       	ldi	r20, 0x20	; 32
    3528:	51 e4       	ldi	r21, 0x41	; 65
    352a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	8e 01       	movw	r16, r28
    3534:	05 5b       	subi	r16, 0xB5	; 181
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	bc 01       	movw	r22, r24
    353a:	cd 01       	movw	r24, r26
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	f8 01       	movw	r30, r16
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
    354a:	1f c0       	rjmp	.+62     	; 0x358a <LCD_voidSendCommand+0x2a4>
    354c:	fe 01       	movw	r30, r28
    354e:	e7 5b       	subi	r30, 0xB7	; 183
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	88 ec       	ldi	r24, 0xC8	; 200
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	91 83       	std	Z+1, r25	; 0x01
    3558:	80 83       	st	Z, r24
    355a:	fe 01       	movw	r30, r28
    355c:	e7 5b       	subi	r30, 0xB7	; 183
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	80 81       	ld	r24, Z
    3562:	91 81       	ldd	r25, Z+1	; 0x01
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <LCD_voidSendCommand+0x27e>
    3568:	fe 01       	movw	r30, r28
    356a:	e7 5b       	subi	r30, 0xB7	; 183
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	91 83       	std	Z+1, r25	; 0x01
    3570:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3572:	de 01       	movw	r26, r28
    3574:	a5 5b       	subi	r26, 0xB5	; 181
    3576:	bf 4f       	sbci	r27, 0xFF	; 255
    3578:	fe 01       	movw	r30, r28
    357a:	e5 5b       	subi	r30, 0xB5	; 181
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	80 81       	ld	r24, Z
    3580:	91 81       	ldd	r25, Z+1	; 0x01
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	11 96       	adiw	r26, 0x01	; 1
    3586:	9c 93       	st	X, r25
    3588:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358a:	fe 01       	movw	r30, r28
    358c:	e5 5b       	subi	r30, 0xB5	; 181
    358e:	ff 4f       	sbci	r31, 0xFF	; 255
    3590:	80 81       	ld	r24, Z
    3592:	91 81       	ldd	r25, Z+1	; 0x01
    3594:	00 97       	sbiw	r24, 0x00	; 0
    3596:	d1 f6       	brne	.-76     	; 0x354c <LCD_voidSendCommand+0x266>
    3598:	27 c0       	rjmp	.+78     	; 0x35e8 <LCD_voidSendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359a:	8e 01       	movw	r16, r28
    359c:	05 5b       	subi	r16, 0xB5	; 181
    359e:	1f 4f       	sbci	r17, 0xFF	; 255
    35a0:	fe 01       	movw	r30, r28
    35a2:	e3 5b       	subi	r30, 0xB3	; 179
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	60 81       	ld	r22, Z
    35a8:	71 81       	ldd	r23, Z+1	; 0x01
    35aa:	82 81       	ldd	r24, Z+2	; 0x02
    35ac:	93 81       	ldd	r25, Z+3	; 0x03
    35ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	f8 01       	movw	r30, r16
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	80 83       	st	Z, r24
    35bc:	de 01       	movw	r26, r28
    35be:	a9 5b       	subi	r26, 0xB9	; 185
    35c0:	bf 4f       	sbci	r27, 0xFF	; 255
    35c2:	fe 01       	movw	r30, r28
    35c4:	e5 5b       	subi	r30, 0xB5	; 181
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	80 81       	ld	r24, Z
    35ca:	91 81       	ldd	r25, Z+1	; 0x01
    35cc:	8d 93       	st	X+, r24
    35ce:	9c 93       	st	X, r25
    35d0:	fe 01       	movw	r30, r28
    35d2:	e9 5b       	subi	r30, 0xB9	; 185
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 81       	ld	r24, Z
    35d8:	91 81       	ldd	r25, Z+1	; 0x01
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <LCD_voidSendCommand+0x2f4>
    35de:	fe 01       	movw	r30, r28
    35e0:	e9 5b       	subi	r30, 0xB9	; 185
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	91 83       	std	Z+1, r25	; 0x01
    35e6:	80 83       	st	Z, r24
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
    35e8:	fe 01       	movw	r30, r28
    35ea:	ed 59       	subi	r30, 0x9D	; 157
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	82 95       	swap	r24
    35f2:	8f 70       	andi	r24, 0x0F	; 15
    35f4:	98 2f       	mov	r25, r24
    35f6:	91 70       	andi	r25, 0x01	; 1
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	49 2f       	mov	r20, r25
    35fe:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
    3602:	fe 01       	movw	r30, r28
    3604:	ed 59       	subi	r30, 0x9D	; 157
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	80 81       	ld	r24, Z
    360a:	82 95       	swap	r24
    360c:	86 95       	lsr	r24
    360e:	87 70       	andi	r24, 0x07	; 7
    3610:	98 2f       	mov	r25, r24
    3612:	91 70       	andi	r25, 0x01	; 1
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	61 e0       	ldi	r22, 0x01	; 1
    3618:	49 2f       	mov	r20, r25
    361a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
    361e:	fe 01       	movw	r30, r28
    3620:	ed 59       	subi	r30, 0x9D	; 157
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	80 81       	ld	r24, Z
    3626:	82 95       	swap	r24
    3628:	86 95       	lsr	r24
    362a:	86 95       	lsr	r24
    362c:	83 70       	andi	r24, 0x03	; 3
    362e:	98 2f       	mov	r25, r24
    3630:	91 70       	andi	r25, 0x01	; 1
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	62 e0       	ldi	r22, 0x02	; 2
    3636:	49 2f       	mov	r20, r25
    3638:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
    363c:	fe 01       	movw	r30, r28
    363e:	ed 59       	subi	r30, 0x9D	; 157
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 81       	ld	r24, Z
    3644:	98 2f       	mov	r25, r24
    3646:	99 1f       	adc	r25, r25
    3648:	99 27       	eor	r25, r25
    364a:	99 1f       	adc	r25, r25
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	63 e0       	ldi	r22, 0x03	; 3
    3650:	49 2f       	mov	r20, r25
    3652:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    3656:	fe 01       	movw	r30, r28
    3658:	ed 5b       	subi	r30, 0xBD	; 189
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	a0 e8       	ldi	r26, 0x80	; 128
    3662:	bf e3       	ldi	r27, 0x3F	; 63
    3664:	80 83       	st	Z, r24
    3666:	91 83       	std	Z+1, r25	; 0x01
    3668:	a2 83       	std	Z+2, r26	; 0x02
    366a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366c:	8e 01       	movw	r16, r28
    366e:	01 5c       	subi	r16, 0xC1	; 193
    3670:	1f 4f       	sbci	r17, 0xFF	; 255
    3672:	fe 01       	movw	r30, r28
    3674:	ed 5b       	subi	r30, 0xBD	; 189
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	60 81       	ld	r22, Z
    367a:	71 81       	ldd	r23, Z+1	; 0x01
    367c:	82 81       	ldd	r24, Z+2	; 0x02
    367e:	93 81       	ldd	r25, Z+3	; 0x03
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	4a ef       	ldi	r20, 0xFA	; 250
    3686:	54 e4       	ldi	r21, 0x44	; 68
    3688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	f8 01       	movw	r30, r16
    3692:	80 83       	st	Z, r24
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	a2 83       	std	Z+2, r26	; 0x02
    3698:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    369a:	fe 01       	movw	r30, r28
    369c:	ff 96       	adiw	r30, 0x3f	; 63
    369e:	60 81       	ld	r22, Z
    36a0:	71 81       	ldd	r23, Z+1	; 0x01
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e8       	ldi	r20, 0x80	; 128
    36ac:	5f e3       	ldi	r21, 0x3F	; 63
    36ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36b2:	88 23       	and	r24, r24
    36b4:	2c f4       	brge	.+10     	; 0x36c0 <LCD_voidSendCommand+0x3da>
		__ticks = 1;
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	9e af       	std	Y+62, r25	; 0x3e
    36bc:	8d af       	std	Y+61, r24	; 0x3d
    36be:	46 c0       	rjmp	.+140    	; 0x374c <LCD_voidSendCommand+0x466>
	else if (__tmp > 65535)
    36c0:	fe 01       	movw	r30, r28
    36c2:	ff 96       	adiw	r30, 0x3f	; 63
    36c4:	60 81       	ld	r22, Z
    36c6:	71 81       	ldd	r23, Z+1	; 0x01
    36c8:	82 81       	ldd	r24, Z+2	; 0x02
    36ca:	93 81       	ldd	r25, Z+3	; 0x03
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	3f ef       	ldi	r19, 0xFF	; 255
    36d0:	4f e7       	ldi	r20, 0x7F	; 127
    36d2:	57 e4       	ldi	r21, 0x47	; 71
    36d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    36d8:	18 16       	cp	r1, r24
    36da:	64 f5       	brge	.+88     	; 0x3734 <LCD_voidSendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36dc:	fe 01       	movw	r30, r28
    36de:	ed 5b       	subi	r30, 0xBD	; 189
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	60 81       	ld	r22, Z
    36e4:	71 81       	ldd	r23, Z+1	; 0x01
    36e6:	82 81       	ldd	r24, Z+2	; 0x02
    36e8:	93 81       	ldd	r25, Z+3	; 0x03
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	40 e2       	ldi	r20, 0x20	; 32
    36f0:	51 e4       	ldi	r21, 0x41	; 65
    36f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	bc 01       	movw	r22, r24
    36fc:	cd 01       	movw	r24, r26
    36fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	9e af       	std	Y+62, r25	; 0x3e
    3708:	8d af       	std	Y+61, r24	; 0x3d
    370a:	0f c0       	rjmp	.+30     	; 0x372a <LCD_voidSendCommand+0x444>
    370c:	88 ec       	ldi	r24, 0xC8	; 200
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	9c af       	std	Y+60, r25	; 0x3c
    3712:	8b af       	std	Y+59, r24	; 0x3b
    3714:	8b ad       	ldd	r24, Y+59	; 0x3b
    3716:	9c ad       	ldd	r25, Y+60	; 0x3c
    3718:	01 97       	sbiw	r24, 0x01	; 1
    371a:	f1 f7       	brne	.-4      	; 0x3718 <LCD_voidSendCommand+0x432>
    371c:	9c af       	std	Y+60, r25	; 0x3c
    371e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3720:	8d ad       	ldd	r24, Y+61	; 0x3d
    3722:	9e ad       	ldd	r25, Y+62	; 0x3e
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	9e af       	std	Y+62, r25	; 0x3e
    3728:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    372a:	8d ad       	ldd	r24, Y+61	; 0x3d
    372c:	9e ad       	ldd	r25, Y+62	; 0x3e
    372e:	00 97       	sbiw	r24, 0x00	; 0
    3730:	69 f7       	brne	.-38     	; 0x370c <LCD_voidSendCommand+0x426>
    3732:	16 c0       	rjmp	.+44     	; 0x3760 <LCD_voidSendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3734:	fe 01       	movw	r30, r28
    3736:	ff 96       	adiw	r30, 0x3f	; 63
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	9e af       	std	Y+62, r25	; 0x3e
    374a:	8d af       	std	Y+61, r24	; 0x3d
    374c:	8d ad       	ldd	r24, Y+61	; 0x3d
    374e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3750:	9a af       	std	Y+58, r25	; 0x3a
    3752:	89 af       	std	Y+57, r24	; 0x39
    3754:	89 ad       	ldd	r24, Y+57	; 0x39
    3756:	9a ad       	ldd	r25, Y+58	; 0x3a
    3758:	01 97       	sbiw	r24, 0x01	; 1
    375a:	f1 f7       	brne	.-4      	; 0x3758 <LCD_voidSendCommand+0x472>
    375c:	9a af       	std	Y+58, r25	; 0x3a
    375e:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	62 e0       	ldi	r22, 0x02	; 2
    3764:	40 e0       	ldi	r20, 0x00	; 0
    3766:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	a0 e8       	ldi	r26, 0x80	; 128
    3770:	bf e3       	ldi	r27, 0x3F	; 63
    3772:	8d ab       	std	Y+53, r24	; 0x35
    3774:	9e ab       	std	Y+54, r25	; 0x36
    3776:	af ab       	std	Y+55, r26	; 0x37
    3778:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377a:	6d a9       	ldd	r22, Y+53	; 0x35
    377c:	7e a9       	ldd	r23, Y+54	; 0x36
    377e:	8f a9       	ldd	r24, Y+55	; 0x37
    3780:	98 ad       	ldd	r25, Y+56	; 0x38
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	4a ef       	ldi	r20, 0xFA	; 250
    3788:	54 e4       	ldi	r21, 0x44	; 68
    378a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	89 ab       	std	Y+49, r24	; 0x31
    3794:	9a ab       	std	Y+50, r25	; 0x32
    3796:	ab ab       	std	Y+51, r26	; 0x33
    3798:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    379a:	69 a9       	ldd	r22, Y+49	; 0x31
    379c:	7a a9       	ldd	r23, Y+50	; 0x32
    379e:	8b a9       	ldd	r24, Y+51	; 0x33
    37a0:	9c a9       	ldd	r25, Y+52	; 0x34
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	40 e8       	ldi	r20, 0x80	; 128
    37a8:	5f e3       	ldi	r21, 0x3F	; 63
    37aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37ae:	88 23       	and	r24, r24
    37b0:	2c f4       	brge	.+10     	; 0x37bc <LCD_voidSendCommand+0x4d6>
		__ticks = 1;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	98 ab       	std	Y+48, r25	; 0x30
    37b8:	8f a7       	std	Y+47, r24	; 0x2f
    37ba:	3f c0       	rjmp	.+126    	; 0x383a <LCD_voidSendCommand+0x554>
	else if (__tmp > 65535)
    37bc:	69 a9       	ldd	r22, Y+49	; 0x31
    37be:	7a a9       	ldd	r23, Y+50	; 0x32
    37c0:	8b a9       	ldd	r24, Y+51	; 0x33
    37c2:	9c a9       	ldd	r25, Y+52	; 0x34
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	3f ef       	ldi	r19, 0xFF	; 255
    37c8:	4f e7       	ldi	r20, 0x7F	; 127
    37ca:	57 e4       	ldi	r21, 0x47	; 71
    37cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    37d0:	18 16       	cp	r1, r24
    37d2:	4c f5       	brge	.+82     	; 0x3826 <LCD_voidSendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d4:	6d a9       	ldd	r22, Y+53	; 0x35
    37d6:	7e a9       	ldd	r23, Y+54	; 0x36
    37d8:	8f a9       	ldd	r24, Y+55	; 0x37
    37da:	98 ad       	ldd	r25, Y+56	; 0x38
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	40 e2       	ldi	r20, 0x20	; 32
    37e2:	51 e4       	ldi	r21, 0x41	; 65
    37e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	bc 01       	movw	r22, r24
    37ee:	cd 01       	movw	r24, r26
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	98 ab       	std	Y+48, r25	; 0x30
    37fa:	8f a7       	std	Y+47, r24	; 0x2f
    37fc:	0f c0       	rjmp	.+30     	; 0x381c <LCD_voidSendCommand+0x536>
    37fe:	88 ec       	ldi	r24, 0xC8	; 200
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	9e a7       	std	Y+46, r25	; 0x2e
    3804:	8d a7       	std	Y+45, r24	; 0x2d
    3806:	8d a5       	ldd	r24, Y+45	; 0x2d
    3808:	9e a5       	ldd	r25, Y+46	; 0x2e
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <LCD_voidSendCommand+0x524>
    380e:	9e a7       	std	Y+46, r25	; 0x2e
    3810:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3812:	8f a5       	ldd	r24, Y+47	; 0x2f
    3814:	98 a9       	ldd	r25, Y+48	; 0x30
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	98 ab       	std	Y+48, r25	; 0x30
    381a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381c:	8f a5       	ldd	r24, Y+47	; 0x2f
    381e:	98 a9       	ldd	r25, Y+48	; 0x30
    3820:	00 97       	sbiw	r24, 0x00	; 0
    3822:	69 f7       	brne	.-38     	; 0x37fe <LCD_voidSendCommand+0x518>
    3824:	14 c0       	rjmp	.+40     	; 0x384e <LCD_voidSendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3826:	69 a9       	ldd	r22, Y+49	; 0x31
    3828:	7a a9       	ldd	r23, Y+50	; 0x32
    382a:	8b a9       	ldd	r24, Y+51	; 0x33
    382c:	9c a9       	ldd	r25, Y+52	; 0x34
    382e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	98 ab       	std	Y+48, r25	; 0x30
    3838:	8f a7       	std	Y+47, r24	; 0x2f
    383a:	8f a5       	ldd	r24, Y+47	; 0x2f
    383c:	98 a9       	ldd	r25, Y+48	; 0x30
    383e:	9c a7       	std	Y+44, r25	; 0x2c
    3840:	8b a7       	std	Y+43, r24	; 0x2b
    3842:	8b a5       	ldd	r24, Y+43	; 0x2b
    3844:	9c a5       	ldd	r25, Y+44	; 0x2c
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <LCD_voidSendCommand+0x560>
    384a:	9c a7       	std	Y+44, r25	; 0x2c
    384c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	62 e0       	ldi	r22, 0x02	; 2
    3852:	41 e0       	ldi	r20, 0x01	; 1
    3854:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	a0 e8       	ldi	r26, 0x80	; 128
    385e:	bf e3       	ldi	r27, 0x3F	; 63
    3860:	8f a3       	std	Y+39, r24	; 0x27
    3862:	98 a7       	std	Y+40, r25	; 0x28
    3864:	a9 a7       	std	Y+41, r26	; 0x29
    3866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3868:	6f a1       	ldd	r22, Y+39	; 0x27
    386a:	78 a5       	ldd	r23, Y+40	; 0x28
    386c:	89 a5       	ldd	r24, Y+41	; 0x29
    386e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	4a ef       	ldi	r20, 0xFA	; 250
    3876:	54 e4       	ldi	r21, 0x44	; 68
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	8b a3       	std	Y+35, r24	; 0x23
    3882:	9c a3       	std	Y+36, r25	; 0x24
    3884:	ad a3       	std	Y+37, r26	; 0x25
    3886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3888:	6b a1       	ldd	r22, Y+35	; 0x23
    388a:	7c a1       	ldd	r23, Y+36	; 0x24
    388c:	8d a1       	ldd	r24, Y+37	; 0x25
    388e:	9e a1       	ldd	r25, Y+38	; 0x26
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e8       	ldi	r20, 0x80	; 128
    3896:	5f e3       	ldi	r21, 0x3F	; 63
    3898:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    389c:	88 23       	and	r24, r24
    389e:	2c f4       	brge	.+10     	; 0x38aa <LCD_voidSendCommand+0x5c4>
		__ticks = 1;
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	9a a3       	std	Y+34, r25	; 0x22
    38a6:	89 a3       	std	Y+33, r24	; 0x21
    38a8:	3f c0       	rjmp	.+126    	; 0x3928 <LCD_voidSendCommand+0x642>
	else if (__tmp > 65535)
    38aa:	6b a1       	ldd	r22, Y+35	; 0x23
    38ac:	7c a1       	ldd	r23, Y+36	; 0x24
    38ae:	8d a1       	ldd	r24, Y+37	; 0x25
    38b0:	9e a1       	ldd	r25, Y+38	; 0x26
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	3f ef       	ldi	r19, 0xFF	; 255
    38b6:	4f e7       	ldi	r20, 0x7F	; 127
    38b8:	57 e4       	ldi	r21, 0x47	; 71
    38ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    38be:	18 16       	cp	r1, r24
    38c0:	4c f5       	brge	.+82     	; 0x3914 <LCD_voidSendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c2:	6f a1       	ldd	r22, Y+39	; 0x27
    38c4:	78 a5       	ldd	r23, Y+40	; 0x28
    38c6:	89 a5       	ldd	r24, Y+41	; 0x29
    38c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e2       	ldi	r20, 0x20	; 32
    38d0:	51 e4       	ldi	r21, 0x41	; 65
    38d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	bc 01       	movw	r22, r24
    38dc:	cd 01       	movw	r24, r26
    38de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	9a a3       	std	Y+34, r25	; 0x22
    38e8:	89 a3       	std	Y+33, r24	; 0x21
    38ea:	0f c0       	rjmp	.+30     	; 0x390a <LCD_voidSendCommand+0x624>
    38ec:	88 ec       	ldi	r24, 0xC8	; 200
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	98 a3       	std	Y+32, r25	; 0x20
    38f2:	8f 8f       	std	Y+31, r24	; 0x1f
    38f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38f6:	98 a1       	ldd	r25, Y+32	; 0x20
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	f1 f7       	brne	.-4      	; 0x38f8 <LCD_voidSendCommand+0x612>
    38fc:	98 a3       	std	Y+32, r25	; 0x20
    38fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3900:	89 a1       	ldd	r24, Y+33	; 0x21
    3902:	9a a1       	ldd	r25, Y+34	; 0x22
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	9a a3       	std	Y+34, r25	; 0x22
    3908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390a:	89 a1       	ldd	r24, Y+33	; 0x21
    390c:	9a a1       	ldd	r25, Y+34	; 0x22
    390e:	00 97       	sbiw	r24, 0x00	; 0
    3910:	69 f7       	brne	.-38     	; 0x38ec <LCD_voidSendCommand+0x606>
    3912:	14 c0       	rjmp	.+40     	; 0x393c <LCD_voidSendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3914:	6b a1       	ldd	r22, Y+35	; 0x23
    3916:	7c a1       	ldd	r23, Y+36	; 0x24
    3918:	8d a1       	ldd	r24, Y+37	; 0x25
    391a:	9e a1       	ldd	r25, Y+38	; 0x26
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	9a a3       	std	Y+34, r25	; 0x22
    3926:	89 a3       	std	Y+33, r24	; 0x21
    3928:	89 a1       	ldd	r24, Y+33	; 0x21
    392a:	9a a1       	ldd	r25, Y+34	; 0x22
    392c:	9e 8f       	std	Y+30, r25	; 0x1e
    392e:	8d 8f       	std	Y+29, r24	; 0x1d
    3930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCD_voidSendCommand+0x64e>
    3938:	9e 8f       	std	Y+30, r25	; 0x1e
    393a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
    393c:	fe 01       	movw	r30, r28
    393e:	ed 59       	subi	r30, 0x9D	; 157
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	80 81       	ld	r24, Z
    3944:	98 2f       	mov	r25, r24
    3946:	91 70       	andi	r25, 0x01	; 1
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	60 e0       	ldi	r22, 0x00	; 0
    394c:	49 2f       	mov	r20, r25
    394e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
    3952:	fe 01       	movw	r30, r28
    3954:	ed 59       	subi	r30, 0x9D	; 157
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	80 81       	ld	r24, Z
    395a:	86 95       	lsr	r24
    395c:	98 2f       	mov	r25, r24
    395e:	91 70       	andi	r25, 0x01	; 1
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	61 e0       	ldi	r22, 0x01	; 1
    3964:	49 2f       	mov	r20, r25
    3966:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
    396a:	fe 01       	movw	r30, r28
    396c:	ed 59       	subi	r30, 0x9D	; 157
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	86 95       	lsr	r24
    3974:	86 95       	lsr	r24
    3976:	98 2f       	mov	r25, r24
    3978:	91 70       	andi	r25, 0x01	; 1
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	62 e0       	ldi	r22, 0x02	; 2
    397e:	49 2f       	mov	r20, r25
    3980:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
    3984:	fe 01       	movw	r30, r28
    3986:	ed 59       	subi	r30, 0x9D	; 157
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	80 81       	ld	r24, Z
    398c:	86 95       	lsr	r24
    398e:	86 95       	lsr	r24
    3990:	86 95       	lsr	r24
    3992:	98 2f       	mov	r25, r24
    3994:	91 70       	andi	r25, 0x01	; 1
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	63 e0       	ldi	r22, 0x03	; 3
    399a:	49 2f       	mov	r20, r25
    399c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	a0 e8       	ldi	r26, 0x80	; 128
    39a6:	bf e3       	ldi	r27, 0x3F	; 63
    39a8:	89 8f       	std	Y+25, r24	; 0x19
    39aa:	9a 8f       	std	Y+26, r25	; 0x1a
    39ac:	ab 8f       	std	Y+27, r26	; 0x1b
    39ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b0:	69 8d       	ldd	r22, Y+25	; 0x19
    39b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	4a ef       	ldi	r20, 0xFA	; 250
    39be:	54 e4       	ldi	r21, 0x44	; 68
    39c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	8d 8b       	std	Y+21, r24	; 0x15
    39ca:	9e 8b       	std	Y+22, r25	; 0x16
    39cc:	af 8b       	std	Y+23, r26	; 0x17
    39ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39d0:	6d 89       	ldd	r22, Y+21	; 0x15
    39d2:	7e 89       	ldd	r23, Y+22	; 0x16
    39d4:	8f 89       	ldd	r24, Y+23	; 0x17
    39d6:	98 8d       	ldd	r25, Y+24	; 0x18
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e8       	ldi	r20, 0x80	; 128
    39de:	5f e3       	ldi	r21, 0x3F	; 63
    39e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39e4:	88 23       	and	r24, r24
    39e6:	2c f4       	brge	.+10     	; 0x39f2 <LCD_voidSendCommand+0x70c>
		__ticks = 1;
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	9c 8b       	std	Y+20, r25	; 0x14
    39ee:	8b 8b       	std	Y+19, r24	; 0x13
    39f0:	3f c0       	rjmp	.+126    	; 0x3a70 <LCD_voidSendCommand+0x78a>
	else if (__tmp > 65535)
    39f2:	6d 89       	ldd	r22, Y+21	; 0x15
    39f4:	7e 89       	ldd	r23, Y+22	; 0x16
    39f6:	8f 89       	ldd	r24, Y+23	; 0x17
    39f8:	98 8d       	ldd	r25, Y+24	; 0x18
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	3f ef       	ldi	r19, 0xFF	; 255
    39fe:	4f e7       	ldi	r20, 0x7F	; 127
    3a00:	57 e4       	ldi	r21, 0x47	; 71
    3a02:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a06:	18 16       	cp	r1, r24
    3a08:	4c f5       	brge	.+82     	; 0x3a5c <LCD_voidSendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e2       	ldi	r20, 0x20	; 32
    3a18:	51 e4       	ldi	r21, 0x41	; 65
    3a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	9c 8b       	std	Y+20, r25	; 0x14
    3a30:	8b 8b       	std	Y+19, r24	; 0x13
    3a32:	0f c0       	rjmp	.+30     	; 0x3a52 <LCD_voidSendCommand+0x76c>
    3a34:	88 ec       	ldi	r24, 0xC8	; 200
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	9a 8b       	std	Y+18, r25	; 0x12
    3a3a:	89 8b       	std	Y+17, r24	; 0x11
    3a3c:	89 89       	ldd	r24, Y+17	; 0x11
    3a3e:	9a 89       	ldd	r25, Y+18	; 0x12
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <LCD_voidSendCommand+0x75a>
    3a44:	9a 8b       	std	Y+18, r25	; 0x12
    3a46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a48:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	9c 8b       	std	Y+20, r25	; 0x14
    3a50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a52:	8b 89       	ldd	r24, Y+19	; 0x13
    3a54:	9c 89       	ldd	r25, Y+20	; 0x14
    3a56:	00 97       	sbiw	r24, 0x00	; 0
    3a58:	69 f7       	brne	.-38     	; 0x3a34 <LCD_voidSendCommand+0x74e>
    3a5a:	14 c0       	rjmp	.+40     	; 0x3a84 <LCD_voidSendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a60:	8f 89       	ldd	r24, Y+23	; 0x17
    3a62:	98 8d       	ldd	r25, Y+24	; 0x18
    3a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	9c 8b       	std	Y+20, r25	; 0x14
    3a6e:	8b 8b       	std	Y+19, r24	; 0x13
    3a70:	8b 89       	ldd	r24, Y+19	; 0x13
    3a72:	9c 89       	ldd	r25, Y+20	; 0x14
    3a74:	98 8b       	std	Y+16, r25	; 0x10
    3a76:	8f 87       	std	Y+15, r24	; 0x0f
    3a78:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a7a:	98 89       	ldd	r25, Y+16	; 0x10
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <LCD_voidSendCommand+0x796>
    3a80:	98 8b       	std	Y+16, r25	; 0x10
    3a82:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	62 e0       	ldi	r22, 0x02	; 2
    3a88:	40 e0       	ldi	r20, 0x00	; 0
    3a8a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	a0 e8       	ldi	r26, 0x80	; 128
    3a94:	bf e3       	ldi	r27, 0x3F	; 63
    3a96:	8b 87       	std	Y+11, r24	; 0x0b
    3a98:	9c 87       	std	Y+12, r25	; 0x0c
    3a9a:	ad 87       	std	Y+13, r26	; 0x0d
    3a9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	4a ef       	ldi	r20, 0xFA	; 250
    3aac:	54 e4       	ldi	r21, 0x44	; 68
    3aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	8f 83       	std	Y+7, r24	; 0x07
    3ab8:	98 87       	std	Y+8, r25	; 0x08
    3aba:	a9 87       	std	Y+9, r26	; 0x09
    3abc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3abe:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac0:	78 85       	ldd	r23, Y+8	; 0x08
    3ac2:	89 85       	ldd	r24, Y+9	; 0x09
    3ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e8       	ldi	r20, 0x80	; 128
    3acc:	5f e3       	ldi	r21, 0x3F	; 63
    3ace:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3ad2:	88 23       	and	r24, r24
    3ad4:	2c f4       	brge	.+10     	; 0x3ae0 <LCD_voidSendCommand+0x7fa>
		__ticks = 1;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	9e 83       	std	Y+6, r25	; 0x06
    3adc:	8d 83       	std	Y+5, r24	; 0x05
    3ade:	3f c0       	rjmp	.+126    	; 0x3b5e <LCD_voidSendCommand+0x878>
	else if (__tmp > 65535)
    3ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae2:	78 85       	ldd	r23, Y+8	; 0x08
    3ae4:	89 85       	ldd	r24, Y+9	; 0x09
    3ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	3f ef       	ldi	r19, 0xFF	; 255
    3aec:	4f e7       	ldi	r20, 0x7F	; 127
    3aee:	57 e4       	ldi	r21, 0x47	; 71
    3af0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3af4:	18 16       	cp	r1, r24
    3af6:	4c f5       	brge	.+82     	; 0x3b4a <LCD_voidSendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e2       	ldi	r20, 0x20	; 32
    3b06:	51 e4       	ldi	r21, 0x41	; 65
    3b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	bc 01       	movw	r22, r24
    3b12:	cd 01       	movw	r24, r26
    3b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	9e 83       	std	Y+6, r25	; 0x06
    3b1e:	8d 83       	std	Y+5, r24	; 0x05
    3b20:	0f c0       	rjmp	.+30     	; 0x3b40 <LCD_voidSendCommand+0x85a>
    3b22:	88 ec       	ldi	r24, 0xC8	; 200
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	9c 83       	std	Y+4, r25	; 0x04
    3b28:	8b 83       	std	Y+3, r24	; 0x03
    3b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2e:	01 97       	sbiw	r24, 0x01	; 1
    3b30:	f1 f7       	brne	.-4      	; 0x3b2e <LCD_voidSendCommand+0x848>
    3b32:	9c 83       	std	Y+4, r25	; 0x04
    3b34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b36:	8d 81       	ldd	r24, Y+5	; 0x05
    3b38:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	9e 83       	std	Y+6, r25	; 0x06
    3b3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b40:	8d 81       	ldd	r24, Y+5	; 0x05
    3b42:	9e 81       	ldd	r25, Y+6	; 0x06
    3b44:	00 97       	sbiw	r24, 0x00	; 0
    3b46:	69 f7       	brne	.-38     	; 0x3b22 <LCD_voidSendCommand+0x83c>
    3b48:	14 c0       	rjmp	.+40     	; 0x3b72 <LCD_voidSendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b4c:	78 85       	ldd	r23, Y+8	; 0x08
    3b4e:	89 85       	ldd	r24, Y+9	; 0x09
    3b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	9e 83       	std	Y+6, r25	; 0x06
    3b5c:	8d 83       	std	Y+5, r24	; 0x05
    3b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b60:	9e 81       	ldd	r25, Y+6	; 0x06
    3b62:	9a 83       	std	Y+2, r25	; 0x02
    3b64:	89 83       	std	Y+1, r24	; 0x01
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	f1 f7       	brne	.-4      	; 0x3b6a <LCD_voidSendCommand+0x884>
    3b6e:	9a 83       	std	Y+2, r25	; 0x02
    3b70:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif
}
    3b72:	cd 59       	subi	r28, 0x9D	; 157
    3b74:	df 4f       	sbci	r29, 0xFF	; 255
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	cf 91       	pop	r28
    3b82:	df 91       	pop	r29
    3b84:	1f 91       	pop	r17
    3b86:	0f 91       	pop	r16
    3b88:	08 95       	ret

00003b8a <LCD_voidSendData>:


// Displays a character on the LCD
void LCD_voidSendData(u8 copy_u8data) {
    3b8a:	0f 93       	push	r16
    3b8c:	1f 93       	push	r17
    3b8e:	df 93       	push	r29
    3b90:	cf 93       	push	r28
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	c3 56       	subi	r28, 0x63	; 99
    3b98:	d0 40       	sbci	r29, 0x00	; 0
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	f8 94       	cli
    3b9e:	de bf       	out	0x3e, r29	; 62
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	cd bf       	out	0x3d, r28	; 61
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	ed 59       	subi	r30, 0x9D	; 157
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	63 e0       	ldi	r22, 0x03	; 3
    3bb0:	41 e0       	ldi	r20, 0x01	; 1
    3bb2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e1 5a       	subi	r30, 0xA1	; 161
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	a0 e8       	ldi	r26, 0x80	; 128
    3bc2:	bf e3       	ldi	r27, 0x3F	; 63
    3bc4:	80 83       	st	Z, r24
    3bc6:	91 83       	std	Z+1, r25	; 0x01
    3bc8:	a2 83       	std	Z+2, r26	; 0x02
    3bca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bcc:	8e 01       	movw	r16, r28
    3bce:	05 5a       	subi	r16, 0xA5	; 165
    3bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd2:	fe 01       	movw	r30, r28
    3bd4:	e1 5a       	subi	r30, 0xA1	; 161
    3bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd8:	60 81       	ld	r22, Z
    3bda:	71 81       	ldd	r23, Z+1	; 0x01
    3bdc:	82 81       	ldd	r24, Z+2	; 0x02
    3bde:	93 81       	ldd	r25, Z+3	; 0x03
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	4a ef       	ldi	r20, 0xFA	; 250
    3be6:	54 e4       	ldi	r21, 0x44	; 68
    3be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	f8 01       	movw	r30, r16
    3bf2:	80 83       	st	Z, r24
    3bf4:	91 83       	std	Z+1, r25	; 0x01
    3bf6:	a2 83       	std	Z+2, r26	; 0x02
    3bf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	e5 5a       	subi	r30, 0xA5	; 165
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	60 81       	ld	r22, Z
    3c02:	71 81       	ldd	r23, Z+1	; 0x01
    3c04:	82 81       	ldd	r24, Z+2	; 0x02
    3c06:	93 81       	ldd	r25, Z+3	; 0x03
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	40 e8       	ldi	r20, 0x80	; 128
    3c0e:	5f e3       	ldi	r21, 0x3F	; 63
    3c10:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c14:	88 23       	and	r24, r24
    3c16:	44 f4       	brge	.+16     	; 0x3c28 <LCD_voidSendData+0x9e>
		__ticks = 1;
    3c18:	fe 01       	movw	r30, r28
    3c1a:	e7 5a       	subi	r30, 0xA7	; 167
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	91 83       	std	Z+1, r25	; 0x01
    3c24:	80 83       	st	Z, r24
    3c26:	64 c0       	rjmp	.+200    	; 0x3cf0 <LCD_voidSendData+0x166>
	else if (__tmp > 65535)
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e5 5a       	subi	r30, 0xA5	; 165
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	60 81       	ld	r22, Z
    3c30:	71 81       	ldd	r23, Z+1	; 0x01
    3c32:	82 81       	ldd	r24, Z+2	; 0x02
    3c34:	93 81       	ldd	r25, Z+3	; 0x03
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	3f ef       	ldi	r19, 0xFF	; 255
    3c3a:	4f e7       	ldi	r20, 0x7F	; 127
    3c3c:	57 e4       	ldi	r21, 0x47	; 71
    3c3e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c42:	18 16       	cp	r1, r24
    3c44:	0c f0       	brlt	.+2      	; 0x3c48 <LCD_voidSendData+0xbe>
    3c46:	43 c0       	rjmp	.+134    	; 0x3cce <LCD_voidSendData+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c48:	fe 01       	movw	r30, r28
    3c4a:	e1 5a       	subi	r30, 0xA1	; 161
    3c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c4e:	60 81       	ld	r22, Z
    3c50:	71 81       	ldd	r23, Z+1	; 0x01
    3c52:	82 81       	ldd	r24, Z+2	; 0x02
    3c54:	93 81       	ldd	r25, Z+3	; 0x03
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	40 e2       	ldi	r20, 0x20	; 32
    3c5c:	51 e4       	ldi	r21, 0x41	; 65
    3c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	8e 01       	movw	r16, r28
    3c68:	07 5a       	subi	r16, 0xA7	; 167
    3c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6c:	bc 01       	movw	r22, r24
    3c6e:	cd 01       	movw	r24, r26
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	f8 01       	movw	r30, r16
    3c7a:	91 83       	std	Z+1, r25	; 0x01
    3c7c:	80 83       	st	Z, r24
    3c7e:	1f c0       	rjmp	.+62     	; 0x3cbe <LCD_voidSendData+0x134>
    3c80:	fe 01       	movw	r30, r28
    3c82:	e9 5a       	subi	r30, 0xA9	; 169
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	88 ec       	ldi	r24, 0xC8	; 200
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	91 83       	std	Z+1, r25	; 0x01
    3c8c:	80 83       	st	Z, r24
    3c8e:	fe 01       	movw	r30, r28
    3c90:	e9 5a       	subi	r30, 0xA9	; 169
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	91 81       	ldd	r25, Z+1	; 0x01
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	f1 f7       	brne	.-4      	; 0x3c98 <LCD_voidSendData+0x10e>
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e9 5a       	subi	r30, 0xA9	; 169
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	91 83       	std	Z+1, r25	; 0x01
    3ca4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca6:	de 01       	movw	r26, r28
    3ca8:	a7 5a       	subi	r26, 0xA7	; 167
    3caa:	bf 4f       	sbci	r27, 0xFF	; 255
    3cac:	fe 01       	movw	r30, r28
    3cae:	e7 5a       	subi	r30, 0xA7	; 167
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	80 81       	ld	r24, Z
    3cb4:	91 81       	ldd	r25, Z+1	; 0x01
    3cb6:	01 97       	sbiw	r24, 0x01	; 1
    3cb8:	11 96       	adiw	r26, 0x01	; 1
    3cba:	9c 93       	st	X, r25
    3cbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	e7 5a       	subi	r30, 0xA7	; 167
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	80 81       	ld	r24, Z
    3cc6:	91 81       	ldd	r25, Z+1	; 0x01
    3cc8:	00 97       	sbiw	r24, 0x00	; 0
    3cca:	d1 f6       	brne	.-76     	; 0x3c80 <LCD_voidSendData+0xf6>
    3ccc:	27 c0       	rjmp	.+78     	; 0x3d1c <LCD_voidSendData+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cce:	8e 01       	movw	r16, r28
    3cd0:	07 5a       	subi	r16, 0xA7	; 167
    3cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e5 5a       	subi	r30, 0xA5	; 165
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	60 81       	ld	r22, Z
    3cdc:	71 81       	ldd	r23, Z+1	; 0x01
    3cde:	82 81       	ldd	r24, Z+2	; 0x02
    3ce0:	93 81       	ldd	r25, Z+3	; 0x03
    3ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	f8 01       	movw	r30, r16
    3cec:	91 83       	std	Z+1, r25	; 0x01
    3cee:	80 83       	st	Z, r24
    3cf0:	de 01       	movw	r26, r28
    3cf2:	ab 5a       	subi	r26, 0xAB	; 171
    3cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	e7 5a       	subi	r30, 0xA7	; 167
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	80 81       	ld	r24, Z
    3cfe:	91 81       	ldd	r25, Z+1	; 0x01
    3d00:	8d 93       	st	X+, r24
    3d02:	9c 93       	st	X, r25
    3d04:	fe 01       	movw	r30, r28
    3d06:	eb 5a       	subi	r30, 0xAB	; 171
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	80 81       	ld	r24, Z
    3d0c:	91 81       	ldd	r25, Z+1	; 0x01
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	f1 f7       	brne	.-4      	; 0x3d0e <LCD_voidSendData+0x184>
    3d12:	fe 01       	movw	r30, r28
    3d14:	eb 5a       	subi	r30, 0xAB	; 171
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	91 83       	std	Z+1, r25	; 0x01
    3d1a:	80 83       	st	Z, r24
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	62 e0       	ldi	r22, 0x02	; 2
    3d20:	41 e0       	ldi	r20, 0x01	; 1
    3d22:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    3d26:	fe 01       	movw	r30, r28
    3d28:	ef 5a       	subi	r30, 0xAF	; 175
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	a0 e8       	ldi	r26, 0x80	; 128
    3d32:	bf e3       	ldi	r27, 0x3F	; 63
    3d34:	80 83       	st	Z, r24
    3d36:	91 83       	std	Z+1, r25	; 0x01
    3d38:	a2 83       	std	Z+2, r26	; 0x02
    3d3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d3c:	8e 01       	movw	r16, r28
    3d3e:	03 5b       	subi	r16, 0xB3	; 179
    3d40:	1f 4f       	sbci	r17, 0xFF	; 255
    3d42:	fe 01       	movw	r30, r28
    3d44:	ef 5a       	subi	r30, 0xAF	; 175
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	60 81       	ld	r22, Z
    3d4a:	71 81       	ldd	r23, Z+1	; 0x01
    3d4c:	82 81       	ldd	r24, Z+2	; 0x02
    3d4e:	93 81       	ldd	r25, Z+3	; 0x03
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	4a ef       	ldi	r20, 0xFA	; 250
    3d56:	54 e4       	ldi	r21, 0x44	; 68
    3d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	f8 01       	movw	r30, r16
    3d62:	80 83       	st	Z, r24
    3d64:	91 83       	std	Z+1, r25	; 0x01
    3d66:	a2 83       	std	Z+2, r26	; 0x02
    3d68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	e3 5b       	subi	r30, 0xB3	; 179
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	60 81       	ld	r22, Z
    3d72:	71 81       	ldd	r23, Z+1	; 0x01
    3d74:	82 81       	ldd	r24, Z+2	; 0x02
    3d76:	93 81       	ldd	r25, Z+3	; 0x03
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	40 e8       	ldi	r20, 0x80	; 128
    3d7e:	5f e3       	ldi	r21, 0x3F	; 63
    3d80:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d84:	88 23       	and	r24, r24
    3d86:	44 f4       	brge	.+16     	; 0x3d98 <LCD_voidSendData+0x20e>
		__ticks = 1;
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e5 5b       	subi	r30, 0xB5	; 181
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	80 83       	st	Z, r24
    3d96:	64 c0       	rjmp	.+200    	; 0x3e60 <LCD_voidSendData+0x2d6>
	else if (__tmp > 65535)
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e3 5b       	subi	r30, 0xB3	; 179
    3d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9e:	60 81       	ld	r22, Z
    3da0:	71 81       	ldd	r23, Z+1	; 0x01
    3da2:	82 81       	ldd	r24, Z+2	; 0x02
    3da4:	93 81       	ldd	r25, Z+3	; 0x03
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	3f ef       	ldi	r19, 0xFF	; 255
    3daa:	4f e7       	ldi	r20, 0x7F	; 127
    3dac:	57 e4       	ldi	r21, 0x47	; 71
    3dae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3db2:	18 16       	cp	r1, r24
    3db4:	0c f0       	brlt	.+2      	; 0x3db8 <LCD_voidSendData+0x22e>
    3db6:	43 c0       	rjmp	.+134    	; 0x3e3e <LCD_voidSendData+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3db8:	fe 01       	movw	r30, r28
    3dba:	ef 5a       	subi	r30, 0xAF	; 175
    3dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbe:	60 81       	ld	r22, Z
    3dc0:	71 81       	ldd	r23, Z+1	; 0x01
    3dc2:	82 81       	ldd	r24, Z+2	; 0x02
    3dc4:	93 81       	ldd	r25, Z+3	; 0x03
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 e2       	ldi	r20, 0x20	; 32
    3dcc:	51 e4       	ldi	r21, 0x41	; 65
    3dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	8e 01       	movw	r16, r28
    3dd8:	05 5b       	subi	r16, 0xB5	; 181
    3dda:	1f 4f       	sbci	r17, 0xFF	; 255
    3ddc:	bc 01       	movw	r22, r24
    3dde:	cd 01       	movw	r24, r26
    3de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	f8 01       	movw	r30, r16
    3dea:	91 83       	std	Z+1, r25	; 0x01
    3dec:	80 83       	st	Z, r24
    3dee:	1f c0       	rjmp	.+62     	; 0x3e2e <LCD_voidSendData+0x2a4>
    3df0:	fe 01       	movw	r30, r28
    3df2:	e7 5b       	subi	r30, 0xB7	; 183
    3df4:	ff 4f       	sbci	r31, 0xFF	; 255
    3df6:	88 ec       	ldi	r24, 0xC8	; 200
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	91 83       	std	Z+1, r25	; 0x01
    3dfc:	80 83       	st	Z, r24
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e7 5b       	subi	r30, 0xB7	; 183
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	80 81       	ld	r24, Z
    3e06:	91 81       	ldd	r25, Z+1	; 0x01
    3e08:	01 97       	sbiw	r24, 0x01	; 1
    3e0a:	f1 f7       	brne	.-4      	; 0x3e08 <LCD_voidSendData+0x27e>
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e7 5b       	subi	r30, 0xB7	; 183
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	91 83       	std	Z+1, r25	; 0x01
    3e14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e16:	de 01       	movw	r26, r28
    3e18:	a5 5b       	subi	r26, 0xB5	; 181
    3e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e1c:	fe 01       	movw	r30, r28
    3e1e:	e5 5b       	subi	r30, 0xB5	; 181
    3e20:	ff 4f       	sbci	r31, 0xFF	; 255
    3e22:	80 81       	ld	r24, Z
    3e24:	91 81       	ldd	r25, Z+1	; 0x01
    3e26:	01 97       	sbiw	r24, 0x01	; 1
    3e28:	11 96       	adiw	r26, 0x01	; 1
    3e2a:	9c 93       	st	X, r25
    3e2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e2e:	fe 01       	movw	r30, r28
    3e30:	e5 5b       	subi	r30, 0xB5	; 181
    3e32:	ff 4f       	sbci	r31, 0xFF	; 255
    3e34:	80 81       	ld	r24, Z
    3e36:	91 81       	ldd	r25, Z+1	; 0x01
    3e38:	00 97       	sbiw	r24, 0x00	; 0
    3e3a:	d1 f6       	brne	.-76     	; 0x3df0 <LCD_voidSendData+0x266>
    3e3c:	27 c0       	rjmp	.+78     	; 0x3e8c <LCD_voidSendData+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e3e:	8e 01       	movw	r16, r28
    3e40:	05 5b       	subi	r16, 0xB5	; 181
    3e42:	1f 4f       	sbci	r17, 0xFF	; 255
    3e44:	fe 01       	movw	r30, r28
    3e46:	e3 5b       	subi	r30, 0xB3	; 179
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	60 81       	ld	r22, Z
    3e4c:	71 81       	ldd	r23, Z+1	; 0x01
    3e4e:	82 81       	ldd	r24, Z+2	; 0x02
    3e50:	93 81       	ldd	r25, Z+3	; 0x03
    3e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	f8 01       	movw	r30, r16
    3e5c:	91 83       	std	Z+1, r25	; 0x01
    3e5e:	80 83       	st	Z, r24
    3e60:	de 01       	movw	r26, r28
    3e62:	a9 5b       	subi	r26, 0xB9	; 185
    3e64:	bf 4f       	sbci	r27, 0xFF	; 255
    3e66:	fe 01       	movw	r30, r28
    3e68:	e5 5b       	subi	r30, 0xB5	; 181
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	8d 93       	st	X+, r24
    3e72:	9c 93       	st	X, r25
    3e74:	fe 01       	movw	r30, r28
    3e76:	e9 5b       	subi	r30, 0xB9	; 185
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	80 81       	ld	r24, Z
    3e7c:	91 81       	ldd	r25, Z+1	; 0x01
    3e7e:	01 97       	sbiw	r24, 0x01	; 1
    3e80:	f1 f7       	brne	.-4      	; 0x3e7e <LCD_voidSendData+0x2f4>
    3e82:	fe 01       	movw	r30, r28
    3e84:	e9 5b       	subi	r30, 0xB9	; 185
    3e86:	ff 4f       	sbci	r31, 0xFF	; 255
    3e88:	91 83       	std	Z+1, r25	; 0x01
    3e8a:	80 83       	st	Z, r24
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	ed 59       	subi	r30, 0x9D	; 157
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	80 81       	ld	r24, Z
    3e94:	82 95       	swap	r24
    3e96:	8f 70       	andi	r24, 0x0F	; 15
    3e98:	98 2f       	mov	r25, r24
    3e9a:	91 70       	andi	r25, 0x01	; 1
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	60 e0       	ldi	r22, 0x00	; 0
    3ea0:	49 2f       	mov	r20, r25
    3ea2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	ed 59       	subi	r30, 0x9D	; 157
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3eac:	80 81       	ld	r24, Z
    3eae:	82 95       	swap	r24
    3eb0:	86 95       	lsr	r24
    3eb2:	87 70       	andi	r24, 0x07	; 7
    3eb4:	98 2f       	mov	r25, r24
    3eb6:	91 70       	andi	r25, 0x01	; 1
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	61 e0       	ldi	r22, 0x01	; 1
    3ebc:	49 2f       	mov	r20, r25
    3ebe:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	ed 59       	subi	r30, 0x9D	; 157
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
    3eca:	82 95       	swap	r24
    3ecc:	86 95       	lsr	r24
    3ece:	86 95       	lsr	r24
    3ed0:	83 70       	andi	r24, 0x03	; 3
    3ed2:	98 2f       	mov	r25, r24
    3ed4:	91 70       	andi	r25, 0x01	; 1
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	62 e0       	ldi	r22, 0x02	; 2
    3eda:	49 2f       	mov	r20, r25
    3edc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	ed 59       	subi	r30, 0x9D	; 157
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	80 81       	ld	r24, Z
    3ee8:	98 2f       	mov	r25, r24
    3eea:	99 1f       	adc	r25, r25
    3eec:	99 27       	eor	r25, r25
    3eee:	99 1f       	adc	r25, r25
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	63 e0       	ldi	r22, 0x03	; 3
    3ef4:	49 2f       	mov	r20, r25
    3ef6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    3efa:	fe 01       	movw	r30, r28
    3efc:	ed 5b       	subi	r30, 0xBD	; 189
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	a0 e8       	ldi	r26, 0x80	; 128
    3f06:	bf e3       	ldi	r27, 0x3F	; 63
    3f08:	80 83       	st	Z, r24
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	a2 83       	std	Z+2, r26	; 0x02
    3f0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f10:	8e 01       	movw	r16, r28
    3f12:	01 5c       	subi	r16, 0xC1	; 193
    3f14:	1f 4f       	sbci	r17, 0xFF	; 255
    3f16:	fe 01       	movw	r30, r28
    3f18:	ed 5b       	subi	r30, 0xBD	; 189
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	60 81       	ld	r22, Z
    3f1e:	71 81       	ldd	r23, Z+1	; 0x01
    3f20:	82 81       	ldd	r24, Z+2	; 0x02
    3f22:	93 81       	ldd	r25, Z+3	; 0x03
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	4a ef       	ldi	r20, 0xFA	; 250
    3f2a:	54 e4       	ldi	r21, 0x44	; 68
    3f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f30:	dc 01       	movw	r26, r24
    3f32:	cb 01       	movw	r24, r22
    3f34:	f8 01       	movw	r30, r16
    3f36:	80 83       	st	Z, r24
    3f38:	91 83       	std	Z+1, r25	; 0x01
    3f3a:	a2 83       	std	Z+2, r26	; 0x02
    3f3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f3e:	fe 01       	movw	r30, r28
    3f40:	ff 96       	adiw	r30, 0x3f	; 63
    3f42:	60 81       	ld	r22, Z
    3f44:	71 81       	ldd	r23, Z+1	; 0x01
    3f46:	82 81       	ldd	r24, Z+2	; 0x02
    3f48:	93 81       	ldd	r25, Z+3	; 0x03
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	40 e8       	ldi	r20, 0x80	; 128
    3f50:	5f e3       	ldi	r21, 0x3F	; 63
    3f52:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f56:	88 23       	and	r24, r24
    3f58:	2c f4       	brge	.+10     	; 0x3f64 <LCD_voidSendData+0x3da>
		__ticks = 1;
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	9e af       	std	Y+62, r25	; 0x3e
    3f60:	8d af       	std	Y+61, r24	; 0x3d
    3f62:	46 c0       	rjmp	.+140    	; 0x3ff0 <LCD_voidSendData+0x466>
	else if (__tmp > 65535)
    3f64:	fe 01       	movw	r30, r28
    3f66:	ff 96       	adiw	r30, 0x3f	; 63
    3f68:	60 81       	ld	r22, Z
    3f6a:	71 81       	ldd	r23, Z+1	; 0x01
    3f6c:	82 81       	ldd	r24, Z+2	; 0x02
    3f6e:	93 81       	ldd	r25, Z+3	; 0x03
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	3f ef       	ldi	r19, 0xFF	; 255
    3f74:	4f e7       	ldi	r20, 0x7F	; 127
    3f76:	57 e4       	ldi	r21, 0x47	; 71
    3f78:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f7c:	18 16       	cp	r1, r24
    3f7e:	64 f5       	brge	.+88     	; 0x3fd8 <LCD_voidSendData+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f80:	fe 01       	movw	r30, r28
    3f82:	ed 5b       	subi	r30, 0xBD	; 189
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	60 81       	ld	r22, Z
    3f88:	71 81       	ldd	r23, Z+1	; 0x01
    3f8a:	82 81       	ldd	r24, Z+2	; 0x02
    3f8c:	93 81       	ldd	r25, Z+3	; 0x03
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	40 e2       	ldi	r20, 0x20	; 32
    3f94:	51 e4       	ldi	r21, 0x41	; 65
    3f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	bc 01       	movw	r22, r24
    3fa0:	cd 01       	movw	r24, r26
    3fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	cb 01       	movw	r24, r22
    3faa:	9e af       	std	Y+62, r25	; 0x3e
    3fac:	8d af       	std	Y+61, r24	; 0x3d
    3fae:	0f c0       	rjmp	.+30     	; 0x3fce <LCD_voidSendData+0x444>
    3fb0:	88 ec       	ldi	r24, 0xC8	; 200
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	9c af       	std	Y+60, r25	; 0x3c
    3fb6:	8b af       	std	Y+59, r24	; 0x3b
    3fb8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fba:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	f1 f7       	brne	.-4      	; 0x3fbc <LCD_voidSendData+0x432>
    3fc0:	9c af       	std	Y+60, r25	; 0x3c
    3fc2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fc8:	01 97       	sbiw	r24, 0x01	; 1
    3fca:	9e af       	std	Y+62, r25	; 0x3e
    3fcc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fce:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fd2:	00 97       	sbiw	r24, 0x00	; 0
    3fd4:	69 f7       	brne	.-38     	; 0x3fb0 <LCD_voidSendData+0x426>
    3fd6:	16 c0       	rjmp	.+44     	; 0x4004 <LCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd8:	fe 01       	movw	r30, r28
    3fda:	ff 96       	adiw	r30, 0x3f	; 63
    3fdc:	60 81       	ld	r22, Z
    3fde:	71 81       	ldd	r23, Z+1	; 0x01
    3fe0:	82 81       	ldd	r24, Z+2	; 0x02
    3fe2:	93 81       	ldd	r25, Z+3	; 0x03
    3fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	9e af       	std	Y+62, r25	; 0x3e
    3fee:	8d af       	std	Y+61, r24	; 0x3d
    3ff0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ff2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ff4:	9a af       	std	Y+58, r25	; 0x3a
    3ff6:	89 af       	std	Y+57, r24	; 0x39
    3ff8:	89 ad       	ldd	r24, Y+57	; 0x39
    3ffa:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ffc:	01 97       	sbiw	r24, 0x01	; 1
    3ffe:	f1 f7       	brne	.-4      	; 0x3ffc <LCD_voidSendData+0x472>
    4000:	9a af       	std	Y+58, r25	; 0x3a
    4002:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	62 e0       	ldi	r22, 0x02	; 2
    4008:	40 e0       	ldi	r20, 0x00	; 0
    400a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	a0 e8       	ldi	r26, 0x80	; 128
    4014:	bf e3       	ldi	r27, 0x3F	; 63
    4016:	8d ab       	std	Y+53, r24	; 0x35
    4018:	9e ab       	std	Y+54, r25	; 0x36
    401a:	af ab       	std	Y+55, r26	; 0x37
    401c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    401e:	6d a9       	ldd	r22, Y+53	; 0x35
    4020:	7e a9       	ldd	r23, Y+54	; 0x36
    4022:	8f a9       	ldd	r24, Y+55	; 0x37
    4024:	98 ad       	ldd	r25, Y+56	; 0x38
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	4a ef       	ldi	r20, 0xFA	; 250
    402c:	54 e4       	ldi	r21, 0x44	; 68
    402e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4032:	dc 01       	movw	r26, r24
    4034:	cb 01       	movw	r24, r22
    4036:	89 ab       	std	Y+49, r24	; 0x31
    4038:	9a ab       	std	Y+50, r25	; 0x32
    403a:	ab ab       	std	Y+51, r26	; 0x33
    403c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    403e:	69 a9       	ldd	r22, Y+49	; 0x31
    4040:	7a a9       	ldd	r23, Y+50	; 0x32
    4042:	8b a9       	ldd	r24, Y+51	; 0x33
    4044:	9c a9       	ldd	r25, Y+52	; 0x34
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	40 e8       	ldi	r20, 0x80	; 128
    404c:	5f e3       	ldi	r21, 0x3F	; 63
    404e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4052:	88 23       	and	r24, r24
    4054:	2c f4       	brge	.+10     	; 0x4060 <LCD_voidSendData+0x4d6>
		__ticks = 1;
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	98 ab       	std	Y+48, r25	; 0x30
    405c:	8f a7       	std	Y+47, r24	; 0x2f
    405e:	3f c0       	rjmp	.+126    	; 0x40de <LCD_voidSendData+0x554>
	else if (__tmp > 65535)
    4060:	69 a9       	ldd	r22, Y+49	; 0x31
    4062:	7a a9       	ldd	r23, Y+50	; 0x32
    4064:	8b a9       	ldd	r24, Y+51	; 0x33
    4066:	9c a9       	ldd	r25, Y+52	; 0x34
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	3f ef       	ldi	r19, 0xFF	; 255
    406c:	4f e7       	ldi	r20, 0x7F	; 127
    406e:	57 e4       	ldi	r21, 0x47	; 71
    4070:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4074:	18 16       	cp	r1, r24
    4076:	4c f5       	brge	.+82     	; 0x40ca <LCD_voidSendData+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4078:	6d a9       	ldd	r22, Y+53	; 0x35
    407a:	7e a9       	ldd	r23, Y+54	; 0x36
    407c:	8f a9       	ldd	r24, Y+55	; 0x37
    407e:	98 ad       	ldd	r25, Y+56	; 0x38
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	40 e2       	ldi	r20, 0x20	; 32
    4086:	51 e4       	ldi	r21, 0x41	; 65
    4088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	bc 01       	movw	r22, r24
    4092:	cd 01       	movw	r24, r26
    4094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	98 ab       	std	Y+48, r25	; 0x30
    409e:	8f a7       	std	Y+47, r24	; 0x2f
    40a0:	0f c0       	rjmp	.+30     	; 0x40c0 <LCD_voidSendData+0x536>
    40a2:	88 ec       	ldi	r24, 0xC8	; 200
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	9e a7       	std	Y+46, r25	; 0x2e
    40a8:	8d a7       	std	Y+45, r24	; 0x2d
    40aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    40ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    40ae:	01 97       	sbiw	r24, 0x01	; 1
    40b0:	f1 f7       	brne	.-4      	; 0x40ae <LCD_voidSendData+0x524>
    40b2:	9e a7       	std	Y+46, r25	; 0x2e
    40b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    40b8:	98 a9       	ldd	r25, Y+48	; 0x30
    40ba:	01 97       	sbiw	r24, 0x01	; 1
    40bc:	98 ab       	std	Y+48, r25	; 0x30
    40be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    40c2:	98 a9       	ldd	r25, Y+48	; 0x30
    40c4:	00 97       	sbiw	r24, 0x00	; 0
    40c6:	69 f7       	brne	.-38     	; 0x40a2 <LCD_voidSendData+0x518>
    40c8:	14 c0       	rjmp	.+40     	; 0x40f2 <LCD_voidSendData+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ca:	69 a9       	ldd	r22, Y+49	; 0x31
    40cc:	7a a9       	ldd	r23, Y+50	; 0x32
    40ce:	8b a9       	ldd	r24, Y+51	; 0x33
    40d0:	9c a9       	ldd	r25, Y+52	; 0x34
    40d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	98 ab       	std	Y+48, r25	; 0x30
    40dc:	8f a7       	std	Y+47, r24	; 0x2f
    40de:	8f a5       	ldd	r24, Y+47	; 0x2f
    40e0:	98 a9       	ldd	r25, Y+48	; 0x30
    40e2:	9c a7       	std	Y+44, r25	; 0x2c
    40e4:	8b a7       	std	Y+43, r24	; 0x2b
    40e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    40e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	f1 f7       	brne	.-4      	; 0x40ea <LCD_voidSendData+0x560>
    40ee:	9c a7       	std	Y+44, r25	; 0x2c
    40f0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	62 e0       	ldi	r22, 0x02	; 2
    40f6:	41 e0       	ldi	r20, 0x01	; 1
    40f8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	a0 e8       	ldi	r26, 0x80	; 128
    4102:	bf e3       	ldi	r27, 0x3F	; 63
    4104:	8f a3       	std	Y+39, r24	; 0x27
    4106:	98 a7       	std	Y+40, r25	; 0x28
    4108:	a9 a7       	std	Y+41, r26	; 0x29
    410a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    410c:	6f a1       	ldd	r22, Y+39	; 0x27
    410e:	78 a5       	ldd	r23, Y+40	; 0x28
    4110:	89 a5       	ldd	r24, Y+41	; 0x29
    4112:	9a a5       	ldd	r25, Y+42	; 0x2a
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	4a ef       	ldi	r20, 0xFA	; 250
    411a:	54 e4       	ldi	r21, 0x44	; 68
    411c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4120:	dc 01       	movw	r26, r24
    4122:	cb 01       	movw	r24, r22
    4124:	8b a3       	std	Y+35, r24	; 0x23
    4126:	9c a3       	std	Y+36, r25	; 0x24
    4128:	ad a3       	std	Y+37, r26	; 0x25
    412a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    412c:	6b a1       	ldd	r22, Y+35	; 0x23
    412e:	7c a1       	ldd	r23, Y+36	; 0x24
    4130:	8d a1       	ldd	r24, Y+37	; 0x25
    4132:	9e a1       	ldd	r25, Y+38	; 0x26
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	40 e8       	ldi	r20, 0x80	; 128
    413a:	5f e3       	ldi	r21, 0x3F	; 63
    413c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4140:	88 23       	and	r24, r24
    4142:	2c f4       	brge	.+10     	; 0x414e <LCD_voidSendData+0x5c4>
		__ticks = 1;
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	9a a3       	std	Y+34, r25	; 0x22
    414a:	89 a3       	std	Y+33, r24	; 0x21
    414c:	3f c0       	rjmp	.+126    	; 0x41cc <LCD_voidSendData+0x642>
	else if (__tmp > 65535)
    414e:	6b a1       	ldd	r22, Y+35	; 0x23
    4150:	7c a1       	ldd	r23, Y+36	; 0x24
    4152:	8d a1       	ldd	r24, Y+37	; 0x25
    4154:	9e a1       	ldd	r25, Y+38	; 0x26
    4156:	20 e0       	ldi	r18, 0x00	; 0
    4158:	3f ef       	ldi	r19, 0xFF	; 255
    415a:	4f e7       	ldi	r20, 0x7F	; 127
    415c:	57 e4       	ldi	r21, 0x47	; 71
    415e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4162:	18 16       	cp	r1, r24
    4164:	4c f5       	brge	.+82     	; 0x41b8 <LCD_voidSendData+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4166:	6f a1       	ldd	r22, Y+39	; 0x27
    4168:	78 a5       	ldd	r23, Y+40	; 0x28
    416a:	89 a5       	ldd	r24, Y+41	; 0x29
    416c:	9a a5       	ldd	r25, Y+42	; 0x2a
    416e:	20 e0       	ldi	r18, 0x00	; 0
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	40 e2       	ldi	r20, 0x20	; 32
    4174:	51 e4       	ldi	r21, 0x41	; 65
    4176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	bc 01       	movw	r22, r24
    4180:	cd 01       	movw	r24, r26
    4182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4186:	dc 01       	movw	r26, r24
    4188:	cb 01       	movw	r24, r22
    418a:	9a a3       	std	Y+34, r25	; 0x22
    418c:	89 a3       	std	Y+33, r24	; 0x21
    418e:	0f c0       	rjmp	.+30     	; 0x41ae <LCD_voidSendData+0x624>
    4190:	88 ec       	ldi	r24, 0xC8	; 200
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	98 a3       	std	Y+32, r25	; 0x20
    4196:	8f 8f       	std	Y+31, r24	; 0x1f
    4198:	8f 8d       	ldd	r24, Y+31	; 0x1f
    419a:	98 a1       	ldd	r25, Y+32	; 0x20
    419c:	01 97       	sbiw	r24, 0x01	; 1
    419e:	f1 f7       	brne	.-4      	; 0x419c <LCD_voidSendData+0x612>
    41a0:	98 a3       	std	Y+32, r25	; 0x20
    41a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a4:	89 a1       	ldd	r24, Y+33	; 0x21
    41a6:	9a a1       	ldd	r25, Y+34	; 0x22
    41a8:	01 97       	sbiw	r24, 0x01	; 1
    41aa:	9a a3       	std	Y+34, r25	; 0x22
    41ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ae:	89 a1       	ldd	r24, Y+33	; 0x21
    41b0:	9a a1       	ldd	r25, Y+34	; 0x22
    41b2:	00 97       	sbiw	r24, 0x00	; 0
    41b4:	69 f7       	brne	.-38     	; 0x4190 <LCD_voidSendData+0x606>
    41b6:	14 c0       	rjmp	.+40     	; 0x41e0 <LCD_voidSendData+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b8:	6b a1       	ldd	r22, Y+35	; 0x23
    41ba:	7c a1       	ldd	r23, Y+36	; 0x24
    41bc:	8d a1       	ldd	r24, Y+37	; 0x25
    41be:	9e a1       	ldd	r25, Y+38	; 0x26
    41c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c4:	dc 01       	movw	r26, r24
    41c6:	cb 01       	movw	r24, r22
    41c8:	9a a3       	std	Y+34, r25	; 0x22
    41ca:	89 a3       	std	Y+33, r24	; 0x21
    41cc:	89 a1       	ldd	r24, Y+33	; 0x21
    41ce:	9a a1       	ldd	r25, Y+34	; 0x22
    41d0:	9e 8f       	std	Y+30, r25	; 0x1e
    41d2:	8d 8f       	std	Y+29, r24	; 0x1d
    41d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41d8:	01 97       	sbiw	r24, 0x01	; 1
    41da:	f1 f7       	brne	.-4      	; 0x41d8 <LCD_voidSendData+0x64e>
    41dc:	9e 8f       	std	Y+30, r25	; 0x1e
    41de:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
    41e0:	fe 01       	movw	r30, r28
    41e2:	ed 59       	subi	r30, 0x9D	; 157
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	98 2f       	mov	r25, r24
    41ea:	91 70       	andi	r25, 0x01	; 1
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	60 e0       	ldi	r22, 0x00	; 0
    41f0:	49 2f       	mov	r20, r25
    41f2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
    41f6:	fe 01       	movw	r30, r28
    41f8:	ed 59       	subi	r30, 0x9D	; 157
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	80 81       	ld	r24, Z
    41fe:	86 95       	lsr	r24
    4200:	98 2f       	mov	r25, r24
    4202:	91 70       	andi	r25, 0x01	; 1
    4204:	81 e0       	ldi	r24, 0x01	; 1
    4206:	61 e0       	ldi	r22, 0x01	; 1
    4208:	49 2f       	mov	r20, r25
    420a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
    420e:	fe 01       	movw	r30, r28
    4210:	ed 59       	subi	r30, 0x9D	; 157
    4212:	ff 4f       	sbci	r31, 0xFF	; 255
    4214:	80 81       	ld	r24, Z
    4216:	86 95       	lsr	r24
    4218:	86 95       	lsr	r24
    421a:	98 2f       	mov	r25, r24
    421c:	91 70       	andi	r25, 0x01	; 1
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	62 e0       	ldi	r22, 0x02	; 2
    4222:	49 2f       	mov	r20, r25
    4224:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
    4228:	fe 01       	movw	r30, r28
    422a:	ed 59       	subi	r30, 0x9D	; 157
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	80 81       	ld	r24, Z
    4230:	86 95       	lsr	r24
    4232:	86 95       	lsr	r24
    4234:	86 95       	lsr	r24
    4236:	98 2f       	mov	r25, r24
    4238:	91 70       	andi	r25, 0x01	; 1
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	63 e0       	ldi	r22, 0x03	; 3
    423e:	49 2f       	mov	r20, r25
    4240:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    4244:	80 e0       	ldi	r24, 0x00	; 0
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	a0 e8       	ldi	r26, 0x80	; 128
    424a:	bf e3       	ldi	r27, 0x3F	; 63
    424c:	89 8f       	std	Y+25, r24	; 0x19
    424e:	9a 8f       	std	Y+26, r25	; 0x1a
    4250:	ab 8f       	std	Y+27, r26	; 0x1b
    4252:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4254:	69 8d       	ldd	r22, Y+25	; 0x19
    4256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    425a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    425c:	20 e0       	ldi	r18, 0x00	; 0
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	4a ef       	ldi	r20, 0xFA	; 250
    4262:	54 e4       	ldi	r21, 0x44	; 68
    4264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	8d 8b       	std	Y+21, r24	; 0x15
    426e:	9e 8b       	std	Y+22, r25	; 0x16
    4270:	af 8b       	std	Y+23, r26	; 0x17
    4272:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4274:	6d 89       	ldd	r22, Y+21	; 0x15
    4276:	7e 89       	ldd	r23, Y+22	; 0x16
    4278:	8f 89       	ldd	r24, Y+23	; 0x17
    427a:	98 8d       	ldd	r25, Y+24	; 0x18
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e8       	ldi	r20, 0x80	; 128
    4282:	5f e3       	ldi	r21, 0x3F	; 63
    4284:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4288:	88 23       	and	r24, r24
    428a:	2c f4       	brge	.+10     	; 0x4296 <LCD_voidSendData+0x70c>
		__ticks = 1;
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	9c 8b       	std	Y+20, r25	; 0x14
    4292:	8b 8b       	std	Y+19, r24	; 0x13
    4294:	3f c0       	rjmp	.+126    	; 0x4314 <LCD_voidSendData+0x78a>
	else if (__tmp > 65535)
    4296:	6d 89       	ldd	r22, Y+21	; 0x15
    4298:	7e 89       	ldd	r23, Y+22	; 0x16
    429a:	8f 89       	ldd	r24, Y+23	; 0x17
    429c:	98 8d       	ldd	r25, Y+24	; 0x18
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	3f ef       	ldi	r19, 0xFF	; 255
    42a2:	4f e7       	ldi	r20, 0x7F	; 127
    42a4:	57 e4       	ldi	r21, 0x47	; 71
    42a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42aa:	18 16       	cp	r1, r24
    42ac:	4c f5       	brge	.+82     	; 0x4300 <LCD_voidSendData+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ae:	69 8d       	ldd	r22, Y+25	; 0x19
    42b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	40 e2       	ldi	r20, 0x20	; 32
    42bc:	51 e4       	ldi	r21, 0x41	; 65
    42be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	bc 01       	movw	r22, r24
    42c8:	cd 01       	movw	r24, r26
    42ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	9c 8b       	std	Y+20, r25	; 0x14
    42d4:	8b 8b       	std	Y+19, r24	; 0x13
    42d6:	0f c0       	rjmp	.+30     	; 0x42f6 <LCD_voidSendData+0x76c>
    42d8:	88 ec       	ldi	r24, 0xC8	; 200
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	9a 8b       	std	Y+18, r25	; 0x12
    42de:	89 8b       	std	Y+17, r24	; 0x11
    42e0:	89 89       	ldd	r24, Y+17	; 0x11
    42e2:	9a 89       	ldd	r25, Y+18	; 0x12
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	f1 f7       	brne	.-4      	; 0x42e4 <LCD_voidSendData+0x75a>
    42e8:	9a 8b       	std	Y+18, r25	; 0x12
    42ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ec:	8b 89       	ldd	r24, Y+19	; 0x13
    42ee:	9c 89       	ldd	r25, Y+20	; 0x14
    42f0:	01 97       	sbiw	r24, 0x01	; 1
    42f2:	9c 8b       	std	Y+20, r25	; 0x14
    42f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42f6:	8b 89       	ldd	r24, Y+19	; 0x13
    42f8:	9c 89       	ldd	r25, Y+20	; 0x14
    42fa:	00 97       	sbiw	r24, 0x00	; 0
    42fc:	69 f7       	brne	.-38     	; 0x42d8 <LCD_voidSendData+0x74e>
    42fe:	14 c0       	rjmp	.+40     	; 0x4328 <LCD_voidSendData+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4300:	6d 89       	ldd	r22, Y+21	; 0x15
    4302:	7e 89       	ldd	r23, Y+22	; 0x16
    4304:	8f 89       	ldd	r24, Y+23	; 0x17
    4306:	98 8d       	ldd	r25, Y+24	; 0x18
    4308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	9c 8b       	std	Y+20, r25	; 0x14
    4312:	8b 8b       	std	Y+19, r24	; 0x13
    4314:	8b 89       	ldd	r24, Y+19	; 0x13
    4316:	9c 89       	ldd	r25, Y+20	; 0x14
    4318:	98 8b       	std	Y+16, r25	; 0x10
    431a:	8f 87       	std	Y+15, r24	; 0x0f
    431c:	8f 85       	ldd	r24, Y+15	; 0x0f
    431e:	98 89       	ldd	r25, Y+16	; 0x10
    4320:	01 97       	sbiw	r24, 0x01	; 1
    4322:	f1 f7       	brne	.-4      	; 0x4320 <LCD_voidSendData+0x796>
    4324:	98 8b       	std	Y+16, r25	; 0x10
    4326:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    4328:	80 e0       	ldi	r24, 0x00	; 0
    432a:	62 e0       	ldi	r22, 0x02	; 2
    432c:	40 e0       	ldi	r20, 0x00	; 0
    432e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
    4332:	80 e0       	ldi	r24, 0x00	; 0
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	a0 e8       	ldi	r26, 0x80	; 128
    4338:	bf e3       	ldi	r27, 0x3F	; 63
    433a:	8b 87       	std	Y+11, r24	; 0x0b
    433c:	9c 87       	std	Y+12, r25	; 0x0c
    433e:	ad 87       	std	Y+13, r26	; 0x0d
    4340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4342:	6b 85       	ldd	r22, Y+11	; 0x0b
    4344:	7c 85       	ldd	r23, Y+12	; 0x0c
    4346:	8d 85       	ldd	r24, Y+13	; 0x0d
    4348:	9e 85       	ldd	r25, Y+14	; 0x0e
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	4a ef       	ldi	r20, 0xFA	; 250
    4350:	54 e4       	ldi	r21, 0x44	; 68
    4352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	8f 83       	std	Y+7, r24	; 0x07
    435c:	98 87       	std	Y+8, r25	; 0x08
    435e:	a9 87       	std	Y+9, r26	; 0x09
    4360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4362:	6f 81       	ldd	r22, Y+7	; 0x07
    4364:	78 85       	ldd	r23, Y+8	; 0x08
    4366:	89 85       	ldd	r24, Y+9	; 0x09
    4368:	9a 85       	ldd	r25, Y+10	; 0x0a
    436a:	20 e0       	ldi	r18, 0x00	; 0
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	40 e8       	ldi	r20, 0x80	; 128
    4370:	5f e3       	ldi	r21, 0x3F	; 63
    4372:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4376:	88 23       	and	r24, r24
    4378:	2c f4       	brge	.+10     	; 0x4384 <LCD_voidSendData+0x7fa>
		__ticks = 1;
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	9e 83       	std	Y+6, r25	; 0x06
    4380:	8d 83       	std	Y+5, r24	; 0x05
    4382:	3f c0       	rjmp	.+126    	; 0x4402 <LCD_voidSendData+0x878>
	else if (__tmp > 65535)
    4384:	6f 81       	ldd	r22, Y+7	; 0x07
    4386:	78 85       	ldd	r23, Y+8	; 0x08
    4388:	89 85       	ldd	r24, Y+9	; 0x09
    438a:	9a 85       	ldd	r25, Y+10	; 0x0a
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	3f ef       	ldi	r19, 0xFF	; 255
    4390:	4f e7       	ldi	r20, 0x7F	; 127
    4392:	57 e4       	ldi	r21, 0x47	; 71
    4394:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4398:	18 16       	cp	r1, r24
    439a:	4c f5       	brge	.+82     	; 0x43ee <LCD_voidSendData+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    439c:	6b 85       	ldd	r22, Y+11	; 0x0b
    439e:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a4:	20 e0       	ldi	r18, 0x00	; 0
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	40 e2       	ldi	r20, 0x20	; 32
    43aa:	51 e4       	ldi	r21, 0x41	; 65
    43ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	bc 01       	movw	r22, r24
    43b6:	cd 01       	movw	r24, r26
    43b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43bc:	dc 01       	movw	r26, r24
    43be:	cb 01       	movw	r24, r22
    43c0:	9e 83       	std	Y+6, r25	; 0x06
    43c2:	8d 83       	std	Y+5, r24	; 0x05
    43c4:	0f c0       	rjmp	.+30     	; 0x43e4 <LCD_voidSendData+0x85a>
    43c6:	88 ec       	ldi	r24, 0xC8	; 200
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	9c 83       	std	Y+4, r25	; 0x04
    43cc:	8b 83       	std	Y+3, r24	; 0x03
    43ce:	8b 81       	ldd	r24, Y+3	; 0x03
    43d0:	9c 81       	ldd	r25, Y+4	; 0x04
    43d2:	01 97       	sbiw	r24, 0x01	; 1
    43d4:	f1 f7       	brne	.-4      	; 0x43d2 <LCD_voidSendData+0x848>
    43d6:	9c 83       	std	Y+4, r25	; 0x04
    43d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43da:	8d 81       	ldd	r24, Y+5	; 0x05
    43dc:	9e 81       	ldd	r25, Y+6	; 0x06
    43de:	01 97       	sbiw	r24, 0x01	; 1
    43e0:	9e 83       	std	Y+6, r25	; 0x06
    43e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43e4:	8d 81       	ldd	r24, Y+5	; 0x05
    43e6:	9e 81       	ldd	r25, Y+6	; 0x06
    43e8:	00 97       	sbiw	r24, 0x00	; 0
    43ea:	69 f7       	brne	.-38     	; 0x43c6 <LCD_voidSendData+0x83c>
    43ec:	14 c0       	rjmp	.+40     	; 0x4416 <LCD_voidSendData+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ee:	6f 81       	ldd	r22, Y+7	; 0x07
    43f0:	78 85       	ldd	r23, Y+8	; 0x08
    43f2:	89 85       	ldd	r24, Y+9	; 0x09
    43f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	9e 83       	std	Y+6, r25	; 0x06
    4400:	8d 83       	std	Y+5, r24	; 0x05
    4402:	8d 81       	ldd	r24, Y+5	; 0x05
    4404:	9e 81       	ldd	r25, Y+6	; 0x06
    4406:	9a 83       	std	Y+2, r25	; 0x02
    4408:	89 83       	std	Y+1, r24	; 0x01
    440a:	89 81       	ldd	r24, Y+1	; 0x01
    440c:	9a 81       	ldd	r25, Y+2	; 0x02
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	f1 f7       	brne	.-4      	; 0x440e <LCD_voidSendData+0x884>
    4412:	9a 83       	std	Y+2, r25	; 0x02
    4414:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif
}
    4416:	cd 59       	subi	r28, 0x9D	; 157
    4418:	df 4f       	sbci	r29, 0xFF	; 255
    441a:	0f b6       	in	r0, 0x3f	; 63
    441c:	f8 94       	cli
    441e:	de bf       	out	0x3e, r29	; 62
    4420:	0f be       	out	0x3f, r0	; 63
    4422:	cd bf       	out	0x3d, r28	; 61
    4424:	cf 91       	pop	r28
    4426:	df 91       	pop	r29
    4428:	1f 91       	pop	r17
    442a:	0f 91       	pop	r16
    442c:	08 95       	ret

0000442e <LCD_voidDisplayString>:


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
    442e:	df 93       	push	r29
    4430:	cf 93       	push	r28
    4432:	00 d0       	rcall	.+0      	; 0x4434 <LCD_voidDisplayString+0x6>
    4434:	0f 92       	push	r0
    4436:	cd b7       	in	r28, 0x3d	; 61
    4438:	de b7       	in	r29, 0x3e	; 62
    443a:	9b 83       	std	Y+3, r25	; 0x03
    443c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    443e:	19 82       	std	Y+1, r1	; 0x01
    4440:	0e c0       	rjmp	.+28     	; 0x445e <LCD_voidDisplayString+0x30>
	while(str[i] != '\0') {
		LCD_voidSendData(str[i]);
    4442:	89 81       	ldd	r24, Y+1	; 0x01
    4444:	28 2f       	mov	r18, r24
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	8a 81       	ldd	r24, Y+2	; 0x02
    444a:	9b 81       	ldd	r25, Y+3	; 0x03
    444c:	fc 01       	movw	r30, r24
    444e:	e2 0f       	add	r30, r18
    4450:	f3 1f       	adc	r31, r19
    4452:	80 81       	ld	r24, Z
    4454:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <LCD_voidSendData>
		i++;
    4458:	89 81       	ldd	r24, Y+1	; 0x01
    445a:	8f 5f       	subi	r24, 0xFF	; 255
    445c:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
	u8 i = 0;
	while(str[i] != '\0') {
    445e:	89 81       	ldd	r24, Y+1	; 0x01
    4460:	28 2f       	mov	r18, r24
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	8a 81       	ldd	r24, Y+2	; 0x02
    4466:	9b 81       	ldd	r25, Y+3	; 0x03
    4468:	fc 01       	movw	r30, r24
    446a:	e2 0f       	add	r30, r18
    446c:	f3 1f       	adc	r31, r19
    446e:	80 81       	ld	r24, Z
    4470:	88 23       	and	r24, r24
    4472:	39 f7       	brne	.-50     	; 0x4442 <LCD_voidDisplayString+0x14>
		LCD_voidSendData(str[i]);
		i++;
	}
}
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	cf 91       	pop	r28
    447c:	df 91       	pop	r29
    447e:	08 95       	ret

00004480 <LCD_voidSetCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_voidSetCursor(u8 copy_u8row, u8 copy_u8_col) {
    4480:	df 93       	push	r29
    4482:	cf 93       	push	r28
    4484:	00 d0       	rcall	.+0      	; 0x4486 <LCD_voidSetCursor+0x6>
    4486:	00 d0       	rcall	.+0      	; 0x4488 <LCD_voidSetCursor+0x8>
    4488:	0f 92       	push	r0
    448a:	cd b7       	in	r28, 0x3d	; 61
    448c:	de b7       	in	r29, 0x3e	; 62
    448e:	8a 83       	std	Y+2, r24	; 0x02
    4490:	6b 83       	std	Y+3, r22	; 0x03
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
    4492:	8a 81       	ldd	r24, Y+2	; 0x02
    4494:	28 2f       	mov	r18, r24
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	3d 83       	std	Y+5, r19	; 0x05
    449a:	2c 83       	std	Y+4, r18	; 0x04
    449c:	8c 81       	ldd	r24, Y+4	; 0x04
    449e:	9d 81       	ldd	r25, Y+5	; 0x05
    44a0:	81 30       	cpi	r24, 0x01	; 1
    44a2:	91 05       	cpc	r25, r1
    44a4:	c1 f0       	breq	.+48     	; 0x44d6 <LCD_voidSetCursor+0x56>
    44a6:	2c 81       	ldd	r18, Y+4	; 0x04
    44a8:	3d 81       	ldd	r19, Y+5	; 0x05
    44aa:	22 30       	cpi	r18, 0x02	; 2
    44ac:	31 05       	cpc	r19, r1
    44ae:	2c f4       	brge	.+10     	; 0x44ba <LCD_voidSetCursor+0x3a>
    44b0:	8c 81       	ldd	r24, Y+4	; 0x04
    44b2:	9d 81       	ldd	r25, Y+5	; 0x05
    44b4:	00 97       	sbiw	r24, 0x00	; 0
    44b6:	61 f0       	breq	.+24     	; 0x44d0 <LCD_voidSetCursor+0x50>
    44b8:	19 c0       	rjmp	.+50     	; 0x44ec <LCD_voidSetCursor+0x6c>
    44ba:	2c 81       	ldd	r18, Y+4	; 0x04
    44bc:	3d 81       	ldd	r19, Y+5	; 0x05
    44be:	22 30       	cpi	r18, 0x02	; 2
    44c0:	31 05       	cpc	r19, r1
    44c2:	69 f0       	breq	.+26     	; 0x44de <LCD_voidSetCursor+0x5e>
    44c4:	8c 81       	ldd	r24, Y+4	; 0x04
    44c6:	9d 81       	ldd	r25, Y+5	; 0x05
    44c8:	83 30       	cpi	r24, 0x03	; 3
    44ca:	91 05       	cpc	r25, r1
    44cc:	61 f0       	breq	.+24     	; 0x44e6 <LCD_voidSetCursor+0x66>
    44ce:	0e c0       	rjmp	.+28     	; 0x44ec <LCD_voidSetCursor+0x6c>
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
    44d0:	8b 81       	ldd	r24, Y+3	; 0x03
    44d2:	89 83       	std	Y+1, r24	; 0x01
    44d4:	0b c0       	rjmp	.+22     	; 0x44ec <LCD_voidSetCursor+0x6c>
			break;
		case LINE1:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x40;
    44d6:	8b 81       	ldd	r24, Y+3	; 0x03
    44d8:	80 5c       	subi	r24, 0xC0	; 192
    44da:	89 83       	std	Y+1, r24	; 0x01
    44dc:	07 c0       	rjmp	.+14     	; 0x44ec <LCD_voidSetCursor+0x6c>
			break;
		case LINE2:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x10;
    44de:	8b 81       	ldd	r24, Y+3	; 0x03
    44e0:	80 5f       	subi	r24, 0xF0	; 240
    44e2:	89 83       	std	Y+1, r24	; 0x01
    44e4:	03 c0       	rjmp	.+6      	; 0x44ec <LCD_voidSetCursor+0x6c>
			break;
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
    44e6:	8b 81       	ldd	r24, Y+3	; 0x03
    44e8:	80 5b       	subi	r24, 0xB0	; 176
    44ea:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_voidSendCommand(LCD_MEMORY_ADDRESS | LINE0_ADDRESS);
    44ec:	89 81       	ldd	r24, Y+1	; 0x01
    44ee:	80 68       	ori	r24, 0x80	; 128
    44f0:	0e 94 73 19 	call	0x32e6	; 0x32e6 <LCD_voidSendCommand>
//					break;
//			default:
//				LCD_voidDisplayString("default", 0, 0);
//				break;
//		}
}
    44f4:	0f 90       	pop	r0
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	0f 90       	pop	r0
    44fc:	0f 90       	pop	r0
    44fe:	cf 91       	pop	r28
    4500:	df 91       	pop	r29
    4502:	08 95       	ret

00004504 <LCD_voidIntgerToString>:


// LCD only understands ASCII, so this converts Int to a string
void LCD_voidIntgerToString(u32 copy_u32data) {
    4504:	df 93       	push	r29
    4506:	cf 93       	push	r28
    4508:	cd b7       	in	r28, 0x3d	; 61
    450a:	de b7       	in	r29, 0x3e	; 62
    450c:	64 97       	sbiw	r28, 0x14	; 20
    450e:	0f b6       	in	r0, 0x3f	; 63
    4510:	f8 94       	cli
    4512:	de bf       	out	0x3e, r29	; 62
    4514:	0f be       	out	0x3f, r0	; 63
    4516:	cd bf       	out	0x3d, r28	; 61
    4518:	69 8b       	std	Y+17, r22	; 0x11
    451a:	7a 8b       	std	Y+18, r23	; 0x12
    451c:	8b 8b       	std	Y+19, r24	; 0x13
    451e:	9c 8b       	std	Y+20, r25	; 0x14
	// A string to hold the ASCII values
	cu8 buffer[16];

	// Converts data to its ASCII
	itoa(copy_u32data, buffer, 10);
    4520:	89 89       	ldd	r24, Y+17	; 0x11
    4522:	9a 89       	ldd	r25, Y+18	; 0x12
    4524:	9e 01       	movw	r18, r28
    4526:	2f 5f       	subi	r18, 0xFF	; 255
    4528:	3f 4f       	sbci	r19, 0xFF	; 255
    452a:	b9 01       	movw	r22, r18
    452c:	4a e0       	ldi	r20, 0x0A	; 10
    452e:	50 e0       	ldi	r21, 0x00	; 0
    4530:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <itoa>

	// Display string with the results in the buffer
	LCD_voidDisplayString(buffer);
    4534:	ce 01       	movw	r24, r28
    4536:	01 96       	adiw	r24, 0x01	; 1
    4538:	0e 94 17 22 	call	0x442e	; 0x442e <LCD_voidDisplayString>
}
    453c:	64 96       	adiw	r28, 0x14	; 20
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	cf 91       	pop	r28
    454a:	df 91       	pop	r29
    454c:	08 95       	ret

0000454e <LCD_voidClearScreen>:

// Clears the LCD from any garbage
void LCD_voidClearScreen(void) {
    454e:	df 93       	push	r29
    4550:	cf 93       	push	r28
    4552:	cd b7       	in	r28, 0x3d	; 61
    4554:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	0e 94 73 19 	call	0x32e6	; 0x32e6 <LCD_voidSendCommand>
}
    455c:	cf 91       	pop	r28
    455e:	df 91       	pop	r29
    4560:	08 95       	ret

00004562 <KEYPAD_voidInit>:
u8 KPD_COL_PIN_VAL [] = KPD_ARR_COL_PIN;

u8 KPD_DATA [KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VALUES;


void KEYPAD_voidInit(void) {
    4562:	df 93       	push	r29
    4564:	cf 93       	push	r28
    4566:	00 d0       	rcall	.+0      	; 0x4568 <KEYPAD_voidInit+0x6>
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    456c:	1a 82       	std	Y+2, r1	; 0x02
    456e:	29 c0       	rjmp	.+82     	; 0x45c2 <KEYPAD_voidInit+0x60>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
    4570:	8a 81       	ldd	r24, Y+2	; 0x02
    4572:	88 2f       	mov	r24, r24
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	fc 01       	movw	r30, r24
    4578:	e1 57       	subi	r30, 0x71	; 113
    457a:	fe 4f       	sbci	r31, 0xFE	; 254
    457c:	20 81       	ld	r18, Z
    457e:	8a 81       	ldd	r24, Y+2	; 0x02
    4580:	88 2f       	mov	r24, r24
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	fc 01       	movw	r30, r24
    4586:	ed 56       	subi	r30, 0x6D	; 109
    4588:	fe 4f       	sbci	r31, 0xFE	; 254
    458a:	90 81       	ld	r25, Z
    458c:	82 2f       	mov	r24, r18
    458e:	69 2f       	mov	r22, r25
    4590:	41 e0       	ldi	r20, 0x01	; 1
    4592:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
    4596:	8a 81       	ldd	r24, Y+2	; 0x02
    4598:	88 2f       	mov	r24, r24
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	fc 01       	movw	r30, r24
    459e:	e1 57       	subi	r30, 0x71	; 113
    45a0:	fe 4f       	sbci	r31, 0xFE	; 254
    45a2:	20 81       	ld	r18, Z
    45a4:	8a 81       	ldd	r24, Y+2	; 0x02
    45a6:	88 2f       	mov	r24, r24
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	fc 01       	movw	r30, r24
    45ac:	ed 56       	subi	r30, 0x6D	; 109
    45ae:	fe 4f       	sbci	r31, 0xFE	; 254
    45b0:	90 81       	ld	r25, Z
    45b2:	82 2f       	mov	r24, r18
    45b4:	69 2f       	mov	r22, r25
    45b6:	41 e0       	ldi	r20, 0x01	; 1
    45b8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>

void KEYPAD_voidInit(void) {
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    45bc:	8a 81       	ldd	r24, Y+2	; 0x02
    45be:	8f 5f       	subi	r24, 0xFF	; 255
    45c0:	8a 83       	std	Y+2, r24	; 0x02
    45c2:	8a 81       	ldd	r24, Y+2	; 0x02
    45c4:	84 30       	cpi	r24, 0x04	; 4
    45c6:	a0 f2       	brcs	.-88     	; 0x4570 <KEYPAD_voidInit+0xe>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    45c8:	19 82       	std	Y+1, r1	; 0x01
    45ca:	16 c0       	rjmp	.+44     	; 0x45f8 <KEYPAD_voidInit+0x96>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
    45cc:	89 81       	ldd	r24, Y+1	; 0x01
    45ce:	88 2f       	mov	r24, r24
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	fc 01       	movw	r30, r24
    45d4:	e9 56       	subi	r30, 0x69	; 105
    45d6:	fe 4f       	sbci	r31, 0xFE	; 254
    45d8:	20 81       	ld	r18, Z
    45da:	89 81       	ldd	r24, Y+1	; 0x01
    45dc:	88 2f       	mov	r24, r24
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	fc 01       	movw	r30, r24
    45e2:	e5 56       	subi	r30, 0x65	; 101
    45e4:	fe 4f       	sbci	r31, 0xFE	; 254
    45e6:	90 81       	ld	r25, Z
    45e8:	82 2f       	mov	r24, r18
    45ea:	69 2f       	mov	r22, r25
    45ec:	40 e0       	ldi	r20, 0x00	; 0
    45ee:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    45f2:	89 81       	ldd	r24, Y+1	; 0x01
    45f4:	8f 5f       	subi	r24, 0xFF	; 255
    45f6:	89 83       	std	Y+1, r24	; 0x01
    45f8:	89 81       	ldd	r24, Y+1	; 0x01
    45fa:	84 30       	cpi	r24, 0x04	; 4
    45fc:	38 f3       	brcs	.-50     	; 0x45cc <KEYPAD_voidInit+0x6a>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
	}
}
    45fe:	0f 90       	pop	r0
    4600:	0f 90       	pop	r0
    4602:	cf 91       	pop	r28
    4604:	df 91       	pop	r29
    4606:	08 95       	ret

00004608 <KEYPAD_u8getPressedKey>:


u8 KEYPAD_u8getPressedKey(void) {
    4608:	df 93       	push	r29
    460a:	cf 93       	push	r28
    460c:	00 d0       	rcall	.+0      	; 0x460e <KEYPAD_u8getPressedKey+0x6>
    460e:	0f 92       	push	r0
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
	u8 row, col, dataValue = 0xff;
    4614:	8f ef       	ldi	r24, 0xFF	; 255
    4616:	89 83       	std	Y+1, r24	; 0x01
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    4618:	1b 82       	std	Y+3, r1	; 0x03
    461a:	6a c0       	rjmp	.+212    	; 0x46f0 <KEYPAD_u8getPressedKey+0xe8>

			// I set the pin by '1' for the row, and will iterate
			GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], PIN_OUTPUT);
    461c:	8b 81       	ldd	r24, Y+3	; 0x03
    461e:	88 2f       	mov	r24, r24
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	fc 01       	movw	r30, r24
    4624:	e1 57       	subi	r30, 0x71	; 113
    4626:	fe 4f       	sbci	r31, 0xFE	; 254
    4628:	20 81       	ld	r18, Z
    462a:	8b 81       	ldd	r24, Y+3	; 0x03
    462c:	88 2f       	mov	r24, r24
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	fc 01       	movw	r30, r24
    4632:	ed 56       	subi	r30, 0x6D	; 109
    4634:	fe 4f       	sbci	r31, 0xFE	; 254
    4636:	90 81       	ld	r25, Z
    4638:	82 2f       	mov	r24, r18
    463a:	69 2f       	mov	r22, r25
    463c:	41 e0       	ldi	r20, 0x01	; 1
    463e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
    4642:	8b 81       	ldd	r24, Y+3	; 0x03
    4644:	88 2f       	mov	r24, r24
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	fc 01       	movw	r30, r24
    464a:	e1 57       	subi	r30, 0x71	; 113
    464c:	fe 4f       	sbci	r31, 0xFE	; 254
    464e:	20 81       	ld	r18, Z
    4650:	8b 81       	ldd	r24, Y+3	; 0x03
    4652:	88 2f       	mov	r24, r24
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	fc 01       	movw	r30, r24
    4658:	ed 56       	subi	r30, 0x6D	; 109
    465a:	fe 4f       	sbci	r31, 0xFE	; 254
    465c:	90 81       	ld	r25, Z
    465e:	82 2f       	mov	r24, r18
    4660:	69 2f       	mov	r22, r25
    4662:	40 e0       	ldi	r20, 0x00	; 0
    4664:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    4668:	1a 82       	std	Y+2, r1	; 0x02
    466a:	29 c0       	rjmp	.+82     	; 0x46be <KEYPAD_u8getPressedKey+0xb6>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
    466c:	8a 81       	ldd	r24, Y+2	; 0x02
    466e:	88 2f       	mov	r24, r24
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	fc 01       	movw	r30, r24
    4674:	e9 56       	subi	r30, 0x69	; 105
    4676:	fe 4f       	sbci	r31, 0xFE	; 254
    4678:	20 81       	ld	r18, Z
    467a:	8a 81       	ldd	r24, Y+2	; 0x02
    467c:	88 2f       	mov	r24, r24
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	fc 01       	movw	r30, r24
    4682:	e5 56       	subi	r30, 0x65	; 101
    4684:	fe 4f       	sbci	r31, 0xFE	; 254
    4686:	90 81       	ld	r25, Z
    4688:	82 2f       	mov	r24, r18
    468a:	69 2f       	mov	r22, r25
    468c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <GPIO_u8GetPinValue>
    4690:	88 23       	and	r24, r24
    4692:	91 f4       	brne	.+36     	; 0x46b8 <KEYPAD_u8getPressedKey+0xb0>
					dataValue = KPD_DATA[row][col];
    4694:	8b 81       	ldd	r24, Y+3	; 0x03
    4696:	48 2f       	mov	r20, r24
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	8a 81       	ldd	r24, Y+2	; 0x02
    469c:	28 2f       	mov	r18, r24
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	ca 01       	movw	r24, r20
    46a2:	88 0f       	add	r24, r24
    46a4:	99 1f       	adc	r25, r25
    46a6:	88 0f       	add	r24, r24
    46a8:	99 1f       	adc	r25, r25
    46aa:	82 0f       	add	r24, r18
    46ac:	93 1f       	adc	r25, r19
    46ae:	fc 01       	movw	r30, r24
    46b0:	e1 56       	subi	r30, 0x61	; 97
    46b2:	fe 4f       	sbci	r31, 0xFE	; 254
    46b4:	80 81       	ld	r24, Z
    46b6:	89 83       	std	Y+1, r24	; 0x01

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    46b8:	8a 81       	ldd	r24, Y+2	; 0x02
    46ba:	8f 5f       	subi	r24, 0xFF	; 255
    46bc:	8a 83       	std	Y+2, r24	; 0x02
    46be:	8a 81       	ldd	r24, Y+2	; 0x02
    46c0:	84 30       	cpi	r24, 0x04	; 4
    46c2:	a0 f2       	brcs	.-88     	; 0x466c <KEYPAD_u8getPressedKey+0x64>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
					dataValue = KPD_DATA[row][col];
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
    46c4:	8b 81       	ldd	r24, Y+3	; 0x03
    46c6:	88 2f       	mov	r24, r24
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	fc 01       	movw	r30, r24
    46cc:	e1 57       	subi	r30, 0x71	; 113
    46ce:	fe 4f       	sbci	r31, 0xFE	; 254
    46d0:	20 81       	ld	r18, Z
    46d2:	8b 81       	ldd	r24, Y+3	; 0x03
    46d4:	88 2f       	mov	r24, r24
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	fc 01       	movw	r30, r24
    46da:	ed 56       	subi	r30, 0x6D	; 109
    46dc:	fe 4f       	sbci	r31, 0xFE	; 254
    46de:	90 81       	ld	r25, Z
    46e0:	82 2f       	mov	r24, r18
    46e2:	69 2f       	mov	r22, r25
    46e4:	41 e0       	ldi	r20, 0x01	; 1
    46e6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <GPIO_voidSetPinValue>


u8 KEYPAD_u8getPressedKey(void) {
	u8 row, col, dataValue = 0xff;
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    46ea:	8b 81       	ldd	r24, Y+3	; 0x03
    46ec:	8f 5f       	subi	r24, 0xFF	; 255
    46ee:	8b 83       	std	Y+3, r24	; 0x03
    46f0:	8b 81       	ldd	r24, Y+3	; 0x03
    46f2:	84 30       	cpi	r24, 0x04	; 4
    46f4:	08 f4       	brcc	.+2      	; 0x46f8 <KEYPAD_u8getPressedKey+0xf0>
    46f6:	92 cf       	rjmp	.-220    	; 0x461c <KEYPAD_u8getPressedKey+0x14>
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
		//}
	}
	return dataValue;
    46f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    46fa:	0f 90       	pop	r0
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	cf 91       	pop	r28
    4702:	df 91       	pop	r29
    4704:	08 95       	ret

00004706 <System_Initialization>:
 *******************************************************************************/

u8 KeyData = 0;
u8* stringReceived = 0;

void System_Initialization(void) {
    4706:	df 93       	push	r29
    4708:	cf 93       	push	r28
    470a:	cd b7       	in	r28, 0x3d	; 61
    470c:	de b7       	in	r29, 0x3e	; 62
	// Initializing LCD Module
	LCD_voidInit();
    470e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_voidInit>
	LCD_voidSetCursor(0, 0);
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	60 e0       	ldi	r22, 0x00	; 0
    4716:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSetCursor>
	LCD_voidDisplayString("UART RECEIVE");
    471a:	88 e6       	ldi	r24, 0x68	; 104
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	0e 94 17 22 	call	0x442e	; 0x442e <LCD_voidDisplayString>

	// Initializing UART Pins
	UART_Initialization();
    4722:	0e 94 a5 07 	call	0xf4a	; 0xf4a <UART_Initialization>
	GPIO_voidSetPinDirection(PORT_D, PIN_1, PIN_OUTPUT);
    4726:	83 e0       	ldi	r24, 0x03	; 3
    4728:	61 e0       	ldi	r22, 0x01	; 1
    472a:	41 e0       	ldi	r20, 0x01	; 1
    472c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(PORT_D, PIN_0, PIN_INPUT);
    4730:	83 e0       	ldi	r24, 0x03	; 3
    4732:	60 e0       	ldi	r22, 0x00	; 0
    4734:	40 e0       	ldi	r20, 0x00	; 0
    4736:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <GPIO_voidSetPinDirection>

	// Initializing Keypad
	//KEYPAD_voidInit();


}
    473a:	cf 91       	pop	r28
    473c:	df 91       	pop	r29
    473e:	08 95       	ret

00004740 <executeMain_RXD>:

void executeMain_RXD(void) {
    4740:	df 93       	push	r29
    4742:	cf 93       	push	r28
    4744:	cd b7       	in	r28, 0x3d	; 61
    4746:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSetCursor(1, 0);
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSetCursor>
	LCD_voidDisplayString("Receiving..");
    4750:	85 e7       	ldi	r24, 0x75	; 117
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	0e 94 17 22 	call	0x442e	; 0x442e <LCD_voidDisplayString>
	UART_voidReceiveString(stringReceived);
    4758:	80 91 bd 01 	lds	r24, 0x01BD
    475c:	90 91 be 01 	lds	r25, 0x01BE
    4760:	0e 94 20 08 	call	0x1040	; 0x1040 <UART_voidReceiveString>
	LCD_voidSetCursor(2, 0);
    4764:	82 e0       	ldi	r24, 0x02	; 2
    4766:	60 e0       	ldi	r22, 0x00	; 0
    4768:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSetCursor>
	LCD_voidDisplayString(stringReceived);
    476c:	80 91 bd 01 	lds	r24, 0x01BD
    4770:	90 91 be 01 	lds	r25, 0x01BE
    4774:	0e 94 17 22 	call	0x442e	; 0x442e <LCD_voidDisplayString>
	//LCD_voidSendData(UDR_REG);
	LCD_voidSetCursor(3, 0);
    4778:	83 e0       	ldi	r24, 0x03	; 3
    477a:	60 e0       	ldi	r22, 0x00	; 0
    477c:	0e 94 40 22 	call	0x4480	; 0x4480 <LCD_voidSetCursor>
	LCD_voidDisplayString("Done!");
    4780:	81 e8       	ldi	r24, 0x81	; 129
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	0e 94 17 22 	call	0x442e	; 0x442e <LCD_voidDisplayString>

}
    4788:	cf 91       	pop	r28
    478a:	df 91       	pop	r29
    478c:	08 95       	ret

0000478e <main>:
/*******************************************************************************
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void)
{
    478e:	df 93       	push	r29
    4790:	cf 93       	push	r28
    4792:	cd b7       	in	r28, 0x3d	; 61
    4794:	de b7       	in	r29, 0x3e	; 62
	System_Initialization();
    4796:	0e 94 83 23 	call	0x4706	; 0x4706 <System_Initialization>

	while (1)
	{
		executeMain_RXD();
    479a:	0e 94 a0 23 	call	0x4740	; 0x4740 <executeMain_RXD>
    479e:	fd cf       	rjmp	.-6      	; 0x479a <main+0xc>

000047a0 <__mulsi3>:
    47a0:	62 9f       	mul	r22, r18
    47a2:	d0 01       	movw	r26, r0
    47a4:	73 9f       	mul	r23, r19
    47a6:	f0 01       	movw	r30, r0
    47a8:	82 9f       	mul	r24, r18
    47aa:	e0 0d       	add	r30, r0
    47ac:	f1 1d       	adc	r31, r1
    47ae:	64 9f       	mul	r22, r20
    47b0:	e0 0d       	add	r30, r0
    47b2:	f1 1d       	adc	r31, r1
    47b4:	92 9f       	mul	r25, r18
    47b6:	f0 0d       	add	r31, r0
    47b8:	83 9f       	mul	r24, r19
    47ba:	f0 0d       	add	r31, r0
    47bc:	74 9f       	mul	r23, r20
    47be:	f0 0d       	add	r31, r0
    47c0:	65 9f       	mul	r22, r21
    47c2:	f0 0d       	add	r31, r0
    47c4:	99 27       	eor	r25, r25
    47c6:	72 9f       	mul	r23, r18
    47c8:	b0 0d       	add	r27, r0
    47ca:	e1 1d       	adc	r30, r1
    47cc:	f9 1f       	adc	r31, r25
    47ce:	63 9f       	mul	r22, r19
    47d0:	b0 0d       	add	r27, r0
    47d2:	e1 1d       	adc	r30, r1
    47d4:	f9 1f       	adc	r31, r25
    47d6:	bd 01       	movw	r22, r26
    47d8:	cf 01       	movw	r24, r30
    47da:	11 24       	eor	r1, r1
    47dc:	08 95       	ret

000047de <__udivmodhi4>:
    47de:	aa 1b       	sub	r26, r26
    47e0:	bb 1b       	sub	r27, r27
    47e2:	51 e1       	ldi	r21, 0x11	; 17
    47e4:	07 c0       	rjmp	.+14     	; 0x47f4 <__udivmodhi4_ep>

000047e6 <__udivmodhi4_loop>:
    47e6:	aa 1f       	adc	r26, r26
    47e8:	bb 1f       	adc	r27, r27
    47ea:	a6 17       	cp	r26, r22
    47ec:	b7 07       	cpc	r27, r23
    47ee:	10 f0       	brcs	.+4      	; 0x47f4 <__udivmodhi4_ep>
    47f0:	a6 1b       	sub	r26, r22
    47f2:	b7 0b       	sbc	r27, r23

000047f4 <__udivmodhi4_ep>:
    47f4:	88 1f       	adc	r24, r24
    47f6:	99 1f       	adc	r25, r25
    47f8:	5a 95       	dec	r21
    47fa:	a9 f7       	brne	.-22     	; 0x47e6 <__udivmodhi4_loop>
    47fc:	80 95       	com	r24
    47fe:	90 95       	com	r25
    4800:	bc 01       	movw	r22, r24
    4802:	cd 01       	movw	r24, r26
    4804:	08 95       	ret

00004806 <__udivmodsi4>:
    4806:	a1 e2       	ldi	r26, 0x21	; 33
    4808:	1a 2e       	mov	r1, r26
    480a:	aa 1b       	sub	r26, r26
    480c:	bb 1b       	sub	r27, r27
    480e:	fd 01       	movw	r30, r26
    4810:	0d c0       	rjmp	.+26     	; 0x482c <__udivmodsi4_ep>

00004812 <__udivmodsi4_loop>:
    4812:	aa 1f       	adc	r26, r26
    4814:	bb 1f       	adc	r27, r27
    4816:	ee 1f       	adc	r30, r30
    4818:	ff 1f       	adc	r31, r31
    481a:	a2 17       	cp	r26, r18
    481c:	b3 07       	cpc	r27, r19
    481e:	e4 07       	cpc	r30, r20
    4820:	f5 07       	cpc	r31, r21
    4822:	20 f0       	brcs	.+8      	; 0x482c <__udivmodsi4_ep>
    4824:	a2 1b       	sub	r26, r18
    4826:	b3 0b       	sbc	r27, r19
    4828:	e4 0b       	sbc	r30, r20
    482a:	f5 0b       	sbc	r31, r21

0000482c <__udivmodsi4_ep>:
    482c:	66 1f       	adc	r22, r22
    482e:	77 1f       	adc	r23, r23
    4830:	88 1f       	adc	r24, r24
    4832:	99 1f       	adc	r25, r25
    4834:	1a 94       	dec	r1
    4836:	69 f7       	brne	.-38     	; 0x4812 <__udivmodsi4_loop>
    4838:	60 95       	com	r22
    483a:	70 95       	com	r23
    483c:	80 95       	com	r24
    483e:	90 95       	com	r25
    4840:	9b 01       	movw	r18, r22
    4842:	ac 01       	movw	r20, r24
    4844:	bd 01       	movw	r22, r26
    4846:	cf 01       	movw	r24, r30
    4848:	08 95       	ret

0000484a <__prologue_saves__>:
    484a:	2f 92       	push	r2
    484c:	3f 92       	push	r3
    484e:	4f 92       	push	r4
    4850:	5f 92       	push	r5
    4852:	6f 92       	push	r6
    4854:	7f 92       	push	r7
    4856:	8f 92       	push	r8
    4858:	9f 92       	push	r9
    485a:	af 92       	push	r10
    485c:	bf 92       	push	r11
    485e:	cf 92       	push	r12
    4860:	df 92       	push	r13
    4862:	ef 92       	push	r14
    4864:	ff 92       	push	r15
    4866:	0f 93       	push	r16
    4868:	1f 93       	push	r17
    486a:	cf 93       	push	r28
    486c:	df 93       	push	r29
    486e:	cd b7       	in	r28, 0x3d	; 61
    4870:	de b7       	in	r29, 0x3e	; 62
    4872:	ca 1b       	sub	r28, r26
    4874:	db 0b       	sbc	r29, r27
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	cd bf       	out	0x3d, r28	; 61
    4880:	09 94       	ijmp

00004882 <__epilogue_restores__>:
    4882:	2a 88       	ldd	r2, Y+18	; 0x12
    4884:	39 88       	ldd	r3, Y+17	; 0x11
    4886:	48 88       	ldd	r4, Y+16	; 0x10
    4888:	5f 84       	ldd	r5, Y+15	; 0x0f
    488a:	6e 84       	ldd	r6, Y+14	; 0x0e
    488c:	7d 84       	ldd	r7, Y+13	; 0x0d
    488e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4890:	9b 84       	ldd	r9, Y+11	; 0x0b
    4892:	aa 84       	ldd	r10, Y+10	; 0x0a
    4894:	b9 84       	ldd	r11, Y+9	; 0x09
    4896:	c8 84       	ldd	r12, Y+8	; 0x08
    4898:	df 80       	ldd	r13, Y+7	; 0x07
    489a:	ee 80       	ldd	r14, Y+6	; 0x06
    489c:	fd 80       	ldd	r15, Y+5	; 0x05
    489e:	0c 81       	ldd	r16, Y+4	; 0x04
    48a0:	1b 81       	ldd	r17, Y+3	; 0x03
    48a2:	aa 81       	ldd	r26, Y+2	; 0x02
    48a4:	b9 81       	ldd	r27, Y+1	; 0x01
    48a6:	ce 0f       	add	r28, r30
    48a8:	d1 1d       	adc	r29, r1
    48aa:	0f b6       	in	r0, 0x3f	; 63
    48ac:	f8 94       	cli
    48ae:	de bf       	out	0x3e, r29	; 62
    48b0:	0f be       	out	0x3f, r0	; 63
    48b2:	cd bf       	out	0x3d, r28	; 61
    48b4:	ed 01       	movw	r28, r26
    48b6:	08 95       	ret

000048b8 <itoa>:
    48b8:	fb 01       	movw	r30, r22
    48ba:	9f 01       	movw	r18, r30
    48bc:	e8 94       	clt
    48be:	42 30       	cpi	r20, 0x02	; 2
    48c0:	c4 f0       	brlt	.+48     	; 0x48f2 <itoa+0x3a>
    48c2:	45 32       	cpi	r20, 0x25	; 37
    48c4:	b4 f4       	brge	.+44     	; 0x48f2 <itoa+0x3a>
    48c6:	4a 30       	cpi	r20, 0x0A	; 10
    48c8:	29 f4       	brne	.+10     	; 0x48d4 <itoa+0x1c>
    48ca:	97 fb       	bst	r25, 7
    48cc:	1e f4       	brtc	.+6      	; 0x48d4 <itoa+0x1c>
    48ce:	90 95       	com	r25
    48d0:	81 95       	neg	r24
    48d2:	9f 4f       	sbci	r25, 0xFF	; 255
    48d4:	64 2f       	mov	r22, r20
    48d6:	77 27       	eor	r23, r23
    48d8:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodhi4>
    48dc:	80 5d       	subi	r24, 0xD0	; 208
    48de:	8a 33       	cpi	r24, 0x3A	; 58
    48e0:	0c f0       	brlt	.+2      	; 0x48e4 <itoa+0x2c>
    48e2:	89 5d       	subi	r24, 0xD9	; 217
    48e4:	81 93       	st	Z+, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	00 97       	sbiw	r24, 0x00	; 0
    48ea:	a1 f7       	brne	.-24     	; 0x48d4 <itoa+0x1c>
    48ec:	16 f4       	brtc	.+4      	; 0x48f2 <itoa+0x3a>
    48ee:	5d e2       	ldi	r21, 0x2D	; 45
    48f0:	51 93       	st	Z+, r21
    48f2:	10 82       	st	Z, r1
    48f4:	c9 01       	movw	r24, r18
    48f6:	0c 94 d7 24 	jmp	0x49ae	; 0x49ae <strrev>

000048fa <ceil>:
    48fa:	3b d0       	rcall	.+118    	; 0x4972 <__fp_trunc>
    48fc:	80 f0       	brcs	.+32     	; 0x491e <ceil+0x24>
    48fe:	9f 37       	cpi	r25, 0x7F	; 127
    4900:	40 f4       	brcc	.+16     	; 0x4912 <ceil+0x18>
    4902:	91 11       	cpse	r25, r1
    4904:	0e f4       	brtc	.+2      	; 0x4908 <ceil+0xe>
    4906:	4d c0       	rjmp	.+154    	; 0x49a2 <__fp_szero>
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	70 e0       	ldi	r23, 0x00	; 0
    490c:	80 e8       	ldi	r24, 0x80	; 128
    490e:	9f e3       	ldi	r25, 0x3F	; 63
    4910:	08 95       	ret
    4912:	26 f0       	brts	.+8      	; 0x491c <ceil+0x22>
    4914:	1b 16       	cp	r1, r27
    4916:	61 1d       	adc	r22, r1
    4918:	71 1d       	adc	r23, r1
    491a:	81 1d       	adc	r24, r1
    491c:	01 c0       	rjmp	.+2      	; 0x4920 <__fp_mintl>
    491e:	1b c0       	rjmp	.+54     	; 0x4956 <__fp_mpack>

00004920 <__fp_mintl>:
    4920:	88 23       	and	r24, r24
    4922:	71 f4       	brne	.+28     	; 0x4940 <__fp_mintl+0x20>
    4924:	77 23       	and	r23, r23
    4926:	21 f0       	breq	.+8      	; 0x4930 <__fp_mintl+0x10>
    4928:	98 50       	subi	r25, 0x08	; 8
    492a:	87 2b       	or	r24, r23
    492c:	76 2f       	mov	r23, r22
    492e:	07 c0       	rjmp	.+14     	; 0x493e <__fp_mintl+0x1e>
    4930:	66 23       	and	r22, r22
    4932:	11 f4       	brne	.+4      	; 0x4938 <__fp_mintl+0x18>
    4934:	99 27       	eor	r25, r25
    4936:	0d c0       	rjmp	.+26     	; 0x4952 <__fp_mintl+0x32>
    4938:	90 51       	subi	r25, 0x10	; 16
    493a:	86 2b       	or	r24, r22
    493c:	70 e0       	ldi	r23, 0x00	; 0
    493e:	60 e0       	ldi	r22, 0x00	; 0
    4940:	2a f0       	brmi	.+10     	; 0x494c <__fp_mintl+0x2c>
    4942:	9a 95       	dec	r25
    4944:	66 0f       	add	r22, r22
    4946:	77 1f       	adc	r23, r23
    4948:	88 1f       	adc	r24, r24
    494a:	da f7       	brpl	.-10     	; 0x4942 <__fp_mintl+0x22>
    494c:	88 0f       	add	r24, r24
    494e:	96 95       	lsr	r25
    4950:	87 95       	ror	r24
    4952:	97 f9       	bld	r25, 7
    4954:	08 95       	ret

00004956 <__fp_mpack>:
    4956:	9f 3f       	cpi	r25, 0xFF	; 255
    4958:	31 f0       	breq	.+12     	; 0x4966 <__fp_mpack_finite+0xc>

0000495a <__fp_mpack_finite>:
    495a:	91 50       	subi	r25, 0x01	; 1
    495c:	20 f4       	brcc	.+8      	; 0x4966 <__fp_mpack_finite+0xc>
    495e:	87 95       	ror	r24
    4960:	77 95       	ror	r23
    4962:	67 95       	ror	r22
    4964:	b7 95       	ror	r27
    4966:	88 0f       	add	r24, r24
    4968:	91 1d       	adc	r25, r1
    496a:	96 95       	lsr	r25
    496c:	87 95       	ror	r24
    496e:	97 f9       	bld	r25, 7
    4970:	08 95       	ret

00004972 <__fp_trunc>:
    4972:	35 d0       	rcall	.+106    	; 0x49de <__fp_splitA>
    4974:	a0 f0       	brcs	.+40     	; 0x499e <__fp_trunc+0x2c>
    4976:	be e7       	ldi	r27, 0x7E	; 126
    4978:	b9 17       	cp	r27, r25
    497a:	88 f4       	brcc	.+34     	; 0x499e <__fp_trunc+0x2c>
    497c:	bb 27       	eor	r27, r27
    497e:	9f 38       	cpi	r25, 0x8F	; 143
    4980:	60 f4       	brcc	.+24     	; 0x499a <__fp_trunc+0x28>
    4982:	16 16       	cp	r1, r22
    4984:	b1 1d       	adc	r27, r1
    4986:	67 2f       	mov	r22, r23
    4988:	78 2f       	mov	r23, r24
    498a:	88 27       	eor	r24, r24
    498c:	98 5f       	subi	r25, 0xF8	; 248
    498e:	f7 cf       	rjmp	.-18     	; 0x497e <__fp_trunc+0xc>
    4990:	86 95       	lsr	r24
    4992:	77 95       	ror	r23
    4994:	67 95       	ror	r22
    4996:	b1 1d       	adc	r27, r1
    4998:	93 95       	inc	r25
    499a:	96 39       	cpi	r25, 0x96	; 150
    499c:	c8 f3       	brcs	.-14     	; 0x4990 <__fp_trunc+0x1e>
    499e:	08 95       	ret

000049a0 <__fp_zero>:
    49a0:	e8 94       	clt

000049a2 <__fp_szero>:
    49a2:	bb 27       	eor	r27, r27
    49a4:	66 27       	eor	r22, r22
    49a6:	77 27       	eor	r23, r23
    49a8:	cb 01       	movw	r24, r22
    49aa:	97 f9       	bld	r25, 7
    49ac:	08 95       	ret

000049ae <strrev>:
    49ae:	dc 01       	movw	r26, r24
    49b0:	fc 01       	movw	r30, r24
    49b2:	67 2f       	mov	r22, r23
    49b4:	71 91       	ld	r23, Z+
    49b6:	77 23       	and	r23, r23
    49b8:	e1 f7       	brne	.-8      	; 0x49b2 <strrev+0x4>
    49ba:	32 97       	sbiw	r30, 0x02	; 2
    49bc:	04 c0       	rjmp	.+8      	; 0x49c6 <strrev+0x18>
    49be:	7c 91       	ld	r23, X
    49c0:	6d 93       	st	X+, r22
    49c2:	70 83       	st	Z, r23
    49c4:	62 91       	ld	r22, -Z
    49c6:	ae 17       	cp	r26, r30
    49c8:	bf 07       	cpc	r27, r31
    49ca:	c8 f3       	brcs	.-14     	; 0x49be <strrev+0x10>
    49cc:	08 95       	ret

000049ce <__fp_split3>:
    49ce:	57 fd       	sbrc	r21, 7
    49d0:	90 58       	subi	r25, 0x80	; 128
    49d2:	44 0f       	add	r20, r20
    49d4:	55 1f       	adc	r21, r21
    49d6:	59 f0       	breq	.+22     	; 0x49ee <__fp_splitA+0x10>
    49d8:	5f 3f       	cpi	r21, 0xFF	; 255
    49da:	71 f0       	breq	.+28     	; 0x49f8 <__fp_splitA+0x1a>
    49dc:	47 95       	ror	r20

000049de <__fp_splitA>:
    49de:	88 0f       	add	r24, r24
    49e0:	97 fb       	bst	r25, 7
    49e2:	99 1f       	adc	r25, r25
    49e4:	61 f0       	breq	.+24     	; 0x49fe <__fp_splitA+0x20>
    49e6:	9f 3f       	cpi	r25, 0xFF	; 255
    49e8:	79 f0       	breq	.+30     	; 0x4a08 <__fp_splitA+0x2a>
    49ea:	87 95       	ror	r24
    49ec:	08 95       	ret
    49ee:	12 16       	cp	r1, r18
    49f0:	13 06       	cpc	r1, r19
    49f2:	14 06       	cpc	r1, r20
    49f4:	55 1f       	adc	r21, r21
    49f6:	f2 cf       	rjmp	.-28     	; 0x49dc <__fp_split3+0xe>
    49f8:	46 95       	lsr	r20
    49fa:	f1 df       	rcall	.-30     	; 0x49de <__fp_splitA>
    49fc:	08 c0       	rjmp	.+16     	; 0x4a0e <__fp_splitA+0x30>
    49fe:	16 16       	cp	r1, r22
    4a00:	17 06       	cpc	r1, r23
    4a02:	18 06       	cpc	r1, r24
    4a04:	99 1f       	adc	r25, r25
    4a06:	f1 cf       	rjmp	.-30     	; 0x49ea <__fp_splitA+0xc>
    4a08:	86 95       	lsr	r24
    4a0a:	71 05       	cpc	r23, r1
    4a0c:	61 05       	cpc	r22, r1
    4a0e:	08 94       	sec
    4a10:	08 95       	ret

00004a12 <_exit>:
    4a12:	f8 94       	cli

00004a14 <__stop_program>:
    4a14:	ff cf       	rjmp	.-2      	; 0x4a14 <__stop_program>
