
ATMEL_PROJMASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000dde  00000e72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800090  00800090  00000ea2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003450  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f9  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020fd  00000000  00000000  00005959  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba8  00000000  00000000  00007a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001520  00000000  00000000  00008600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024be  00000000  00000000  00009b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000bfde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_1>
   8:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_2>
   c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_6>
  1c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_7>
  20:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__vector_8>
  24:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__vector_9>
  28:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__vector_10>
  2c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__vector_11>
  30:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__vector_12>
  34:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__vector_13>
  38:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__vector_14>
  3c:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__vector_15>
  40:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3b       	cpi	r26, 0xB0	; 176
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 01 	call	0x242	; 0x242 <main>
  8a:	0c 94 ed 06 	jmp	0xdda	; 0xdda <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <System_Initialization>:
	GPIO_voidSetPinValue(PORT_C, PIN_0, LOGIC_HIGH);
}

void UARTReceiveFunction(void)
{
	UART_Flag = 1;
  92:	0e 94 9a 03 	call	0x734	; 0x734 <GLOBINT_voidSetEnableFlag>
  96:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UART_Initialization>
  9a:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_voidInit>
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_voidDisplayString>
  ae:	0e 94 aa 04 	call	0x954	; 0x954 <SPI_voidInitialization_Master>
  b2:	87 ea       	ldi	r24, 0xA7	; 167
  b4:	91 e6       	ldi	r25, 0x61	; 97
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <System_Initialization+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <System_Initialization+0x2a>
  bc:	00 00       	nop
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
  c6:	8b e6       	ldi	r24, 0x6B	; 107
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_voidDisplayString>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
  f6:	0e 94 b5 02 	call	0x56a	; 0x56a <ADC_voidInit>
  fa:	08 95       	ret

000000fc <SPI_Slave_1_Select>:
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 110:	08 95       	ret

00000112 <SPI_Slave_2_Select>:
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 126:	08 95       	ret

00000128 <executeMain_MASTER>:
 * 4 - LDR Light Sensor (Next Release)
 * 		Turns the lights Automatically when dark
 */

void executeMain_MASTER(void) {
	if(UART_Flag == 1)
 128:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	09 f0       	breq	.+2      	; 0x132 <executeMain_MASTER+0xa>
 130:	6f c0       	rjmp	.+222    	; 0x210 <executeMain_MASTER+0xe8>
	{
		UART_Read = UART_voidReceiveByte_ISR();
 132:	0e 94 0a 06 	call	0xc14	; 0xc14 <UART_voidReceiveByte_ISR>
 136:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <UART_Read>
		//UART_Read = 't';
		if((UART_Read == 'w') || (UART_Read == 's') ||
 13a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 13e:	87 37       	cpi	r24, 0x77	; 119
 140:	81 f0       	breq	.+32     	; 0x162 <executeMain_MASTER+0x3a>
 142:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 146:	83 37       	cpi	r24, 0x73	; 115
 148:	61 f0       	breq	.+24     	; 0x162 <executeMain_MASTER+0x3a>
		(UART_Read == 'x') || (UART_Read == 'g') || (UART_Read == 'f') )
 14a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
void executeMain_MASTER(void) {
	if(UART_Flag == 1)
	{
		UART_Read = UART_voidReceiveByte_ISR();
		//UART_Read = 't';
		if((UART_Read == 'w') || (UART_Read == 's') ||
 14e:	88 37       	cpi	r24, 0x78	; 120
 150:	41 f0       	breq	.+16     	; 0x162 <executeMain_MASTER+0x3a>
		(UART_Read == 'x') || (UART_Read == 'g') || (UART_Read == 'f') )
 152:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 156:	87 36       	cpi	r24, 0x67	; 103
 158:	21 f0       	breq	.+8      	; 0x162 <executeMain_MASTER+0x3a>
 15a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 15e:	86 36       	cpi	r24, 0x66	; 102
 160:	39 f5       	brne	.+78     	; 0x1b0 <executeMain_MASTER+0x88>
		{
			SPI_Slave_2_Select();
 162:	0e 94 89 00 	call	0x112	; 0x112 <SPI_Slave_2_Select>

			SPI_Read = SPI_u8SendByte_Polling(UART_Read);
 166:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 16a:	0e 94 ce 04 	call	0x99c	; 0x99c <SPI_u8SendByte_Polling>
 16e:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <SPI_Read>
			LCD_voidSetCursor(2, 4);
 172:	64 e0       	ldi	r22, 0x04	; 4
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
			LCD_voidSendData(UART_Read);
 17a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 17e:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_voidSendData>

			LCD_voidSetCursor(2, 12);
 182:	6c e0       	ldi	r22, 0x0C	; 12
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
			LCD_voidSendData(SPI_Read);
 18a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <SPI_Read>
 18e:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_voidSendData>

			LCD_voidSetCursor(3, 0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
			LCD_voidDisplayString("SPI 2");
 19a:	8c e7       	ldi	r24, 0x7C	; 124
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	87 ea       	ldi	r24, 0xA7	; 167
 1a4:	91 e6       	ldi	r25, 0x61	; 97
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <executeMain_MASTER+0x7e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <executeMain_MASTER+0x84>
 1ac:	00 00       	nop
 1ae:	2e c0       	rjmp	.+92     	; 0x20c <executeMain_MASTER+0xe4>

			//UART_Flag = 0;
			_delay_ms(100);
		}
		else if((UART_Read == 't') || (UART_Read == 'r'))
 1b0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 1b4:	84 37       	cpi	r24, 0x74	; 116
 1b6:	21 f0       	breq	.+8      	; 0x1c0 <executeMain_MASTER+0x98>
 1b8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 1bc:	82 37       	cpi	r24, 0x72	; 114
 1be:	31 f5       	brne	.+76     	; 0x20c <executeMain_MASTER+0xe4>
		{
			SPI_Slave_1_Select();
 1c0:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_Slave_1_Select>
			SPI_Read = SPI_u8SendByte_Polling(UART_Read);
 1c4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 1c8:	0e 94 ce 04 	call	0x99c	; 0x99c <SPI_u8SendByte_Polling>
 1cc:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <SPI_Read>

			LCD_voidSetCursor(2, 4);
 1d0:	64 e0       	ldi	r22, 0x04	; 4
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
			LCD_voidSendData(UART_Read);
 1d8:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <UART_Read>
 1dc:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_voidSendData>

			LCD_voidSetCursor(2, 12);
 1e0:	6c e0       	ldi	r22, 0x0C	; 12
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
			LCD_voidSendData(SPI_Read);
 1e8:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <SPI_Read>
 1ec:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_voidSendData>

			LCD_voidSetCursor(3, 0);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
			LCD_voidDisplayString("SPI 1");
 1f8:	82 e8       	ldi	r24, 0x82	; 130
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_voidDisplayString>
 200:	87 ea       	ldi	r24, 0xA7	; 167
 202:	91 e6       	ldi	r25, 0x61	; 97
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <executeMain_MASTER+0xdc>
 208:	00 c0       	rjmp	.+0      	; 0x20a <executeMain_MASTER+0xe2>
 20a:	00 00       	nop

			//UART_Flag = 0;
			_delay_ms(100);
		}
		SPI_Read = 0;
 20c:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <SPI_Read>
	}

	LCD_voidSetCursor(3, 0);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
	LCD_voidDisplayString("Temp: ");
 218:	88 e8       	ldi	r24, 0x88	; 136
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_voidDisplayString>
	LCD_voidSetCursor(3, 6);
 220:	66 e0       	ldi	r22, 0x06	; 6
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LCD_voidSetCursor>
	ADC_Read = ADC_u16ReadTemperature(CHANNEL_0);
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ADC_u16ReadTemperature>
 22e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <ADC_Read>
	LCD_voidIntgerToString(ADC_Read);
 232:	68 2f       	mov	r22, r24
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_voidIntgerToString>
 23e:	08 95       	ret

00000240 <executeISR>:
}

void executeISR(void)
{
 240:	08 95       	ret

00000242 <main>:
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void)
{
	System_Initialization();
 242:	0e 94 49 00 	call	0x92	; 0x92 <System_Initialization>
	while (1)
	{
			// ISR Functions
			executeISR();
 246:	0e 94 20 01 	call	0x240	; 0x240 <executeISR>
		executeMain_MASTER();
 24a:	0e 94 94 00 	call	0x128	; 0x128 <executeMain_MASTER>
 24e:	fb cf       	rjmp	.-10     	; 0x246 <main+0x4>

00000250 <LCD_voidSendCommand>:

}


// Sends a command to the LCD
void LCD_voidSendCommand(u8 copy_u8Command) {
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
	// Set RS Pin to '0'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	63 e0       	ldi	r22, 0x03	; 3
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 25e:	89 ef       	ldi	r24, 0xF9	; 249
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_voidSendCommand+0x12>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_voidSendCommand+0x18>
 268:	00 00       	nop
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	62 e0       	ldi	r22, 0x02	; 2
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 274:	89 ef       	ldi	r24, 0xF9	; 249
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_voidSendCommand+0x28>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <LCD_voidSendCommand+0x2e>
 27e:	00 00       	nop
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
 280:	c4 fb       	bst	r28, 4
 282:	44 27       	eor	r20, r20
 284:	40 f9       	bld	r20, 0
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
 28e:	c5 fb       	bst	r28, 5
 290:	44 27       	eor	r20, r20
 292:	40 f9       	bld	r20, 0
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
 29c:	c6 fb       	bst	r28, 6
 29e:	44 27       	eor	r20, r20
 2a0:	40 f9       	bld	r20, 0
 2a2:	62 e0       	ldi	r22, 0x02	; 2
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
 2aa:	4c 2f       	mov	r20, r28
 2ac:	44 1f       	adc	r20, r20
 2ae:	44 27       	eor	r20, r20
 2b0:	44 1f       	adc	r20, r20
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 2ba:	89 ef       	ldi	r24, 0xF9	; 249
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_voidSendCommand+0x6e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_voidSendCommand+0x74>
 2c4:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 2d0:	89 ef       	ldi	r24, 0xF9	; 249
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_voidSendCommand+0x84>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_voidSendCommand+0x8a>
 2da:	00 00       	nop
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 2e6:	89 ef       	ldi	r24, 0xF9	; 249
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_voidSendCommand+0x9a>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_voidSendCommand+0xa0>
 2f0:	00 00       	nop
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
 2f2:	4c 2f       	mov	r20, r28
 2f4:	41 70       	andi	r20, 0x01	; 1
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
 2fe:	c1 fb       	bst	r28, 1
 300:	44 27       	eor	r20, r20
 302:	40 f9       	bld	r20, 0
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
 30c:	c2 fb       	bst	r28, 2
 30e:	44 27       	eor	r20, r20
 310:	40 f9       	bld	r20, 0
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
 31a:	c3 fb       	bst	r28, 3
 31c:	44 27       	eor	r20, r20
 31e:	40 f9       	bld	r20, 0
 320:	63 e0       	ldi	r22, 0x03	; 3
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 328:	89 ef       	ldi	r24, 0xF9	; 249
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_voidSendCommand+0xdc>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_voidSendCommand+0xe2>
 332:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 33e:	89 ef       	ldi	r24, 0xF9	; 249
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_voidSendCommand+0xf2>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_voidSendCommand+0xf8>
 348:	00 00       	nop
		_delay_ms(1);
#endif
}
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <LCD_voidInit>:
 *******************************************************************************/

// Initializes and enables the LCD Module to start functionality
void LCD_voidInit(void) {
	// Initialize RS Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>

	// Initialize Enable Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
 362:	87 e8       	ldi	r24, 0x87	; 135
 364:	93 e1       	ldi	r25, 0x13	; 19
 366:	01 97       	sbiw	r24, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <LCD_voidInit+0x18>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <LCD_voidInit+0x1e>
 36c:	00 00       	nop
	if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_voidSetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
		LCD_voidSendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}
	else {
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	62 e0       	ldi	r22, 0x02	; 2
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	63 e0       	ldi	r22, 0x03	; 3
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>


		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT1);
 396:	83 e3       	ldi	r24, 0x33	; 51
 398:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT2);
 39c:	82 e3       	ldi	r24, 0x32	; 50
 39e:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_5x7_DOTS);
 3a2:	88 e2       	ldi	r24, 0x28	; 40
 3a4:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendCommand>
 3a8:	83 ef       	ldi	r24, 0xF3	; 243
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_voidInit+0x5e>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_voidInit+0x64>
 3b2:	00 00       	nop
		//LCD_voidSendCommand(LCD_2LINES_FOUR_BIT);
		_delay_ms(2);
	}

	LCD_voidSendCommand(LCD_CURSOR_OFF);
 3b4:	8c e0       	ldi	r24, 0x0C	; 12
 3b6:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendCommand>
 3ba:	83 ef       	ldi	r24, 0xF3	; 243
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_voidInit+0x70>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_voidInit+0x76>
 3c4:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendCommand>
 3cc:	83 ef       	ldi	r24, 0xF3	; 243
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_voidInit+0x82>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_voidInit+0x88>
 3d6:	00 00       	nop
 3d8:	08 95       	ret

000003da <LCD_voidSendData>:
#endif
}


// Displays a character on the LCD
void LCD_voidSendData(u8 copy_u8data) {
 3da:	cf 93       	push	r28
 3dc:	c8 2f       	mov	r28, r24
	// Set RS Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	63 e0       	ldi	r22, 0x03	; 3
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 3e8:	89 ef       	ldi	r24, 0xF9	; 249
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_voidSendData+0x12>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <LCD_voidSendData+0x18>
 3f2:	00 00       	nop
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 3fe:	89 ef       	ldi	r24, 0xF9	; 249
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
 40a:	c4 fb       	bst	r28, 4
 40c:	44 27       	eor	r20, r20
 40e:	40 f9       	bld	r20, 0
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
 418:	c5 fb       	bst	r28, 5
 41a:	44 27       	eor	r20, r20
 41c:	40 f9       	bld	r20, 0
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
 426:	c6 fb       	bst	r28, 6
 428:	44 27       	eor	r20, r20
 42a:	40 f9       	bld	r20, 0
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
 434:	4c 2f       	mov	r20, r28
 436:	44 1f       	adc	r20, r20
 438:	44 27       	eor	r20, r20
 43a:	44 1f       	adc	r20, r20
 43c:	63 e0       	ldi	r22, 0x03	; 3
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 444:	89 ef       	ldi	r24, 0xF9	; 249
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 45a:	89 ef       	ldi	r24, 0xF9	; 249
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 464:	00 00       	nop
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	62 e0       	ldi	r22, 0x02	; 2
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 470:	89 ef       	ldi	r24, 0xF9	; 249
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 47a:	00 00       	nop
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
 47c:	4c 2f       	mov	r20, r28
 47e:	41 70       	andi	r20, 0x01	; 1
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
 488:	c1 fb       	bst	r28, 1
 48a:	44 27       	eor	r20, r20
 48c:	40 f9       	bld	r20, 0
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
 496:	c2 fb       	bst	r28, 2
 498:	44 27       	eor	r20, r20
 49a:	40 f9       	bld	r20, 0
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
 4a4:	c3 fb       	bst	r28, 3
 4a6:	44 27       	eor	r20, r20
 4a8:	40 f9       	bld	r20, 0
 4aa:	63 e0       	ldi	r22, 0x03	; 3
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 4b2:	89 ef       	ldi	r24, 0xF9	; 249
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4bc:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	62 e0       	ldi	r22, 0x02	; 2
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_voidSetPinValue>
 4c8:	89 ef       	ldi	r24, 0xF9	; 249
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4d2:	00 00       	nop
		_delay_ms(1);
#endif
}
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <LCD_voidDisplayString>:


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	8c 01       	movw	r16, r24
	u8 i = 0;
 4e0:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0') {
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <LCD_voidDisplayString+0x12>
		LCD_voidSendData(str[i]);
 4e4:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_voidSendData>
		i++;
 4e8:	cf 5f       	subi	r28, 0xFF	; 255


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
	u8 i = 0;
	while(str[i] != '\0') {
 4ea:	f8 01       	movw	r30, r16
 4ec:	ec 0f       	add	r30, r28
 4ee:	f1 1d       	adc	r31, r1
 4f0:	80 81       	ld	r24, Z
 4f2:	81 11       	cpse	r24, r1
 4f4:	f7 cf       	rjmp	.-18     	; 0x4e4 <LCD_voidDisplayString+0xc>
		LCD_voidSendData(str[i]);
		i++;
	}
}
 4f6:	cf 91       	pop	r28
 4f8:	1f 91       	pop	r17
 4fa:	0f 91       	pop	r16
 4fc:	08 95       	ret

000004fe <LCD_voidSetCursor>:
// Chooses where the cursor would stand on the LCD to type from it
void LCD_voidSetCursor(u8 copy_u8row, u8 copy_u8_col) {
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	31 f0       	breq	.+12     	; 0x50e <LCD_voidSetCursor+0x10>
 502:	70 f0       	brcs	.+28     	; 0x520 <LCD_voidSetCursor+0x22>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	31 f0       	breq	.+12     	; 0x514 <LCD_voidSetCursor+0x16>
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	39 f0       	breq	.+14     	; 0x51a <LCD_voidSetCursor+0x1c>
 50c:	0a c0       	rjmp	.+20     	; 0x522 <LCD_voidSetCursor+0x24>
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
			break;
		case LINE1:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x40;
 50e:	90 e4       	ldi	r25, 0x40	; 64
 510:	96 0f       	add	r25, r22
			break;
 512:	07 c0       	rjmp	.+14     	; 0x522 <LCD_voidSetCursor+0x24>
		case LINE2:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x10;
 514:	90 e1       	ldi	r25, 0x10	; 16
 516:	96 0f       	add	r25, r22
			break;
 518:	04 c0       	rjmp	.+8      	; 0x522 <LCD_voidSetCursor+0x24>
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
 51a:	90 e5       	ldi	r25, 0x50	; 80
 51c:	96 0f       	add	r25, r22
			break;
 51e:	01 c0       	rjmp	.+2      	; 0x522 <LCD_voidSetCursor+0x24>
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
 520:	96 2f       	mov	r25, r22
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
			break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_voidSendCommand(LCD_MEMORY_ADDRESS | LINE0_ADDRESS);
 522:	89 2f       	mov	r24, r25
 524:	80 68       	ori	r24, 0x80	; 128
 526:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendCommand>
 52a:	08 95       	ret

0000052c <LCD_voidIntgerToString>:
}


// LCD only understands ASCII, so this converts Int to a string
void LCD_voidIntgerToString(u32 copy_u32data) {
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	60 97       	sbiw	r28, 0x10	; 16
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	dc 01       	movw	r26, r24
 542:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 544:	4a e0       	ldi	r20, 0x0A	; 10
 546:	be 01       	movw	r22, r28
 548:	6f 5f       	subi	r22, 0xFF	; 255
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	0e 94 b8 06 	call	0xd70	; 0xd70 <__itoa_ncheck>

	// Converts data to its ASCII
	itoa(copy_u32data, buffer, 10);

	// Display string with the results in the buffer
	LCD_voidDisplayString(buffer);
 550:	ce 01       	movw	r24, r28
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCD_voidDisplayString>
}
 558:	60 96       	adiw	r28, 0x10	; 16
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <ADC_voidInit>:
 * Description :
 * Call Back function to use in ISR *
 */
void ADC_CallBackFunction(void (*Ptr_ADC)(void))
{
	CallBackPtr_ADC = Ptr_ADC;
 56a:	87 b1       	in	r24, 0x07	; 7
 56c:	8f 73       	andi	r24, 0x3F	; 63
 56e:	80 64       	ori	r24, 0x40	; 64
 570:	87 b9       	out	0x07, r24	; 7
 572:	87 b1       	in	r24, 0x07	; 7
 574:	8f 7d       	andi	r24, 0xDF	; 223
 576:	87 b9       	out	0x07, r24	; 7
 578:	86 b1       	in	r24, 0x06	; 6
 57a:	80 68       	ori	r24, 0x80	; 128
 57c:	86 b9       	out	0x06, r24	; 6
 57e:	86 b1       	in	r24, 0x06	; 6
 580:	87 60       	ori	r24, 0x07	; 7
 582:	86 b9       	out	0x06, r24	; 6
 584:	86 b1       	in	r24, 0x06	; 6
 586:	8f 7d       	andi	r24, 0xDF	; 223
 588:	86 b9       	out	0x06, r24	; 6
 58a:	80 b7       	in	r24, 0x30	; 48
 58c:	8f 71       	andi	r24, 0x1F	; 31
 58e:	80 bf       	out	0x30, r24	; 48
 590:	08 95       	ret

00000592 <ADC_voidStartConversionPolling>:
 592:	8f 71       	andi	r24, 0x1F	; 31
 594:	97 b1       	in	r25, 0x07	; 7
 596:	90 7e       	andi	r25, 0xE0	; 224
 598:	89 2b       	or	r24, r25
 59a:	87 b9       	out	0x07, r24	; 7
 59c:	86 b1       	in	r24, 0x06	; 6
 59e:	80 64       	ori	r24, 0x40	; 64
 5a0:	86 b9       	out	0x06, r24	; 6
 5a2:	34 9b       	sbis	0x06, 4	; 6
 5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <ADC_voidStartConversionPolling+0x10>
 5a6:	86 b1       	in	r24, 0x06	; 6
 5a8:	80 61       	ori	r24, 0x10	; 16
 5aa:	86 b9       	out	0x06, r24	; 6
 5ac:	84 b1       	in	r24, 0x04	; 4
 5ae:	95 b1       	in	r25, 0x05	; 5
 5b0:	08 95       	ret

000005b2 <ADC_u16ReadVoltage>:
 5b2:	0e 94 c9 02 	call	0x592	; 0x592 <ADC_voidStartConversionPolling>
 5b6:	9c 01       	movw	r18, r24
 5b8:	a8 e8       	ldi	r26, 0x88	; 136
 5ba:	b3 e1       	ldi	r27, 0x13	; 19
 5bc:	0e 94 a9 06 	call	0xd52	; 0xd52 <__umulhisi3>
 5c0:	2f ef       	ldi	r18, 0xFF	; 255
 5c2:	33 e0       	ldi	r19, 0x03	; 3
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	0e 94 87 06 	call	0xd0e	; 0xd0e <__udivmodsi4>
 5cc:	c9 01       	movw	r24, r18
 5ce:	08 95       	ret

000005d0 <ADC_u16ReadTemperature>:
 5d0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <ADC_u16ReadVoltage>
 5d4:	9c 01       	movw	r18, r24
 5d6:	ad ec       	ldi	r26, 0xCD	; 205
 5d8:	bc ec       	ldi	r27, 0xCC	; 204
 5da:	0e 94 a9 06 	call	0xd52	; 0xd52 <__umulhisi3>
 5de:	96 95       	lsr	r25
 5e0:	87 95       	ror	r24
 5e2:	96 95       	lsr	r25
 5e4:	87 95       	ror	r24
 5e6:	96 95       	lsr	r25
 5e8:	87 95       	ror	r24
 5ea:	08 95       	ret

000005ec <__vector_16>:
}


void __vector_16(void) __attribute__((signal, used));
void __vector_16(void) {
 5ec:	1f 92       	push	r1
 5ee:	0f 92       	push	r0
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	0f 92       	push	r0
 5f4:	11 24       	eor	r1, r1
 5f6:	2f 93       	push	r18
 5f8:	3f 93       	push	r19
 5fa:	4f 93       	push	r20
 5fc:	5f 93       	push	r21
 5fe:	6f 93       	push	r22
 600:	7f 93       	push	r23
 602:	8f 93       	push	r24
 604:	9f 93       	push	r25
 606:	af 93       	push	r26
 608:	bf 93       	push	r27
 60a:	ef 93       	push	r30
 60c:	ff 93       	push	r31
	if(CallBackPtr_ADC != NULL) {
 60e:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <CallBackPtr_ADC>
 612:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <CallBackPtr_ADC+0x1>
 616:	30 97       	sbiw	r30, 0x00	; 0
 618:	09 f0       	breq	.+2      	; 0x61c <__vector_16+0x30>
		CallBackPtr_ADC();
 61a:	09 95       	icall
	}
}
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <__vector_1>:
}


// Disables Compiler Optimizations & verifies callback not empty
void __vector_1(void) __attribute__((signal, used));
void __vector_1(void) {
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	3f 93       	push	r19
 64c:	4f 93       	push	r20
 64e:	5f 93       	push	r21
 650:	6f 93       	push	r22
 652:	7f 93       	push	r23
 654:	8f 93       	push	r24
 656:	9f 93       	push	r25
 658:	af 93       	push	r26
 65a:	bf 93       	push	r27
 65c:	ef 93       	push	r30
 65e:	ff 93       	push	r31
	if(CallBackPtr_INT0 != NULL) {
 660:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <CallBackPtr_INT0>
 664:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <CallBackPtr_INT0+0x1>
 668:	30 97       	sbiw	r30, 0x00	; 0
 66a:	09 f0       	breq	.+2      	; 0x66e <__vector_1+0x30>
		CallBackPtr_INT0();
 66c:	09 95       	icall
	}
}
 66e:	ff 91       	pop	r31
 670:	ef 91       	pop	r30
 672:	bf 91       	pop	r27
 674:	af 91       	pop	r26
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	7f 91       	pop	r23
 67c:	6f 91       	pop	r22
 67e:	5f 91       	pop	r21
 680:	4f 91       	pop	r20
 682:	3f 91       	pop	r19
 684:	2f 91       	pop	r18
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_2>:

void __vector_2(void) __attribute__((signal, used));
void __vector_2(void) {
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
	if(CallBackPtr_INT1 != NULL) {
 6b2:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <CallBackPtr_INT1>
 6b6:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <CallBackPtr_INT1+0x1>
 6ba:	30 97       	sbiw	r30, 0x00	; 0
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <__vector_2+0x30>
		CallBackPtr_INT1();
 6be:	09 95       	icall
	}
}
 6c0:	ff 91       	pop	r31
 6c2:	ef 91       	pop	r30
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	7f 91       	pop	r23
 6ce:	6f 91       	pop	r22
 6d0:	5f 91       	pop	r21
 6d2:	4f 91       	pop	r20
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <__vector_3>:

void __vector_3(void) __attribute__((signal, used));
void __vector_3(void) {
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	4f 93       	push	r20
 6f2:	5f 93       	push	r21
 6f4:	6f 93       	push	r22
 6f6:	7f 93       	push	r23
 6f8:	8f 93       	push	r24
 6fa:	9f 93       	push	r25
 6fc:	af 93       	push	r26
 6fe:	bf 93       	push	r27
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
	if(CallBackPtr_INT2 != NULL) {
 704:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <CallBackPtr_INT2>
 708:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <CallBackPtr_INT2+0x1>
 70c:	30 97       	sbiw	r30, 0x00	; 0
 70e:	09 f0       	breq	.+2      	; 0x712 <__vector_3+0x30>
		CallBackPtr_INT2();
 710:	09 95       	icall
	}
}
 712:	ff 91       	pop	r31
 714:	ef 91       	pop	r30
 716:	bf 91       	pop	r27
 718:	af 91       	pop	r26
 71a:	9f 91       	pop	r25
 71c:	8f 91       	pop	r24
 71e:	7f 91       	pop	r23
 720:	6f 91       	pop	r22
 722:	5f 91       	pop	r21
 724:	4f 91       	pop	r20
 726:	3f 91       	pop	r19
 728:	2f 91       	pop	r18
 72a:	0f 90       	pop	r0
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	0f 90       	pop	r0
 730:	1f 90       	pop	r1
 732:	18 95       	reti

00000734 <GLOBINT_voidSetEnableFlag>:
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Enables the Global Interrupt Enable Flag in the Status Register
void GLOBINT_voidSetEnableFlag(void) {
	SET_BIT(SREG_REG, SREG_I_BIT);
 734:	8f b7       	in	r24, 0x3f	; 63
 736:	80 68       	ori	r24, 0x80	; 128
 738:	8f bf       	out	0x3f, r24	; 63
 73a:	08 95       	ret

0000073c <GPIO_voidSetPinDirection>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
 73c:	68 30       	cpi	r22, 0x08	; 8
 73e:	08 f0       	brcs	.+2      	; 0x742 <GPIO_voidSetPinDirection+0x6>
 740:	7b c0       	rjmp	.+246    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
 742:	84 30       	cpi	r24, 0x04	; 4
 744:	08 f0       	brcs	.+2      	; 0x748 <GPIO_voidSetPinDirection+0xc>
 746:	7a c0       	rjmp	.+244    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
 748:	42 30       	cpi	r20, 0x02	; 2
 74a:	08 f0       	brcs	.+2      	; 0x74e <GPIO_voidSetPinDirection+0x12>
 74c:	79 c0       	rjmp	.+242    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	11 f1       	breq	.+68     	; 0x796 <GPIO_voidSetPinDirection+0x5a>
 752:	30 f0       	brcs	.+12     	; 0x760 <GPIO_voidSetPinDirection+0x24>
 754:	82 30       	cpi	r24, 0x02	; 2
 756:	d1 f1       	breq	.+116    	; 0x7cc <GPIO_voidSetPinDirection+0x90>
 758:	83 30       	cpi	r24, 0x03	; 3
 75a:	09 f4       	brne	.+2      	; 0x75e <GPIO_voidSetPinDirection+0x22>
 75c:	52 c0       	rjmp	.+164    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 75e:	72 c0       	rjmp	.+228    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 760:	41 30       	cpi	r20, 0x01	; 1
 762:	61 f4       	brne	.+24     	; 0x77c <GPIO_voidSetPinDirection+0x40>
					SET_BIT(DDRA_REG, copy_u8pinID);
 764:	2a b3       	in	r18, 0x1a	; 26
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <GPIO_voidSetPinDirection+0x34>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	6a 95       	dec	r22
 772:	e2 f7       	brpl	.-8      	; 0x76c <GPIO_voidSetPinDirection+0x30>
 774:	82 2b       	or	r24, r18
 776:	8a bb       	out	0x1a, r24	; 26
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	08 95       	ret
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRA_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
 77c:	2a b3       	in	r18, 0x1a	; 26
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	02 c0       	rjmp	.+4      	; 0x788 <GPIO_voidSetPinDirection+0x4c>
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	6a 95       	dec	r22
 78a:	e2 f7       	brpl	.-8      	; 0x784 <GPIO_voidSetPinDirection+0x48>
 78c:	80 95       	com	r24
 78e:	82 23       	and	r24, r18
 790:	8a bb       	out	0x1a, r24	; 26
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	08 95       	ret
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 796:	41 30       	cpi	r20, 0x01	; 1
 798:	61 f4       	brne	.+24     	; 0x7b2 <GPIO_voidSetPinDirection+0x76>
					SET_BIT(DDRB_REG, copy_u8pinID);
 79a:	27 b3       	in	r18, 0x17	; 23
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <GPIO_voidSetPinDirection+0x6a>
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	6a 95       	dec	r22
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <GPIO_voidSetPinDirection+0x66>
 7aa:	82 2b       	or	r24, r18
 7ac:	87 bb       	out	0x17, r24	; 23
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	08 95       	ret
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRB_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
 7b2:	27 b3       	in	r18, 0x17	; 23
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <GPIO_voidSetPinDirection+0x82>
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	6a 95       	dec	r22
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <GPIO_voidSetPinDirection+0x7e>
 7c2:	80 95       	com	r24
 7c4:	82 23       	and	r24, r18
 7c6:	87 bb       	out	0x17, r24	; 23
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	08 95       	ret
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 7cc:	41 30       	cpi	r20, 0x01	; 1
 7ce:	61 f4       	brne	.+24     	; 0x7e8 <GPIO_voidSetPinDirection+0xac>
					SET_BIT(DDRC_REG, copy_u8pinID);
 7d0:	24 b3       	in	r18, 0x14	; 20
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <GPIO_voidSetPinDirection+0xa0>
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	6a 95       	dec	r22
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <GPIO_voidSetPinDirection+0x9c>
 7e0:	82 2b       	or	r24, r18
 7e2:	84 bb       	out	0x14, r24	; 20
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	08 95       	ret
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRC_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
 7e8:	24 b3       	in	r18, 0x14	; 20
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <GPIO_voidSetPinDirection+0xb8>
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	6a 95       	dec	r22
 7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <GPIO_voidSetPinDirection+0xb4>
 7f8:	80 95       	com	r24
 7fa:	82 23       	and	r24, r18
 7fc:	84 bb       	out	0x14, r24	; 20
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	08 95       	ret
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 802:	41 30       	cpi	r20, 0x01	; 1
 804:	61 f4       	brne	.+24     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
					SET_BIT(DDRD_REG, copy_u8pinID);
 806:	21 b3       	in	r18, 0x11	; 17
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	6a 95       	dec	r22
 814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 816:	82 2b       	or	r24, r18
 818:	81 bb       	out	0x11, r24	; 17
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	08 95       	ret
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRD_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
 81e:	21 b3       	in	r18, 0x11	; 17
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	6a 95       	dec	r22
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	80 95       	com	r24
 830:	82 23       	and	r24, r18
 832:	81 bb       	out	0x11, r24	; 17
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	08 95       	ret
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	08 95       	ret
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	08 95       	ret
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 840:	83 e0       	ldi	r24, 0x03	; 3
 842:	08 95       	ret
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 844:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 846:	08 95       	ret

00000848 <GPIO_voidSetPinValue>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
 848:	68 30       	cpi	r22, 0x08	; 8
 84a:	08 f0       	brcs	.+2      	; 0x84e <GPIO_voidSetPinValue+0x6>
 84c:	7b c0       	rjmp	.+246    	; 0x944 <__stack+0xe5>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
 84e:	84 30       	cpi	r24, 0x04	; 4
 850:	08 f0       	brcs	.+2      	; 0x854 <GPIO_voidSetPinValue+0xc>
 852:	7a c0       	rjmp	.+244    	; 0x948 <__stack+0xe9>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
 854:	42 30       	cpi	r20, 0x02	; 2
 856:	08 f0       	brcs	.+2      	; 0x85a <GPIO_voidSetPinValue+0x12>
 858:	79 c0       	rjmp	.+242    	; 0x94c <__stack+0xed>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		switch(copy_u8portID)
 85a:	81 30       	cpi	r24, 0x01	; 1
 85c:	11 f1       	breq	.+68     	; 0x8a2 <__stack+0x43>
 85e:	30 f0       	brcs	.+12     	; 0x86c <__stack+0xd>
 860:	82 30       	cpi	r24, 0x02	; 2
 862:	d1 f1       	breq	.+116    	; 0x8d8 <__stack+0x79>
 864:	83 30       	cpi	r24, 0x03	; 3
 866:	09 f4       	brne	.+2      	; 0x86a <__stack+0xb>
 868:	52 c0       	rjmp	.+164    	; 0x90e <__stack+0xaf>
 86a:	72 c0       	rjmp	.+228    	; 0x950 <__stack+0xf1>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
 86c:	41 30       	cpi	r20, 0x01	; 1
 86e:	61 f4       	brne	.+24     	; 0x888 <__stack+0x29>
					SET_BIT(PORTA_REG ,copy_u8pinID);
 870:	2b b3       	in	r18, 0x1b	; 27
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	6a 95       	dec	r22
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	82 2b       	or	r24, r18
 882:	8b bb       	out	0x1b, r24	; 27
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	08 95       	ret
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTA_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
 888:	2b b3       	in	r18, 0x1b	; 27
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	6a 95       	dec	r22
 896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
 898:	80 95       	com	r24
 89a:	82 23       	and	r24, r18
 89c:	8b bb       	out	0x1b, r24	; 27
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	08 95       	ret
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
 8a2:	41 30       	cpi	r20, 0x01	; 1
 8a4:	61 f4       	brne	.+24     	; 0x8be <__stack+0x5f>
					SET_BIT(PORTB_REG ,copy_u8pinID);
 8a6:	28 b3       	in	r18, 0x18	; 24
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
 8ae:	88 0f       	add	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	6a 95       	dec	r22
 8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
 8b6:	82 2b       	or	r24, r18
 8b8:	88 bb       	out	0x18, r24	; 24
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	08 95       	ret
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTB_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
 8be:	28 b3       	in	r18, 0x18	; 24
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__stack+0x6b>
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	6a 95       	dec	r22
 8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <__stack+0x67>
 8ce:	80 95       	com	r24
 8d0:	82 23       	and	r24, r18
 8d2:	88 bb       	out	0x18, r24	; 24
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	08 95       	ret
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
 8d8:	41 30       	cpi	r20, 0x01	; 1
 8da:	61 f4       	brne	.+24     	; 0x8f4 <__stack+0x95>
					SET_BIT(PORTC_REG ,copy_u8pinID);
 8dc:	25 b3       	in	r18, 0x15	; 21
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	6a 95       	dec	r22
 8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <__stack+0x85>
 8ec:	82 2b       	or	r24, r18
 8ee:	85 bb       	out	0x15, r24	; 21
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	08 95       	ret
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTC_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
 8f4:	25 b3       	in	r18, 0x15	; 21
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0xa1>
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	6a 95       	dec	r22
 902:	e2 f7       	brpl	.-8      	; 0x8fc <__stack+0x9d>
 904:	80 95       	com	r24
 906:	82 23       	and	r24, r18
 908:	85 bb       	out	0x15, r24	; 21
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	08 95       	ret
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
 90e:	41 30       	cpi	r20, 0x01	; 1
 910:	61 f4       	brne	.+24     	; 0x92a <__stack+0xcb>
					SET_BIT(PORTD_REG ,copy_u8pinID);
 912:	22 b3       	in	r18, 0x12	; 18
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	6a 95       	dec	r22
 920:	e2 f7       	brpl	.-8      	; 0x91a <__stack+0xbb>
 922:	82 2b       	or	r24, r18
 924:	82 bb       	out	0x12, r24	; 18
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	08 95       	ret
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTD_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
 92a:	22 b3       	in	r18, 0x12	; 18
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0xd7>
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	6a 95       	dec	r22
 938:	e2 f7       	brpl	.-8      	; 0x932 <__stack+0xd3>
 93a:	80 95       	com	r24
 93c:	82 23       	and	r24, r18
 93e:	82 bb       	out	0x12, r24	; 18
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	08 95       	ret
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	08 95       	ret
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 948:	82 e0       	ldi	r24, 0x02	; 2
 94a:	08 95       	ret
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 94c:	83 e0       	ldi	r24, 0x03	; 3
 94e:	08 95       	ret
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 950:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 952:	08 95       	ret

00000954 <SPI_voidInitialization_Master>:
}

// SPI Callback Function
void SPI_CallBackFunction(void (*Ptr_SPI)(void))
{
	CallBackPtr_SPI = Ptr_SPI;
 954:	41 e0       	ldi	r20, 0x01	; 1
 956:	64 e0       	ldi	r22, 0x04	; 4
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
 95e:	41 e0       	ldi	r20, 0x01	; 1
 960:	65 e0       	ldi	r22, 0x05	; 5
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
 968:	40 e0       	ldi	r20, 0x00	; 0
 96a:	66 e0       	ldi	r22, 0x06	; 6
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
 972:	41 e0       	ldi	r20, 0x01	; 1
 974:	67 e0       	ldi	r22, 0x07	; 7
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	0e 94 9e 03 	call	0x73c	; 0x73c <GPIO_voidSetPinDirection>
 97c:	8d b1       	in	r24, 0x0d	; 13
 97e:	80 61       	ori	r24, 0x10	; 16
 980:	8d b9       	out	0x0d, r24	; 13
 982:	8d b1       	in	r24, 0x0d	; 13
 984:	81 60       	ori	r24, 0x01	; 1
 986:	8d b9       	out	0x0d, r24	; 13
 988:	8d b1       	in	r24, 0x0d	; 13
 98a:	8d 7f       	andi	r24, 0xFD	; 253
 98c:	8d b9       	out	0x0d, r24	; 13
 98e:	8d b1       	in	r24, 0x0d	; 13
 990:	80 64       	ori	r24, 0x40	; 64
 992:	8d b9       	out	0x0d, r24	; 13
 994:	8d b1       	in	r24, 0x0d	; 13
 996:	80 68       	ori	r24, 0x80	; 128
 998:	8d b9       	out	0x0d, r24	; 13
 99a:	08 95       	ret

0000099c <SPI_u8SendByte_Polling>:
 99c:	8f b9       	out	0x0f, r24	; 15
 99e:	77 9b       	sbis	0x0e, 7	; 14
 9a0:	fe cf       	rjmp	.-4      	; 0x99e <SPI_u8SendByte_Polling+0x2>
 9a2:	8f b1       	in	r24, 0x0f	; 15
 9a4:	08 95       	ret

000009a6 <__vector_12>:
}

// The ISR For the SPI CallBack Function
void __vector_12(void) __attribute__((signal, used));
void __vector_12(void) {
 9a6:	1f 92       	push	r1
 9a8:	0f 92       	push	r0
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	0f 92       	push	r0
 9ae:	11 24       	eor	r1, r1
 9b0:	2f 93       	push	r18
 9b2:	3f 93       	push	r19
 9b4:	4f 93       	push	r20
 9b6:	5f 93       	push	r21
 9b8:	6f 93       	push	r22
 9ba:	7f 93       	push	r23
 9bc:	8f 93       	push	r24
 9be:	9f 93       	push	r25
 9c0:	af 93       	push	r26
 9c2:	bf 93       	push	r27
 9c4:	ef 93       	push	r30
 9c6:	ff 93       	push	r31
	if(CallBackPtr_SPI != NULL) {
 9c8:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <CallBackPtr_SPI>
 9cc:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <CallBackPtr_SPI+0x1>
 9d0:	30 97       	sbiw	r30, 0x00	; 0
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__vector_12+0x30>
		CallBackPtr_SPI();
 9d4:	09 95       	icall
	}
}
 9d6:	ff 91       	pop	r31
 9d8:	ef 91       	pop	r30
 9da:	bf 91       	pop	r27
 9dc:	af 91       	pop	r26
 9de:	9f 91       	pop	r25
 9e0:	8f 91       	pop	r24
 9e2:	7f 91       	pop	r23
 9e4:	6f 91       	pop	r22
 9e6:	5f 91       	pop	r21
 9e8:	4f 91       	pop	r20
 9ea:	3f 91       	pop	r19
 9ec:	2f 91       	pop	r18
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <__vector_10>:
	CallBackPtr_TIMER0_OVF = Ptr_TIMER;
}


void __vector_10(void) __attribute__((signal, used));
void __vector_10(void) {
 9f8:	1f 92       	push	r1
 9fa:	0f 92       	push	r0
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	0f 92       	push	r0
 a00:	11 24       	eor	r1, r1
 a02:	2f 93       	push	r18
 a04:	3f 93       	push	r19
 a06:	4f 93       	push	r20
 a08:	5f 93       	push	r21
 a0a:	6f 93       	push	r22
 a0c:	7f 93       	push	r23
 a0e:	8f 93       	push	r24
 a10:	9f 93       	push	r25
 a12:	af 93       	push	r26
 a14:	bf 93       	push	r27
 a16:	ef 93       	push	r30
 a18:	ff 93       	push	r31
	if(CallBackPtr_TIMER0_COMP != NULL) {
 a1a:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <CallBackPtr_TIMER0_COMP>
 a1e:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <CallBackPtr_TIMER0_COMP+0x1>
 a22:	30 97       	sbiw	r30, 0x00	; 0
 a24:	09 f0       	breq	.+2      	; 0xa28 <__vector_10+0x30>
		CallBackPtr_TIMER0_COMP();
 a26:	09 95       	icall
	}
}
 a28:	ff 91       	pop	r31
 a2a:	ef 91       	pop	r30
 a2c:	bf 91       	pop	r27
 a2e:	af 91       	pop	r26
 a30:	9f 91       	pop	r25
 a32:	8f 91       	pop	r24
 a34:	7f 91       	pop	r23
 a36:	6f 91       	pop	r22
 a38:	5f 91       	pop	r21
 a3a:	4f 91       	pop	r20
 a3c:	3f 91       	pop	r19
 a3e:	2f 91       	pop	r18
 a40:	0f 90       	pop	r0
 a42:	0f be       	out	0x3f, r0	; 63
 a44:	0f 90       	pop	r0
 a46:	1f 90       	pop	r1
 a48:	18 95       	reti

00000a4a <__vector_11>:

void __vector_11(void) __attribute__((signal, used));
void __vector_11(void) {
 a4a:	1f 92       	push	r1
 a4c:	0f 92       	push	r0
 a4e:	0f b6       	in	r0, 0x3f	; 63
 a50:	0f 92       	push	r0
 a52:	11 24       	eor	r1, r1
 a54:	2f 93       	push	r18
 a56:	3f 93       	push	r19
 a58:	4f 93       	push	r20
 a5a:	5f 93       	push	r21
 a5c:	6f 93       	push	r22
 a5e:	7f 93       	push	r23
 a60:	8f 93       	push	r24
 a62:	9f 93       	push	r25
 a64:	af 93       	push	r26
 a66:	bf 93       	push	r27
 a68:	ef 93       	push	r30
 a6a:	ff 93       	push	r31
	if(CallBackPtr_TIMER0_OVF != NULL) {
 a6c:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <CallBackPtr_TIMER0_OVF>
 a70:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <CallBackPtr_TIMER0_OVF+0x1>
 a74:	30 97       	sbiw	r30, 0x00	; 0
 a76:	09 f0       	breq	.+2      	; 0xa7a <__vector_11+0x30>
		CallBackPtr_TIMER0_OVF();
 a78:	09 95       	icall
	}
}
 a7a:	ff 91       	pop	r31
 a7c:	ef 91       	pop	r30
 a7e:	bf 91       	pop	r27
 a80:	af 91       	pop	r26
 a82:	9f 91       	pop	r25
 a84:	8f 91       	pop	r24
 a86:	7f 91       	pop	r23
 a88:	6f 91       	pop	r22
 a8a:	5f 91       	pop	r21
 a8c:	4f 91       	pop	r20
 a8e:	3f 91       	pop	r19
 a90:	2f 91       	pop	r18
 a92:	0f 90       	pop	r0
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	0f 90       	pop	r0
 a98:	1f 90       	pop	r1
 a9a:	18 95       	reti

00000a9c <__vector_6>:
	CallBackPtr_TIMER1_OVF = Ptr_TIMER;
}


void __vector_6(void) __attribute__((signal, used));
void __vector_6(void) {
 a9c:	1f 92       	push	r1
 a9e:	0f 92       	push	r0
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	0f 92       	push	r0
 aa4:	11 24       	eor	r1, r1
 aa6:	2f 93       	push	r18
 aa8:	3f 93       	push	r19
 aaa:	4f 93       	push	r20
 aac:	5f 93       	push	r21
 aae:	6f 93       	push	r22
 ab0:	7f 93       	push	r23
 ab2:	8f 93       	push	r24
 ab4:	9f 93       	push	r25
 ab6:	af 93       	push	r26
 ab8:	bf 93       	push	r27
 aba:	ef 93       	push	r30
 abc:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_CAPT != NULL) {
 abe:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <CallBackPtr_TIMER1_CAPT>
 ac2:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <CallBackPtr_TIMER1_CAPT+0x1>
 ac6:	30 97       	sbiw	r30, 0x00	; 0
 ac8:	09 f0       	breq	.+2      	; 0xacc <__vector_6+0x30>
		CallBackPtr_TIMER1_CAPT();
 aca:	09 95       	icall
	}
}
 acc:	ff 91       	pop	r31
 ace:	ef 91       	pop	r30
 ad0:	bf 91       	pop	r27
 ad2:	af 91       	pop	r26
 ad4:	9f 91       	pop	r25
 ad6:	8f 91       	pop	r24
 ad8:	7f 91       	pop	r23
 ada:	6f 91       	pop	r22
 adc:	5f 91       	pop	r21
 ade:	4f 91       	pop	r20
 ae0:	3f 91       	pop	r19
 ae2:	2f 91       	pop	r18
 ae4:	0f 90       	pop	r0
 ae6:	0f be       	out	0x3f, r0	; 63
 ae8:	0f 90       	pop	r0
 aea:	1f 90       	pop	r1
 aec:	18 95       	reti

00000aee <__vector_7>:

void __vector_7(void) __attribute__((signal, used));
void __vector_7(void) {
 aee:	1f 92       	push	r1
 af0:	0f 92       	push	r0
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	0f 92       	push	r0
 af6:	11 24       	eor	r1, r1
 af8:	2f 93       	push	r18
 afa:	3f 93       	push	r19
 afc:	4f 93       	push	r20
 afe:	5f 93       	push	r21
 b00:	6f 93       	push	r22
 b02:	7f 93       	push	r23
 b04:	8f 93       	push	r24
 b06:	9f 93       	push	r25
 b08:	af 93       	push	r26
 b0a:	bf 93       	push	r27
 b0c:	ef 93       	push	r30
 b0e:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_COMPA != NULL) {
 b10:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <CallBackPtr_TIMER1_COMPA>
 b14:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <CallBackPtr_TIMER1_COMPA+0x1>
 b18:	30 97       	sbiw	r30, 0x00	; 0
 b1a:	09 f0       	breq	.+2      	; 0xb1e <__vector_7+0x30>
		CallBackPtr_TIMER1_COMPA();
 b1c:	09 95       	icall
	}
}
 b1e:	ff 91       	pop	r31
 b20:	ef 91       	pop	r30
 b22:	bf 91       	pop	r27
 b24:	af 91       	pop	r26
 b26:	9f 91       	pop	r25
 b28:	8f 91       	pop	r24
 b2a:	7f 91       	pop	r23
 b2c:	6f 91       	pop	r22
 b2e:	5f 91       	pop	r21
 b30:	4f 91       	pop	r20
 b32:	3f 91       	pop	r19
 b34:	2f 91       	pop	r18
 b36:	0f 90       	pop	r0
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	0f 90       	pop	r0
 b3c:	1f 90       	pop	r1
 b3e:	18 95       	reti

00000b40 <__vector_8>:

void __vector_8(void) __attribute__((signal, used));
void __vector_8(void) {
 b40:	1f 92       	push	r1
 b42:	0f 92       	push	r0
 b44:	0f b6       	in	r0, 0x3f	; 63
 b46:	0f 92       	push	r0
 b48:	11 24       	eor	r1, r1
 b4a:	2f 93       	push	r18
 b4c:	3f 93       	push	r19
 b4e:	4f 93       	push	r20
 b50:	5f 93       	push	r21
 b52:	6f 93       	push	r22
 b54:	7f 93       	push	r23
 b56:	8f 93       	push	r24
 b58:	9f 93       	push	r25
 b5a:	af 93       	push	r26
 b5c:	bf 93       	push	r27
 b5e:	ef 93       	push	r30
 b60:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_COMPB != NULL) {
 b62:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <CallBackPtr_TIMER1_COMPB>
 b66:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <CallBackPtr_TIMER1_COMPB+0x1>
 b6a:	30 97       	sbiw	r30, 0x00	; 0
 b6c:	09 f0       	breq	.+2      	; 0xb70 <__vector_8+0x30>
		CallBackPtr_TIMER1_COMPB();
 b6e:	09 95       	icall
	}
}
 b70:	ff 91       	pop	r31
 b72:	ef 91       	pop	r30
 b74:	bf 91       	pop	r27
 b76:	af 91       	pop	r26
 b78:	9f 91       	pop	r25
 b7a:	8f 91       	pop	r24
 b7c:	7f 91       	pop	r23
 b7e:	6f 91       	pop	r22
 b80:	5f 91       	pop	r21
 b82:	4f 91       	pop	r20
 b84:	3f 91       	pop	r19
 b86:	2f 91       	pop	r18
 b88:	0f 90       	pop	r0
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	0f 90       	pop	r0
 b8e:	1f 90       	pop	r1
 b90:	18 95       	reti

00000b92 <__vector_9>:

void __vector_9(void) __attribute__((signal, used));
void __vector_9(void) {
 b92:	1f 92       	push	r1
 b94:	0f 92       	push	r0
 b96:	0f b6       	in	r0, 0x3f	; 63
 b98:	0f 92       	push	r0
 b9a:	11 24       	eor	r1, r1
 b9c:	2f 93       	push	r18
 b9e:	3f 93       	push	r19
 ba0:	4f 93       	push	r20
 ba2:	5f 93       	push	r21
 ba4:	6f 93       	push	r22
 ba6:	7f 93       	push	r23
 ba8:	8f 93       	push	r24
 baa:	9f 93       	push	r25
 bac:	af 93       	push	r26
 bae:	bf 93       	push	r27
 bb0:	ef 93       	push	r30
 bb2:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_OVF != NULL) {
 bb4:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <CallBackPtr_TIMER1_OVF>
 bb8:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <CallBackPtr_TIMER1_OVF+0x1>
 bbc:	30 97       	sbiw	r30, 0x00	; 0
 bbe:	09 f0       	breq	.+2      	; 0xbc2 <__vector_9+0x30>
		CallBackPtr_TIMER1_OVF();
 bc0:	09 95       	icall
	}
}
 bc2:	ff 91       	pop	r31
 bc4:	ef 91       	pop	r30
 bc6:	bf 91       	pop	r27
 bc8:	af 91       	pop	r26
 bca:	9f 91       	pop	r25
 bcc:	8f 91       	pop	r24
 bce:	7f 91       	pop	r23
 bd0:	6f 91       	pop	r22
 bd2:	5f 91       	pop	r21
 bd4:	4f 91       	pop	r20
 bd6:	3f 91       	pop	r19
 bd8:	2f 91       	pop	r18
 bda:	0f 90       	pop	r0
 bdc:	0f be       	out	0x3f, r0	; 63
 bde:	0f 90       	pop	r0
 be0:	1f 90       	pop	r1
 be2:	18 95       	reti

00000be4 <UART_Initialization>:
}

// UART TXC Callback Function
void UART_CallBackFunction_TXC(void (*Ptr_UART_TXC)(void))
{
	CallBackPtr_UART_TXC = Ptr_UART_TXC;
 be4:	8a b1       	in	r24, 0x0a	; 10
 be6:	8b 7f       	andi	r24, 0xFB	; 251
 be8:	8a b9       	out	0x0a, r24	; 10
 bea:	8a b1       	in	r24, 0x0a	; 10
 bec:	88 60       	ori	r24, 0x08	; 8
 bee:	8a b9       	out	0x0a, r24	; 10
 bf0:	8a b1       	in	r24, 0x0a	; 10
 bf2:	80 61       	ori	r24, 0x10	; 16
 bf4:	8a b9       	out	0x0a, r24	; 10
 bf6:	86 e8       	ldi	r24, 0x86	; 134
 bf8:	80 bd       	out	0x20, r24	; 32
 bfa:	83 e3       	ldi	r24, 0x33	; 51
 bfc:	89 b9       	out	0x09, r24	; 9
 bfe:	10 bc       	out	0x20, r1	; 32
 c00:	8a b1       	in	r24, 0x0a	; 10
 c02:	80 68       	ori	r24, 0x80	; 128
 c04:	8a b9       	out	0x0a, r24	; 10
 c06:	8a b1       	in	r24, 0x0a	; 10
 c08:	80 64       	ori	r24, 0x40	; 64
 c0a:	8a b9       	out	0x0a, r24	; 10
 c0c:	8a b1       	in	r24, 0x0a	; 10
 c0e:	80 62       	ori	r24, 0x20	; 32
 c10:	8a b9       	out	0x0a, r24	; 10
 c12:	08 95       	ret

00000c14 <UART_voidReceiveByte_ISR>:
 c14:	8c b1       	in	r24, 0x0c	; 12
 c16:	08 95       	ret

00000c18 <__vector_13>:
}


// The ISR For the UART RXC Callback Function
void __vector_13(void) __attribute__((signal, used));
void __vector_13(void) {
 c18:	1f 92       	push	r1
 c1a:	0f 92       	push	r0
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	0f 92       	push	r0
 c20:	11 24       	eor	r1, r1
 c22:	2f 93       	push	r18
 c24:	3f 93       	push	r19
 c26:	4f 93       	push	r20
 c28:	5f 93       	push	r21
 c2a:	6f 93       	push	r22
 c2c:	7f 93       	push	r23
 c2e:	8f 93       	push	r24
 c30:	9f 93       	push	r25
 c32:	af 93       	push	r26
 c34:	bf 93       	push	r27
 c36:	ef 93       	push	r30
 c38:	ff 93       	push	r31
	if(CallBackPtr_UART_RXC != NULL) {
 c3a:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <CallBackPtr_UART_RXC>
 c3e:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <CallBackPtr_UART_RXC+0x1>
 c42:	30 97       	sbiw	r30, 0x00	; 0
 c44:	09 f0       	breq	.+2      	; 0xc48 <__vector_13+0x30>
		CallBackPtr_UART_RXC();
 c46:	09 95       	icall
	}
}
 c48:	ff 91       	pop	r31
 c4a:	ef 91       	pop	r30
 c4c:	bf 91       	pop	r27
 c4e:	af 91       	pop	r26
 c50:	9f 91       	pop	r25
 c52:	8f 91       	pop	r24
 c54:	7f 91       	pop	r23
 c56:	6f 91       	pop	r22
 c58:	5f 91       	pop	r21
 c5a:	4f 91       	pop	r20
 c5c:	3f 91       	pop	r19
 c5e:	2f 91       	pop	r18
 c60:	0f 90       	pop	r0
 c62:	0f be       	out	0x3f, r0	; 63
 c64:	0f 90       	pop	r0
 c66:	1f 90       	pop	r1
 c68:	18 95       	reti

00000c6a <__vector_14>:

// The ISR For the UART UDRE Callback Function
void __vector_14(void) __attribute__((signal, used));
void __vector_14(void) {
 c6a:	1f 92       	push	r1
 c6c:	0f 92       	push	r0
 c6e:	0f b6       	in	r0, 0x3f	; 63
 c70:	0f 92       	push	r0
 c72:	11 24       	eor	r1, r1
 c74:	2f 93       	push	r18
 c76:	3f 93       	push	r19
 c78:	4f 93       	push	r20
 c7a:	5f 93       	push	r21
 c7c:	6f 93       	push	r22
 c7e:	7f 93       	push	r23
 c80:	8f 93       	push	r24
 c82:	9f 93       	push	r25
 c84:	af 93       	push	r26
 c86:	bf 93       	push	r27
 c88:	ef 93       	push	r30
 c8a:	ff 93       	push	r31
	if(CallBackPtr_UART_UDRE != NULL) {
 c8c:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <CallBackPtr_UART_UDRE>
 c90:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <CallBackPtr_UART_UDRE+0x1>
 c94:	30 97       	sbiw	r30, 0x00	; 0
 c96:	09 f0       	breq	.+2      	; 0xc9a <__vector_14+0x30>
		CallBackPtr_UART_UDRE();
 c98:	09 95       	icall
	}
}
 c9a:	ff 91       	pop	r31
 c9c:	ef 91       	pop	r30
 c9e:	bf 91       	pop	r27
 ca0:	af 91       	pop	r26
 ca2:	9f 91       	pop	r25
 ca4:	8f 91       	pop	r24
 ca6:	7f 91       	pop	r23
 ca8:	6f 91       	pop	r22
 caa:	5f 91       	pop	r21
 cac:	4f 91       	pop	r20
 cae:	3f 91       	pop	r19
 cb0:	2f 91       	pop	r18
 cb2:	0f 90       	pop	r0
 cb4:	0f be       	out	0x3f, r0	; 63
 cb6:	0f 90       	pop	r0
 cb8:	1f 90       	pop	r1
 cba:	18 95       	reti

00000cbc <__vector_15>:

// The ISR For the UART TXC Callback Function
void __vector_15(void) __attribute__((signal, used));
void __vector_15(void) {
 cbc:	1f 92       	push	r1
 cbe:	0f 92       	push	r0
 cc0:	0f b6       	in	r0, 0x3f	; 63
 cc2:	0f 92       	push	r0
 cc4:	11 24       	eor	r1, r1
 cc6:	2f 93       	push	r18
 cc8:	3f 93       	push	r19
 cca:	4f 93       	push	r20
 ccc:	5f 93       	push	r21
 cce:	6f 93       	push	r22
 cd0:	7f 93       	push	r23
 cd2:	8f 93       	push	r24
 cd4:	9f 93       	push	r25
 cd6:	af 93       	push	r26
 cd8:	bf 93       	push	r27
 cda:	ef 93       	push	r30
 cdc:	ff 93       	push	r31
	if(CallBackPtr_UART_TXC != NULL) {
 cde:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <CallBackPtr_UART_TXC>
 ce2:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <CallBackPtr_UART_TXC+0x1>
 ce6:	30 97       	sbiw	r30, 0x00	; 0
 ce8:	09 f0       	breq	.+2      	; 0xcec <__vector_15+0x30>
		CallBackPtr_UART_TXC();
 cea:	09 95       	icall
	}
}
 cec:	ff 91       	pop	r31
 cee:	ef 91       	pop	r30
 cf0:	bf 91       	pop	r27
 cf2:	af 91       	pop	r26
 cf4:	9f 91       	pop	r25
 cf6:	8f 91       	pop	r24
 cf8:	7f 91       	pop	r23
 cfa:	6f 91       	pop	r22
 cfc:	5f 91       	pop	r21
 cfe:	4f 91       	pop	r20
 d00:	3f 91       	pop	r19
 d02:	2f 91       	pop	r18
 d04:	0f 90       	pop	r0
 d06:	0f be       	out	0x3f, r0	; 63
 d08:	0f 90       	pop	r0
 d0a:	1f 90       	pop	r1
 d0c:	18 95       	reti

00000d0e <__udivmodsi4>:
 d0e:	a1 e2       	ldi	r26, 0x21	; 33
 d10:	1a 2e       	mov	r1, r26
 d12:	aa 1b       	sub	r26, r26
 d14:	bb 1b       	sub	r27, r27
 d16:	fd 01       	movw	r30, r26
 d18:	0d c0       	rjmp	.+26     	; 0xd34 <__udivmodsi4_ep>

00000d1a <__udivmodsi4_loop>:
 d1a:	aa 1f       	adc	r26, r26
 d1c:	bb 1f       	adc	r27, r27
 d1e:	ee 1f       	adc	r30, r30
 d20:	ff 1f       	adc	r31, r31
 d22:	a2 17       	cp	r26, r18
 d24:	b3 07       	cpc	r27, r19
 d26:	e4 07       	cpc	r30, r20
 d28:	f5 07       	cpc	r31, r21
 d2a:	20 f0       	brcs	.+8      	; 0xd34 <__udivmodsi4_ep>
 d2c:	a2 1b       	sub	r26, r18
 d2e:	b3 0b       	sbc	r27, r19
 d30:	e4 0b       	sbc	r30, r20
 d32:	f5 0b       	sbc	r31, r21

00000d34 <__udivmodsi4_ep>:
 d34:	66 1f       	adc	r22, r22
 d36:	77 1f       	adc	r23, r23
 d38:	88 1f       	adc	r24, r24
 d3a:	99 1f       	adc	r25, r25
 d3c:	1a 94       	dec	r1
 d3e:	69 f7       	brne	.-38     	; 0xd1a <__udivmodsi4_loop>
 d40:	60 95       	com	r22
 d42:	70 95       	com	r23
 d44:	80 95       	com	r24
 d46:	90 95       	com	r25
 d48:	9b 01       	movw	r18, r22
 d4a:	ac 01       	movw	r20, r24
 d4c:	bd 01       	movw	r22, r26
 d4e:	cf 01       	movw	r24, r30
 d50:	08 95       	ret

00000d52 <__umulhisi3>:
 d52:	a2 9f       	mul	r26, r18
 d54:	b0 01       	movw	r22, r0
 d56:	b3 9f       	mul	r27, r19
 d58:	c0 01       	movw	r24, r0
 d5a:	a3 9f       	mul	r26, r19
 d5c:	70 0d       	add	r23, r0
 d5e:	81 1d       	adc	r24, r1
 d60:	11 24       	eor	r1, r1
 d62:	91 1d       	adc	r25, r1
 d64:	b2 9f       	mul	r27, r18
 d66:	70 0d       	add	r23, r0
 d68:	81 1d       	adc	r24, r1
 d6a:	11 24       	eor	r1, r1
 d6c:	91 1d       	adc	r25, r1
 d6e:	08 95       	ret

00000d70 <__itoa_ncheck>:
 d70:	bb 27       	eor	r27, r27
 d72:	4a 30       	cpi	r20, 0x0A	; 10
 d74:	31 f4       	brne	.+12     	; 0xd82 <__itoa_ncheck+0x12>
 d76:	99 23       	and	r25, r25
 d78:	22 f4       	brpl	.+8      	; 0xd82 <__itoa_ncheck+0x12>
 d7a:	bd e2       	ldi	r27, 0x2D	; 45
 d7c:	90 95       	com	r25
 d7e:	81 95       	neg	r24
 d80:	9f 4f       	sbci	r25, 0xFF	; 255
 d82:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__utoa_common>

00000d86 <__utoa_ncheck>:
 d86:	bb 27       	eor	r27, r27

00000d88 <__utoa_common>:
 d88:	fb 01       	movw	r30, r22
 d8a:	55 27       	eor	r21, r21
 d8c:	aa 27       	eor	r26, r26
 d8e:	88 0f       	add	r24, r24
 d90:	99 1f       	adc	r25, r25
 d92:	aa 1f       	adc	r26, r26
 d94:	a4 17       	cp	r26, r20
 d96:	10 f0       	brcs	.+4      	; 0xd9c <__utoa_common+0x14>
 d98:	a4 1b       	sub	r26, r20
 d9a:	83 95       	inc	r24
 d9c:	50 51       	subi	r21, 0x10	; 16
 d9e:	b9 f7       	brne	.-18     	; 0xd8e <__utoa_common+0x6>
 da0:	a0 5d       	subi	r26, 0xD0	; 208
 da2:	aa 33       	cpi	r26, 0x3A	; 58
 da4:	08 f0       	brcs	.+2      	; 0xda8 <__utoa_common+0x20>
 da6:	a9 5d       	subi	r26, 0xD9	; 217
 da8:	a1 93       	st	Z+, r26
 daa:	00 97       	sbiw	r24, 0x00	; 0
 dac:	79 f7       	brne	.-34     	; 0xd8c <__utoa_common+0x4>
 dae:	b1 11       	cpse	r27, r1
 db0:	b1 93       	st	Z+, r27
 db2:	11 92       	st	Z+, r1
 db4:	cb 01       	movw	r24, r22
 db6:	0c 94 dd 06 	jmp	0xdba	; 0xdba <strrev>

00000dba <strrev>:
 dba:	dc 01       	movw	r26, r24
 dbc:	fc 01       	movw	r30, r24
 dbe:	67 2f       	mov	r22, r23
 dc0:	71 91       	ld	r23, Z+
 dc2:	77 23       	and	r23, r23
 dc4:	e1 f7       	brne	.-8      	; 0xdbe <strrev+0x4>
 dc6:	32 97       	sbiw	r30, 0x02	; 2
 dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <strrev+0x18>
 dca:	7c 91       	ld	r23, X
 dcc:	6d 93       	st	X+, r22
 dce:	70 83       	st	Z, r23
 dd0:	62 91       	ld	r22, -Z
 dd2:	ae 17       	cp	r26, r30
 dd4:	bf 07       	cpc	r27, r31
 dd6:	c8 f3       	brcs	.-14     	; 0xdca <strrev+0x10>
 dd8:	08 95       	ret

00000dda <_exit>:
 dda:	f8 94       	cli

00000ddc <__stop_program>:
 ddc:	ff cf       	rjmp	.-2      	; 0xddc <__stop_program>
