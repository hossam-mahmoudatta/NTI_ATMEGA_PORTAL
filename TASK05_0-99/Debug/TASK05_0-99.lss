
TASK05_0-99.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000039cc  00003a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000a8  008000a8  00003aa8  2**0
                  ALLOC
  3 .stab         000046c8  00000000  00000000  00003aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f8f  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b23f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b3af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ec90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000edf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f07d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f84b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_1>
       8:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_2>
       c:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5f 1c 	call	0x38be	; 0x38be <main>
      8a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 78 1c 	jmp	0x38f0	; 0x38f0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 94 1c 	jmp	0x3928	; 0x3928 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_voidSetPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPinDirection(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinDIR) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_voidSetPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_voidSetPinDirection+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <GPIO_voidSetPinDirection+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8a 83       	std	Y+2, r24	; 0x02
     b56:	6b 83       	std	Y+3, r22	; 0x03
     b58:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
     b5a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	88 30       	cpi	r24, 0x08	; 8
     b60:	18 f0       	brcs	.+6      	; 0xb68 <GPIO_voidSetPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	e1 c0       	rjmp	.+450    	; 0xd2a <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	84 30       	cpi	r24, 0x04	; 4
     b6c:	18 f0       	brcs	.+6      	; 0xb74 <GPIO_voidSetPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	db c0       	rjmp	.+438    	; 0xd2a <GPIO_voidSetPinDirection+0x1e4>
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	88 23       	and	r24, r24
     b78:	31 f0       	breq	.+12     	; 0xb86 <GPIO_voidSetPinDirection+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	19 f0       	breq	.+6      	; 0xb86 <GPIO_voidSetPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	d2 c0       	rjmp	.+420    	; 0xd2a <GPIO_voidSetPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	3e 83       	std	Y+6, r19	; 0x06
     b8e:	2d 83       	std	Y+5, r18	; 0x05
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_voidSetPinDirection+0x56>
     b9a:	43 c0       	rjmp	.+134    	; 0xc22 <GPIO_voidSetPinDirection+0xdc>
     b9c:	2d 81       	ldd	r18, Y+5	; 0x05
     b9e:	3e 81       	ldd	r19, Y+6	; 0x06
     ba0:	22 30       	cpi	r18, 0x02	; 2
     ba2:	31 05       	cpc	r19, r1
     ba4:	2c f4       	brge	.+10     	; 0xbb0 <GPIO_voidSetPinDirection+0x6a>
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	9e 81       	ldd	r25, Y+6	; 0x06
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	71 f0       	breq	.+28     	; 0xbca <GPIO_voidSetPinDirection+0x84>
     bae:	bc c0       	rjmp	.+376    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
     bb0:	2d 81       	ldd	r18, Y+5	; 0x05
     bb2:	3e 81       	ldd	r19, Y+6	; 0x06
     bb4:	22 30       	cpi	r18, 0x02	; 2
     bb6:	31 05       	cpc	r19, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <GPIO_voidSetPinDirection+0x76>
     bba:	5f c0       	rjmp	.+190    	; 0xc7a <GPIO_voidSetPinDirection+0x134>
     bbc:	8d 81       	ldd	r24, Y+5	; 0x05
     bbe:	9e 81       	ldd	r25, Y+6	; 0x06
     bc0:	83 30       	cpi	r24, 0x03	; 3
     bc2:	91 05       	cpc	r25, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <GPIO_voidSetPinDirection+0x82>
     bc6:	85 c0       	rjmp	.+266    	; 0xcd2 <GPIO_voidSetPinDirection+0x18c>
     bc8:	af c0       	rjmp	.+350    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     bca:	8c 81       	ldd	r24, Y+4	; 0x04
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	a1 f4       	brne	.+40     	; 0xbf8 <GPIO_voidSetPinDirection+0xb2>
					SET_BIT(DDRA_REG, copy_u8pinID);
     bd0:	aa e3       	ldi	r26, 0x3A	; 58
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ea e3       	ldi	r30, 0x3A	; 58
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	48 2f       	mov	r20, r24
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	02 2e       	mov	r0, r18
     be8:	02 c0       	rjmp	.+4      	; 0xbee <GPIO_voidSetPinDirection+0xa8>
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	0a 94       	dec	r0
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <GPIO_voidSetPinDirection+0xa4>
     bf2:	84 2b       	or	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	98 c0       	rjmp	.+304    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
     bf8:	aa e3       	ldi	r26, 0x3A	; 58
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ea e3       	ldi	r30, 0x3A	; 58
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	02 2e       	mov	r0, r18
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <GPIO_voidSetPinDirection+0xd0>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	0a 94       	dec	r0
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <GPIO_voidSetPinDirection+0xcc>
     c1a:	80 95       	com	r24
     c1c:	84 23       	and	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	83 c0       	rjmp	.+262    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     c22:	8c 81       	ldd	r24, Y+4	; 0x04
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	a1 f4       	brne	.+40     	; 0xc50 <GPIO_voidSetPinDirection+0x10a>
					SET_BIT(DDRB_REG, copy_u8pinID);
     c28:	a7 e3       	ldi	r26, 0x37	; 55
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e7 e3       	ldi	r30, 0x37	; 55
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 2e       	mov	r0, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <GPIO_voidSetPinDirection+0x100>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <GPIO_voidSetPinDirection+0xfc>
     c4a:	84 2b       	or	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	6c c0       	rjmp	.+216    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
     c50:	a7 e3       	ldi	r26, 0x37	; 55
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e7 e3       	ldi	r30, 0x37	; 55
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	48 2f       	mov	r20, r24
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 2e       	mov	r0, r18
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <GPIO_voidSetPinDirection+0x128>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <GPIO_voidSetPinDirection+0x124>
     c72:	80 95       	com	r24
     c74:	84 23       	and	r24, r20
     c76:	8c 93       	st	X, r24
     c78:	57 c0       	rjmp	.+174    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	a1 f4       	brne	.+40     	; 0xca8 <GPIO_voidSetPinDirection+0x162>
					SET_BIT(DDRC_REG, copy_u8pinID);
     c80:	a4 e3       	ldi	r26, 0x34	; 52
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e4 e3       	ldi	r30, 0x34	; 52
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	48 2f       	mov	r20, r24
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	28 2f       	mov	r18, r24
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 2e       	mov	r0, r18
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <GPIO_voidSetPinDirection+0x158>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	0a 94       	dec	r0
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <GPIO_voidSetPinDirection+0x154>
     ca2:	84 2b       	or	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	40 c0       	rjmp	.+128    	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
     ca8:	a4 e3       	ldi	r26, 0x34	; 52
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e4 e3       	ldi	r30, 0x34	; 52
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	48 2f       	mov	r20, r24
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 2e       	mov	r0, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <GPIO_voidSetPinDirection+0x180>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <GPIO_voidSetPinDirection+0x17c>
     cca:	80 95       	com	r24
     ccc:	84 23       	and	r24, r20
     cce:	8c 93       	st	X, r24
     cd0:	2b c0       	rjmp	.+86     	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	a1 f4       	brne	.+40     	; 0xd00 <GPIO_voidSetPinDirection+0x1ba>
					SET_BIT(DDRD_REG, copy_u8pinID);
     cd8:	a1 e3       	ldi	r26, 0x31	; 49
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e1 e3       	ldi	r30, 0x31	; 49
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	48 2f       	mov	r20, r24
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 2e       	mov	r0, r18
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <GPIO_voidSetPinDirection+0x1b0>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <GPIO_voidSetPinDirection+0x1ac>
     cfa:	84 2b       	or	r24, r20
     cfc:	8c 93       	st	X, r24
     cfe:	14 c0       	rjmp	.+40     	; 0xd28 <GPIO_voidSetPinDirection+0x1e2>
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
     d00:	a1 e3       	ldi	r26, 0x31	; 49
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e1 e3       	ldi	r30, 0x31	; 49
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <GPIO_voidSetPinDirection+0x1d8>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <GPIO_voidSetPinDirection+0x1d4>
     d22:	80 95       	com	r24
     d24:	84 23       	and	r24, r20
     d26:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
     d28:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d2c:	26 96       	adiw	r28, 0x06	; 6
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <GPIO_voidSetPinValue>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_voidSetPinValue(u8 copy_u8portID, u8 copy_u8pinID, u8 copy_u8pinValue)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <GPIO_voidSetPinValue+0x6>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <GPIO_voidSetPinValue+0x8>
     d46:	00 d0       	rcall	.+0      	; 0xd48 <GPIO_voidSetPinValue+0xa>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	8a 83       	std	Y+2, r24	; 0x02
     d4e:	6b 83       	std	Y+3, r22	; 0x03
     d50:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;
     d52:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 30       	cpi	r24, 0x08	; 8
     d58:	18 f0       	brcs	.+6      	; 0xd60 <GPIO_voidSetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	e1 c0       	rjmp	.+450    	; 0xf22 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	18 f0       	brcs	.+6      	; 0xd6c <GPIO_voidSetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	db c0       	rjmp	.+438    	; 0xf22 <GPIO_voidSetPinValue+0x1e4>
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	31 f0       	breq	.+12     	; 0xd7e <GPIO_voidSetPinValue+0x40>
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	88 23       	and	r24, r24
     d76:	19 f0       	breq	.+6      	; 0xd7e <GPIO_voidSetPinValue+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	d2 c0       	rjmp	.+420    	; 0xf22 <GPIO_voidSetPinValue+0x1e4>
	}
	else {
		switch(copy_u8portID)
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	3e 83       	std	Y+6, r19	; 0x06
     d86:	2d 83       	std	Y+5, r18	; 0x05
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	91 05       	cpc	r25, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <GPIO_voidSetPinValue+0x56>
     d92:	43 c0       	rjmp	.+134    	; 0xe1a <GPIO_voidSetPinValue+0xdc>
     d94:	2d 81       	ldd	r18, Y+5	; 0x05
     d96:	3e 81       	ldd	r19, Y+6	; 0x06
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	2c f4       	brge	.+10     	; 0xda8 <GPIO_voidSetPinValue+0x6a>
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	71 f0       	breq	.+28     	; 0xdc2 <GPIO_voidSetPinValue+0x84>
     da6:	bc c0       	rjmp	.+376    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
     da8:	2d 81       	ldd	r18, Y+5	; 0x05
     daa:	3e 81       	ldd	r19, Y+6	; 0x06
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <GPIO_voidSetPinValue+0x76>
     db2:	5f c0       	rjmp	.+190    	; 0xe72 <GPIO_voidSetPinValue+0x134>
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	9e 81       	ldd	r25, Y+6	; 0x06
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	91 05       	cpc	r25, r1
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <GPIO_voidSetPinValue+0x82>
     dbe:	85 c0       	rjmp	.+266    	; 0xeca <GPIO_voidSetPinValue+0x18c>
     dc0:	af c0       	rjmp	.+350    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <GPIO_voidSetPinValue+0xb2>
					SET_BIT(PORTA_REG ,copy_u8pinID);
     dc8:	ab e3       	ldi	r26, 0x3B	; 59
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	eb e3       	ldi	r30, 0x3B	; 59
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <GPIO_voidSetPinValue+0xa8>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <GPIO_voidSetPinValue+0xa4>
     dea:	84 2b       	or	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	98 c0       	rjmp	.+304    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
     df0:	ab e3       	ldi	r26, 0x3B	; 59
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	eb e3       	ldi	r30, 0x3B	; 59
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <GPIO_voidSetPinValue+0xd0>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <GPIO_voidSetPinValue+0xcc>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	83 c0       	rjmp	.+262    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	a1 f4       	brne	.+40     	; 0xe48 <GPIO_voidSetPinValue+0x10a>
					SET_BIT(PORTB_REG ,copy_u8pinID);
     e20:	a8 e3       	ldi	r26, 0x38	; 56
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e8 e3       	ldi	r30, 0x38	; 56
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_voidSetPinValue+0x100>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_voidSetPinValue+0xfc>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	6c c0       	rjmp	.+216    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
     e48:	a8 e3       	ldi	r26, 0x38	; 56
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 e3       	ldi	r30, 0x38	; 56
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <GPIO_voidSetPinValue+0x128>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <GPIO_voidSetPinValue+0x124>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	57 c0       	rjmp	.+174    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	a1 f4       	brne	.+40     	; 0xea0 <GPIO_voidSetPinValue+0x162>
					SET_BIT(PORTC_REG ,copy_u8pinID);
     e78:	a5 e3       	ldi	r26, 0x35	; 53
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e5 e3       	ldi	r30, 0x35	; 53
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <GPIO_voidSetPinValue+0x158>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <GPIO_voidSetPinValue+0x154>
     e9a:	84 2b       	or	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	40 c0       	rjmp	.+128    	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
     ea0:	a5 e3       	ldi	r26, 0x35	; 53
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e5 e3       	ldi	r30, 0x35	; 53
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <GPIO_voidSetPinValue+0x180>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <GPIO_voidSetPinValue+0x17c>
     ec2:	80 95       	com	r24
     ec4:	84 23       	and	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	2b c0       	rjmp	.+86     	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	a1 f4       	brne	.+40     	; 0xef8 <GPIO_voidSetPinValue+0x1ba>
					SET_BIT(PORTD_REG ,copy_u8pinID);
     ed0:	a2 e3       	ldi	r26, 0x32	; 50
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e2 e3       	ldi	r30, 0x32	; 50
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <GPIO_voidSetPinValue+0x1b0>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <GPIO_voidSetPinValue+0x1ac>
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	14 c0       	rjmp	.+40     	; 0xf20 <GPIO_voidSetPinValue+0x1e2>
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
     ef8:	a2 e3       	ldi	r26, 0x32	; 50
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e2 e3       	ldi	r30, 0x32	; 50
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <GPIO_voidSetPinValue+0x1d8>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <GPIO_voidSetPinValue+0x1d4>
     f1a:	80 95       	com	r24
     f1c:	84 23       	and	r24, r20
     f1e:	8c 93       	st	X, r24
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
     f20:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
}
     f24:	26 96       	adiw	r28, 0x06	; 6
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <GPIO_u8GetPinValue>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
u8 GPIO_u8GetPinValue(u8 copy_u8portID, u8 copy_u8pinID) {
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <GPIO_u8GetPinValue+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <GPIO_u8GetPinValue+0x8>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <GPIO_u8GetPinValue+0xa>
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	8b 83       	std	Y+3, r24	; 0x03
     f46:	6c 83       	std	Y+4, r22	; 0x04
	u8 GPIO_Driver_Checker = 0;
     f48:	1a 82       	std	Y+2, r1	; 0x02
	u8 pin_value = LOGIC_LOW;
     f4a:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	88 30       	cpi	r24, 0x08	; 8
     f50:	18 f0       	brcs	.+6      	; 0xf58 <GPIO_u8GetPinValue+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	87 c0       	rjmp	.+270    	; 0x1066 <GPIO_u8GetPinValue+0x130>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	18 f0       	brcs	.+6      	; 0xf64 <GPIO_u8GetPinValue+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	81 c0       	rjmp	.+258    	; 0x1066 <GPIO_u8GetPinValue+0x130>
	}
	else {
		/* Read the pin value as required */
		switch(copy_u8portID) {
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3e 83       	std	Y+6, r19	; 0x06
     f6c:	2d 83       	std	Y+5, r18	; 0x05
     f6e:	4d 81       	ldd	r20, Y+5	; 0x05
     f70:	5e 81       	ldd	r21, Y+6	; 0x06
     f72:	41 30       	cpi	r20, 0x01	; 1
     f74:	51 05       	cpc	r21, r1
     f76:	79 f1       	breq	.+94     	; 0xfd6 <GPIO_u8GetPinValue+0xa0>
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	91 05       	cpc	r25, r1
     f80:	34 f4       	brge	.+12     	; 0xf8e <GPIO_u8GetPinValue+0x58>
     f82:	2d 81       	ldd	r18, Y+5	; 0x05
     f84:	3e 81       	ldd	r19, Y+6	; 0x06
     f86:	21 15       	cp	r18, r1
     f88:	31 05       	cpc	r19, r1
     f8a:	69 f0       	breq	.+26     	; 0xfa6 <GPIO_u8GetPinValue+0x70>
     f8c:	6b c0       	rjmp	.+214    	; 0x1064 <GPIO_u8GetPinValue+0x12e>
     f8e:	4d 81       	ldd	r20, Y+5	; 0x05
     f90:	5e 81       	ldd	r21, Y+6	; 0x06
     f92:	42 30       	cpi	r20, 0x02	; 2
     f94:	51 05       	cpc	r21, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <GPIO_u8GetPinValue+0xd0>
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <GPIO_u8GetPinValue+0x6e>
     fa2:	49 c0       	rjmp	.+146    	; 0x1036 <GPIO_u8GetPinValue+0x100>
     fa4:	5f c0       	rjmp	.+190    	; 0x1064 <GPIO_u8GetPinValue+0x12e>
			case PORT_A:
				// Checks if the bit equals '1' or not
				if(BIT_IS_SET(PINA_REG, copy_u8pinID)) {
     fa6:	e9 e3       	ldi	r30, 0x39	; 57
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	88 2f       	mov	r24, r24
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	a9 01       	movw	r20, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_u8GetPinValue+0x88>
     fba:	55 95       	asr	r21
     fbc:	47 95       	ror	r20
     fbe:	8a 95       	dec	r24
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_u8GetPinValue+0x84>
     fc2:	ca 01       	movw	r24, r20
     fc4:	81 70       	andi	r24, 0x01	; 1
     fc6:	90 70       	andi	r25, 0x00	; 0
     fc8:	88 23       	and	r24, r24
     fca:	19 f0       	breq	.+6      	; 0xfd2 <GPIO_u8GetPinValue+0x9c>
					pin_value = LOGIC_HIGH;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	49 c0       	rjmp	.+146    	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	47 c0       	rjmp	.+142    	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_B:
				if(BIT_IS_SET(PINB_REG,copy_u8pinID)) {
     fd6:	e6 e3       	ldi	r30, 0x36	; 54
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <GPIO_u8GetPinValue+0xb8>
     fea:	55 95       	asr	r21
     fec:	47 95       	ror	r20
     fee:	8a 95       	dec	r24
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <GPIO_u8GetPinValue+0xb4>
     ff2:	ca 01       	movw	r24, r20
     ff4:	81 70       	andi	r24, 0x01	; 1
     ff6:	90 70       	andi	r25, 0x00	; 0
     ff8:	88 23       	and	r24, r24
     ffa:	19 f0       	breq	.+6      	; 0x1002 <GPIO_u8GetPinValue+0xcc>
					pin_value = LOGIC_HIGH;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	31 c0       	rjmp	.+98     	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1002:	19 82       	std	Y+1, r1	; 0x01
    1004:	2f c0       	rjmp	.+94     	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_C:
				if(BIT_IS_SET(PINC_REG,copy_u8pinID)) {
    1006:	e3 e3       	ldi	r30, 0x33	; 51
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_u8GetPinValue+0xe8>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_u8GetPinValue+0xe4>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	88 23       	and	r24, r24
    102a:	19 f0       	breq	.+6      	; 0x1032 <GPIO_u8GetPinValue+0xfc>
					pin_value = LOGIC_HIGH;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	19 c0       	rjmp	.+50     	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1032:	19 82       	std	Y+1, r1	; 0x01
    1034:	17 c0       	rjmp	.+46     	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				break;
			case PORT_D:
				if(BIT_IS_SET(PIND_REG,copy_u8pinID)) {
    1036:	e0 e3       	ldi	r30, 0x30	; 48
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a9 01       	movw	r20, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_u8GetPinValue+0x118>
    104a:	55 95       	asr	r21
    104c:	47 95       	ror	r20
    104e:	8a 95       	dec	r24
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_u8GetPinValue+0x114>
    1052:	ca 01       	movw	r24, r20
    1054:	81 70       	andi	r24, 0x01	; 1
    1056:	90 70       	andi	r25, 0x00	; 0
    1058:	88 23       	and	r24, r24
    105a:	19 f0       	breq	.+6      	; 0x1062 <GPIO_u8GetPinValue+0x12c>
					pin_value = LOGIC_HIGH;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <GPIO_u8GetPinValue+0x12e>
				}
				else {
					pin_value = LOGIC_LOW;
    1062:	19 82       	std	Y+1, r1	; 0x01
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1064:	1a 82       	std	Y+2, r1	; 0x02
	}
	return pin_value;
    1066:	89 81       	ldd	r24, Y+1	; 0x01
}
    1068:	26 96       	adiw	r28, 0x06	; 6
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <GPIO_voidTogglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_voidTogglePin(u8 copy_u8portID, u8 copy_u8pinID) {
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <GPIO_voidTogglePin+0x6>
    1080:	00 d0       	rcall	.+0      	; 0x1082 <GPIO_voidTogglePin+0x8>
    1082:	0f 92       	push	r0
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	8a 83       	std	Y+2, r24	; 0x02
    108a:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    108c:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	88 30       	cpi	r24, 0x08	; 8
    1092:	18 f0       	brcs	.+6      	; 0x109a <GPIO_voidTogglePin+0x20>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	75 c0       	rjmp	.+234    	; 0x1184 <GPIO_voidTogglePin+0x10a>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	84 30       	cpi	r24, 0x04	; 4
    109e:	18 f0       	brcs	.+6      	; 0x10a6 <GPIO_voidTogglePin+0x2c>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	6f c0       	rjmp	.+222    	; 0x1184 <GPIO_voidTogglePin+0x10a>
	}
	else {
		switch(copy_u8portID) {
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3d 83       	std	Y+5, r19	; 0x05
    10ae:	2c 83       	std	Y+4, r18	; 0x04
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	49 f1       	breq	.+82     	; 0x110c <GPIO_voidTogglePin+0x92>
    10ba:	2c 81       	ldd	r18, Y+4	; 0x04
    10bc:	3d 81       	ldd	r19, Y+5	; 0x05
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <GPIO_voidTogglePin+0x54>
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <GPIO_voidTogglePin+0x6a>
    10cc:	5a c0       	rjmp	.+180    	; 0x1182 <GPIO_voidTogglePin+0x108>
    10ce:	2c 81       	ldd	r18, Y+4	; 0x04
    10d0:	3d 81       	ldd	r19, Y+5	; 0x05
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	71 f1       	breq	.+92     	; 0x1134 <GPIO_voidTogglePin+0xba>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	e9 f1       	breq	.+122    	; 0x115c <GPIO_voidTogglePin+0xe2>
    10e2:	4f c0       	rjmp	.+158    	; 0x1182 <GPIO_voidTogglePin+0x108>
			case PORT_A:
				TOG_BIT(PORTA_REG, copy_u8pinID);
    10e4:	ab e3       	ldi	r26, 0x3B	; 59
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	eb e3       	ldi	r30, 0x3B	; 59
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_voidTogglePin+0x88>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_voidTogglePin+0x84>
    1106:	84 27       	eor	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	3b c0       	rjmp	.+118    	; 0x1182 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_B:
				TOG_BIT(PORTB_REG, copy_u8pinID);
    110c:	a8 e3       	ldi	r26, 0x38	; 56
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e3       	ldi	r30, 0x38	; 56
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_voidTogglePin+0xb0>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_voidTogglePin+0xac>
    112e:	84 27       	eor	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	27 c0       	rjmp	.+78     	; 0x1182 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_C:
				TOG_BIT(PORTC_REG, copy_u8pinID);
    1134:	a5 e3       	ldi	r26, 0x35	; 53
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_voidTogglePin+0xd8>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_voidTogglePin+0xd4>
    1156:	84 27       	eor	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	13 c0       	rjmp	.+38     	; 0x1182 <GPIO_voidTogglePin+0x108>
				break;
			case PORT_D:
				TOG_BIT(PORTD_REG, copy_u8pinID);
    115c:	a2 e3       	ldi	r26, 0x32	; 50
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e2 e3       	ldi	r30, 0x32	; 50
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <GPIO_voidTogglePin+0x100>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <GPIO_voidTogglePin+0xfc>
    117e:	84 27       	eor	r24, r20
    1180:	8c 93       	st	X, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1182:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <GPIO_voidSetPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortDirection(u8 copy_u8portID, u8 copy_u8portDIR) {
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	00 d0       	rcall	.+0      	; 0x119c <GPIO_voidSetPortDirection+0x6>
    119c:	00 d0       	rcall	.+0      	; 0x119e <GPIO_voidSetPortDirection+0x8>
    119e:	0f 92       	push	r0
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	8a 83       	std	Y+2, r24	; 0x02
    11a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    11a8:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	18 f0       	brcs	.+6      	; 0x11b6 <GPIO_voidSetPortDirection+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	3c c0       	rjmp	.+120    	; 0x122e <GPIO_voidSetPortDirection+0x98>
	}
	else if((copy_u8portDIR != PORT_INPUT) && (copy_u8portDIR != PORT_OUTPUT)) {
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 23       	and	r24, r24
    11ba:	31 f0       	breq	.+12     	; 0x11c8 <GPIO_voidSetPortDirection+0x32>
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <GPIO_voidSetPortDirection+0x32>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	33 c0       	rjmp	.+102    	; 0x122e <GPIO_voidSetPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	3d 83       	std	Y+5, r19	; 0x05
    11d0:	2c 83       	std	Y+4, r18	; 0x04
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	9d 81       	ldd	r25, Y+5	; 0x05
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	91 05       	cpc	r25, r1
    11da:	d1 f0       	breq	.+52     	; 0x1210 <GPIO_voidSetPortDirection+0x7a>
    11dc:	2c 81       	ldd	r18, Y+4	; 0x04
    11de:	3d 81       	ldd	r19, Y+5	; 0x05
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <GPIO_voidSetPortDirection+0x5a>
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	61 f0       	breq	.+24     	; 0x1206 <GPIO_voidSetPortDirection+0x70>
    11ee:	1e c0       	rjmp	.+60     	; 0x122c <GPIO_voidSetPortDirection+0x96>
    11f0:	2c 81       	ldd	r18, Y+4	; 0x04
    11f2:	3d 81       	ldd	r19, Y+5	; 0x05
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	81 f0       	breq	.+32     	; 0x121a <GPIO_voidSetPortDirection+0x84>
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	81 f0       	breq	.+32     	; 0x1224 <GPIO_voidSetPortDirection+0x8e>
    1204:	13 c0       	rjmp	.+38     	; 0x122c <GPIO_voidSetPortDirection+0x96>
			case PORT_A:
				DDRA_REG = copy_u8portDIR;
    1206:	ea e3       	ldi	r30, 0x3A	; 58
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	80 83       	st	Z, r24
    120e:	0e c0       	rjmp	.+28     	; 0x122c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_B:
				DDRB_REG = copy_u8portDIR;
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	80 83       	st	Z, r24
    1218:	09 c0       	rjmp	.+18     	; 0x122c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_C:
				DDRC_REG = copy_u8portDIR;
    121a:	e4 e3       	ldi	r30, 0x34	; 52
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	80 83       	st	Z, r24
    1222:	04 c0       	rjmp	.+8      	; 0x122c <GPIO_voidSetPortDirection+0x96>
				break;
			case PORT_D:
				DDRD_REG = copy_u8portDIR;
    1224:	e1 e3       	ldi	r30, 0x31	; 49
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    122c:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <GPIO_voidSetPortValue>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_voidSetPortValue(u8 copy_u8portID, u8 copy_u8portValue) {
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <GPIO_voidSetPortValue+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <GPIO_voidSetPortValue+0x8>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	8a 83       	std	Y+2, r24	; 0x02
    1250:	6b 83       	std	Y+3, r22	; 0x03
	u8 GPIO_Driver_Checker = 0;
    1252:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	18 f0       	brcs	.+6      	; 0x1260 <GPIO_voidSetPortValue+0x20>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	33 c0       	rjmp	.+102    	; 0x12c6 <GPIO_voidSetPortValue+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(copy_u8portID) {
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3d 83       	std	Y+5, r19	; 0x05
    1268:	2c 83       	std	Y+4, r18	; 0x04
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	91 05       	cpc	r25, r1
    1272:	d1 f0       	breq	.+52     	; 0x12a8 <GPIO_voidSetPortValue+0x68>
    1274:	2c 81       	ldd	r18, Y+4	; 0x04
    1276:	3d 81       	ldd	r19, Y+5	; 0x05
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	2c f4       	brge	.+10     	; 0x1288 <GPIO_voidSetPortValue+0x48>
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	61 f0       	breq	.+24     	; 0x129e <GPIO_voidSetPortValue+0x5e>
    1286:	1e c0       	rjmp	.+60     	; 0x12c4 <GPIO_voidSetPortValue+0x84>
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <GPIO_voidSetPortValue+0x72>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	81 f0       	breq	.+32     	; 0x12bc <GPIO_voidSetPortValue+0x7c>
    129c:	13 c0       	rjmp	.+38     	; 0x12c4 <GPIO_voidSetPortValue+0x84>
			case PORT_A:
				PORTA_REG = copy_u8portValue;
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	80 83       	st	Z, r24
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_B:
				PORTB_REG = copy_u8portValue;
    12a8:	e8 e3       	ldi	r30, 0x38	; 56
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	80 83       	st	Z, r24
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_C:
				PORTC_REG = copy_u8portValue;
    12b2:	e5 e3       	ldi	r30, 0x35	; 53
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	80 83       	st	Z, r24
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <GPIO_voidSetPortValue+0x84>
				break;
			case PORT_D:
				PORTD_REG = copy_u8portValue;
    12bc:	e2 e3       	ldi	r30, 0x32	; 50
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	80 83       	st	Z, r24
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    12c4:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <GPIO_u8GetPortValue>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_u8GetPortValue(u8 copy_u8portID) {
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <GPIO_u8GetPortValue+0x6>
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <GPIO_u8GetPortValue+0x8>
    12e0:	0f 92       	push	r0
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	8b 83       	std	Y+3, r24	; 0x03
	u8 value = LOGIC_LOW;
    12e8:	1a 82       	std	Y+2, r1	; 0x02
	u8 GPIO_Driver_Checker = 0;
    12ea:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	18 f0       	brcs	.+6      	; 0x12f8 <GPIO_u8GetPortValue+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	33 c0       	rjmp	.+102    	; 0x135e <GPIO_u8GetPortValue+0x86>
	}
	else {
		switch(copy_u8portID) {
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	3d 83       	std	Y+5, r19	; 0x05
    1300:	2c 83       	std	Y+4, r18	; 0x04
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	91 05       	cpc	r25, r1
    130a:	d1 f0       	breq	.+52     	; 0x1340 <GPIO_u8GetPortValue+0x68>
    130c:	2c 81       	ldd	r18, Y+4	; 0x04
    130e:	3d 81       	ldd	r19, Y+5	; 0x05
    1310:	22 30       	cpi	r18, 0x02	; 2
    1312:	31 05       	cpc	r19, r1
    1314:	2c f4       	brge	.+10     	; 0x1320 <GPIO_u8GetPortValue+0x48>
    1316:	8c 81       	ldd	r24, Y+4	; 0x04
    1318:	9d 81       	ldd	r25, Y+5	; 0x05
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	61 f0       	breq	.+24     	; 0x1336 <GPIO_u8GetPortValue+0x5e>
    131e:	1e c0       	rjmp	.+60     	; 0x135c <GPIO_u8GetPortValue+0x84>
    1320:	2c 81       	ldd	r18, Y+4	; 0x04
    1322:	3d 81       	ldd	r19, Y+5	; 0x05
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	81 f0       	breq	.+32     	; 0x134a <GPIO_u8GetPortValue+0x72>
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	91 05       	cpc	r25, r1
    1332:	81 f0       	breq	.+32     	; 0x1354 <GPIO_u8GetPortValue+0x7c>
    1334:	13 c0       	rjmp	.+38     	; 0x135c <GPIO_u8GetPortValue+0x84>
			case PORT_A:
				// Why value equals PINA?
				value = PORTA_REG;
    1336:	eb e3       	ldi	r30, 0x3B	; 59
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	8a 83       	std	Y+2, r24	; 0x02
    133e:	0e c0       	rjmp	.+28     	; 0x135c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_B:
				value = PORTB_REG;
    1340:	e8 e3       	ldi	r30, 0x38	; 56
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	09 c0       	rjmp	.+18     	; 0x135c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_C:
				value = PORTC_REG;
    134a:	e5 e3       	ldi	r30, 0x35	; 53
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8a 83       	std	Y+2, r24	; 0x02
    1352:	04 c0       	rjmp	.+8      	; 0x135c <GPIO_u8GetPortValue+0x84>
				break;
			case PORT_D:
				value = PORTD_REG;
    1354:	e2 e3       	ldi	r30, 0x32	; 50
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8a 83       	std	Y+2, r24	; 0x02
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    135c:	19 82       	std	Y+1, r1	; 0x01
	}
	return value;
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <GLOBINT_voidSetEnableFlag>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Enables the Global Interrupt Enable Flag in the Status Register
void GLOBINT_voidSetEnableFlag(void) {
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, SREG_I_BIT);
    1378:	af e5       	ldi	r26, 0x5F	; 95
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ef e5       	ldi	r30, 0x5F	; 95
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 68       	ori	r24, 0x80	; 128
    1384:	8c 93       	st	X, r24
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <GLOBINT_voidSetDisableFlag>:

// Disables the Global Interrupt Disable Flag in the Status Register
void GLOBINT_voidSetDisableFlag(void) {
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, SREG_I_BIT);
    1394:	af e5       	ldi	r26, 0x5F	; 95
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ef e5       	ldi	r30, 0x5F	; 95
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8f 77       	andi	r24, 0x7F	; 127
    13a0:	8c 93       	st	X, r24
}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <EXTINT_voidSetSenseINTx>:
void (*CallBackPtr_INT1) (void);
void (*CallBackPtr_INT2) (void);


// Initialize INT0 & INT1 & INT2 Sense Control System
void EXTINT_voidSetSenseINTx(u8 copyINTx, u8 CopySense) {
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <EXTINT_voidSetSenseINTx+0x6>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <EXTINT_voidSetSenseINTx+0x8>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3c 83       	std	Y+4, r19	; 0x04
    13c0:	2b 83       	std	Y+3, r18	; 0x03
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <EXTINT_voidSetSenseINTx+0x26>
    13cc:	55 c0       	rjmp	.+170    	; 0x1478 <EXTINT_voidSetSenseINTx+0xd0>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	23 30       	cpi	r18, 0x03	; 3
    13d4:	31 05       	cpc	r19, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <EXTINT_voidSetSenseINTx+0x32>
    13d8:	97 c0       	rjmp	.+302    	; 0x1508 <EXTINT_voidSetSenseINTx+0x160>
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <EXTINT_voidSetSenseINTx+0x3e>
    13e4:	a6 c0       	rjmp	.+332    	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
	case EXT_INT0:
		if(CopySense == EXTINT_Low_Level) {
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	88 23       	and	r24, r24
    13ea:	79 f4       	brne	.+30     	; 0x140a <EXTINT_voidSetSenseINTx+0x62>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    13ec:	a5 e5       	ldi	r26, 0x55	; 85
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e5       	ldi	r30, 0x55	; 85
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8d 7f       	andi	r24, 0xFD	; 253
    13f8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8e 7f       	andi	r24, 0xFE	; 254
    1406:	8c 93       	st	X, r24
    1408:	94 c0       	rjmp	.+296    	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Logical_Change) {
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	79 f4       	brne	.+30     	; 0x142e <EXTINT_voidSetSenseINTx+0x86>
			CLR_BIT(MCUCR_REG, MCUCR_ISC01);
    1410:	a5 e5       	ldi	r26, 0x55	; 85
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e5 e5       	ldi	r30, 0x55	; 85
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8d 7f       	andi	r24, 0xFD	; 253
    141c:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    141e:	a5 e5       	ldi	r26, 0x55	; 85
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e5       	ldi	r30, 0x55	; 85
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	81 60       	ori	r24, 0x01	; 1
    142a:	8c 93       	st	X, r24
    142c:	82 c0       	rjmp	.+260    	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Falling_Edge) {
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	79 f4       	brne	.+30     	; 0x1452 <EXTINT_voidSetSenseINTx+0xaa>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    1434:	a5 e5       	ldi	r26, 0x55	; 85
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e5       	ldi	r30, 0x55	; 85
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	82 60       	ori	r24, 0x02	; 2
    1440:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC00);
    1442:	a5 e5       	ldi	r26, 0x55	; 85
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e5       	ldi	r30, 0x55	; 85
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	8e 7f       	andi	r24, 0xFE	; 254
    144e:	8c 93       	st	X, r24
    1450:	70 c0       	rjmp	.+224    	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Rising_Edge) {
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	09 f0       	breq	.+2      	; 0x145a <EXTINT_voidSetSenseINTx+0xb2>
    1458:	6c c0       	rjmp	.+216    	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC01);
    145a:	a5 e5       	ldi	r26, 0x55	; 85
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e5       	ldi	r30, 0x55	; 85
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC00);
    1468:	a5 e5       	ldi	r26, 0x55	; 85
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e5       	ldi	r30, 0x55	; 85
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	8c 93       	st	X, r24
    1476:	5d c0       	rjmp	.+186    	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		break;
	case EXT_INT1:
		if(CopySense == EXTINT_Low_Level) {
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	88 23       	and	r24, r24
    147c:	79 f4       	brne	.+30     	; 0x149c <EXTINT_voidSetSenseINTx+0xf4>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    147e:	a5 e5       	ldi	r26, 0x55	; 85
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e5       	ldi	r30, 0x55	; 85
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	87 7f       	andi	r24, 0xF7	; 247
    148a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    148c:	a5 e5       	ldi	r26, 0x55	; 85
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e5       	ldi	r30, 0x55	; 85
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	8b 7f       	andi	r24, 0xFB	; 251
    1498:	8c 93       	st	X, r24
    149a:	4b c0       	rjmp	.+150    	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Logical_Change) {
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	79 f4       	brne	.+30     	; 0x14c0 <EXTINT_voidSetSenseINTx+0x118>
			CLR_BIT(MCUCR_REG, MCUCR_ISC11);
    14a2:	a5 e5       	ldi	r26, 0x55	; 85
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e5 e5       	ldi	r30, 0x55	; 85
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	87 7f       	andi	r24, 0xF7	; 247
    14ae:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    14b0:	a5 e5       	ldi	r26, 0x55	; 85
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e5 e5       	ldi	r30, 0x55	; 85
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	84 60       	ori	r24, 0x04	; 4
    14bc:	8c 93       	st	X, r24
    14be:	39 c0       	rjmp	.+114    	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Falling_Edge) {
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	79 f4       	brne	.+30     	; 0x14e4 <EXTINT_voidSetSenseINTx+0x13c>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	88 60       	ori	r24, 0x08	; 8
    14d2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, MCUCR_ISC10);
    14d4:	a5 e5       	ldi	r26, 0x55	; 85
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e5       	ldi	r30, 0x55	; 85
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8b 7f       	andi	r24, 0xFB	; 251
    14e0:	8c 93       	st	X, r24
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_Rising_Edge) {
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	21 f5       	brne	.+72     	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCR_REG, MCUCR_ISC11);
    14ea:	a5 e5       	ldi	r26, 0x55	; 85
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e5       	ldi	r30, 0x55	; 85
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, MCUCR_ISC10);
    14f8:	a5 e5       	ldi	r26, 0x55	; 85
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e5       	ldi	r30, 0x55	; 85
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	84 60       	ori	r24, 0x04	; 4
    1504:	8c 93       	st	X, r24
    1506:	15 c0       	rjmp	.+42     	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		break;
	case EXT_INT2:
		if(CopySense == EXTINT_INT2_Falling_Edge) {
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	88 23       	and	r24, r24
    150c:	41 f4       	brne	.+16     	; 0x151e <EXTINT_voidSetSenseINTx+0x176>
			CLR_BIT(MCUCSR_REG, MCUCSR_ISC2);
    150e:	a4 e5       	ldi	r26, 0x54	; 84
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e4 e5       	ldi	r30, 0x54	; 84
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8f 7b       	andi	r24, 0xBF	; 191
    151a:	8c 93       	st	X, r24
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
		}
		else if(CopySense == EXTINT_INT2_Rising_Edge) {
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	39 f4       	brne	.+14     	; 0x1532 <EXTINT_voidSetSenseINTx+0x18a>
			SET_BIT(MCUCSR_REG, MCUCSR_ISC2);
    1524:	a4 e5       	ldi	r26, 0x54	; 84
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e4 e5       	ldi	r30, 0x54	; 84
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 64       	ori	r24, 0x40	; 64
    1530:	8c 93       	st	X, r24
		}
		break;
	}
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <EXTINT_voidEnableINTx>:


// Enable External Interrupt INT0 & INT1 & INT2 and pass a function to ISR
void EXTINT_voidEnableINTx(u8 copyINTx, void (*copy_PtrtoFunc) (void)) {
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <EXTINT_voidEnableINTx+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <EXTINT_voidEnableINTx+0x8>
    1548:	0f 92       	push	r0
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	7b 83       	std	Y+3, r23	; 0x03
    1552:	6a 83       	std	Y+2, r22	; 0x02
	switch(copyINTx) {
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3d 83       	std	Y+5, r19	; 0x05
    155c:	2c 83       	std	Y+4, r18	; 0x04
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	9d 81       	ldd	r25, Y+5	; 0x05
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	91 05       	cpc	r25, r1
    1566:	c1 f0       	breq	.+48     	; 0x1598 <EXTINT_voidEnableINTx+0x58>
    1568:	2c 81       	ldd	r18, Y+4	; 0x04
    156a:	3d 81       	ldd	r19, Y+5	; 0x05
    156c:	23 30       	cpi	r18, 0x03	; 3
    156e:	31 05       	cpc	r19, r1
    1570:	09 f1       	breq	.+66     	; 0x15b4 <EXTINT_voidEnableINTx+0x74>
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9d 81       	ldd	r25, Y+5	; 0x05
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	91 05       	cpc	r25, r1
    157a:	51 f5       	brne	.+84     	; 0x15d0 <EXTINT_voidEnableINTx+0x90>
	case EXT_INT0:
		SET_BIT(GICR_REG, GICR_INT0);
    157c:	ab e5       	ldi	r26, 0x5B	; 91
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	eb e5       	ldi	r30, 0x5B	; 91
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 64       	ori	r24, 0x40	; 64
    1588:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	90 93 ae 00 	sts	0x00AE, r25
    1592:	80 93 ad 00 	sts	0x00AD, r24
    1596:	29 c0       	rjmp	.+82     	; 0x15ea <EXTINT_voidEnableINTx+0xaa>
		break;
	case EXT_INT1:
		SET_BIT(GICR_REG, GICR_INT1);
    1598:	ab e5       	ldi	r26, 0x5B	; 91
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e5       	ldi	r30, 0x5B	; 91
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 68       	ori	r24, 0x80	; 128
    15a4:	8c 93       	st	X, r24
		CallBackPtr_INT1 = copy_PtrtoFunc;
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	9b 81       	ldd	r25, Y+3	; 0x03
    15aa:	90 93 b0 00 	sts	0x00B0, r25
    15ae:	80 93 af 00 	sts	0x00AF, r24
    15b2:	1b c0       	rjmp	.+54     	; 0x15ea <EXTINT_voidEnableINTx+0xaa>
		break;
	case EXT_INT2:
		SET_BIT(GICR_REG, GICR_INT2);
    15b4:	ab e5       	ldi	r26, 0x5B	; 91
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	eb e5       	ldi	r30, 0x5B	; 91
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 62       	ori	r24, 0x20	; 32
    15c0:	8c 93       	st	X, r24
		CallBackPtr_INT2 = copy_PtrtoFunc;
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	9b 81       	ldd	r25, Y+3	; 0x03
    15c6:	90 93 ac 00 	sts	0x00AC, r25
    15ca:	80 93 ab 00 	sts	0x00AB, r24
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <EXTINT_voidEnableINTx+0xaa>
		break;
	default:
		SET_BIT(GICR_REG, GICR_INT0);
    15d0:	ab e5       	ldi	r26, 0x5B	; 91
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	eb e5       	ldi	r30, 0x5B	; 91
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	80 64       	ori	r24, 0x40	; 64
    15dc:	8c 93       	st	X, r24
		CallBackPtr_INT0 = copy_PtrtoFunc;
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	9b 81       	ldd	r25, Y+3	; 0x03
    15e2:	90 93 ae 00 	sts	0x00AE, r25
    15e6:	80 93 ad 00 	sts	0x00AD, r24
		break;
	}
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <EXTINT_voidDisableINTx>:


// Disable External Interrupt INT0 & INT1 & INT2
void EXTINT_voidDisableINTx(u8 copyINTx) {
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <EXTINT_voidDisableINTx+0x6>
    1600:	0f 92       	push	r0
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
	switch(copyINTx) {
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3b 83       	std	Y+3, r19	; 0x03
    1610:	2a 83       	std	Y+2, r18	; 0x02
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	9b 81       	ldd	r25, Y+3	; 0x03
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	91 05       	cpc	r25, r1
    161a:	91 f0       	breq	.+36     	; 0x1640 <EXTINT_voidDisableINTx+0x46>
    161c:	2a 81       	ldd	r18, Y+2	; 0x02
    161e:	3b 81       	ldd	r19, Y+3	; 0x03
    1620:	23 30       	cpi	r18, 0x03	; 3
    1622:	31 05       	cpc	r19, r1
    1624:	a9 f0       	breq	.+42     	; 0x1650 <EXTINT_voidDisableINTx+0x56>
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	9b 81       	ldd	r25, Y+3	; 0x03
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	c1 f4       	brne	.+48     	; 0x1660 <EXTINT_voidDisableINTx+0x66>
	case EXT_INT0:
		CLR_BIT(GICR_REG, GICR_INT0);
    1630:	ab e5       	ldi	r26, 0x5B	; 91
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	eb e5       	ldi	r30, 0x5B	; 91
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8f 7b       	andi	r24, 0xBF	; 191
    163c:	8c 93       	st	X, r24
    163e:	17 c0       	rjmp	.+46     	; 0x166e <EXTINT_voidDisableINTx+0x74>
		break;
	case EXT_INT1:
		CLR_BIT(GICR_REG, GICR_INT1);
    1640:	ab e5       	ldi	r26, 0x5B	; 91
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	eb e5       	ldi	r30, 0x5B	; 91
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8f 77       	andi	r24, 0x7F	; 127
    164c:	8c 93       	st	X, r24
    164e:	0f c0       	rjmp	.+30     	; 0x166e <EXTINT_voidDisableINTx+0x74>
		break;
	case EXT_INT2:
		CLR_BIT(GICR_REG, GICR_INT2);
    1650:	ab e5       	ldi	r26, 0x5B	; 91
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	eb e5       	ldi	r30, 0x5B	; 91
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 7d       	andi	r24, 0xDF	; 223
    165c:	8c 93       	st	X, r24
    165e:	07 c0       	rjmp	.+14     	; 0x166e <EXTINT_voidDisableINTx+0x74>
		break;
	default:
		CLR_BIT(GICR_REG, GICR_INT0);
    1660:	ab e5       	ldi	r26, 0x5B	; 91
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	eb e5       	ldi	r30, 0x5B	; 91
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 7b       	andi	r24, 0xBF	; 191
    166c:	8c 93       	st	X, r24
		break;
	}
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <__vector_1>:


// Disables Compiler Optimizations & verifies callback not empty
void __vector_1(void) __attribute__((signal, used));
void __vector_1(void) {
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT0 != NULL) {
    16a4:	80 91 ad 00 	lds	r24, 0x00AD
    16a8:	90 91 ae 00 	lds	r25, 0x00AE
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	29 f0       	breq	.+10     	; 0x16ba <__vector_1+0x40>
		CallBackPtr_INT0();
    16b0:	e0 91 ad 00 	lds	r30, 0x00AD
    16b4:	f0 91 ae 00 	lds	r31, 0x00AE
    16b8:	09 95       	icall
	}
}
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_2>:

void __vector_2(void) __attribute__((signal, used));
void __vector_2(void) {
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	2f 93       	push	r18
    16ec:	3f 93       	push	r19
    16ee:	4f 93       	push	r20
    16f0:	5f 93       	push	r21
    16f2:	6f 93       	push	r22
    16f4:	7f 93       	push	r23
    16f6:	8f 93       	push	r24
    16f8:	9f 93       	push	r25
    16fa:	af 93       	push	r26
    16fc:	bf 93       	push	r27
    16fe:	ef 93       	push	r30
    1700:	ff 93       	push	r31
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT1 != NULL) {
    170a:	80 91 af 00 	lds	r24, 0x00AF
    170e:	90 91 b0 00 	lds	r25, 0x00B0
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	29 f0       	breq	.+10     	; 0x1720 <__vector_2+0x40>
		CallBackPtr_INT1();
    1716:	e0 91 af 00 	lds	r30, 0x00AF
    171a:	f0 91 b0 00 	lds	r31, 0x00B0
    171e:	09 95       	icall
	}
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <__vector_3>:

void __vector_3(void) __attribute__((signal, used));
void __vector_3(void) {
    1746:	1f 92       	push	r1
    1748:	0f 92       	push	r0
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	0f 92       	push	r0
    174e:	11 24       	eor	r1, r1
    1750:	2f 93       	push	r18
    1752:	3f 93       	push	r19
    1754:	4f 93       	push	r20
    1756:	5f 93       	push	r21
    1758:	6f 93       	push	r22
    175a:	7f 93       	push	r23
    175c:	8f 93       	push	r24
    175e:	9f 93       	push	r25
    1760:	af 93       	push	r26
    1762:	bf 93       	push	r27
    1764:	ef 93       	push	r30
    1766:	ff 93       	push	r31
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_INT2 != NULL) {
    1770:	80 91 ab 00 	lds	r24, 0x00AB
    1774:	90 91 ac 00 	lds	r25, 0x00AC
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	29 f0       	breq	.+10     	; 0x1786 <__vector_3+0x40>
		CallBackPtr_INT2();
    177c:	e0 91 ab 00 	lds	r30, 0x00AB
    1780:	f0 91 ac 00 	lds	r31, 0x00AC
    1784:	09 95       	icall
	}
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <ADC_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality
void ADC_voidInit(void) {
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	 * 5, 	ADLAR   = 0 right adjusted
	 * 4:0, 	MUX4:0  = 00000 to choose channel 0 as initializationd
	 */

	// Sets REFS1:0 to '01'
	ADMUX_REG->REFS = AVCC;
    17b4:	e7 e2       	ldi	r30, 0x27	; 39
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8f 73       	andi	r24, 0x3F	; 63
    17bc:	80 64       	ori	r24, 0x40	; 64
    17be:	80 83       	st	Z, r24
	ADMUX_REG->ADLAR = RIGHT_ADJUST;
    17c0:	e7 e2       	ldi	r30, 0x27	; 39
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 7d       	andi	r24, 0xDF	; 223
    17c8:	80 83       	st	Z, r24

	// Enables ADC & Choose Prescaler of 128
	ADCSRA_REG->ADEN = ADEN_ENABLE;
    17ca:	e6 e2       	ldi	r30, 0x26	; 38
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 68       	ori	r24, 0x80	; 128
    17d2:	80 83       	st	Z, r24
	ADCSRA_REG->ADPS = PRESCALER_128;
    17d4:	e6 e2       	ldi	r30, 0x26	; 38
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	87 60       	ori	r24, 0x07	; 7
    17dc:	80 83       	st	Z, r24
	ADCSRA_REG->ADATE = DISABLE_TRIGGER;
    17de:	e6 e2       	ldi	r30, 0x26	; 38
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 7d       	andi	r24, 0xDF	; 223
    17e6:	80 83       	st	Z, r24
	 * 2:0, ADPS2:0 = 111 to choose
	 * ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz
	 * --> ADC must operate in range 50-200Khz
	 */

}
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <ADC_voidStartConversionPolling>:


// Start ADC Conversion using Polling
u16 ADC_voidStartConversionPolling(u8 copy_u8channelSelect) {
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	0f 92       	push	r0
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	89 83       	std	Y+1, r24	; 0x01
	// Insert Channel Number in ADMUX Procedure
	ADMUX_REG->MUX = copy_u8channelSelect;
    17fa:	e7 e2       	ldi	r30, 0x27	; 39
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	8f 71       	andi	r24, 0x1F	; 31
    1802:	98 2f       	mov	r25, r24
    1804:	9f 71       	andi	r25, 0x1F	; 31
    1806:	80 81       	ld	r24, Z
    1808:	80 7e       	andi	r24, 0xE0	; 224
    180a:	89 2b       	or	r24, r25
    180c:	80 83       	st	Z, r24

	// Starts ADC Conversion
	ADCSRA_REG->ADSC = START_CONVERSION;
    180e:	e6 e2       	ldi	r30, 0x26	; 38
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	80 64       	ori	r24, 0x40	; 64
    1816:	80 83       	st	Z, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( ADCSRA_REG->ADIF == FLAG_NOTSET );
    1818:	e6 e2       	ldi	r30, 0x26	; 38
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	80 71       	andi	r24, 0x10	; 16
    1820:	88 23       	and	r24, r24
    1822:	d1 f3       	breq	.-12     	; 0x1818 <ADC_voidStartConversionPolling+0x2a>

	// Set Interrupt Flag by 1 by clearing it
	ADCSRA_REG->ADIF = FLAG_SET;
    1824:	e6 e2       	ldi	r30, 0x26	; 38
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 61       	ori	r24, 0x10	; 16
    182c:	80 83       	st	Z, r24

	// Read Data from ADCL Bits 0 -> 9
	return ADC_DATA_REG;
    182e:	e4 e2       	ldi	r30, 0x24	; 36
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
}
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <ADC_voidStartConversionISR>:

// Start ADC Conversion using Interrupts
void ADC_voidStartConversionISR(u8 copy_u8channelSelect) {
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	0f 92       	push	r0
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG->MUX = copy_u8channelSelect;
    184a:	e7 e2       	ldi	r30, 0x27	; 39
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	8f 71       	andi	r24, 0x1F	; 31
    1852:	98 2f       	mov	r25, r24
    1854:	9f 71       	andi	r25, 0x1F	; 31
    1856:	80 81       	ld	r24, Z
    1858:	80 7e       	andi	r24, 0xE0	; 224
    185a:	89 2b       	or	r24, r25
    185c:	80 83       	st	Z, r24

	// Starts ADC Conversion
	ADCSRA_REG->ADSC = START_CONVERSION;
    185e:	e6 e2       	ldi	r30, 0x26	; 38
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 64       	ori	r24, 0x40	; 64
    1866:	80 83       	st	Z, r24

	// Enables the Interrupt
	ADCSRA_REG->ADIE = ENABLE_INT;
    1868:	e6 e2       	ldi	r30, 0x26	; 38
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	88 60       	ori	r24, 0x08	; 8
    1870:	80 83       	st	Z, r24

}
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <__vector_16>:


void __vector_16(void) __attribute__((signal, used));
void __vector_16(void) {
    187a:	1f 92       	push	r1
    187c:	0f 92       	push	r0
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	0f 92       	push	r0
    1882:	11 24       	eor	r1, r1
    1884:	2f 93       	push	r18
    1886:	3f 93       	push	r19
    1888:	4f 93       	push	r20
    188a:	5f 93       	push	r21
    188c:	6f 93       	push	r22
    188e:	7f 93       	push	r23
    1890:	8f 93       	push	r24
    1892:	9f 93       	push	r25
    1894:	af 93       	push	r26
    1896:	bf 93       	push	r27
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	if(CallBackPtr_ADC != NULL) {
    18a4:	80 91 b1 00 	lds	r24, 0x00B1
    18a8:	90 91 b2 00 	lds	r25, 0x00B2
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	29 f0       	breq	.+10     	; 0x18ba <__vector_16+0x40>
		CallBackPtr_ADC();
    18b0:	e0 91 b1 00 	lds	r30, 0x00B1
    18b4:	f0 91 b2 00 	lds	r31, 0x00B2
    18b8:	09 95       	icall
	}
}
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	ff 91       	pop	r31
    18c0:	ef 91       	pop	r30
    18c2:	bf 91       	pop	r27
    18c4:	af 91       	pop	r26
    18c6:	9f 91       	pop	r25
    18c8:	8f 91       	pop	r24
    18ca:	7f 91       	pop	r23
    18cc:	6f 91       	pop	r22
    18ce:	5f 91       	pop	r21
    18d0:	4f 91       	pop	r20
    18d2:	3f 91       	pop	r19
    18d4:	2f 91       	pop	r18
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	0f 90       	pop	r0
    18dc:	1f 90       	pop	r1
    18de:	18 95       	reti

000018e0 <SEGMENT_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes the 7 Segment Display Driver
SEGMENT_Error_t SEGMENT_voidInit(u8 copy_u8portID) {
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <SEGMENT_voidInit+0x6>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 SEGMENT_Driver_Checker = 0;
    18ec:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	84 30       	cpi	r24, 0x04	; 4
    18f2:	18 f0       	brcs	.+6      	; 0x18fa <SEGMENT_voidInit+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    18f4:	82 e0       	ldi	r24, 0x02	; 2
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	1f c0       	rjmp	.+62     	; 0x1938 <SEGMENT_voidInit+0x58>
#elif (DIGITS_USED == 3)
		GPIO_voidSetPinDirection(COM_3_PORT, COM_3, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#elif (DIGITS_USED == 2)
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	62 e0       	ldi	r22, 0x02	; 2
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	63 e0       	ldi	r22, 0x03	; 3
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(COM_2_PORT, COM_2, PIN_OUTPUT);
		GPIO_voidSetPinDirection(COM_1_PORT, COM_1, PIN_OUTPUT);
#endif

		/* These pins are for the BCD on the FARES Kit */
		GPIO_voidSetPinDirection(copy_u8portID, BCD_1, PIN_OUTPUT);
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_2, PIN_OUTPUT);
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_4, PIN_OUTPUT);
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	62 e0       	ldi	r22, 0x02	; 2
    1926:	41 e0       	ldi	r20, 0x01	; 1
    1928:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(copy_u8portID, BCD_8, PIN_OUTPUT);
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	64 e0       	ldi	r22, 0x04	; 4
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>

		SEGMENT_Driver_Checker = SEGMENT_OK;
    1936:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1938:	89 81       	ldd	r24, Y+1	; 0x01
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <SEGMENT_voidDisplay>:


// Displays a value on the 7 Segment Display
SEGMENT_Error_t SEGMENT_voidDisplay(u8 copy_u8portID, u8 copy_u8pinValue) {
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <SEGMENT_voidDisplay+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <SEGMENT_voidDisplay+0x8>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	8a 83       	std	Y+2, r24	; 0x02
    1954:	6b 83       	std	Y+3, r22	; 0x03
	u8 SEGMENT_Driver_Checker = 0;
    1956:	19 82       	std	Y+1, r1	; 0x01

	if((copy_u8portID >= NUM_OF_PORTS)) {
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	18 f0       	brcs	.+6      	; 0x1964 <SEGMENT_voidDisplay+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	24 c1       	rjmp	.+584    	; 0x1bac <SEGMENT_voidDisplay+0x268>
	}
	else if((copy_u8pinValue < 0 && copy_u8pinValue > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(copy_u8pinValue) {
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	3d 83       	std	Y+5, r19	; 0x05
    196c:	2c 83       	std	Y+4, r18	; 0x04
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	9d 81       	ldd	r25, Y+5	; 0x05
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	91 05       	cpc	r25, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <SEGMENT_voidDisplay+0x36>
    1978:	9b c0       	rjmp	.+310    	; 0x1ab0 <SEGMENT_voidDisplay+0x16c>
    197a:	2c 81       	ldd	r18, Y+4	; 0x04
    197c:	3d 81       	ldd	r19, Y+5	; 0x05
    197e:	25 30       	cpi	r18, 0x05	; 5
    1980:	31 05       	cpc	r19, r1
    1982:	ec f4       	brge	.+58     	; 0x19be <SEGMENT_voidDisplay+0x7a>
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	91 05       	cpc	r25, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <SEGMENT_voidDisplay+0x4c>
    198e:	51 c0       	rjmp	.+162    	; 0x1a32 <SEGMENT_voidDisplay+0xee>
    1990:	2c 81       	ldd	r18, Y+4	; 0x04
    1992:	3d 81       	ldd	r19, Y+5	; 0x05
    1994:	22 30       	cpi	r18, 0x02	; 2
    1996:	31 05       	cpc	r19, r1
    1998:	2c f4       	brge	.+10     	; 0x19a4 <SEGMENT_voidDisplay+0x60>
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	99 f1       	breq	.+102    	; 0x1a08 <SEGMENT_voidDisplay+0xc4>
    19a2:	03 c1       	rjmp	.+518    	; 0x1baa <SEGMENT_voidDisplay+0x266>
    19a4:	2c 81       	ldd	r18, Y+4	; 0x04
    19a6:	3d 81       	ldd	r19, Y+5	; 0x05
    19a8:	22 30       	cpi	r18, 0x02	; 2
    19aa:	31 05       	cpc	r19, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <SEGMENT_voidDisplay+0x6c>
    19ae:	56 c0       	rjmp	.+172    	; 0x1a5c <SEGMENT_voidDisplay+0x118>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	09 f4       	brne	.+2      	; 0x19bc <SEGMENT_voidDisplay+0x78>
    19ba:	65 c0       	rjmp	.+202    	; 0x1a86 <SEGMENT_voidDisplay+0x142>
    19bc:	f6 c0       	rjmp	.+492    	; 0x1baa <SEGMENT_voidDisplay+0x266>
    19be:	2c 81       	ldd	r18, Y+4	; 0x04
    19c0:	3d 81       	ldd	r19, Y+5	; 0x05
    19c2:	27 30       	cpi	r18, 0x07	; 7
    19c4:	31 05       	cpc	r19, r1
    19c6:	09 f4       	brne	.+2      	; 0x19ca <SEGMENT_voidDisplay+0x86>
    19c8:	b2 c0       	rjmp	.+356    	; 0x1b2e <SEGMENT_voidDisplay+0x1ea>
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	9d 81       	ldd	r25, Y+5	; 0x05
    19ce:	88 30       	cpi	r24, 0x08	; 8
    19d0:	91 05       	cpc	r25, r1
    19d2:	6c f4       	brge	.+26     	; 0x19ee <SEGMENT_voidDisplay+0xaa>
    19d4:	2c 81       	ldd	r18, Y+4	; 0x04
    19d6:	3d 81       	ldd	r19, Y+5	; 0x05
    19d8:	25 30       	cpi	r18, 0x05	; 5
    19da:	31 05       	cpc	r19, r1
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <SEGMENT_voidDisplay+0x9c>
    19de:	7d c0       	rjmp	.+250    	; 0x1ada <SEGMENT_voidDisplay+0x196>
    19e0:	8c 81       	ldd	r24, Y+4	; 0x04
    19e2:	9d 81       	ldd	r25, Y+5	; 0x05
    19e4:	86 30       	cpi	r24, 0x06	; 6
    19e6:	91 05       	cpc	r25, r1
    19e8:	09 f4       	brne	.+2      	; 0x19ec <SEGMENT_voidDisplay+0xa8>
    19ea:	8c c0       	rjmp	.+280    	; 0x1b04 <SEGMENT_voidDisplay+0x1c0>
    19ec:	de c0       	rjmp	.+444    	; 0x1baa <SEGMENT_voidDisplay+0x266>
    19ee:	2c 81       	ldd	r18, Y+4	; 0x04
    19f0:	3d 81       	ldd	r19, Y+5	; 0x05
    19f2:	28 30       	cpi	r18, 0x08	; 8
    19f4:	31 05       	cpc	r19, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <SEGMENT_voidDisplay+0xb6>
    19f8:	af c0       	rjmp	.+350    	; 0x1b58 <SEGMENT_voidDisplay+0x214>
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	89 30       	cpi	r24, 0x09	; 9
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <SEGMENT_voidDisplay+0xc2>
    1a04:	be c0       	rjmp	.+380    	; 0x1b82 <SEGMENT_voidDisplay+0x23e>
    1a06:	d1 c0       	rjmp	.+418    	; 0x1baa <SEGMENT_voidDisplay+0x266>
			case 0:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	62 e0       	ldi	r22, 0x02	; 2
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	64 e0       	ldi	r22, 0x04	; 4
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1a30:	bc c0       	rjmp	.+376    	; 0x1baa <SEGMENT_voidDisplay+0x266>
				break;
			case 1:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	62 e0       	ldi	r22, 0x02	; 2
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	64 e0       	ldi	r22, 0x04	; 4
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1a5a:	a7 c0       	rjmp	.+334    	; 0x1baa <SEGMENT_voidDisplay+0x266>
				break;
			case 2:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	62 e0       	ldi	r22, 0x02	; 2
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	64 e0       	ldi	r22, 0x04	; 4
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1a84:	92 c0       	rjmp	.+292    	; 0x1baa <SEGMENT_voidDisplay+0x266>
				break;
			case 3:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	64 e0       	ldi	r22, 0x04	; 4
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1aae:	7d c0       	rjmp	.+250    	; 0x1baa <SEGMENT_voidDisplay+0x266>
				break;
			case 4:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	62 e0       	ldi	r22, 0x02	; 2
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	64 e0       	ldi	r22, 0x04	; 4
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1ad8:	68 c0       	rjmp	.+208    	; 0x1baa <SEGMENT_voidDisplay+0x266>
				break;
			case 5:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	64 e0       	ldi	r22, 0x04	; 4
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1b02:	53 c0       	rjmp	.+166    	; 0x1baa <SEGMENT_voidDisplay+0x266>
				break;
			case 6:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	64 e0       	ldi	r22, 0x04	; 4
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1b2c:	3e c0       	rjmp	.+124    	; 0x1baa <SEGMENT_voidDisplay+0x266>
				break;
			case 7:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_HIGH);
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_HIGH);
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_LOW);
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	64 e0       	ldi	r22, 0x04	; 4
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1b56:	29 c0       	rjmp	.+82     	; 0x1baa <SEGMENT_voidDisplay+0x266>
				break;
			case 8:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_LOW);
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	64 e0       	ldi	r22, 0x04	; 4
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <SEGMENT_voidDisplay+0x266>
				break;
			case 9:
				GPIO_voidSetPinValue(copy_u8portID, BCD_1, LOGIC_HIGH);
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_2, LOGIC_LOW);
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	61 e0       	ldi	r22, 0x01	; 1
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_4, LOGIC_LOW);
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	62 e0       	ldi	r22, 0x02	; 2
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				GPIO_voidSetPinValue(copy_u8portID, BCD_8, LOGIC_HIGH);
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	64 e0       	ldi	r22, 0x04	; 4
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    1baa:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <LM35_u8getTemperature>:
/*******************************************************************************
 *                              						Functions Declarations	                     	   		  		   *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality
u8 LM35_u8getTemperature(void) {
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	2f 97       	sbiw	r28, 0x0f	; 15
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
	u8 temperatureValue = 0;
    1bd2:	1f 86       	std	Y+15, r1	; 0x0f

	// Read ADC Channel that the LM35 is configured to
	ADC_voidStartConversionPolling(LM35_CHANNEL_ID);
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <ADC_voidStartConversionPolling>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 ea       	ldi	r26, 0xA0	; 160
    1be0:	b0 e4       	ldi	r27, 0x40	; 64
    1be2:	8b 87       	std	Y+11, r24	; 0x0b
    1be4:	9c 87       	std	Y+12, r25	; 0x0c
    1be6:	ad 87       	std	Y+13, r26	; 0x0d
    1be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	53 e4       	ldi	r21, 0x43	; 67
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8f 83       	std	Y+7, r24	; 0x07
    1c04:	98 87       	std	Y+8, r25	; 0x08
    1c06:	a9 87       	std	Y+9, r26	; 0x09
    1c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LM35_u8getTemperature+0x6e>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LM35_u8getTemperature+0xec>
	else if (__tmp > 65535)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LM35_u8getTemperature+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LM35_u8getTemperature+0xce>
    1c6e:	89 e1       	ldi	r24, 0x19	; 25
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LM35_u8getTemperature+0xbc>
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LM35_u8getTemperature+0xb0>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LM35_u8getTemperature+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LM35_u8getTemperature+0xf8>
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01

	// Add a small Delay for the global ADC result is set with Interrupt
	_delay_ms(5);

	// Calculate the temperature for the ADC
	temperatureValue = (((u32)LM35_MAX_TEMP * ADC_REF_VOLT) / (ADC_MAX_VAL * LM35_MAX_VOLT));
    1cbe:	1f 86       	std	Y+15, r1	; 0x0f

	return temperatureValue;
    1cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1cc2:	2f 96       	adiw	r28, 0x0f	; 15
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <LED_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes the LED Driver
LED_Error_t LED_voidInit(u8 copy_u8portID, u8 copy_u8pinID) {
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <LED_voidInit+0x6>
    1cda:	0f 92       	push	r0
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	8a 83       	std	Y+2, r24	; 0x02
    1ce2:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    1ce4:	19 82       	std	Y+1, r1	; 0x01
	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	88 30       	cpi	r24, 0x08	; 8
    1cea:	18 f0       	brcs	.+6      	; 0x1cf2 <LED_voidInit+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	0c c0       	rjmp	.+24     	; 0x1d0a <LED_voidInit+0x36>
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	84 30       	cpi	r24, 0x04	; 4
    1cf6:	18 f0       	brcs	.+6      	; 0x1cfe <LED_voidInit+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	06 c0       	rjmp	.+12     	; 0x1d0a <LED_voidInit+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_voidSetPinDirection(copy_u8portID, copy_u8pinID, PIN_OUTPUT);
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	6b 81       	ldd	r22, Y+3	; 0x03
    1d02:	41 e0       	ldi	r20, 0x01	; 1
    1d04:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		LED_Driver_Checker = LED_OK;
    1d08:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <LED_voidOn>:

// Turns on a LED
LED_Error_t LED_voidOn(u8 copy_u8portID, u8 copy_u8pinID) {
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <LED_voidOn+0x6>
    1d1e:	0f 92       	push	r0
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	8a 83       	std	Y+2, r24	; 0x02
    1d26:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    1d28:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	88 30       	cpi	r24, 0x08	; 8
    1d2e:	18 f0       	brcs	.+6      	; 0x1d36 <LED_voidOn+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	0c c0       	rjmp	.+24     	; 0x1d4e <LED_voidOn+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	84 30       	cpi	r24, 0x04	; 4
    1d3a:	18 f0       	brcs	.+6      	; 0x1d42 <LED_voidOn+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1d3c:	82 e0       	ldi	r24, 0x02	; 2
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <LED_voidOn+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	6b 81       	ldd	r22, Y+3	; 0x03
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    1d4c:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <LED_voidOff>:

// Turns off a LED
LED_Error_t LED_voidOff(u8 copy_u8portID, u8 copy_u8pinID) {
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <LED_voidOff+0x6>
    1d62:	0f 92       	push	r0
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	8a 83       	std	Y+2, r24	; 0x02
    1d6a:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    1d6c:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	88 30       	cpi	r24, 0x08	; 8
    1d72:	18 f0       	brcs	.+6      	; 0x1d7a <LED_voidOff+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	0c c0       	rjmp	.+24     	; 0x1d92 <LED_voidOff+0x36>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	84 30       	cpi	r24, 0x04	; 4
    1d7e:	18 f0       	brcs	.+6      	; 0x1d86 <LED_voidOff+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	06 c0       	rjmp	.+12     	; 0x1d92 <LED_voidOff+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_voidSetPinValue(copy_u8portID, copy_u8pinID, LOGIC_LOW);
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	6b 81       	ldd	r22, Y+3	; 0x03
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			#endif
			LED_Driver_Checker = LED_OK;
    1d90:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <LED_voidToggle>:

// Toggles a LED
LED_Error_t LED_voidToggle(u8 copy_u8portID, u8 copy_u8pinID) {
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <LED_voidToggle+0x6>
    1da6:	0f 92       	push	r0
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	8a 83       	std	Y+2, r24	; 0x02
    1dae:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Driver_Checker = 0;
    1db0:	19 82       	std	Y+1, r1	; 0x01
		if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	88 30       	cpi	r24, 0x08	; 8
    1db6:	18 f0       	brcs	.+6      	; 0x1dbe <LED_voidToggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	0b c0       	rjmp	.+22     	; 0x1dd4 <LED_voidToggle+0x34>
		}
		else if((copy_u8portID >= NUM_OF_PORTS)) {
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	18 f0       	brcs	.+6      	; 0x1dca <LED_voidToggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	05 c0       	rjmp	.+10     	; 0x1dd4 <LED_voidToggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_voidTogglePin(copy_u8portID, copy_u8pinID);
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	6b 81       	ldd	r22, Y+3	; 0x03
    1dce:	0e 94 3d 08 	call	0x107a	; 0x107a <GPIO_voidTogglePin>
			LED_Driver_Checker = LED_OK;
    1dd2:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <LCD_voidInit>:
/*******************************************************************************
 *                              						Functions Declarations                     	      				  *
 *******************************************************************************/

// Initializes and enables the LCD Module to start functionality
void LCD_voidInit(void) {
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	e8 97       	sbiw	r28, 0x38	; 56
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	63 e0       	ldi	r22, 0x03	; 3
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>

	// Initialize Enable Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	62 e0       	ldi	r22, 0x02	; 2
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a0 ea       	ldi	r26, 0xA0	; 160
    1e10:	b1 e4       	ldi	r27, 0x41	; 65
    1e12:	8d ab       	std	Y+53, r24	; 0x35
    1e14:	9e ab       	std	Y+54, r25	; 0x36
    1e16:	af ab       	std	Y+55, r26	; 0x37
    1e18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1e20:	98 ad       	ldd	r25, Y+56	; 0x38
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	4a e7       	ldi	r20, 0x7A	; 122
    1e28:	53 e4       	ldi	r21, 0x43	; 67
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	89 ab       	std	Y+49, r24	; 0x31
    1e34:	9a ab       	std	Y+50, r25	; 0x32
    1e36:	ab ab       	std	Y+51, r26	; 0x33
    1e38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e40:	9c a9       	ldd	r25, Y+52	; 0x34
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	5f e3       	ldi	r21, 0x3F	; 63
    1e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <LCD_voidInit+0x7a>
		__ticks = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	98 ab       	std	Y+48, r25	; 0x30
    1e58:	8f a7       	std	Y+47, r24	; 0x2f
    1e5a:	3f c0       	rjmp	.+126    	; 0x1eda <LCD_voidInit+0xf8>
	else if (__tmp > 65535)
    1e5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e60:	8b a9       	ldd	r24, Y+51	; 0x33
    1e62:	9c a9       	ldd	r25, Y+52	; 0x34
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	4c f5       	brge	.+82     	; 0x1ec6 <LCD_voidInit+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e74:	6d a9       	ldd	r22, Y+53	; 0x35
    1e76:	7e a9       	ldd	r23, Y+54	; 0x36
    1e78:	8f a9       	ldd	r24, Y+55	; 0x37
    1e7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	98 ab       	std	Y+48, r25	; 0x30
    1e9a:	8f a7       	std	Y+47, r24	; 0x2f
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <LCD_voidInit+0xda>
    1e9e:	89 e1       	ldi	r24, 0x19	; 25
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9e a7       	std	Y+46, r25	; 0x2e
    1ea4:	8d a7       	std	Y+45, r24	; 0x2d
    1ea6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ea8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <LCD_voidInit+0xc8>
    1eae:	9e a7       	std	Y+46, r25	; 0x2e
    1eb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	98 ab       	std	Y+48, r25	; 0x30
    1eba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	69 f7       	brne	.-38     	; 0x1e9e <LCD_voidInit+0xbc>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <LCD_voidInit+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eca:	8b a9       	ldd	r24, Y+51	; 0x33
    1ecc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	98 ab       	std	Y+48, r25	; 0x30
    1ed8:	8f a7       	std	Y+47, r24	; 0x2f
    1eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1edc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ede:	9c a7       	std	Y+44, r25	; 0x2c
    1ee0:	8b a7       	std	Y+43, r24	; 0x2b
    1ee2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_voidInit+0x104>
    1eea:	9c a7       	std	Y+44, r25	; 0x2c
    1eec:	8b a7       	std	Y+43, r24	; 0x2b
	if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_voidSetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
		LCD_voidSendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}
	else {
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	62 e0       	ldi	r22, 0x02	; 2
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	64 e0       	ldi	r22, 0x04	; 4
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>


		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT1);
    1f16:	83 e3       	ldi	r24, 0x33	; 51
    1f18:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT2);
    1f1c:	82 e3       	ldi	r24, 0x32	; 50
    1f1e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_5x7_DOTS);
    1f22:	88 e2       	ldi	r24, 0x28	; 40
    1f24:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_voidSendCommand>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 e0       	ldi	r26, 0x00	; 0
    1f2e:	b0 e4       	ldi	r27, 0x40	; 64
    1f30:	8f a3       	std	Y+39, r24	; 0x27
    1f32:	98 a7       	std	Y+40, r25	; 0x28
    1f34:	a9 a7       	std	Y+41, r26	; 0x29
    1f36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	6f a1       	ldd	r22, Y+39	; 0x27
    1f3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a e7       	ldi	r20, 0x7A	; 122
    1f46:	53 e4       	ldi	r21, 0x43	; 67
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8b a3       	std	Y+35, r24	; 0x23
    1f52:	9c a3       	std	Y+36, r25	; 0x24
    1f54:	ad a3       	std	Y+37, r26	; 0x25
    1f56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f58:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <LCD_voidInit+0x198>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <LCD_voidInit+0x216>
	else if (__tmp > 65535)
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <LCD_voidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	6f a1       	ldd	r22, Y+39	; 0x27
    1f94:	78 a5       	ldd	r23, Y+40	; 0x28
    1f96:	89 a5       	ldd	r24, Y+41	; 0x29
    1f98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <LCD_voidInit+0x1f8>
    1fbc:	89 e1       	ldi	r24, 0x19	; 25
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	98 a3       	std	Y+32, r25	; 0x20
    1fc2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc6:	98 a1       	ldd	r25, Y+32	; 0x20
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_voidInit+0x1e6>
    1fcc:	98 a3       	std	Y+32, r25	; 0x20
    1fce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	9a a3       	std	Y+34, r25	; 0x22
    1fd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	89 a1       	ldd	r24, Y+33	; 0x21
    1fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <LCD_voidInit+0x1da>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <LCD_voidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fea:	9e a1       	ldd	r25, Y+38	; 0x26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9a a3       	std	Y+34, r25	; 0x22
    1ff6:	89 a3       	std	Y+33, r24	; 0x21
    1ff8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffa:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffe:	8d 8f       	std	Y+29, r24	; 0x1d
    2000:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2002:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_voidInit+0x222>
    2008:	9e 8f       	std	Y+30, r25	; 0x1e
    200a:	8d 8f       	std	Y+29, r24	; 0x1d
		//LCD_voidSendCommand(LCD_2LINES_FOUR_BIT);
		_delay_ms(2);
	}

	LCD_voidSendCommand(LCD_CURSOR_OFF);
    200c:	8c e0       	ldi	r24, 0x0C	; 12
    200e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_voidSendCommand>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e4       	ldi	r27, 0x40	; 64
    201a:	89 8f       	std	Y+25, r24	; 0x19
    201c:	9a 8f       	std	Y+26, r25	; 0x1a
    201e:	ab 8f       	std	Y+27, r26	; 0x1b
    2020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	69 8d       	ldd	r22, Y+25	; 0x19
    2024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a e7       	ldi	r20, 0x7A	; 122
    2030:	53 e4       	ldi	r21, 0x43	; 67
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8d 8b       	std	Y+21, r24	; 0x15
    203c:	9e 8b       	std	Y+22, r25	; 0x16
    203e:	af 8b       	std	Y+23, r26	; 0x17
    2040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <LCD_voidInit+0x282>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <LCD_voidInit+0x300>
	else if (__tmp > 65535)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <LCD_voidInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <LCD_voidInit+0x2e2>
    20a6:	89 e1       	ldi	r24, 0x19	; 25
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	9a 8b       	std	Y+18, r25	; 0x12
    20ac:	89 8b       	std	Y+17, r24	; 0x11
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	9a 89       	ldd	r25, Y+18	; 0x12
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <LCD_voidInit+0x2d0>
    20b6:	9a 8b       	std	Y+18, r25	; 0x12
    20b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8b 89       	ldd	r24, Y+19	; 0x13
    20c6:	9c 89       	ldd	r25, Y+20	; 0x14
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <LCD_voidInit+0x2c4>
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <LCD_voidInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	8b 89       	ldd	r24, Y+19	; 0x13
    20e4:	9c 89       	ldd	r25, Y+20	; 0x14
    20e6:	98 8b       	std	Y+16, r25	; 0x10
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	98 89       	ldd	r25, Y+16	; 0x10
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_voidInit+0x30c>
    20f2:	98 8b       	std	Y+16, r25	; 0x10
    20f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_voidSendCommand>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e0       	ldi	r26, 0x00	; 0
    2102:	b0 e4       	ldi	r27, 0x40	; 64
    2104:	8b 87       	std	Y+11, r24	; 0x0b
    2106:	9c 87       	std	Y+12, r25	; 0x0c
    2108:	ad 87       	std	Y+13, r26	; 0x0d
    210a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210c:	6b 85       	ldd	r22, Y+11	; 0x0b
    210e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2110:	8d 85       	ldd	r24, Y+13	; 0x0d
    2112:	9e 85       	ldd	r25, Y+14	; 0x0e
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a e7       	ldi	r20, 0x7A	; 122
    211a:	53 e4       	ldi	r21, 0x43	; 67
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	8f 83       	std	Y+7, r24	; 0x07
    2126:	98 87       	std	Y+8, r25	; 0x08
    2128:	a9 87       	std	Y+9, r26	; 0x09
    212a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    212c:	6f 81       	ldd	r22, Y+7	; 0x07
    212e:	78 85       	ldd	r23, Y+8	; 0x08
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	2c f4       	brge	.+10     	; 0x214e <LCD_voidInit+0x36c>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	3f c0       	rjmp	.+126    	; 0x21cc <LCD_voidInit+0x3ea>
	else if (__tmp > 65535)
    214e:	6f 81       	ldd	r22, Y+7	; 0x07
    2150:	78 85       	ldd	r23, Y+8	; 0x08
    2152:	89 85       	ldd	r24, Y+9	; 0x09
    2154:	9a 85       	ldd	r25, Y+10	; 0x0a
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	57 e4       	ldi	r21, 0x47	; 71
    215e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2162:	18 16       	cp	r1, r24
    2164:	4c f5       	brge	.+82     	; 0x21b8 <LCD_voidInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	6b 85       	ldd	r22, Y+11	; 0x0b
    2168:	7c 85       	ldd	r23, Y+12	; 0x0c
    216a:	8d 85       	ldd	r24, Y+13	; 0x0d
    216c:	9e 85       	ldd	r25, Y+14	; 0x0e
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e2       	ldi	r20, 0x20	; 32
    2174:	51 e4       	ldi	r21, 0x41	; 65
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	0f c0       	rjmp	.+30     	; 0x21ae <LCD_voidInit+0x3cc>
    2190:	89 e1       	ldi	r24, 0x19	; 25
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9c 83       	std	Y+4, r25	; 0x04
    2196:	8b 83       	std	Y+3, r24	; 0x03
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_voidInit+0x3ba>
    21a0:	9c 83       	std	Y+4, r25	; 0x04
    21a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	9e 83       	std	Y+6, r25	; 0x06
    21ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	69 f7       	brne	.-38     	; 0x2190 <LCD_voidInit+0x3ae>
    21b6:	14 c0       	rjmp	.+40     	; 0x21e0 <LCD_voidInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ba:	78 85       	ldd	r23, Y+8	; 0x08
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	9a 81       	ldd	r25, Y+2	; 0x02
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_voidInit+0x3f6>
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	//LCD_voidSendCommand(LCD_ENTRY_MODE);

}
    21e0:	e8 96       	adiw	r28, 0x38	; 56
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <LCD_voidSendCommand>:


// Sends a command to the LCD
void LCD_voidSendCommand(u8 copy_u8Command) {
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	c3 56       	subi	r28, 0x63	; 99
    2200:	d0 40       	sbci	r29, 0x00	; 0
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	fe 01       	movw	r30, r28
    220e:	ed 59       	subi	r30, 0x9D	; 157
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	63 e0       	ldi	r22, 0x03	; 3
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    221e:	fe 01       	movw	r30, r28
    2220:	e1 5a       	subi	r30, 0xA1	; 161
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a0 e8       	ldi	r26, 0x80	; 128
    222a:	bf e3       	ldi	r27, 0x3F	; 63
    222c:	80 83       	st	Z, r24
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	a2 83       	std	Z+2, r26	; 0x02
    2232:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2234:	8e 01       	movw	r16, r28
    2236:	05 5a       	subi	r16, 0xA5	; 165
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	fe 01       	movw	r30, r28
    223c:	e1 5a       	subi	r30, 0xA1	; 161
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4a e7       	ldi	r20, 0x7A	; 122
    224e:	53 e4       	ldi	r21, 0x43	; 67
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	f8 01       	movw	r30, r16
    225a:	80 83       	st	Z, r24
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	a2 83       	std	Z+2, r26	; 0x02
    2260:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2262:	fe 01       	movw	r30, r28
    2264:	e5 5a       	subi	r30, 0xA5	; 165
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	44 f4       	brge	.+16     	; 0x2290 <LCD_voidSendCommand+0x9e>
		__ticks = 1;
    2280:	fe 01       	movw	r30, r28
    2282:	e7 5a       	subi	r30, 0xA7	; 167
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
    228e:	64 c0       	rjmp	.+200    	; 0x2358 <LCD_voidSendCommand+0x166>
	else if (__tmp > 65535)
    2290:	fe 01       	movw	r30, r28
    2292:	e5 5a       	subi	r30, 0xA5	; 165
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	60 81       	ld	r22, Z
    2298:	71 81       	ldd	r23, Z+1	; 0x01
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	0c f0       	brlt	.+2      	; 0x22b0 <LCD_voidSendCommand+0xbe>
    22ae:	43 c0       	rjmp	.+134    	; 0x2336 <LCD_voidSendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b0:	fe 01       	movw	r30, r28
    22b2:	e1 5a       	subi	r30, 0xA1	; 161
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8e 01       	movw	r16, r28
    22d0:	07 5a       	subi	r16, 0xA7	; 167
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	f8 01       	movw	r30, r16
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	1f c0       	rjmp	.+62     	; 0x2326 <LCD_voidSendCommand+0x134>
    22e8:	fe 01       	movw	r30, r28
    22ea:	e9 5a       	subi	r30, 0xA9	; 169
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	89 e1       	ldi	r24, 0x19	; 25
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	fe 01       	movw	r30, r28
    22f8:	e9 5a       	subi	r30, 0xA9	; 169
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <LCD_voidSendCommand+0x10e>
    2304:	fe 01       	movw	r30, r28
    2306:	e9 5a       	subi	r30, 0xA9	; 169
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	de 01       	movw	r26, r28
    2310:	a7 5a       	subi	r26, 0xA7	; 167
    2312:	bf 4f       	sbci	r27, 0xFF	; 255
    2314:	fe 01       	movw	r30, r28
    2316:	e7 5a       	subi	r30, 0xA7	; 167
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	11 96       	adiw	r26, 0x01	; 1
    2322:	9c 93       	st	X, r25
    2324:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	fe 01       	movw	r30, r28
    2328:	e7 5a       	subi	r30, 0xA7	; 167
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	d1 f6       	brne	.-76     	; 0x22e8 <LCD_voidSendCommand+0xf6>
    2334:	27 c0       	rjmp	.+78     	; 0x2384 <LCD_voidSendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2336:	8e 01       	movw	r16, r28
    2338:	07 5a       	subi	r16, 0xA7	; 167
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	fe 01       	movw	r30, r28
    233e:	e5 5a       	subi	r30, 0xA5	; 165
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	f8 01       	movw	r30, r16
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	80 83       	st	Z, r24
    2358:	de 01       	movw	r26, r28
    235a:	ab 5a       	subi	r26, 0xAB	; 171
    235c:	bf 4f       	sbci	r27, 0xFF	; 255
    235e:	fe 01       	movw	r30, r28
    2360:	e7 5a       	subi	r30, 0xA7	; 167
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	80 81       	ld	r24, Z
    2366:	91 81       	ldd	r25, Z+1	; 0x01
    2368:	8d 93       	st	X+, r24
    236a:	9c 93       	st	X, r25
    236c:	fe 01       	movw	r30, r28
    236e:	eb 5a       	subi	r30, 0xAB	; 171
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_voidSendCommand+0x184>
    237a:	fe 01       	movw	r30, r28
    237c:	eb 5a       	subi	r30, 0xAB	; 171
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	80 83       	st	Z, r24
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	62 e0       	ldi	r22, 0x02	; 2
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    238e:	fe 01       	movw	r30, r28
    2390:	ef 5a       	subi	r30, 0xAF	; 175
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e8       	ldi	r26, 0x80	; 128
    239a:	bf e3       	ldi	r27, 0x3F	; 63
    239c:	80 83       	st	Z, r24
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	a2 83       	std	Z+2, r26	; 0x02
    23a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	8e 01       	movw	r16, r28
    23a6:	03 5b       	subi	r16, 0xB3	; 179
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	fe 01       	movw	r30, r28
    23ac:	ef 5a       	subi	r30, 0xAF	; 175
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	60 81       	ld	r22, Z
    23b2:	71 81       	ldd	r23, Z+1	; 0x01
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a e7       	ldi	r20, 0x7A	; 122
    23be:	53 e4       	ldi	r21, 0x43	; 67
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	f8 01       	movw	r30, r16
    23ca:	80 83       	st	Z, r24
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	a2 83       	std	Z+2, r26	; 0x02
    23d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23d2:	fe 01       	movw	r30, r28
    23d4:	e3 5b       	subi	r30, 0xB3	; 179
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	60 81       	ld	r22, Z
    23da:	71 81       	ldd	r23, Z+1	; 0x01
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	44 f4       	brge	.+16     	; 0x2400 <LCD_voidSendCommand+0x20e>
		__ticks = 1;
    23f0:	fe 01       	movw	r30, r28
    23f2:	e5 5b       	subi	r30, 0xB5	; 181
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
    23fe:	64 c0       	rjmp	.+200    	; 0x24c8 <LCD_voidSendCommand+0x2d6>
	else if (__tmp > 65535)
    2400:	fe 01       	movw	r30, r28
    2402:	e3 5b       	subi	r30, 0xB3	; 179
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	57 e4       	ldi	r21, 0x47	; 71
    2416:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241a:	18 16       	cp	r1, r24
    241c:	0c f0       	brlt	.+2      	; 0x2420 <LCD_voidSendCommand+0x22e>
    241e:	43 c0       	rjmp	.+134    	; 0x24a6 <LCD_voidSendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2420:	fe 01       	movw	r30, r28
    2422:	ef 5a       	subi	r30, 0xAF	; 175
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8e 01       	movw	r16, r28
    2440:	05 5b       	subi	r16, 0xB5	; 181
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	f8 01       	movw	r30, r16
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
    2456:	1f c0       	rjmp	.+62     	; 0x2496 <LCD_voidSendCommand+0x2a4>
    2458:	fe 01       	movw	r30, r28
    245a:	e7 5b       	subi	r30, 0xB7	; 183
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	89 e1       	ldi	r24, 0x19	; 25
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	fe 01       	movw	r30, r28
    2468:	e7 5b       	subi	r30, 0xB7	; 183
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_voidSendCommand+0x27e>
    2474:	fe 01       	movw	r30, r28
    2476:	e7 5b       	subi	r30, 0xB7	; 183
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247e:	de 01       	movw	r26, r28
    2480:	a5 5b       	subi	r26, 0xB5	; 181
    2482:	bf 4f       	sbci	r27, 0xFF	; 255
    2484:	fe 01       	movw	r30, r28
    2486:	e5 5b       	subi	r30, 0xB5	; 181
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	11 96       	adiw	r26, 0x01	; 1
    2492:	9c 93       	st	X, r25
    2494:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2496:	fe 01       	movw	r30, r28
    2498:	e5 5b       	subi	r30, 0xB5	; 181
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	91 81       	ldd	r25, Z+1	; 0x01
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	d1 f6       	brne	.-76     	; 0x2458 <LCD_voidSendCommand+0x266>
    24a4:	27 c0       	rjmp	.+78     	; 0x24f4 <LCD_voidSendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	8e 01       	movw	r16, r28
    24a8:	05 5b       	subi	r16, 0xB5	; 181
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	e3 5b       	subi	r30, 0xB3	; 179
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	f8 01       	movw	r30, r16
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
    24c8:	de 01       	movw	r26, r28
    24ca:	a9 5b       	subi	r26, 0xB9	; 185
    24cc:	bf 4f       	sbci	r27, 0xFF	; 255
    24ce:	fe 01       	movw	r30, r28
    24d0:	e5 5b       	subi	r30, 0xB5	; 181
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	8d 93       	st	X+, r24
    24da:	9c 93       	st	X, r25
    24dc:	fe 01       	movw	r30, r28
    24de:	e9 5b       	subi	r30, 0xB9	; 185
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	91 81       	ldd	r25, Z+1	; 0x01
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_voidSendCommand+0x2f4>
    24ea:	fe 01       	movw	r30, r28
    24ec:	e9 5b       	subi	r30, 0xB9	; 185
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
    24f4:	fe 01       	movw	r30, r28
    24f6:	ed 59       	subi	r30, 0x9D	; 157
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	82 95       	swap	r24
    24fe:	8f 70       	andi	r24, 0x0F	; 15
    2500:	98 2f       	mov	r25, r24
    2502:	91 70       	andi	r25, 0x01	; 1
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	49 2f       	mov	r20, r25
    250a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
    250e:	fe 01       	movw	r30, r28
    2510:	ed 59       	subi	r30, 0x9D	; 157
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	80 81       	ld	r24, Z
    2516:	82 95       	swap	r24
    2518:	86 95       	lsr	r24
    251a:	87 70       	andi	r24, 0x07	; 7
    251c:	98 2f       	mov	r25, r24
    251e:	91 70       	andi	r25, 0x01	; 1
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	61 e0       	ldi	r22, 0x01	; 1
    2524:	49 2f       	mov	r20, r25
    2526:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
    252a:	fe 01       	movw	r30, r28
    252c:	ed 59       	subi	r30, 0x9D	; 157
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	82 95       	swap	r24
    2534:	86 95       	lsr	r24
    2536:	86 95       	lsr	r24
    2538:	83 70       	andi	r24, 0x03	; 3
    253a:	98 2f       	mov	r25, r24
    253c:	91 70       	andi	r25, 0x01	; 1
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	62 e0       	ldi	r22, 0x02	; 2
    2542:	49 2f       	mov	r20, r25
    2544:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
    2548:	fe 01       	movw	r30, r28
    254a:	ed 59       	subi	r30, 0x9D	; 157
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	98 2f       	mov	r25, r24
    2552:	99 1f       	adc	r25, r25
    2554:	99 27       	eor	r25, r25
    2556:	99 1f       	adc	r25, r25
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	64 e0       	ldi	r22, 0x04	; 4
    255c:	49 2f       	mov	r20, r25
    255e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2562:	fe 01       	movw	r30, r28
    2564:	ed 5b       	subi	r30, 0xBD	; 189
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	a0 e8       	ldi	r26, 0x80	; 128
    256e:	bf e3       	ldi	r27, 0x3F	; 63
    2570:	80 83       	st	Z, r24
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	a2 83       	std	Z+2, r26	; 0x02
    2576:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2578:	8e 01       	movw	r16, r28
    257a:	01 5c       	subi	r16, 0xC1	; 193
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	fe 01       	movw	r30, r28
    2580:	ed 5b       	subi	r30, 0xBD	; 189
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	4a e7       	ldi	r20, 0x7A	; 122
    2592:	53 e4       	ldi	r21, 0x43	; 67
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	f8 01       	movw	r30, r16
    259e:	80 83       	st	Z, r24
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	a2 83       	std	Z+2, r26	; 0x02
    25a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a6:	fe 01       	movw	r30, r28
    25a8:	ff 96       	adiw	r30, 0x3f	; 63
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	2c f4       	brge	.+10     	; 0x25cc <LCD_voidSendCommand+0x3da>
		__ticks = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9e af       	std	Y+62, r25	; 0x3e
    25c8:	8d af       	std	Y+61, r24	; 0x3d
    25ca:	46 c0       	rjmp	.+140    	; 0x2658 <LCD_voidSendCommand+0x466>
	else if (__tmp > 65535)
    25cc:	fe 01       	movw	r30, r28
    25ce:	ff 96       	adiw	r30, 0x3f	; 63
    25d0:	60 81       	ld	r22, Z
    25d2:	71 81       	ldd	r23, Z+1	; 0x01
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	93 81       	ldd	r25, Z+3	; 0x03
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f e7       	ldi	r20, 0x7F	; 127
    25de:	57 e4       	ldi	r21, 0x47	; 71
    25e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	64 f5       	brge	.+88     	; 0x2640 <LCD_voidSendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e8:	fe 01       	movw	r30, r28
    25ea:	ed 5b       	subi	r30, 0xBD	; 189
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9e af       	std	Y+62, r25	; 0x3e
    2614:	8d af       	std	Y+61, r24	; 0x3d
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_voidSendCommand+0x444>
    2618:	89 e1       	ldi	r24, 0x19	; 25
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9c af       	std	Y+60, r25	; 0x3c
    261e:	8b af       	std	Y+59, r24	; 0x3b
    2620:	8b ad       	ldd	r24, Y+59	; 0x3b
    2622:	9c ad       	ldd	r25, Y+60	; 0x3c
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_voidSendCommand+0x432>
    2628:	9c af       	std	Y+60, r25	; 0x3c
    262a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8d ad       	ldd	r24, Y+61	; 0x3d
    262e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9e af       	std	Y+62, r25	; 0x3e
    2634:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8d ad       	ldd	r24, Y+61	; 0x3d
    2638:	9e ad       	ldd	r25, Y+62	; 0x3e
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <LCD_voidSendCommand+0x426>
    263e:	16 c0       	rjmp	.+44     	; 0x266c <LCD_voidSendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	fe 01       	movw	r30, r28
    2642:	ff 96       	adiw	r30, 0x3f	; 63
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	82 81       	ldd	r24, Z+2	; 0x02
    264a:	93 81       	ldd	r25, Z+3	; 0x03
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9e af       	std	Y+62, r25	; 0x3e
    2656:	8d af       	std	Y+61, r24	; 0x3d
    2658:	8d ad       	ldd	r24, Y+61	; 0x3d
    265a:	9e ad       	ldd	r25, Y+62	; 0x3e
    265c:	9a af       	std	Y+58, r25	; 0x3a
    265e:	89 af       	std	Y+57, r24	; 0x39
    2660:	89 ad       	ldd	r24, Y+57	; 0x39
    2662:	9a ad       	ldd	r25, Y+58	; 0x3a
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_voidSendCommand+0x472>
    2668:	9a af       	std	Y+58, r25	; 0x3a
    266a:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	62 e0       	ldi	r22, 0x02	; 2
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	a0 e8       	ldi	r26, 0x80	; 128
    267c:	bf e3       	ldi	r27, 0x3F	; 63
    267e:	8d ab       	std	Y+53, r24	; 0x35
    2680:	9e ab       	std	Y+54, r25	; 0x36
    2682:	af ab       	std	Y+55, r26	; 0x37
    2684:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2686:	6d a9       	ldd	r22, Y+53	; 0x35
    2688:	7e a9       	ldd	r23, Y+54	; 0x36
    268a:	8f a9       	ldd	r24, Y+55	; 0x37
    268c:	98 ad       	ldd	r25, Y+56	; 0x38
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	4a e7       	ldi	r20, 0x7A	; 122
    2694:	53 e4       	ldi	r21, 0x43	; 67
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	89 ab       	std	Y+49, r24	; 0x31
    26a0:	9a ab       	std	Y+50, r25	; 0x32
    26a2:	ab ab       	std	Y+51, r26	; 0x33
    26a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26a6:	69 a9       	ldd	r22, Y+49	; 0x31
    26a8:	7a a9       	ldd	r23, Y+50	; 0x32
    26aa:	8b a9       	ldd	r24, Y+51	; 0x33
    26ac:	9c a9       	ldd	r25, Y+52	; 0x34
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e8       	ldi	r20, 0x80	; 128
    26b4:	5f e3       	ldi	r21, 0x3F	; 63
    26b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ba:	88 23       	and	r24, r24
    26bc:	2c f4       	brge	.+10     	; 0x26c8 <LCD_voidSendCommand+0x4d6>
		__ticks = 1;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	98 ab       	std	Y+48, r25	; 0x30
    26c4:	8f a7       	std	Y+47, r24	; 0x2f
    26c6:	3f c0       	rjmp	.+126    	; 0x2746 <LCD_voidSendCommand+0x554>
	else if (__tmp > 65535)
    26c8:	69 a9       	ldd	r22, Y+49	; 0x31
    26ca:	7a a9       	ldd	r23, Y+50	; 0x32
    26cc:	8b a9       	ldd	r24, Y+51	; 0x33
    26ce:	9c a9       	ldd	r25, Y+52	; 0x34
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	3f ef       	ldi	r19, 0xFF	; 255
    26d4:	4f e7       	ldi	r20, 0x7F	; 127
    26d6:	57 e4       	ldi	r21, 0x47	; 71
    26d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26dc:	18 16       	cp	r1, r24
    26de:	4c f5       	brge	.+82     	; 0x2732 <LCD_voidSendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e0:	6d a9       	ldd	r22, Y+53	; 0x35
    26e2:	7e a9       	ldd	r23, Y+54	; 0x36
    26e4:	8f a9       	ldd	r24, Y+55	; 0x37
    26e6:	98 ad       	ldd	r25, Y+56	; 0x38
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e2       	ldi	r20, 0x20	; 32
    26ee:	51 e4       	ldi	r21, 0x41	; 65
    26f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	bc 01       	movw	r22, r24
    26fa:	cd 01       	movw	r24, r26
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	98 ab       	std	Y+48, r25	; 0x30
    2706:	8f a7       	std	Y+47, r24	; 0x2f
    2708:	0f c0       	rjmp	.+30     	; 0x2728 <LCD_voidSendCommand+0x536>
    270a:	89 e1       	ldi	r24, 0x19	; 25
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9e a7       	std	Y+46, r25	; 0x2e
    2710:	8d a7       	std	Y+45, r24	; 0x2d
    2712:	8d a5       	ldd	r24, Y+45	; 0x2d
    2714:	9e a5       	ldd	r25, Y+46	; 0x2e
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <LCD_voidSendCommand+0x524>
    271a:	9e a7       	std	Y+46, r25	; 0x2e
    271c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2720:	98 a9       	ldd	r25, Y+48	; 0x30
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	98 ab       	std	Y+48, r25	; 0x30
    2726:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2728:	8f a5       	ldd	r24, Y+47	; 0x2f
    272a:	98 a9       	ldd	r25, Y+48	; 0x30
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	69 f7       	brne	.-38     	; 0x270a <LCD_voidSendCommand+0x518>
    2730:	14 c0       	rjmp	.+40     	; 0x275a <LCD_voidSendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2732:	69 a9       	ldd	r22, Y+49	; 0x31
    2734:	7a a9       	ldd	r23, Y+50	; 0x32
    2736:	8b a9       	ldd	r24, Y+51	; 0x33
    2738:	9c a9       	ldd	r25, Y+52	; 0x34
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	98 ab       	std	Y+48, r25	; 0x30
    2744:	8f a7       	std	Y+47, r24	; 0x2f
    2746:	8f a5       	ldd	r24, Y+47	; 0x2f
    2748:	98 a9       	ldd	r25, Y+48	; 0x30
    274a:	9c a7       	std	Y+44, r25	; 0x2c
    274c:	8b a7       	std	Y+43, r24	; 0x2b
    274e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2750:	9c a5       	ldd	r25, Y+44	; 0x2c
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_voidSendCommand+0x560>
    2756:	9c a7       	std	Y+44, r25	; 0x2c
    2758:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	62 e0       	ldi	r22, 0x02	; 2
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e8       	ldi	r26, 0x80	; 128
    276a:	bf e3       	ldi	r27, 0x3F	; 63
    276c:	8f a3       	std	Y+39, r24	; 0x27
    276e:	98 a7       	std	Y+40, r25	; 0x28
    2770:	a9 a7       	std	Y+41, r26	; 0x29
    2772:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	6f a1       	ldd	r22, Y+39	; 0x27
    2776:	78 a5       	ldd	r23, Y+40	; 0x28
    2778:	89 a5       	ldd	r24, Y+41	; 0x29
    277a:	9a a5       	ldd	r25, Y+42	; 0x2a
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a e7       	ldi	r20, 0x7A	; 122
    2782:	53 e4       	ldi	r21, 0x43	; 67
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	8b a3       	std	Y+35, r24	; 0x23
    278e:	9c a3       	std	Y+36, r25	; 0x24
    2790:	ad a3       	std	Y+37, r26	; 0x25
    2792:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2794:	6b a1       	ldd	r22, Y+35	; 0x23
    2796:	7c a1       	ldd	r23, Y+36	; 0x24
    2798:	8d a1       	ldd	r24, Y+37	; 0x25
    279a:	9e a1       	ldd	r25, Y+38	; 0x26
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <LCD_voidSendCommand+0x5c4>
		__ticks = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9a a3       	std	Y+34, r25	; 0x22
    27b2:	89 a3       	std	Y+33, r24	; 0x21
    27b4:	3f c0       	rjmp	.+126    	; 0x2834 <LCD_voidSendCommand+0x642>
	else if (__tmp > 65535)
    27b6:	6b a1       	ldd	r22, Y+35	; 0x23
    27b8:	7c a1       	ldd	r23, Y+36	; 0x24
    27ba:	8d a1       	ldd	r24, Y+37	; 0x25
    27bc:	9e a1       	ldd	r25, Y+38	; 0x26
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	4c f5       	brge	.+82     	; 0x2820 <LCD_voidSendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	6f a1       	ldd	r22, Y+39	; 0x27
    27d0:	78 a5       	ldd	r23, Y+40	; 0x28
    27d2:	89 a5       	ldd	r24, Y+41	; 0x29
    27d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9a a3       	std	Y+34, r25	; 0x22
    27f4:	89 a3       	std	Y+33, r24	; 0x21
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <LCD_voidSendCommand+0x624>
    27f8:	89 e1       	ldi	r24, 0x19	; 25
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	98 a3       	std	Y+32, r25	; 0x20
    27fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2800:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2802:	98 a1       	ldd	r25, Y+32	; 0x20
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <LCD_voidSendCommand+0x612>
    2808:	98 a3       	std	Y+32, r25	; 0x20
    280a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	89 a1       	ldd	r24, Y+33	; 0x21
    280e:	9a a1       	ldd	r25, Y+34	; 0x22
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	9a a3       	std	Y+34, r25	; 0x22
    2814:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	89 a1       	ldd	r24, Y+33	; 0x21
    2818:	9a a1       	ldd	r25, Y+34	; 0x22
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <LCD_voidSendCommand+0x606>
    281e:	14 c0       	rjmp	.+40     	; 0x2848 <LCD_voidSendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	6b a1       	ldd	r22, Y+35	; 0x23
    2822:	7c a1       	ldd	r23, Y+36	; 0x24
    2824:	8d a1       	ldd	r24, Y+37	; 0x25
    2826:	9e a1       	ldd	r25, Y+38	; 0x26
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9a a3       	std	Y+34, r25	; 0x22
    2832:	89 a3       	std	Y+33, r24	; 0x21
    2834:	89 a1       	ldd	r24, Y+33	; 0x21
    2836:	9a a1       	ldd	r25, Y+34	; 0x22
    2838:	9e 8f       	std	Y+30, r25	; 0x1e
    283a:	8d 8f       	std	Y+29, r24	; 0x1d
    283c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    283e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_voidSendCommand+0x64e>
    2844:	9e 8f       	std	Y+30, r25	; 0x1e
    2846:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
    2848:	fe 01       	movw	r30, r28
    284a:	ed 59       	subi	r30, 0x9D	; 157
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	98 2f       	mov	r25, r24
    2852:	91 70       	andi	r25, 0x01	; 1
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	49 2f       	mov	r20, r25
    285a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
    285e:	fe 01       	movw	r30, r28
    2860:	ed 59       	subi	r30, 0x9D	; 157
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	86 95       	lsr	r24
    2868:	98 2f       	mov	r25, r24
    286a:	91 70       	andi	r25, 0x01	; 1
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	61 e0       	ldi	r22, 0x01	; 1
    2870:	49 2f       	mov	r20, r25
    2872:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
    2876:	fe 01       	movw	r30, r28
    2878:	ed 59       	subi	r30, 0x9D	; 157
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	86 95       	lsr	r24
    2880:	86 95       	lsr	r24
    2882:	98 2f       	mov	r25, r24
    2884:	91 70       	andi	r25, 0x01	; 1
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	62 e0       	ldi	r22, 0x02	; 2
    288a:	49 2f       	mov	r20, r25
    288c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
    2890:	fe 01       	movw	r30, r28
    2892:	ed 59       	subi	r30, 0x9D	; 157
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	80 81       	ld	r24, Z
    2898:	86 95       	lsr	r24
    289a:	86 95       	lsr	r24
    289c:	86 95       	lsr	r24
    289e:	98 2f       	mov	r25, r24
    28a0:	91 70       	andi	r25, 0x01	; 1
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	64 e0       	ldi	r22, 0x04	; 4
    28a6:	49 2f       	mov	r20, r25
    28a8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 e8       	ldi	r26, 0x80	; 128
    28b2:	bf e3       	ldi	r27, 0x3F	; 63
    28b4:	89 8f       	std	Y+25, r24	; 0x19
    28b6:	9a 8f       	std	Y+26, r25	; 0x1a
    28b8:	ab 8f       	std	Y+27, r26	; 0x1b
    28ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28bc:	69 8d       	ldd	r22, Y+25	; 0x19
    28be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4a e7       	ldi	r20, 0x7A	; 122
    28ca:	53 e4       	ldi	r21, 0x43	; 67
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	8d 8b       	std	Y+21, r24	; 0x15
    28d6:	9e 8b       	std	Y+22, r25	; 0x16
    28d8:	af 8b       	std	Y+23, r26	; 0x17
    28da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28dc:	6d 89       	ldd	r22, Y+21	; 0x15
    28de:	7e 89       	ldd	r23, Y+22	; 0x16
    28e0:	8f 89       	ldd	r24, Y+23	; 0x17
    28e2:	98 8d       	ldd	r25, Y+24	; 0x18
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e8       	ldi	r20, 0x80	; 128
    28ea:	5f e3       	ldi	r21, 0x3F	; 63
    28ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	2c f4       	brge	.+10     	; 0x28fe <LCD_voidSendCommand+0x70c>
		__ticks = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9c 8b       	std	Y+20, r25	; 0x14
    28fa:	8b 8b       	std	Y+19, r24	; 0x13
    28fc:	3f c0       	rjmp	.+126    	; 0x297c <LCD_voidSendCommand+0x78a>
	else if (__tmp > 65535)
    28fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2900:	7e 89       	ldd	r23, Y+22	; 0x16
    2902:	8f 89       	ldd	r24, Y+23	; 0x17
    2904:	98 8d       	ldd	r25, Y+24	; 0x18
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	3f ef       	ldi	r19, 0xFF	; 255
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	57 e4       	ldi	r21, 0x47	; 71
    290e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	4c f5       	brge	.+82     	; 0x2968 <LCD_voidSendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2916:	69 8d       	ldd	r22, Y+25	; 0x19
    2918:	7a 8d       	ldd	r23, Y+26	; 0x1a
    291a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    291c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e2       	ldi	r20, 0x20	; 32
    2924:	51 e4       	ldi	r21, 0x41	; 65
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9c 8b       	std	Y+20, r25	; 0x14
    293c:	8b 8b       	std	Y+19, r24	; 0x13
    293e:	0f c0       	rjmp	.+30     	; 0x295e <LCD_voidSendCommand+0x76c>
    2940:	89 e1       	ldi	r24, 0x19	; 25
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9a 8b       	std	Y+18, r25	; 0x12
    2946:	89 8b       	std	Y+17, r24	; 0x11
    2948:	89 89       	ldd	r24, Y+17	; 0x11
    294a:	9a 89       	ldd	r25, Y+18	; 0x12
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <LCD_voidSendCommand+0x75a>
    2950:	9a 8b       	std	Y+18, r25	; 0x12
    2952:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	8b 89       	ldd	r24, Y+19	; 0x13
    2956:	9c 89       	ldd	r25, Y+20	; 0x14
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	9c 8b       	std	Y+20, r25	; 0x14
    295c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295e:	8b 89       	ldd	r24, Y+19	; 0x13
    2960:	9c 89       	ldd	r25, Y+20	; 0x14
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	69 f7       	brne	.-38     	; 0x2940 <LCD_voidSendCommand+0x74e>
    2966:	14 c0       	rjmp	.+40     	; 0x2990 <LCD_voidSendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2968:	6d 89       	ldd	r22, Y+21	; 0x15
    296a:	7e 89       	ldd	r23, Y+22	; 0x16
    296c:	8f 89       	ldd	r24, Y+23	; 0x17
    296e:	98 8d       	ldd	r25, Y+24	; 0x18
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9c 8b       	std	Y+20, r25	; 0x14
    297a:	8b 8b       	std	Y+19, r24	; 0x13
    297c:	8b 89       	ldd	r24, Y+19	; 0x13
    297e:	9c 89       	ldd	r25, Y+20	; 0x14
    2980:	98 8b       	std	Y+16, r25	; 0x10
    2982:	8f 87       	std	Y+15, r24	; 0x0f
    2984:	8f 85       	ldd	r24, Y+15	; 0x0f
    2986:	98 89       	ldd	r25, Y+16	; 0x10
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LCD_voidSendCommand+0x796>
    298c:	98 8b       	std	Y+16, r25	; 0x10
    298e:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	62 e0       	ldi	r22, 0x02	; 2
    2994:	40 e0       	ldi	r20, 0x00	; 0
    2996:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e8       	ldi	r26, 0x80	; 128
    29a0:	bf e3       	ldi	r27, 0x3F	; 63
    29a2:	8b 87       	std	Y+11, r24	; 0x0b
    29a4:	9c 87       	std	Y+12, r25	; 0x0c
    29a6:	ad 87       	std	Y+13, r26	; 0x0d
    29a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a e7       	ldi	r20, 0x7A	; 122
    29b8:	53 e4       	ldi	r21, 0x43	; 67
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8f 83       	std	Y+7, r24	; 0x07
    29c4:	98 87       	std	Y+8, r25	; 0x08
    29c6:	a9 87       	std	Y+9, r26	; 0x09
    29c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <LCD_voidSendCommand+0x7fa>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <LCD_voidSendCommand+0x878>
	else if (__tmp > 65535)
    29ec:	6f 81       	ldd	r22, Y+7	; 0x07
    29ee:	78 85       	ldd	r23, Y+8	; 0x08
    29f0:	89 85       	ldd	r24, Y+9	; 0x09
    29f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <LCD_voidSendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9e 83       	std	Y+6, r25	; 0x06
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <LCD_voidSendCommand+0x85a>
    2a2e:	89 e1       	ldi	r24, 0x19	; 25
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	8b 83       	std	Y+3, r24	; 0x03
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <LCD_voidSendCommand+0x848>
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <LCD_voidSendCommand+0x83c>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <LCD_voidSendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	6f 81       	ldd	r22, Y+7	; 0x07
    2a58:	78 85       	ldd	r23, Y+8	; 0x08
    2a5a:	89 85       	ldd	r24, Y+9	; 0x09
    2a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <LCD_voidSendCommand+0x884>
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif
}
    2a7e:	cd 59       	subi	r28, 0x9D	; 157
    2a80:	df 4f       	sbci	r29, 0xFF	; 255
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	1f 91       	pop	r17
    2a92:	0f 91       	pop	r16
    2a94:	08 95       	ret

00002a96 <LCD_voidSendData>:


// Displays a character on the LCD
void LCD_voidSendData(u8 copy_u8data) {
    2a96:	0f 93       	push	r16
    2a98:	1f 93       	push	r17
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	c3 56       	subi	r28, 0x63	; 99
    2aa4:	d0 40       	sbci	r29, 0x00	; 0
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ed 59       	subi	r30, 0x9D	; 157
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	63 e0       	ldi	r22, 0x03	; 3
    2abc:	41 e0       	ldi	r20, 0x01	; 1
    2abe:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e1 5a       	subi	r30, 0xA1	; 161
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a0 e8       	ldi	r26, 0x80	; 128
    2ace:	bf e3       	ldi	r27, 0x3F	; 63
    2ad0:	80 83       	st	Z, r24
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	a2 83       	std	Z+2, r26	; 0x02
    2ad6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad8:	8e 01       	movw	r16, r28
    2ada:	05 5a       	subi	r16, 0xA5	; 165
    2adc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e1 5a       	subi	r30, 0xA1	; 161
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	4a e7       	ldi	r20, 0x7A	; 122
    2af2:	53 e4       	ldi	r21, 0x43	; 67
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	f8 01       	movw	r30, r16
    2afe:	80 83       	st	Z, r24
    2b00:	91 83       	std	Z+1, r25	; 0x01
    2b02:	a2 83       	std	Z+2, r26	; 0x02
    2b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b06:	fe 01       	movw	r30, r28
    2b08:	e5 5a       	subi	r30, 0xA5	; 165
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e8       	ldi	r20, 0x80	; 128
    2b1a:	5f e3       	ldi	r21, 0x3F	; 63
    2b1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b20:	88 23       	and	r24, r24
    2b22:	44 f4       	brge	.+16     	; 0x2b34 <LCD_voidSendData+0x9e>
		__ticks = 1;
    2b24:	fe 01       	movw	r30, r28
    2b26:	e7 5a       	subi	r30, 0xA7	; 167
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	80 83       	st	Z, r24
    2b32:	64 c0       	rjmp	.+200    	; 0x2bfc <LCD_voidSendData+0x166>
	else if (__tmp > 65535)
    2b34:	fe 01       	movw	r30, r28
    2b36:	e5 5a       	subi	r30, 0xA5	; 165
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	60 81       	ld	r22, Z
    2b3c:	71 81       	ldd	r23, Z+1	; 0x01
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	3f ef       	ldi	r19, 0xFF	; 255
    2b46:	4f e7       	ldi	r20, 0x7F	; 127
    2b48:	57 e4       	ldi	r21, 0x47	; 71
    2b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b4e:	18 16       	cp	r1, r24
    2b50:	0c f0       	brlt	.+2      	; 0x2b54 <LCD_voidSendData+0xbe>
    2b52:	43 c0       	rjmp	.+134    	; 0x2bda <LCD_voidSendData+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b54:	fe 01       	movw	r30, r28
    2b56:	e1 5a       	subi	r30, 0xA1	; 161
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	60 81       	ld	r22, Z
    2b5c:	71 81       	ldd	r23, Z+1	; 0x01
    2b5e:	82 81       	ldd	r24, Z+2	; 0x02
    2b60:	93 81       	ldd	r25, Z+3	; 0x03
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e2       	ldi	r20, 0x20	; 32
    2b68:	51 e4       	ldi	r21, 0x41	; 65
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	8e 01       	movw	r16, r28
    2b74:	07 5a       	subi	r16, 0xA7	; 167
    2b76:	1f 4f       	sbci	r17, 0xFF	; 255
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	f8 01       	movw	r30, r16
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	80 83       	st	Z, r24
    2b8a:	1f c0       	rjmp	.+62     	; 0x2bca <LCD_voidSendData+0x134>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e9 5a       	subi	r30, 0xA9	; 169
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	89 e1       	ldi	r24, 0x19	; 25
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	80 83       	st	Z, r24
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	e9 5a       	subi	r30, 0xA9	; 169
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <LCD_voidSendData+0x10e>
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e9 5a       	subi	r30, 0xA9	; 169
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	91 83       	std	Z+1, r25	; 0x01
    2bb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb2:	de 01       	movw	r26, r28
    2bb4:	a7 5a       	subi	r26, 0xA7	; 167
    2bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e7 5a       	subi	r30, 0xA7	; 167
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	11 96       	adiw	r26, 0x01	; 1
    2bc6:	9c 93       	st	X, r25
    2bc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e7 5a       	subi	r30, 0xA7	; 167
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	00 97       	sbiw	r24, 0x00	; 0
    2bd6:	d1 f6       	brne	.-76     	; 0x2b8c <LCD_voidSendData+0xf6>
    2bd8:	27 c0       	rjmp	.+78     	; 0x2c28 <LCD_voidSendData+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bda:	8e 01       	movw	r16, r28
    2bdc:	07 5a       	subi	r16, 0xA7	; 167
    2bde:	1f 4f       	sbci	r17, 0xFF	; 255
    2be0:	fe 01       	movw	r30, r28
    2be2:	e5 5a       	subi	r30, 0xA5	; 165
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	60 81       	ld	r22, Z
    2be8:	71 81       	ldd	r23, Z+1	; 0x01
    2bea:	82 81       	ldd	r24, Z+2	; 0x02
    2bec:	93 81       	ldd	r25, Z+3	; 0x03
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	f8 01       	movw	r30, r16
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	80 83       	st	Z, r24
    2bfc:	de 01       	movw	r26, r28
    2bfe:	ab 5a       	subi	r26, 0xAB	; 171
    2c00:	bf 4f       	sbci	r27, 0xFF	; 255
    2c02:	fe 01       	movw	r30, r28
    2c04:	e7 5a       	subi	r30, 0xA7	; 167
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	80 81       	ld	r24, Z
    2c0a:	91 81       	ldd	r25, Z+1	; 0x01
    2c0c:	8d 93       	st	X+, r24
    2c0e:	9c 93       	st	X, r25
    2c10:	fe 01       	movw	r30, r28
    2c12:	eb 5a       	subi	r30, 0xAB	; 171
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	80 81       	ld	r24, Z
    2c18:	91 81       	ldd	r25, Z+1	; 0x01
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <LCD_voidSendData+0x184>
    2c1e:	fe 01       	movw	r30, r28
    2c20:	eb 5a       	subi	r30, 0xAB	; 171
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	80 83       	st	Z, r24
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	62 e0       	ldi	r22, 0x02	; 2
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2c32:	fe 01       	movw	r30, r28
    2c34:	ef 5a       	subi	r30, 0xAF	; 175
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a0 e8       	ldi	r26, 0x80	; 128
    2c3e:	bf e3       	ldi	r27, 0x3F	; 63
    2c40:	80 83       	st	Z, r24
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	a2 83       	std	Z+2, r26	; 0x02
    2c46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c48:	8e 01       	movw	r16, r28
    2c4a:	03 5b       	subi	r16, 0xB3	; 179
    2c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c4e:	fe 01       	movw	r30, r28
    2c50:	ef 5a       	subi	r30, 0xAF	; 175
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	4a e7       	ldi	r20, 0x7A	; 122
    2c62:	53 e4       	ldi	r21, 0x43	; 67
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	80 83       	st	Z, r24
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	a2 83       	std	Z+2, r26	; 0x02
    2c74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c76:	fe 01       	movw	r30, r28
    2c78:	e3 5b       	subi	r30, 0xB3	; 179
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	44 f4       	brge	.+16     	; 0x2ca4 <LCD_voidSendData+0x20e>
		__ticks = 1;
    2c94:	fe 01       	movw	r30, r28
    2c96:	e5 5b       	subi	r30, 0xB5	; 181
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	80 83       	st	Z, r24
    2ca2:	64 c0       	rjmp	.+200    	; 0x2d6c <LCD_voidSendData+0x2d6>
	else if (__tmp > 65535)
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e3 5b       	subi	r30, 0xB3	; 179
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	60 81       	ld	r22, Z
    2cac:	71 81       	ldd	r23, Z+1	; 0x01
    2cae:	82 81       	ldd	r24, Z+2	; 0x02
    2cb0:	93 81       	ldd	r25, Z+3	; 0x03
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	3f ef       	ldi	r19, 0xFF	; 255
    2cb6:	4f e7       	ldi	r20, 0x7F	; 127
    2cb8:	57 e4       	ldi	r21, 0x47	; 71
    2cba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cbe:	18 16       	cp	r1, r24
    2cc0:	0c f0       	brlt	.+2      	; 0x2cc4 <LCD_voidSendData+0x22e>
    2cc2:	43 c0       	rjmp	.+134    	; 0x2d4a <LCD_voidSendData+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ef 5a       	subi	r30, 0xAF	; 175
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e2       	ldi	r20, 0x20	; 32
    2cd8:	51 e4       	ldi	r21, 0x41	; 65
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	8e 01       	movw	r16, r28
    2ce4:	05 5b       	subi	r16, 0xB5	; 181
    2ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	1f c0       	rjmp	.+62     	; 0x2d3a <LCD_voidSendData+0x2a4>
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	e7 5b       	subi	r30, 0xB7	; 183
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	89 e1       	ldi	r24, 0x19	; 25
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	91 83       	std	Z+1, r25	; 0x01
    2d08:	80 83       	st	Z, r24
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e7 5b       	subi	r30, 0xB7	; 183
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	91 81       	ldd	r25, Z+1	; 0x01
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_voidSendData+0x27e>
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e7 5b       	subi	r30, 0xB7	; 183
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	91 83       	std	Z+1, r25	; 0x01
    2d20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d22:	de 01       	movw	r26, r28
    2d24:	a5 5b       	subi	r26, 0xB5	; 181
    2d26:	bf 4f       	sbci	r27, 0xFF	; 255
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e5 5b       	subi	r30, 0xB5	; 181
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	91 81       	ldd	r25, Z+1	; 0x01
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	11 96       	adiw	r26, 0x01	; 1
    2d36:	9c 93       	st	X, r25
    2d38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e5 5b       	subi	r30, 0xB5	; 181
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	91 81       	ldd	r25, Z+1	; 0x01
    2d44:	00 97       	sbiw	r24, 0x00	; 0
    2d46:	d1 f6       	brne	.-76     	; 0x2cfc <LCD_voidSendData+0x266>
    2d48:	27 c0       	rjmp	.+78     	; 0x2d98 <LCD_voidSendData+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4a:	8e 01       	movw	r16, r28
    2d4c:	05 5b       	subi	r16, 0xB5	; 181
    2d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d50:	fe 01       	movw	r30, r28
    2d52:	e3 5b       	subi	r30, 0xB3	; 179
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	f8 01       	movw	r30, r16
    2d68:	91 83       	std	Z+1, r25	; 0x01
    2d6a:	80 83       	st	Z, r24
    2d6c:	de 01       	movw	r26, r28
    2d6e:	a9 5b       	subi	r26, 0xB9	; 185
    2d70:	bf 4f       	sbci	r27, 0xFF	; 255
    2d72:	fe 01       	movw	r30, r28
    2d74:	e5 5b       	subi	r30, 0xB5	; 181
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	80 81       	ld	r24, Z
    2d7a:	91 81       	ldd	r25, Z+1	; 0x01
    2d7c:	8d 93       	st	X+, r24
    2d7e:	9c 93       	st	X, r25
    2d80:	fe 01       	movw	r30, r28
    2d82:	e9 5b       	subi	r30, 0xB9	; 185
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 81       	ld	r24, Z
    2d88:	91 81       	ldd	r25, Z+1	; 0x01
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <LCD_voidSendData+0x2f4>
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e9 5b       	subi	r30, 0xB9	; 185
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	80 83       	st	Z, r24
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
    2d98:	fe 01       	movw	r30, r28
    2d9a:	ed 59       	subi	r30, 0x9D	; 157
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	80 81       	ld	r24, Z
    2da0:	82 95       	swap	r24
    2da2:	8f 70       	andi	r24, 0x0F	; 15
    2da4:	98 2f       	mov	r25, r24
    2da6:	91 70       	andi	r25, 0x01	; 1
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	60 e0       	ldi	r22, 0x00	; 0
    2dac:	49 2f       	mov	r20, r25
    2dae:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
    2db2:	fe 01       	movw	r30, r28
    2db4:	ed 59       	subi	r30, 0x9D	; 157
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	82 95       	swap	r24
    2dbc:	86 95       	lsr	r24
    2dbe:	87 70       	andi	r24, 0x07	; 7
    2dc0:	98 2f       	mov	r25, r24
    2dc2:	91 70       	andi	r25, 0x01	; 1
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	61 e0       	ldi	r22, 0x01	; 1
    2dc8:	49 2f       	mov	r20, r25
    2dca:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
    2dce:	fe 01       	movw	r30, r28
    2dd0:	ed 59       	subi	r30, 0x9D	; 157
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	82 95       	swap	r24
    2dd8:	86 95       	lsr	r24
    2dda:	86 95       	lsr	r24
    2ddc:	83 70       	andi	r24, 0x03	; 3
    2dde:	98 2f       	mov	r25, r24
    2de0:	91 70       	andi	r25, 0x01	; 1
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	62 e0       	ldi	r22, 0x02	; 2
    2de6:	49 2f       	mov	r20, r25
    2de8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
    2dec:	fe 01       	movw	r30, r28
    2dee:	ed 59       	subi	r30, 0x9D	; 157
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 81       	ld	r24, Z
    2df4:	98 2f       	mov	r25, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	99 27       	eor	r25, r25
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	64 e0       	ldi	r22, 0x04	; 4
    2e00:	49 2f       	mov	r20, r25
    2e02:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2e06:	fe 01       	movw	r30, r28
    2e08:	ed 5b       	subi	r30, 0xBD	; 189
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	a0 e8       	ldi	r26, 0x80	; 128
    2e12:	bf e3       	ldi	r27, 0x3F	; 63
    2e14:	80 83       	st	Z, r24
    2e16:	91 83       	std	Z+1, r25	; 0x01
    2e18:	a2 83       	std	Z+2, r26	; 0x02
    2e1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	8e 01       	movw	r16, r28
    2e1e:	01 5c       	subi	r16, 0xC1	; 193
    2e20:	1f 4f       	sbci	r17, 0xFF	; 255
    2e22:	fe 01       	movw	r30, r28
    2e24:	ed 5b       	subi	r30, 0xBD	; 189
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	60 81       	ld	r22, Z
    2e2a:	71 81       	ldd	r23, Z+1	; 0x01
    2e2c:	82 81       	ldd	r24, Z+2	; 0x02
    2e2e:	93 81       	ldd	r25, Z+3	; 0x03
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	4a e7       	ldi	r20, 0x7A	; 122
    2e36:	53 e4       	ldi	r21, 0x43	; 67
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	f8 01       	movw	r30, r16
    2e42:	80 83       	st	Z, r24
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	a2 83       	std	Z+2, r26	; 0x02
    2e48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	ff 96       	adiw	r30, 0x3f	; 63
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e8       	ldi	r20, 0x80	; 128
    2e5c:	5f e3       	ldi	r21, 0x3F	; 63
    2e5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e62:	88 23       	and	r24, r24
    2e64:	2c f4       	brge	.+10     	; 0x2e70 <LCD_voidSendData+0x3da>
		__ticks = 1;
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	9e af       	std	Y+62, r25	; 0x3e
    2e6c:	8d af       	std	Y+61, r24	; 0x3d
    2e6e:	46 c0       	rjmp	.+140    	; 0x2efc <LCD_voidSendData+0x466>
	else if (__tmp > 65535)
    2e70:	fe 01       	movw	r30, r28
    2e72:	ff 96       	adiw	r30, 0x3f	; 63
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	3f ef       	ldi	r19, 0xFF	; 255
    2e80:	4f e7       	ldi	r20, 0x7F	; 127
    2e82:	57 e4       	ldi	r21, 0x47	; 71
    2e84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e88:	18 16       	cp	r1, r24
    2e8a:	64 f5       	brge	.+88     	; 0x2ee4 <LCD_voidSendData+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	ed 5b       	subi	r30, 0xBD	; 189
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e2       	ldi	r20, 0x20	; 32
    2ea0:	51 e4       	ldi	r21, 0x41	; 65
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9e af       	std	Y+62, r25	; 0x3e
    2eb8:	8d af       	std	Y+61, r24	; 0x3d
    2eba:	0f c0       	rjmp	.+30     	; 0x2eda <LCD_voidSendData+0x444>
    2ebc:	89 e1       	ldi	r24, 0x19	; 25
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9c af       	std	Y+60, r25	; 0x3c
    2ec2:	8b af       	std	Y+59, r24	; 0x3b
    2ec4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ec6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <LCD_voidSendData+0x432>
    2ecc:	9c af       	std	Y+60, r25	; 0x3c
    2ece:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ed2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	9e af       	std	Y+62, r25	; 0x3e
    2ed8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eda:	8d ad       	ldd	r24, Y+61	; 0x3d
    2edc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	69 f7       	brne	.-38     	; 0x2ebc <LCD_voidSendData+0x426>
    2ee2:	16 c0       	rjmp	.+44     	; 0x2f10 <LCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	ff 96       	adiw	r30, 0x3f	; 63
    2ee8:	60 81       	ld	r22, Z
    2eea:	71 81       	ldd	r23, Z+1	; 0x01
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9e af       	std	Y+62, r25	; 0x3e
    2efa:	8d af       	std	Y+61, r24	; 0x3d
    2efc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2efe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f00:	9a af       	std	Y+58, r25	; 0x3a
    2f02:	89 af       	std	Y+57, r24	; 0x39
    2f04:	89 ad       	ldd	r24, Y+57	; 0x39
    2f06:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <LCD_voidSendData+0x472>
    2f0c:	9a af       	std	Y+58, r25	; 0x3a
    2f0e:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	62 e0       	ldi	r22, 0x02	; 2
    2f14:	40 e0       	ldi	r20, 0x00	; 0
    2f16:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	a0 e8       	ldi	r26, 0x80	; 128
    2f20:	bf e3       	ldi	r27, 0x3F	; 63
    2f22:	8d ab       	std	Y+53, r24	; 0x35
    2f24:	9e ab       	std	Y+54, r25	; 0x36
    2f26:	af ab       	std	Y+55, r26	; 0x37
    2f28:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f2c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f2e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f30:	98 ad       	ldd	r25, Y+56	; 0x38
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	4a e7       	ldi	r20, 0x7A	; 122
    2f38:	53 e4       	ldi	r21, 0x43	; 67
    2f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	89 ab       	std	Y+49, r24	; 0x31
    2f44:	9a ab       	std	Y+50, r25	; 0x32
    2f46:	ab ab       	std	Y+51, r26	; 0x33
    2f48:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f50:	9c a9       	ldd	r25, Y+52	; 0x34
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	2c f4       	brge	.+10     	; 0x2f6c <LCD_voidSendData+0x4d6>
		__ticks = 1;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	98 ab       	std	Y+48, r25	; 0x30
    2f68:	8f a7       	std	Y+47, r24	; 0x2f
    2f6a:	3f c0       	rjmp	.+126    	; 0x2fea <LCD_voidSendData+0x554>
	else if (__tmp > 65535)
    2f6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f70:	8b a9       	ldd	r24, Y+51	; 0x33
    2f72:	9c a9       	ldd	r25, Y+52	; 0x34
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	3f ef       	ldi	r19, 0xFF	; 255
    2f78:	4f e7       	ldi	r20, 0x7F	; 127
    2f7a:	57 e4       	ldi	r21, 0x47	; 71
    2f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f80:	18 16       	cp	r1, r24
    2f82:	4c f5       	brge	.+82     	; 0x2fd6 <LCD_voidSendData+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f84:	6d a9       	ldd	r22, Y+53	; 0x35
    2f86:	7e a9       	ldd	r23, Y+54	; 0x36
    2f88:	8f a9       	ldd	r24, Y+55	; 0x37
    2f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e2       	ldi	r20, 0x20	; 32
    2f92:	51 e4       	ldi	r21, 0x41	; 65
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	98 ab       	std	Y+48, r25	; 0x30
    2faa:	8f a7       	std	Y+47, r24	; 0x2f
    2fac:	0f c0       	rjmp	.+30     	; 0x2fcc <LCD_voidSendData+0x536>
    2fae:	89 e1       	ldi	r24, 0x19	; 25
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9e a7       	std	Y+46, r25	; 0x2e
    2fb4:	8d a7       	std	Y+45, r24	; 0x2d
    2fb6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <LCD_voidSendData+0x524>
    2fbe:	9e a7       	std	Y+46, r25	; 0x2e
    2fc0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	98 ab       	std	Y+48, r25	; 0x30
    2fca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fce:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	69 f7       	brne	.-38     	; 0x2fae <LCD_voidSendData+0x518>
    2fd4:	14 c0       	rjmp	.+40     	; 0x2ffe <LCD_voidSendData+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fd8:	7a a9       	ldd	r23, Y+50	; 0x32
    2fda:	8b a9       	ldd	r24, Y+51	; 0x33
    2fdc:	9c a9       	ldd	r25, Y+52	; 0x34
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	98 ab       	std	Y+48, r25	; 0x30
    2fe8:	8f a7       	std	Y+47, r24	; 0x2f
    2fea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fec:	98 a9       	ldd	r25, Y+48	; 0x30
    2fee:	9c a7       	std	Y+44, r25	; 0x2c
    2ff0:	8b a7       	std	Y+43, r24	; 0x2b
    2ff2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <LCD_voidSendData+0x560>
    2ffa:	9c a7       	std	Y+44, r25	; 0x2c
    2ffc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	62 e0       	ldi	r22, 0x02	; 2
    3002:	41 e0       	ldi	r20, 0x01	; 1
    3004:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    3008:	80 e0       	ldi	r24, 0x00	; 0
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	a0 e8       	ldi	r26, 0x80	; 128
    300e:	bf e3       	ldi	r27, 0x3F	; 63
    3010:	8f a3       	std	Y+39, r24	; 0x27
    3012:	98 a7       	std	Y+40, r25	; 0x28
    3014:	a9 a7       	std	Y+41, r26	; 0x29
    3016:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3018:	6f a1       	ldd	r22, Y+39	; 0x27
    301a:	78 a5       	ldd	r23, Y+40	; 0x28
    301c:	89 a5       	ldd	r24, Y+41	; 0x29
    301e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	4a e7       	ldi	r20, 0x7A	; 122
    3026:	53 e4       	ldi	r21, 0x43	; 67
    3028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	8b a3       	std	Y+35, r24	; 0x23
    3032:	9c a3       	std	Y+36, r25	; 0x24
    3034:	ad a3       	std	Y+37, r26	; 0x25
    3036:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3038:	6b a1       	ldd	r22, Y+35	; 0x23
    303a:	7c a1       	ldd	r23, Y+36	; 0x24
    303c:	8d a1       	ldd	r24, Y+37	; 0x25
    303e:	9e a1       	ldd	r25, Y+38	; 0x26
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e8       	ldi	r20, 0x80	; 128
    3046:	5f e3       	ldi	r21, 0x3F	; 63
    3048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    304c:	88 23       	and	r24, r24
    304e:	2c f4       	brge	.+10     	; 0x305a <LCD_voidSendData+0x5c4>
		__ticks = 1;
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	9a a3       	std	Y+34, r25	; 0x22
    3056:	89 a3       	std	Y+33, r24	; 0x21
    3058:	3f c0       	rjmp	.+126    	; 0x30d8 <LCD_voidSendData+0x642>
	else if (__tmp > 65535)
    305a:	6b a1       	ldd	r22, Y+35	; 0x23
    305c:	7c a1       	ldd	r23, Y+36	; 0x24
    305e:	8d a1       	ldd	r24, Y+37	; 0x25
    3060:	9e a1       	ldd	r25, Y+38	; 0x26
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	3f ef       	ldi	r19, 0xFF	; 255
    3066:	4f e7       	ldi	r20, 0x7F	; 127
    3068:	57 e4       	ldi	r21, 0x47	; 71
    306a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    306e:	18 16       	cp	r1, r24
    3070:	4c f5       	brge	.+82     	; 0x30c4 <LCD_voidSendData+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3072:	6f a1       	ldd	r22, Y+39	; 0x27
    3074:	78 a5       	ldd	r23, Y+40	; 0x28
    3076:	89 a5       	ldd	r24, Y+41	; 0x29
    3078:	9a a5       	ldd	r25, Y+42	; 0x2a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e2       	ldi	r20, 0x20	; 32
    3080:	51 e4       	ldi	r21, 0x41	; 65
    3082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	bc 01       	movw	r22, r24
    308c:	cd 01       	movw	r24, r26
    308e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	9a a3       	std	Y+34, r25	; 0x22
    3098:	89 a3       	std	Y+33, r24	; 0x21
    309a:	0f c0       	rjmp	.+30     	; 0x30ba <LCD_voidSendData+0x624>
    309c:	89 e1       	ldi	r24, 0x19	; 25
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	98 a3       	std	Y+32, r25	; 0x20
    30a2:	8f 8f       	std	Y+31, r24	; 0x1f
    30a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30a6:	98 a1       	ldd	r25, Y+32	; 0x20
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	f1 f7       	brne	.-4      	; 0x30a8 <LCD_voidSendData+0x612>
    30ac:	98 a3       	std	Y+32, r25	; 0x20
    30ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b0:	89 a1       	ldd	r24, Y+33	; 0x21
    30b2:	9a a1       	ldd	r25, Y+34	; 0x22
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	9a a3       	std	Y+34, r25	; 0x22
    30b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ba:	89 a1       	ldd	r24, Y+33	; 0x21
    30bc:	9a a1       	ldd	r25, Y+34	; 0x22
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	69 f7       	brne	.-38     	; 0x309c <LCD_voidSendData+0x606>
    30c2:	14 c0       	rjmp	.+40     	; 0x30ec <LCD_voidSendData+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c4:	6b a1       	ldd	r22, Y+35	; 0x23
    30c6:	7c a1       	ldd	r23, Y+36	; 0x24
    30c8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ca:	9e a1       	ldd	r25, Y+38	; 0x26
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	9a a3       	std	Y+34, r25	; 0x22
    30d6:	89 a3       	std	Y+33, r24	; 0x21
    30d8:	89 a1       	ldd	r24, Y+33	; 0x21
    30da:	9a a1       	ldd	r25, Y+34	; 0x22
    30dc:	9e 8f       	std	Y+30, r25	; 0x1e
    30de:	8d 8f       	std	Y+29, r24	; 0x1d
    30e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <LCD_voidSendData+0x64e>
    30e8:	9e 8f       	std	Y+30, r25	; 0x1e
    30ea:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
    30ec:	fe 01       	movw	r30, r28
    30ee:	ed 59       	subi	r30, 0x9D	; 157
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 81       	ld	r24, Z
    30f4:	98 2f       	mov	r25, r24
    30f6:	91 70       	andi	r25, 0x01	; 1
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	49 2f       	mov	r20, r25
    30fe:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
    3102:	fe 01       	movw	r30, r28
    3104:	ed 59       	subi	r30, 0x9D	; 157
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	86 95       	lsr	r24
    310c:	98 2f       	mov	r25, r24
    310e:	91 70       	andi	r25, 0x01	; 1
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	61 e0       	ldi	r22, 0x01	; 1
    3114:	49 2f       	mov	r20, r25
    3116:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
    311a:	fe 01       	movw	r30, r28
    311c:	ed 59       	subi	r30, 0x9D	; 157
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	80 81       	ld	r24, Z
    3122:	86 95       	lsr	r24
    3124:	86 95       	lsr	r24
    3126:	98 2f       	mov	r25, r24
    3128:	91 70       	andi	r25, 0x01	; 1
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	62 e0       	ldi	r22, 0x02	; 2
    312e:	49 2f       	mov	r20, r25
    3130:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
    3134:	fe 01       	movw	r30, r28
    3136:	ed 59       	subi	r30, 0x9D	; 157
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	80 81       	ld	r24, Z
    313c:	86 95       	lsr	r24
    313e:	86 95       	lsr	r24
    3140:	86 95       	lsr	r24
    3142:	98 2f       	mov	r25, r24
    3144:	91 70       	andi	r25, 0x01	; 1
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	64 e0       	ldi	r22, 0x04	; 4
    314a:	49 2f       	mov	r20, r25
    314c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	a0 e8       	ldi	r26, 0x80	; 128
    3156:	bf e3       	ldi	r27, 0x3F	; 63
    3158:	89 8f       	std	Y+25, r24	; 0x19
    315a:	9a 8f       	std	Y+26, r25	; 0x1a
    315c:	ab 8f       	std	Y+27, r26	; 0x1b
    315e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3160:	69 8d       	ldd	r22, Y+25	; 0x19
    3162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3164:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3166:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4a e7       	ldi	r20, 0x7A	; 122
    316e:	53 e4       	ldi	r21, 0x43	; 67
    3170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	8d 8b       	std	Y+21, r24	; 0x15
    317a:	9e 8b       	std	Y+22, r25	; 0x16
    317c:	af 8b       	std	Y+23, r26	; 0x17
    317e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3180:	6d 89       	ldd	r22, Y+21	; 0x15
    3182:	7e 89       	ldd	r23, Y+22	; 0x16
    3184:	8f 89       	ldd	r24, Y+23	; 0x17
    3186:	98 8d       	ldd	r25, Y+24	; 0x18
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e8       	ldi	r20, 0x80	; 128
    318e:	5f e3       	ldi	r21, 0x3F	; 63
    3190:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3194:	88 23       	and	r24, r24
    3196:	2c f4       	brge	.+10     	; 0x31a2 <LCD_voidSendData+0x70c>
		__ticks = 1;
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	9c 8b       	std	Y+20, r25	; 0x14
    319e:	8b 8b       	std	Y+19, r24	; 0x13
    31a0:	3f c0       	rjmp	.+126    	; 0x3220 <LCD_voidSendData+0x78a>
	else if (__tmp > 65535)
    31a2:	6d 89       	ldd	r22, Y+21	; 0x15
    31a4:	7e 89       	ldd	r23, Y+22	; 0x16
    31a6:	8f 89       	ldd	r24, Y+23	; 0x17
    31a8:	98 8d       	ldd	r25, Y+24	; 0x18
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	3f ef       	ldi	r19, 0xFF	; 255
    31ae:	4f e7       	ldi	r20, 0x7F	; 127
    31b0:	57 e4       	ldi	r21, 0x47	; 71
    31b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b6:	18 16       	cp	r1, r24
    31b8:	4c f5       	brge	.+82     	; 0x320c <LCD_voidSendData+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ba:	69 8d       	ldd	r22, Y+25	; 0x19
    31bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e2       	ldi	r20, 0x20	; 32
    31c8:	51 e4       	ldi	r21, 0x41	; 65
    31ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	bc 01       	movw	r22, r24
    31d4:	cd 01       	movw	r24, r26
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	9c 8b       	std	Y+20, r25	; 0x14
    31e0:	8b 8b       	std	Y+19, r24	; 0x13
    31e2:	0f c0       	rjmp	.+30     	; 0x3202 <LCD_voidSendData+0x76c>
    31e4:	89 e1       	ldi	r24, 0x19	; 25
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	9a 8b       	std	Y+18, r25	; 0x12
    31ea:	89 8b       	std	Y+17, r24	; 0x11
    31ec:	89 89       	ldd	r24, Y+17	; 0x11
    31ee:	9a 89       	ldd	r25, Y+18	; 0x12
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	f1 f7       	brne	.-4      	; 0x31f0 <LCD_voidSendData+0x75a>
    31f4:	9a 8b       	std	Y+18, r25	; 0x12
    31f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f8:	8b 89       	ldd	r24, Y+19	; 0x13
    31fa:	9c 89       	ldd	r25, Y+20	; 0x14
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	9c 8b       	std	Y+20, r25	; 0x14
    3200:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3202:	8b 89       	ldd	r24, Y+19	; 0x13
    3204:	9c 89       	ldd	r25, Y+20	; 0x14
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	69 f7       	brne	.-38     	; 0x31e4 <LCD_voidSendData+0x74e>
    320a:	14 c0       	rjmp	.+40     	; 0x3234 <LCD_voidSendData+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320c:	6d 89       	ldd	r22, Y+21	; 0x15
    320e:	7e 89       	ldd	r23, Y+22	; 0x16
    3210:	8f 89       	ldd	r24, Y+23	; 0x17
    3212:	98 8d       	ldd	r25, Y+24	; 0x18
    3214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	9c 8b       	std	Y+20, r25	; 0x14
    321e:	8b 8b       	std	Y+19, r24	; 0x13
    3220:	8b 89       	ldd	r24, Y+19	; 0x13
    3222:	9c 89       	ldd	r25, Y+20	; 0x14
    3224:	98 8b       	std	Y+16, r25	; 0x10
    3226:	8f 87       	std	Y+15, r24	; 0x0f
    3228:	8f 85       	ldd	r24, Y+15	; 0x0f
    322a:	98 89       	ldd	r25, Y+16	; 0x10
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <LCD_voidSendData+0x796>
    3230:	98 8b       	std	Y+16, r25	; 0x10
    3232:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	62 e0       	ldi	r22, 0x02	; 2
    3238:	40 e0       	ldi	r20, 0x00	; 0
    323a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	a0 e8       	ldi	r26, 0x80	; 128
    3244:	bf e3       	ldi	r27, 0x3F	; 63
    3246:	8b 87       	std	Y+11, r24	; 0x0b
    3248:	9c 87       	std	Y+12, r25	; 0x0c
    324a:	ad 87       	std	Y+13, r26	; 0x0d
    324c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3250:	7c 85       	ldd	r23, Y+12	; 0x0c
    3252:	8d 85       	ldd	r24, Y+13	; 0x0d
    3254:	9e 85       	ldd	r25, Y+14	; 0x0e
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	4a e7       	ldi	r20, 0x7A	; 122
    325c:	53 e4       	ldi	r21, 0x43	; 67
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	8f 83       	std	Y+7, r24	; 0x07
    3268:	98 87       	std	Y+8, r25	; 0x08
    326a:	a9 87       	std	Y+9, r26	; 0x09
    326c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    326e:	6f 81       	ldd	r22, Y+7	; 0x07
    3270:	78 85       	ldd	r23, Y+8	; 0x08
    3272:	89 85       	ldd	r24, Y+9	; 0x09
    3274:	9a 85       	ldd	r25, Y+10	; 0x0a
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e8       	ldi	r20, 0x80	; 128
    327c:	5f e3       	ldi	r21, 0x3F	; 63
    327e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3282:	88 23       	and	r24, r24
    3284:	2c f4       	brge	.+10     	; 0x3290 <LCD_voidSendData+0x7fa>
		__ticks = 1;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
    328e:	3f c0       	rjmp	.+126    	; 0x330e <LCD_voidSendData+0x878>
	else if (__tmp > 65535)
    3290:	6f 81       	ldd	r22, Y+7	; 0x07
    3292:	78 85       	ldd	r23, Y+8	; 0x08
    3294:	89 85       	ldd	r24, Y+9	; 0x09
    3296:	9a 85       	ldd	r25, Y+10	; 0x0a
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	3f ef       	ldi	r19, 0xFF	; 255
    329c:	4f e7       	ldi	r20, 0x7F	; 127
    329e:	57 e4       	ldi	r21, 0x47	; 71
    32a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a4:	18 16       	cp	r1, r24
    32a6:	4c f5       	brge	.+82     	; 0x32fa <LCD_voidSendData+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e2       	ldi	r20, 0x20	; 32
    32b6:	51 e4       	ldi	r21, 0x41	; 65
    32b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	bc 01       	movw	r22, r24
    32c2:	cd 01       	movw	r24, r26
    32c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	9e 83       	std	Y+6, r25	; 0x06
    32ce:	8d 83       	std	Y+5, r24	; 0x05
    32d0:	0f c0       	rjmp	.+30     	; 0x32f0 <LCD_voidSendData+0x85a>
    32d2:	89 e1       	ldi	r24, 0x19	; 25
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	9c 83       	std	Y+4, r25	; 0x04
    32d8:	8b 83       	std	Y+3, r24	; 0x03
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	9c 81       	ldd	r25, Y+4	; 0x04
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <LCD_voidSendData+0x848>
    32e2:	9c 83       	std	Y+4, r25	; 0x04
    32e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e6:	8d 81       	ldd	r24, Y+5	; 0x05
    32e8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	9e 83       	std	Y+6, r25	; 0x06
    32ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f0:	8d 81       	ldd	r24, Y+5	; 0x05
    32f2:	9e 81       	ldd	r25, Y+6	; 0x06
    32f4:	00 97       	sbiw	r24, 0x00	; 0
    32f6:	69 f7       	brne	.-38     	; 0x32d2 <LCD_voidSendData+0x83c>
    32f8:	14 c0       	rjmp	.+40     	; 0x3322 <LCD_voidSendData+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fa:	6f 81       	ldd	r22, Y+7	; 0x07
    32fc:	78 85       	ldd	r23, Y+8	; 0x08
    32fe:	89 85       	ldd	r24, Y+9	; 0x09
    3300:	9a 85       	ldd	r25, Y+10	; 0x0a
    3302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	9e 83       	std	Y+6, r25	; 0x06
    330c:	8d 83       	std	Y+5, r24	; 0x05
    330e:	8d 81       	ldd	r24, Y+5	; 0x05
    3310:	9e 81       	ldd	r25, Y+6	; 0x06
    3312:	9a 83       	std	Y+2, r25	; 0x02
    3314:	89 83       	std	Y+1, r24	; 0x01
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	9a 81       	ldd	r25, Y+2	; 0x02
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	f1 f7       	brne	.-4      	; 0x331a <LCD_voidSendData+0x884>
    331e:	9a 83       	std	Y+2, r25	; 0x02
    3320:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
#endif
}
    3322:	cd 59       	subi	r28, 0x9D	; 157
    3324:	df 4f       	sbci	r29, 0xFF	; 255
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	f8 94       	cli
    332a:	de bf       	out	0x3e, r29	; 62
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	cd bf       	out	0x3d, r28	; 61
    3330:	cf 91       	pop	r28
    3332:	df 91       	pop	r29
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
    3338:	08 95       	ret

0000333a <LCD_voidDisplayString>:


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	00 d0       	rcall	.+0      	; 0x3340 <LCD_voidDisplayString+0x6>
    3340:	0f 92       	push	r0
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	9b 83       	std	Y+3, r25	; 0x03
    3348:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    334a:	19 82       	std	Y+1, r1	; 0x01
    334c:	0e c0       	rjmp	.+28     	; 0x336a <LCD_voidDisplayString+0x30>
	while(str[i] != '\0') {
		LCD_voidSendData(str[i]);
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	9b 81       	ldd	r25, Y+3	; 0x03
    3358:	fc 01       	movw	r30, r24
    335a:	e2 0f       	add	r30, r18
    335c:	f3 1f       	adc	r31, r19
    335e:	80 81       	ld	r24, Z
    3360:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_voidSendData>
		i++;
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	8f 5f       	subi	r24, 0xFF	; 255
    3368:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
	u8 i = 0;
	while(str[i] != '\0') {
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	8a 81       	ldd	r24, Y+2	; 0x02
    3372:	9b 81       	ldd	r25, Y+3	; 0x03
    3374:	fc 01       	movw	r30, r24
    3376:	e2 0f       	add	r30, r18
    3378:	f3 1f       	adc	r31, r19
    337a:	80 81       	ld	r24, Z
    337c:	88 23       	and	r24, r24
    337e:	39 f7       	brne	.-50     	; 0x334e <LCD_voidDisplayString+0x14>
		LCD_voidSendData(str[i]);
		i++;
	}
}
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	cf 91       	pop	r28
    3388:	df 91       	pop	r29
    338a:	08 95       	ret

0000338c <LCD_voidSetCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_voidSetCursor(u8 copy_u8row, u8 copy_u8_col) {
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	00 d0       	rcall	.+0      	; 0x3392 <LCD_voidSetCursor+0x6>
    3392:	00 d0       	rcall	.+0      	; 0x3394 <LCD_voidSetCursor+0x8>
    3394:	0f 92       	push	r0
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	8a 83       	std	Y+2, r24	; 0x02
    339c:	6b 83       	std	Y+3, r22	; 0x03
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	3d 83       	std	Y+5, r19	; 0x05
    33a6:	2c 83       	std	Y+4, r18	; 0x04
    33a8:	8c 81       	ldd	r24, Y+4	; 0x04
    33aa:	9d 81       	ldd	r25, Y+5	; 0x05
    33ac:	81 30       	cpi	r24, 0x01	; 1
    33ae:	91 05       	cpc	r25, r1
    33b0:	c1 f0       	breq	.+48     	; 0x33e2 <LCD_voidSetCursor+0x56>
    33b2:	2c 81       	ldd	r18, Y+4	; 0x04
    33b4:	3d 81       	ldd	r19, Y+5	; 0x05
    33b6:	22 30       	cpi	r18, 0x02	; 2
    33b8:	31 05       	cpc	r19, r1
    33ba:	2c f4       	brge	.+10     	; 0x33c6 <LCD_voidSetCursor+0x3a>
    33bc:	8c 81       	ldd	r24, Y+4	; 0x04
    33be:	9d 81       	ldd	r25, Y+5	; 0x05
    33c0:	00 97       	sbiw	r24, 0x00	; 0
    33c2:	61 f0       	breq	.+24     	; 0x33dc <LCD_voidSetCursor+0x50>
    33c4:	19 c0       	rjmp	.+50     	; 0x33f8 <LCD_voidSetCursor+0x6c>
    33c6:	2c 81       	ldd	r18, Y+4	; 0x04
    33c8:	3d 81       	ldd	r19, Y+5	; 0x05
    33ca:	22 30       	cpi	r18, 0x02	; 2
    33cc:	31 05       	cpc	r19, r1
    33ce:	69 f0       	breq	.+26     	; 0x33ea <LCD_voidSetCursor+0x5e>
    33d0:	8c 81       	ldd	r24, Y+4	; 0x04
    33d2:	9d 81       	ldd	r25, Y+5	; 0x05
    33d4:	83 30       	cpi	r24, 0x03	; 3
    33d6:	91 05       	cpc	r25, r1
    33d8:	61 f0       	breq	.+24     	; 0x33f2 <LCD_voidSetCursor+0x66>
    33da:	0e c0       	rjmp	.+28     	; 0x33f8 <LCD_voidSetCursor+0x6c>
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
    33dc:	8b 81       	ldd	r24, Y+3	; 0x03
    33de:	89 83       	std	Y+1, r24	; 0x01
    33e0:	0b c0       	rjmp	.+22     	; 0x33f8 <LCD_voidSetCursor+0x6c>
			break;
		case LINE1:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x40;
    33e2:	8b 81       	ldd	r24, Y+3	; 0x03
    33e4:	80 5c       	subi	r24, 0xC0	; 192
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	07 c0       	rjmp	.+14     	; 0x33f8 <LCD_voidSetCursor+0x6c>
			break;
		case LINE2:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x10;
    33ea:	8b 81       	ldd	r24, Y+3	; 0x03
    33ec:	80 5f       	subi	r24, 0xF0	; 240
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	03 c0       	rjmp	.+6      	; 0x33f8 <LCD_voidSetCursor+0x6c>
			break;
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	80 5b       	subi	r24, 0xB0	; 176
    33f6:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_voidSendCommand(LCD_MEMORY_ADDRESS | LINE0_ADDRESS);
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	80 68       	ori	r24, 0x80	; 128
    33fc:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_voidSendCommand>
//					break;
//			default:
//				LCD_voidDisplayString("default", 0, 0);
//				break;
//		}
}
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	08 95       	ret

00003410 <LCD_voidIntgerToString>:


// LCD only understands ASCII, so this converts Int to a string
void LCD_voidIntgerToString(u32 copy_u32data) {
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	64 97       	sbiw	r28, 0x14	; 20
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	69 8b       	std	Y+17, r22	; 0x11
    3426:	7a 8b       	std	Y+18, r23	; 0x12
    3428:	8b 8b       	std	Y+19, r24	; 0x13
    342a:	9c 8b       	std	Y+20, r25	; 0x14
	// A string to hold the ASCII values
	cu8 buffer[16];

	// Converts data to its ASCII
	itoa(copy_u32data, buffer, 10);
    342c:	89 89       	ldd	r24, Y+17	; 0x11
    342e:	9a 89       	ldd	r25, Y+18	; 0x12
    3430:	9e 01       	movw	r18, r28
    3432:	2f 5f       	subi	r18, 0xFF	; 255
    3434:	3f 4f       	sbci	r19, 0xFF	; 255
    3436:	b9 01       	movw	r22, r18
    3438:	4a e0       	ldi	r20, 0x0A	; 10
    343a:	50 e0       	ldi	r21, 0x00	; 0
    343c:	0e 94 9f 1c 	call	0x393e	; 0x393e <itoa>

	// Display string with the results in the buffer
	LCD_voidDisplayString(buffer);
    3440:	ce 01       	movw	r24, r28
    3442:	01 96       	adiw	r24, 0x01	; 1
    3444:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_voidDisplayString>
}
    3448:	64 96       	adiw	r28, 0x14	; 20
    344a:	0f b6       	in	r0, 0x3f	; 63
    344c:	f8 94       	cli
    344e:	de bf       	out	0x3e, r29	; 62
    3450:	0f be       	out	0x3f, r0	; 63
    3452:	cd bf       	out	0x3d, r28	; 61
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <LCD_voidClearScreen>:

// Clears the LCD from any garbage
void LCD_voidClearScreen(void) {
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_voidSendCommand>
}
    3468:	cf 91       	pop	r28
    346a:	df 91       	pop	r29
    346c:	08 95       	ret

0000346e <KEYPAD_voidInit>:
u8 KPD_COL_PIN_VAL [] = KPD_ARR_COL_PIN;

u8 KPD_DATA [KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VALUES;


void KEYPAD_voidInit(void) {
    346e:	df 93       	push	r29
    3470:	cf 93       	push	r28
    3472:	00 d0       	rcall	.+0      	; 0x3474 <KEYPAD_voidInit+0x6>
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    3478:	1a 82       	std	Y+2, r1	; 0x02
    347a:	29 c0       	rjmp	.+82     	; 0x34ce <KEYPAD_voidInit+0x60>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	88 2f       	mov	r24, r24
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	fc 01       	movw	r30, r24
    3484:	e9 57       	subi	r30, 0x79	; 121
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	20 81       	ld	r18, Z
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	88 2f       	mov	r24, r24
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	fc 01       	movw	r30, r24
    3492:	e5 57       	subi	r30, 0x75	; 117
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	90 81       	ld	r25, Z
    3498:	82 2f       	mov	r24, r18
    349a:	69 2f       	mov	r22, r25
    349c:	41 e0       	ldi	r20, 0x01	; 1
    349e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	88 2f       	mov	r24, r24
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	fc 01       	movw	r30, r24
    34aa:	e9 57       	subi	r30, 0x79	; 121
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	20 81       	ld	r18, Z
    34b0:	8a 81       	ldd	r24, Y+2	; 0x02
    34b2:	88 2f       	mov	r24, r24
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	fc 01       	movw	r30, r24
    34b8:	e5 57       	subi	r30, 0x75	; 117
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	90 81       	ld	r25, Z
    34be:	82 2f       	mov	r24, r18
    34c0:	69 2f       	mov	r22, r25
    34c2:	41 e0       	ldi	r20, 0x01	; 1
    34c4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>

void KEYPAD_voidInit(void) {
	/* Setup PORT and PINS for for KEYPAD Rows*/
	u8 counter1, counter2;

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
    34c8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	8a 83       	std	Y+2, r24	; 0x02
    34ce:	8a 81       	ldd	r24, Y+2	; 0x02
    34d0:	84 30       	cpi	r24, 0x04	; 4
    34d2:	a0 f2       	brcs	.-88     	; 0x347c <KEYPAD_voidInit+0xe>
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    34d4:	19 82       	std	Y+1, r1	; 0x01
    34d6:	16 c0       	rjmp	.+44     	; 0x3504 <KEYPAD_voidInit+0x96>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	88 2f       	mov	r24, r24
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	fc 01       	movw	r30, r24
    34e0:	e1 57       	subi	r30, 0x71	; 113
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	20 81       	ld	r18, Z
    34e6:	89 81       	ldd	r24, Y+1	; 0x01
    34e8:	88 2f       	mov	r24, r24
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	fc 01       	movw	r30, r24
    34ee:	ed 56       	subi	r30, 0x6D	; 109
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	90 81       	ld	r25, Z
    34f4:	82 2f       	mov	r24, r18
    34f6:	69 2f       	mov	r22, r25
    34f8:	40 e0       	ldi	r20, 0x00	; 0
    34fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>

	for(counter1 = 0 ; counter1 < KPD_ROW_NUM ; counter1++) {
		GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], PIN_OUTPUT);
		GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[counter1], KPD_ROW_PIN_VAL[counter1], LOGIC_HIGH);
	}
	for(counter2 = 0 ; counter2 < KPD_COL_NUM ; counter2++) {
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	8f 5f       	subi	r24, 0xFF	; 255
    3502:	89 83       	std	Y+1, r24	; 0x01
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	84 30       	cpi	r24, 0x04	; 4
    3508:	38 f3       	brcs	.-50     	; 0x34d8 <KEYPAD_voidInit+0x6a>
		GPIO_voidSetPinDirection(KPD_COL_PORT_VAL[counter2], KPD_COL_PIN_VAL[counter2], PIN_INPUT);
	}
}
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	cf 91       	pop	r28
    3510:	df 91       	pop	r29
    3512:	08 95       	ret

00003514 <KEYPAD_u8getPressedKey>:


u8 KEYPAD_u8getPressedKey(void) {
    3514:	df 93       	push	r29
    3516:	cf 93       	push	r28
    3518:	00 d0       	rcall	.+0      	; 0x351a <KEYPAD_u8getPressedKey+0x6>
    351a:	0f 92       	push	r0
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
	u8 row, col, dataValue = 0xff;
    3520:	8f ef       	ldi	r24, 0xFF	; 255
    3522:	89 83       	std	Y+1, r24	; 0x01
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    3524:	1b 82       	std	Y+3, r1	; 0x03
    3526:	6a c0       	rjmp	.+212    	; 0x35fc <KEYPAD_u8getPressedKey+0xe8>

			// I set the pin by '1' for the row, and will iterate
			GPIO_voidSetPinDirection(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], PIN_OUTPUT);
    3528:	8b 81       	ldd	r24, Y+3	; 0x03
    352a:	88 2f       	mov	r24, r24
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	fc 01       	movw	r30, r24
    3530:	e9 57       	subi	r30, 0x79	; 121
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	20 81       	ld	r18, Z
    3536:	8b 81       	ldd	r24, Y+3	; 0x03
    3538:	88 2f       	mov	r24, r24
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	fc 01       	movw	r30, r24
    353e:	e5 57       	subi	r30, 0x75	; 117
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	90 81       	ld	r25, Z
    3544:	82 2f       	mov	r24, r18
    3546:	69 2f       	mov	r22, r25
    3548:	41 e0       	ldi	r20, 0x01	; 1
    354a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_voidSetPinDirection>

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	88 2f       	mov	r24, r24
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	fc 01       	movw	r30, r24
    3556:	e9 57       	subi	r30, 0x79	; 121
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	20 81       	ld	r18, Z
    355c:	8b 81       	ldd	r24, Y+3	; 0x03
    355e:	88 2f       	mov	r24, r24
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	fc 01       	movw	r30, r24
    3564:	e5 57       	subi	r30, 0x75	; 117
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	90 81       	ld	r25, Z
    356a:	82 2f       	mov	r24, r18
    356c:	69 2f       	mov	r22, r25
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    3574:	1a 82       	std	Y+2, r1	; 0x02
    3576:	29 c0       	rjmp	.+82     	; 0x35ca <KEYPAD_u8getPressedKey+0xb6>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	88 2f       	mov	r24, r24
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	fc 01       	movw	r30, r24
    3580:	e1 57       	subi	r30, 0x71	; 113
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	20 81       	ld	r18, Z
    3586:	8a 81       	ldd	r24, Y+2	; 0x02
    3588:	88 2f       	mov	r24, r24
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	fc 01       	movw	r30, r24
    358e:	ed 56       	subi	r30, 0x6D	; 109
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	90 81       	ld	r25, Z
    3594:	82 2f       	mov	r24, r18
    3596:	69 2f       	mov	r22, r25
    3598:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_u8GetPinValue>
    359c:	88 23       	and	r24, r24
    359e:	91 f4       	brne	.+36     	; 0x35c4 <KEYPAD_u8getPressedKey+0xb0>
					dataValue = KPD_DATA[row][col];
    35a0:	8b 81       	ldd	r24, Y+3	; 0x03
    35a2:	48 2f       	mov	r20, r24
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	28 2f       	mov	r18, r24
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	ca 01       	movw	r24, r20
    35ae:	88 0f       	add	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	82 0f       	add	r24, r18
    35b8:	93 1f       	adc	r25, r19
    35ba:	fc 01       	movw	r30, r24
    35bc:	e9 56       	subi	r30, 0x69	; 105
    35be:	ff 4f       	sbci	r31, 0xFF	; 255
    35c0:	80 81       	ld	r24, Z
    35c2:	89 83       	std	Y+1, r24	; 0x01

			/* Set/Clear the row output pin */
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_PRESSED);
			//_delay_ms(8);

			for (col = 0 ; col < KPD_COL_NUM ; col++) {
    35c4:	8a 81       	ldd	r24, Y+2	; 0x02
    35c6:	8f 5f       	subi	r24, 0xFF	; 255
    35c8:	8a 83       	std	Y+2, r24	; 0x02
    35ca:	8a 81       	ldd	r24, Y+2	; 0x02
    35cc:	84 30       	cpi	r24, 0x04	; 4
    35ce:	a0 f2       	brcs	.-88     	; 0x3578 <KEYPAD_u8getPressedKey+0x64>
				/* Check if the switch is pressed in this column */
				if(GPIO_u8GetPinValue(KPD_COL_PORT_VAL[col], KPD_COL_PIN_VAL[col]) == KPD_BTN_PRESSED) {
					dataValue = KPD_DATA[row][col];
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
    35d0:	8b 81       	ldd	r24, Y+3	; 0x03
    35d2:	88 2f       	mov	r24, r24
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	fc 01       	movw	r30, r24
    35d8:	e9 57       	subi	r30, 0x79	; 121
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	20 81       	ld	r18, Z
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	88 2f       	mov	r24, r24
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	fc 01       	movw	r30, r24
    35e6:	e5 57       	subi	r30, 0x75	; 117
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	90 81       	ld	r25, Z
    35ec:	82 2f       	mov	r24, r18
    35ee:	69 2f       	mov	r22, r25
    35f0:	41 e0       	ldi	r20, 0x01	; 1
    35f2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <GPIO_voidSetPinValue>


u8 KEYPAD_u8getPressedKey(void) {
	u8 row, col, dataValue = 0xff;
	//while(1) {
		for (row = 0 ; row < KPD_ROW_NUM ; row++) {
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	8f 5f       	subi	r24, 0xFF	; 255
    35fa:	8b 83       	std	Y+3, r24	; 0x03
    35fc:	8b 81       	ldd	r24, Y+3	; 0x03
    35fe:	84 30       	cpi	r24, 0x04	; 4
    3600:	08 f4       	brcc	.+2      	; 0x3604 <KEYPAD_u8getPressedKey+0xf0>
    3602:	92 cf       	rjmp	.-220    	; 0x3528 <KEYPAD_u8getPressedKey+0x14>
				}
			}
			GPIO_voidSetPinValue(KPD_ROW_PORT_VAL[row], KPD_ROW_PIN_VAL[row], KPD_BTN_RELEASED);
		//}
	}
	return dataValue;
    3604:	89 81       	ldd	r24, Y+1	; 0x01
}
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <System_Initialization>:
 *******************************************************************************/
u8 Line = 0;
u8 Column = 0;
u8 Flag = 0;

void System_Initialization(void) {
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
    361a:	2e 97       	sbiw	r28, 0x0e	; 14
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    3626:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_voidInit>
	LCD_voidSetCursor(0, 0);
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_voidSetCursor>
	LCD_voidDisplayString("Welcome to the");
    3632:	80 e6       	ldi	r24, 0x60	; 96
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_voidDisplayString>
	LCD_voidSetCursor(1, 0);
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_voidSetCursor>
	LCD_voidDisplayString("Bouncing Star !");
    3642:	8f e6       	ldi	r24, 0x6F	; 111
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_voidDisplayString>
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	90 e8       	ldi	r25, 0x80	; 128
    364e:	ab e3       	ldi	r26, 0x3B	; 59
    3650:	b5 e4       	ldi	r27, 0x45	; 69
    3652:	8b 87       	std	Y+11, r24	; 0x0b
    3654:	9c 87       	std	Y+12, r25	; 0x0c
    3656:	ad 87       	std	Y+13, r26	; 0x0d
    3658:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    365a:	6b 85       	ldd	r22, Y+11	; 0x0b
    365c:	7c 85       	ldd	r23, Y+12	; 0x0c
    365e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3660:	9e 85       	ldd	r25, Y+14	; 0x0e
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	4a e7       	ldi	r20, 0x7A	; 122
    3668:	53 e4       	ldi	r21, 0x43	; 67
    366a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	8f 83       	std	Y+7, r24	; 0x07
    3674:	98 87       	std	Y+8, r25	; 0x08
    3676:	a9 87       	std	Y+9, r26	; 0x09
    3678:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    367a:	6f 81       	ldd	r22, Y+7	; 0x07
    367c:	78 85       	ldd	r23, Y+8	; 0x08
    367e:	89 85       	ldd	r24, Y+9	; 0x09
    3680:	9a 85       	ldd	r25, Y+10	; 0x0a
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	40 e8       	ldi	r20, 0x80	; 128
    3688:	5f e3       	ldi	r21, 0x3F	; 63
    368a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    368e:	88 23       	and	r24, r24
    3690:	2c f4       	brge	.+10     	; 0x369c <System_Initialization+0x8a>
		__ticks = 1;
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	9e 83       	std	Y+6, r25	; 0x06
    3698:	8d 83       	std	Y+5, r24	; 0x05
    369a:	3f c0       	rjmp	.+126    	; 0x371a <System_Initialization+0x108>
	else if (__tmp > 65535)
    369c:	6f 81       	ldd	r22, Y+7	; 0x07
    369e:	78 85       	ldd	r23, Y+8	; 0x08
    36a0:	89 85       	ldd	r24, Y+9	; 0x09
    36a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	3f ef       	ldi	r19, 0xFF	; 255
    36a8:	4f e7       	ldi	r20, 0x7F	; 127
    36aa:	57 e4       	ldi	r21, 0x47	; 71
    36ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36b0:	18 16       	cp	r1, r24
    36b2:	4c f5       	brge	.+82     	; 0x3706 <System_Initialization+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	40 e2       	ldi	r20, 0x20	; 32
    36c2:	51 e4       	ldi	r21, 0x41	; 65
    36c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	bc 01       	movw	r22, r24
    36ce:	cd 01       	movw	r24, r26
    36d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	9e 83       	std	Y+6, r25	; 0x06
    36da:	8d 83       	std	Y+5, r24	; 0x05
    36dc:	0f c0       	rjmp	.+30     	; 0x36fc <System_Initialization+0xea>
    36de:	89 e1       	ldi	r24, 0x19	; 25
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	9c 83       	std	Y+4, r25	; 0x04
    36e4:	8b 83       	std	Y+3, r24	; 0x03
    36e6:	8b 81       	ldd	r24, Y+3	; 0x03
    36e8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ea:	01 97       	sbiw	r24, 0x01	; 1
    36ec:	f1 f7       	brne	.-4      	; 0x36ea <System_Initialization+0xd8>
    36ee:	9c 83       	std	Y+4, r25	; 0x04
    36f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f2:	8d 81       	ldd	r24, Y+5	; 0x05
    36f4:	9e 81       	ldd	r25, Y+6	; 0x06
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	9e 83       	std	Y+6, r25	; 0x06
    36fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36fc:	8d 81       	ldd	r24, Y+5	; 0x05
    36fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3700:	00 97       	sbiw	r24, 0x00	; 0
    3702:	69 f7       	brne	.-38     	; 0x36de <System_Initialization+0xcc>
    3704:	14 c0       	rjmp	.+40     	; 0x372e <System_Initialization+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3706:	6f 81       	ldd	r22, Y+7	; 0x07
    3708:	78 85       	ldd	r23, Y+8	; 0x08
    370a:	89 85       	ldd	r24, Y+9	; 0x09
    370c:	9a 85       	ldd	r25, Y+10	; 0x0a
    370e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	9e 83       	std	Y+6, r25	; 0x06
    3718:	8d 83       	std	Y+5, r24	; 0x05
    371a:	8d 81       	ldd	r24, Y+5	; 0x05
    371c:	9e 81       	ldd	r25, Y+6	; 0x06
    371e:	9a 83       	std	Y+2, r25	; 0x02
    3720:	89 83       	std	Y+1, r24	; 0x01
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	9a 81       	ldd	r25, Y+2	; 0x02
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	f1 f7       	brne	.-4      	; 0x3726 <System_Initialization+0x114>
    372a:	9a 83       	std	Y+2, r25	; 0x02
    372c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	LCD_voidClearScreen();
    372e:	0e 94 2d 1a 	call	0x345a	; 0x345a <LCD_voidClearScreen>
}
    3732:	2e 96       	adiw	r28, 0x0e	; 14
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	de bf       	out	0x3e, r29	; 62
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <dancingStar>:

void dancingStar(void) {
    3744:	df 93       	push	r29
    3746:	cf 93       	push	r28
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	2e 97       	sbiw	r28, 0x0e	; 14
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	f8 94       	cli
    3752:	de bf       	out	0x3e, r29	; 62
    3754:	0f be       	out	0x3f, r0	; 63
    3756:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSetCursor(Line, Column);
    3758:	80 91 a8 00 	lds	r24, 0x00A8
    375c:	90 91 a9 00 	lds	r25, 0x00A9
    3760:	69 2f       	mov	r22, r25
    3762:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_voidSetCursor>
	LCD_voidSendData('X');
    3766:	88 e5       	ldi	r24, 0x58	; 88
    3768:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_voidSendData>
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	a8 ec       	ldi	r26, 0xC8	; 200
    3772:	b3 e4       	ldi	r27, 0x43	; 67
    3774:	8b 87       	std	Y+11, r24	; 0x0b
    3776:	9c 87       	std	Y+12, r25	; 0x0c
    3778:	ad 87       	std	Y+13, r26	; 0x0d
    377a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377c:	6b 85       	ldd	r22, Y+11	; 0x0b
    377e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3780:	8d 85       	ldd	r24, Y+13	; 0x0d
    3782:	9e 85       	ldd	r25, Y+14	; 0x0e
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	4a e7       	ldi	r20, 0x7A	; 122
    378a:	53 e4       	ldi	r21, 0x43	; 67
    378c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	8f 83       	std	Y+7, r24	; 0x07
    3796:	98 87       	std	Y+8, r25	; 0x08
    3798:	a9 87       	std	Y+9, r26	; 0x09
    379a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    379c:	6f 81       	ldd	r22, Y+7	; 0x07
    379e:	78 85       	ldd	r23, Y+8	; 0x08
    37a0:	89 85       	ldd	r24, Y+9	; 0x09
    37a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e8       	ldi	r20, 0x80	; 128
    37aa:	5f e3       	ldi	r21, 0x3F	; 63
    37ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37b0:	88 23       	and	r24, r24
    37b2:	2c f4       	brge	.+10     	; 0x37be <dancingStar+0x7a>
		__ticks = 1;
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	9e 83       	std	Y+6, r25	; 0x06
    37ba:	8d 83       	std	Y+5, r24	; 0x05
    37bc:	3f c0       	rjmp	.+126    	; 0x383c <dancingStar+0xf8>
	else if (__tmp > 65535)
    37be:	6f 81       	ldd	r22, Y+7	; 0x07
    37c0:	78 85       	ldd	r23, Y+8	; 0x08
    37c2:	89 85       	ldd	r24, Y+9	; 0x09
    37c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	3f ef       	ldi	r19, 0xFF	; 255
    37ca:	4f e7       	ldi	r20, 0x7F	; 127
    37cc:	57 e4       	ldi	r21, 0x47	; 71
    37ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37d2:	18 16       	cp	r1, r24
    37d4:	4c f5       	brge	.+82     	; 0x3828 <dancingStar+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37da:	8d 85       	ldd	r24, Y+13	; 0x0d
    37dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e2       	ldi	r20, 0x20	; 32
    37e4:	51 e4       	ldi	r21, 0x41	; 65
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	bc 01       	movw	r22, r24
    37f0:	cd 01       	movw	r24, r26
    37f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	9e 83       	std	Y+6, r25	; 0x06
    37fc:	8d 83       	std	Y+5, r24	; 0x05
    37fe:	0f c0       	rjmp	.+30     	; 0x381e <dancingStar+0xda>
    3800:	89 e1       	ldi	r24, 0x19	; 25
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	9c 83       	std	Y+4, r25	; 0x04
    3806:	8b 83       	std	Y+3, r24	; 0x03
    3808:	8b 81       	ldd	r24, Y+3	; 0x03
    380a:	9c 81       	ldd	r25, Y+4	; 0x04
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	f1 f7       	brne	.-4      	; 0x380c <dancingStar+0xc8>
    3810:	9c 83       	std	Y+4, r25	; 0x04
    3812:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3814:	8d 81       	ldd	r24, Y+5	; 0x05
    3816:	9e 81       	ldd	r25, Y+6	; 0x06
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	9e 83       	std	Y+6, r25	; 0x06
    381c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    381e:	8d 81       	ldd	r24, Y+5	; 0x05
    3820:	9e 81       	ldd	r25, Y+6	; 0x06
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	69 f7       	brne	.-38     	; 0x3800 <dancingStar+0xbc>
    3826:	14 c0       	rjmp	.+40     	; 0x3850 <dancingStar+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3828:	6f 81       	ldd	r22, Y+7	; 0x07
    382a:	78 85       	ldd	r23, Y+8	; 0x08
    382c:	89 85       	ldd	r24, Y+9	; 0x09
    382e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	9e 83       	std	Y+6, r25	; 0x06
    383a:	8d 83       	std	Y+5, r24	; 0x05
    383c:	8d 81       	ldd	r24, Y+5	; 0x05
    383e:	9e 81       	ldd	r25, Y+6	; 0x06
    3840:	9a 83       	std	Y+2, r25	; 0x02
    3842:	89 83       	std	Y+1, r24	; 0x01
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	9a 81       	ldd	r25, Y+2	; 0x02
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	f1 f7       	brne	.-4      	; 0x3848 <dancingStar+0x104>
    384c:	9a 83       	std	Y+2, r25	; 0x02
    384e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
	LCD_voidSetCursor(Line, Column);
    3850:	80 91 a8 00 	lds	r24, 0x00A8
    3854:	90 91 a9 00 	lds	r25, 0x00A9
    3858:	69 2f       	mov	r22, r25
    385a:	0e 94 c6 19 	call	0x338c	; 0x338c <LCD_voidSetCursor>
	LCD_voidSendData(' ');
    385e:	80 e2       	ldi	r24, 0x20	; 32
    3860:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_voidSendData>

	if(Flag == 0) {
    3864:	80 91 aa 00 	lds	r24, 0x00AA
    3868:	88 23       	and	r24, r24
    386a:	69 f4       	brne	.+26     	; 0x3886 <dancingStar+0x142>
		Line++;
    386c:	80 91 a8 00 	lds	r24, 0x00A8
    3870:	8f 5f       	subi	r24, 0xFF	; 255
    3872:	80 93 a8 00 	sts	0x00A8, r24
		if(Line > 2) {
    3876:	80 91 a8 00 	lds	r24, 0x00A8
    387a:	83 30       	cpi	r24, 0x03	; 3
    387c:	78 f0       	brcs	.+30     	; 0x389c <dancingStar+0x158>
			Flag = 1;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	80 93 aa 00 	sts	0x00AA, r24
    3884:	0b c0       	rjmp	.+22     	; 0x389c <dancingStar+0x158>
		}
	}
	else {
		Line--;
    3886:	80 91 a8 00 	lds	r24, 0x00A8
    388a:	81 50       	subi	r24, 0x01	; 1
    388c:	80 93 a8 00 	sts	0x00A8, r24
		if(Line < 1) {
    3890:	80 91 a8 00 	lds	r24, 0x00A8
    3894:	88 23       	and	r24, r24
    3896:	11 f4       	brne	.+4      	; 0x389c <dancingStar+0x158>
			Flag = 0;
    3898:	10 92 aa 00 	sts	0x00AA, r1
		}
	}

	if(Column > 19) {
    389c:	80 91 a9 00 	lds	r24, 0x00A9
    38a0:	84 31       	cpi	r24, 0x14	; 20
    38a2:	20 f0       	brcs	.+8      	; 0x38ac <dancingStar+0x168>
		Column = 0;
    38a4:	10 92 a9 00 	sts	0x00A9, r1
		Line = 0;
    38a8:	10 92 a8 00 	sts	0x00A8, r1
	}
}
    38ac:	2e 96       	adiw	r28, 0x0e	; 14
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	08 95       	ret

000038be <main>:

/*******************************************************************************
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void) {
    38be:	df 93       	push	r29
    38c0:	cf 93       	push	r28
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
	System_Initialization();
    38c6:	0e 94 09 1b 	call	0x3612	; 0x3612 <System_Initialization>

	while (1)
	{
		dancingStar();
    38ca:	0e 94 a2 1b 	call	0x3744	; 0x3744 <dancingStar>
    38ce:	fd cf       	rjmp	.-6      	; 0x38ca <main+0xc>

000038d0 <__prologue_saves__>:
    38d0:	2f 92       	push	r2
    38d2:	3f 92       	push	r3
    38d4:	4f 92       	push	r4
    38d6:	5f 92       	push	r5
    38d8:	6f 92       	push	r6
    38da:	7f 92       	push	r7
    38dc:	8f 92       	push	r8
    38de:	9f 92       	push	r9
    38e0:	af 92       	push	r10
    38e2:	bf 92       	push	r11
    38e4:	cf 92       	push	r12
    38e6:	df 92       	push	r13
    38e8:	ef 92       	push	r14
    38ea:	ff 92       	push	r15
    38ec:	0f 93       	push	r16
    38ee:	1f 93       	push	r17
    38f0:	cf 93       	push	r28
    38f2:	df 93       	push	r29
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	ca 1b       	sub	r28, r26
    38fa:	db 0b       	sbc	r29, r27
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61
    3906:	09 94       	ijmp

00003908 <__epilogue_restores__>:
    3908:	2a 88       	ldd	r2, Y+18	; 0x12
    390a:	39 88       	ldd	r3, Y+17	; 0x11
    390c:	48 88       	ldd	r4, Y+16	; 0x10
    390e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3910:	6e 84       	ldd	r6, Y+14	; 0x0e
    3912:	7d 84       	ldd	r7, Y+13	; 0x0d
    3914:	8c 84       	ldd	r8, Y+12	; 0x0c
    3916:	9b 84       	ldd	r9, Y+11	; 0x0b
    3918:	aa 84       	ldd	r10, Y+10	; 0x0a
    391a:	b9 84       	ldd	r11, Y+9	; 0x09
    391c:	c8 84       	ldd	r12, Y+8	; 0x08
    391e:	df 80       	ldd	r13, Y+7	; 0x07
    3920:	ee 80       	ldd	r14, Y+6	; 0x06
    3922:	fd 80       	ldd	r15, Y+5	; 0x05
    3924:	0c 81       	ldd	r16, Y+4	; 0x04
    3926:	1b 81       	ldd	r17, Y+3	; 0x03
    3928:	aa 81       	ldd	r26, Y+2	; 0x02
    392a:	b9 81       	ldd	r27, Y+1	; 0x01
    392c:	ce 0f       	add	r28, r30
    392e:	d1 1d       	adc	r29, r1
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	ed 01       	movw	r28, r26
    393c:	08 95       	ret

0000393e <itoa>:
    393e:	fb 01       	movw	r30, r22
    3940:	9f 01       	movw	r18, r30
    3942:	e8 94       	clt
    3944:	42 30       	cpi	r20, 0x02	; 2
    3946:	c4 f0       	brlt	.+48     	; 0x3978 <itoa+0x3a>
    3948:	45 32       	cpi	r20, 0x25	; 37
    394a:	b4 f4       	brge	.+44     	; 0x3978 <itoa+0x3a>
    394c:	4a 30       	cpi	r20, 0x0A	; 10
    394e:	29 f4       	brne	.+10     	; 0x395a <itoa+0x1c>
    3950:	97 fb       	bst	r25, 7
    3952:	1e f4       	brtc	.+6      	; 0x395a <itoa+0x1c>
    3954:	90 95       	com	r25
    3956:	81 95       	neg	r24
    3958:	9f 4f       	sbci	r25, 0xFF	; 255
    395a:	64 2f       	mov	r22, r20
    395c:	77 27       	eor	r23, r23
    395e:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__udivmodhi4>
    3962:	80 5d       	subi	r24, 0xD0	; 208
    3964:	8a 33       	cpi	r24, 0x3A	; 58
    3966:	0c f0       	brlt	.+2      	; 0x396a <itoa+0x2c>
    3968:	89 5d       	subi	r24, 0xD9	; 217
    396a:	81 93       	st	Z+, r24
    396c:	cb 01       	movw	r24, r22
    396e:	00 97       	sbiw	r24, 0x00	; 0
    3970:	a1 f7       	brne	.-24     	; 0x395a <itoa+0x1c>
    3972:	16 f4       	brtc	.+4      	; 0x3978 <itoa+0x3a>
    3974:	5d e2       	ldi	r21, 0x2D	; 45
    3976:	51 93       	st	Z+, r21
    3978:	10 82       	st	Z, r1
    397a:	c9 01       	movw	r24, r18
    397c:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <strrev>

00003980 <strrev>:
    3980:	dc 01       	movw	r26, r24
    3982:	fc 01       	movw	r30, r24
    3984:	67 2f       	mov	r22, r23
    3986:	71 91       	ld	r23, Z+
    3988:	77 23       	and	r23, r23
    398a:	e1 f7       	brne	.-8      	; 0x3984 <strrev+0x4>
    398c:	32 97       	sbiw	r30, 0x02	; 2
    398e:	04 c0       	rjmp	.+8      	; 0x3998 <strrev+0x18>
    3990:	7c 91       	ld	r23, X
    3992:	6d 93       	st	X+, r22
    3994:	70 83       	st	Z, r23
    3996:	62 91       	ld	r22, -Z
    3998:	ae 17       	cp	r26, r30
    399a:	bf 07       	cpc	r27, r31
    399c:	c8 f3       	brcs	.-14     	; 0x3990 <strrev+0x10>
    399e:	08 95       	ret

000039a0 <__udivmodhi4>:
    39a0:	aa 1b       	sub	r26, r26
    39a2:	bb 1b       	sub	r27, r27
    39a4:	51 e1       	ldi	r21, 0x11	; 17
    39a6:	07 c0       	rjmp	.+14     	; 0x39b6 <__udivmodhi4_ep>

000039a8 <__udivmodhi4_loop>:
    39a8:	aa 1f       	adc	r26, r26
    39aa:	bb 1f       	adc	r27, r27
    39ac:	a6 17       	cp	r26, r22
    39ae:	b7 07       	cpc	r27, r23
    39b0:	10 f0       	brcs	.+4      	; 0x39b6 <__udivmodhi4_ep>
    39b2:	a6 1b       	sub	r26, r22
    39b4:	b7 0b       	sbc	r27, r23

000039b6 <__udivmodhi4_ep>:
    39b6:	88 1f       	adc	r24, r24
    39b8:	99 1f       	adc	r25, r25
    39ba:	5a 95       	dec	r21
    39bc:	a9 f7       	brne	.-22     	; 0x39a8 <__udivmodhi4_loop>
    39be:	80 95       	com	r24
    39c0:	90 95       	com	r25
    39c2:	bc 01       	movw	r22, r24
    39c4:	cd 01       	movw	r24, r26
    39c6:	08 95       	ret

000039c8 <_exit>:
    39c8:	f8 94       	cli

000039ca <__stop_program>:
    39ca:	ff cf       	rjmp	.-2      	; 0x39ca <__stop_program>
