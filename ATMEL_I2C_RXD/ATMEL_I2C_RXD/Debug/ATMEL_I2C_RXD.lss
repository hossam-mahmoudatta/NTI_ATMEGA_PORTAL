
ATMEL_I2C_RXD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000ad4  00000b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800084  00800084  00000b8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034d6  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000138e  00000000  00000000  000044de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002129  00000000  00000000  0000586c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bbc  00000000  00000000  00007998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016aa  00000000  00000000  00008554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024b3  00000000  00000000  00009bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000c0b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_1>
   8:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_2>
   c:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_6>
  1c:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__vector_7>
  20:	0c 94 9b 04 	jmp	0x936	; 0x936 <__vector_8>
  24:	0c 94 c4 04 	jmp	0x988	; 0x988 <__vector_9>
  28:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_10>
  2c:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_11>
  30:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__vector_12>
  34:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_13>
  38:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_14>
  3c:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_15>
  40:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3a       	cpi	r26, 0xA1	; 161
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 88 00 	call	0x110	; 0x110 <main>
  8a:	0c 94 68 05 	jmp	0xad0	; 0xad0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <System_Initialization>:
u8 ReceivedData;
//u8 KeyData = 0;

void System_Initialization(void) {
	// Initializing LCD Module
	LCD_voidInit();
  92:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_voidInit>
	LCD_voidSetCursor(0, 0);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_voidSetCursor>
	LCD_voidDisplayString("I2C RECEIVE");
  9e:	80 e6       	ldi	r24, 0x60	; 96
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	83 e2       	ldi	r24, 0x23	; 35
  a8:	94 ef       	ldi	r25, 0xF4	; 244
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <System_Initialization+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <System_Initialization+0x1e>
  b0:	00 00       	nop

	// Initializing I2C SLAVE Module
	_delay_ms(250);
	I2C_voidSlaveInit(0x02);
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	0e 94 ab 03 	call	0x756	; 0x756 <I2C_voidSlaveInit>
  b8:	08 95       	ret

000000ba <executeMain_RXD>:

}

void executeMain_RXD(void) {
	LCD_voidSetCursor(1, 0);
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_voidSetCursor>
	LCD_voidDisplayString("Receiving..");
  c2:	8c e6       	ldi	r24, 0x6C	; 108
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidDisplayString>
  ca:	87 ea       	ldi	r24, 0xA7	; 167
  cc:	91 e6       	ldi	r25, 0x61	; 97
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <executeMain_RXD+0x14>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <executeMain_RXD+0x1a>
  d4:	00 00       	nop
	_delay_ms(100);
	ReceivedData = I2C_u8SlaveReceiveDataByte();
  d6:	0e 94 b4 03 	call	0x768	; 0x768 <I2C_u8SlaveReceiveDataByte>
  da:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
	//ReceivedData = I2C_u8ReadByteWithACK();

	LCD_voidSetCursor(2, 0);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_voidSetCursor>
	LCD_voidDisplayString("RxD: ");
  e6:	88 e7       	ldi	r24, 0x78	; 120
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidDisplayString>
	LCD_voidSetCursor(2, 5);
  ee:	65 e0       	ldi	r22, 0x05	; 5
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_voidSetCursor>
	LCD_voidSendData(ReceivedData);
  f6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
  fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_voidSendData>
	LCD_voidSetCursor(3, 0);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_voidSetCursor>
	LCD_voidDisplayString("Done!");
 106:	8e e7       	ldi	r24, 0x7E	; 126
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidDisplayString>
 10e:	08 95       	ret

00000110 <main>:
 *                              					Application Execution                              			  *
 *******************************************************************************/

int main(void)
{
	System_Initialization();
 110:	0e 94 49 00 	call	0x92	; 0x92 <System_Initialization>
	executeMain_RXD();
 114:	0e 94 5d 00 	call	0xba	; 0xba <executeMain_RXD>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x8>

0000011a <LCD_voidSendCommand>:

}


// Sends a command to the LCD
void LCD_voidSendCommand(u8 copy_u8Command) {
 11a:	cf 93       	push	r28
 11c:	c8 2f       	mov	r28, r24
	// Set RS Pin to '0'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 128:	89 ef       	ldi	r24, 0xF9	; 249
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_voidSendCommand+0x12>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_voidSendCommand+0x18>
 132:	00 00       	nop
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_voidSendCommand+0x28>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_voidSendCommand+0x2e>
 148:	00 00       	nop
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 4));
 14a:	c4 fb       	bst	r28, 4
 14c:	44 27       	eor	r20, r20
 14e:	40 f9       	bld	r20, 0
 150:	63 e0       	ldi	r22, 0x03	; 3
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 5));
 158:	c5 fb       	bst	r28, 5
 15a:	44 27       	eor	r20, r20
 15c:	40 f9       	bld	r20, 0
 15e:	64 e0       	ldi	r22, 0x04	; 4
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 6));
 166:	c6 fb       	bst	r28, 6
 168:	44 27       	eor	r20, r20
 16a:	40 f9       	bld	r20, 0
 16c:	65 e0       	ldi	r22, 0x05	; 5
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 7));
 174:	4c 2f       	mov	r20, r28
 176:	44 1f       	adc	r20, r20
 178:	44 27       	eor	r20, r20
 17a:	44 1f       	adc	r20, r20
 17c:	66 e0       	ldi	r22, 0x06	; 6
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 184:	89 ef       	ldi	r24, 0xF9	; 249
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_voidSendCommand+0x6e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_voidSendCommand+0x74>
 18e:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 19a:	89 ef       	ldi	r24, 0xF9	; 249
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCD_voidSendCommand+0x84>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <LCD_voidSendCommand+0x8a>
 1a4:	00 00       	nop
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 1b0:	89 ef       	ldi	r24, 0xF9	; 249
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_voidSendCommand+0x9a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_voidSendCommand+0xa0>
 1ba:	00 00       	nop
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8Command, 0));
 1bc:	4c 2f       	mov	r20, r28
 1be:	41 70       	andi	r20, 0x01	; 1
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8Command, 1));
 1c8:	c1 fb       	bst	r28, 1
 1ca:	44 27       	eor	r20, r20
 1cc:	40 f9       	bld	r20, 0
 1ce:	64 e0       	ldi	r22, 0x04	; 4
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8Command, 2));
 1d6:	c2 fb       	bst	r28, 2
 1d8:	44 27       	eor	r20, r20
 1da:	40 f9       	bld	r20, 0
 1dc:	65 e0       	ldi	r22, 0x05	; 5
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8Command, 3));
 1e4:	c3 fb       	bst	r28, 3
 1e6:	44 27       	eor	r20, r20
 1e8:	40 f9       	bld	r20, 0
 1ea:	66 e0       	ldi	r22, 0x06	; 6
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 1f2:	89 ef       	ldi	r24, 0xF9	; 249
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <LCD_voidSendCommand+0xdc>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <LCD_voidSendCommand+0xe2>
 1fc:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 208:	89 ef       	ldi	r24, 0xF9	; 249
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_voidSendCommand+0xf2>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_voidSendCommand+0xf8>
 212:	00 00       	nop
		_delay_ms(1);
#endif
}
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_voidInit>:
 *******************************************************************************/

// Initializes and enables the LCD Module to start functionality
void LCD_voidInit(void) {
	// Initialize RS Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 9f 02 	call	0x53e	; 0x53e <GPIO_voidSetPinDirection>

	// Initialize Enable Pin
	GPIO_voidSetPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 9f 02 	call	0x53e	; 0x53e <GPIO_voidSetPinDirection>
 22c:	87 e8       	ldi	r24, 0x87	; 135
 22e:	93 e1       	ldi	r25, 0x13	; 19
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_voidInit+0x18>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_voidInit+0x1e>
 236:	00 00       	nop
	if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_voidSetPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
		LCD_voidSendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}
	else {
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D4, PIN_OUTPUT);
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	63 e0       	ldi	r22, 0x03	; 3
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 9f 02 	call	0x53e	; 0x53e <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D5, PIN_OUTPUT);
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	64 e0       	ldi	r22, 0x04	; 4
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 9f 02 	call	0x53e	; 0x53e <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D6, PIN_OUTPUT);
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	65 e0       	ldi	r22, 0x05	; 5
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 9f 02 	call	0x53e	; 0x53e <GPIO_voidSetPinDirection>
		GPIO_voidSetPinDirection(LCD_DATA_PORT, LCD_DATAPIN_D7, PIN_OUTPUT);
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	66 e0       	ldi	r22, 0x06	; 6
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 9f 02 	call	0x53e	; 0x53e <GPIO_voidSetPinDirection>


		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT1);
 260:	83 e3       	ldi	r24, 0x33	; 51
 262:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_FOUR_BIT_INIT2);
 266:	82 e3       	ldi	r24, 0x32	; 50
 268:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
		LCD_voidSendCommand(LCD_2LINES_5x7_DOTS);
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
 272:	83 ef       	ldi	r24, 0xF3	; 243
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_voidInit+0x5e>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_voidInit+0x64>
 27c:	00 00       	nop
		//LCD_voidSendCommand(LCD_2LINES_FOUR_BIT);
		_delay_ms(2);
	}

	LCD_voidSendCommand(LCD_CURSOR_OFF);
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
 284:	83 ef       	ldi	r24, 0xF3	; 243
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_voidInit+0x70>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_voidInit+0x76>
 28e:	00 00       	nop
	_delay_ms(2);
	LCD_voidSendCommand(LCD_CLEAR_DISPLAY);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
 296:	83 ef       	ldi	r24, 0xF3	; 243
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_voidInit+0x82>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_voidInit+0x88>
 2a0:	00 00       	nop
 2a2:	08 95       	ret

000002a4 <LCD_voidSendData>:
#endif
}


// Displays a character on the LCD
void LCD_voidSendData(u8 copy_u8data) {
 2a4:	cf 93       	push	r28
 2a6:	c8 2f       	mov	r28, r24
	// Set RS Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 2b2:	89 ef       	ldi	r24, 0xF9	; 249
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_voidSendData+0x12>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_voidSendData+0x18>
 2bc:	00 00       	nop
	_delay_ms(1);
	// Set Enable Pin to '1'
	GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 2c8:	89 ef       	ldi	r24, 0xF9	; 249
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_voidSendData+0x28>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_voidSendData+0x2e>
 2d2:	00 00       	nop
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(2);
#else
		// Inserts the command in the assigned PORT to be sent to the LCD
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 4));
 2d4:	c4 fb       	bst	r28, 4
 2d6:	44 27       	eor	r20, r20
 2d8:	40 f9       	bld	r20, 0
 2da:	63 e0       	ldi	r22, 0x03	; 3
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 5));
 2e2:	c5 fb       	bst	r28, 5
 2e4:	44 27       	eor	r20, r20
 2e6:	40 f9       	bld	r20, 0
 2e8:	64 e0       	ldi	r22, 0x04	; 4
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 6));
 2f0:	c6 fb       	bst	r28, 6
 2f2:	44 27       	eor	r20, r20
 2f4:	40 f9       	bld	r20, 0
 2f6:	65 e0       	ldi	r22, 0x05	; 5
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 7));
 2fe:	4c 2f       	mov	r20, r28
 300:	44 1f       	adc	r20, r20
 302:	44 27       	eor	r20, r20
 304:	44 1f       	adc	r20, r20
 306:	66 e0       	ldi	r22, 0x06	; 6
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 30e:	89 ef       	ldi	r24, 0xF9	; 249
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_voidSendData+0x6e>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_voidSendData+0x74>
 318:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 324:	89 ef       	ldi	r24, 0xF9	; 249
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_voidSendData+0x84>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_voidSendData+0x8a>
 32e:	00 00       	nop
		_delay_ms(1);
		// Set Enable Pin to '1'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 33a:	89 ef       	ldi	r24, 0xF9	; 249
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_voidSendData+0x9a>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_voidSendData+0xa0>
 344:	00 00       	nop
		_delay_ms(1);

		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D4, GET_BIT(copy_u8data, 0));
 346:	4c 2f       	mov	r20, r28
 348:	41 70       	andi	r20, 0x01	; 1
 34a:	63 e0       	ldi	r22, 0x03	; 3
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D5, GET_BIT(copy_u8data, 1));
 352:	c1 fb       	bst	r28, 1
 354:	44 27       	eor	r20, r20
 356:	40 f9       	bld	r20, 0
 358:	64 e0       	ldi	r22, 0x04	; 4
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D6, GET_BIT(copy_u8data, 2));
 360:	c2 fb       	bst	r28, 2
 362:	44 27       	eor	r20, r20
 364:	40 f9       	bld	r20, 0
 366:	65 e0       	ldi	r22, 0x05	; 5
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_DATA_PORT, LCD_DATAPIN_D7, GET_BIT(copy_u8data, 3));
 36e:	c3 fb       	bst	r28, 3
 370:	44 27       	eor	r20, r20
 372:	40 f9       	bld	r20, 0
 374:	66 e0       	ldi	r22, 0x06	; 6
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 37c:	89 ef       	ldi	r24, 0xF9	; 249
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCD_voidSendData+0xdc>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCD_voidSendData+0xe2>
 386:	00 00       	nop

		_delay_ms(1);
		// Set Enable Pin to '0'
		GPIO_voidSetPinValue(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 25 03 	call	0x64a	; 0x64a <GPIO_voidSetPinValue>
 392:	89 ef       	ldi	r24, 0xF9	; 249
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <LCD_voidSendData+0xf2>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <LCD_voidSendData+0xf8>
 39c:	00 00       	nop
		_delay_ms(1);
#endif
}
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <LCD_voidDisplayString>:


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	8c 01       	movw	r16, r24
	u8 i = 0;
 3aa:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0') {
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <LCD_voidDisplayString+0x12>
		LCD_voidSendData(str[i]);
 3ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_voidSendData>
		i++;
 3b2:	cf 5f       	subi	r28, 0xFF	; 255


// Displays a string on the LCD
void LCD_voidDisplayString(cu8 *str) {
	u8 i = 0;
	while(str[i] != '\0') {
 3b4:	f8 01       	movw	r30, r16
 3b6:	ec 0f       	add	r30, r28
 3b8:	f1 1d       	adc	r31, r1
 3ba:	80 81       	ld	r24, Z
 3bc:	81 11       	cpse	r24, r1
 3be:	f7 cf       	rjmp	.-18     	; 0x3ae <LCD_voidDisplayString+0xc>
		LCD_voidSendData(str[i]);
		i++;
	}
}
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	08 95       	ret

000003c8 <LCD_voidSetCursor>:
// Chooses where the cursor would stand on the LCD to type from it
void LCD_voidSetCursor(u8 copy_u8row, u8 copy_u8_col) {
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <LCD_voidSetCursor+0x10>
 3cc:	70 f0       	brcs	.+28     	; 0x3ea <LCD_voidSetCursor+0x22>
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	31 f0       	breq	.+12     	; 0x3de <LCD_voidSetCursor+0x16>
 3d2:	83 30       	cpi	r24, 0x03	; 3
 3d4:	39 f0       	breq	.+14     	; 0x3e4 <LCD_voidSetCursor+0x1c>
 3d6:	0a c0       	rjmp	.+20     	; 0x3ec <LCD_voidSetCursor+0x24>
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
			break;
		case LINE1:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x40;
 3d8:	90 e4       	ldi	r25, 0x40	; 64
 3da:	96 0f       	add	r25, r22
			break;
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <LCD_voidSetCursor+0x24>
		case LINE2:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x10;
 3de:	90 e1       	ldi	r25, 0x10	; 16
 3e0:	96 0f       	add	r25, r22
			break;
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <LCD_voidSetCursor+0x24>
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
 3e4:	90 e5       	ldi	r25, 0x50	; 80
 3e6:	96 0f       	add	r25, r22
			break;
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <LCD_voidSetCursor+0x24>
	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	u8 LCD_MEMORY_ADDRESS;
	switch(copy_u8row) {
		case LINE0:
			LCD_MEMORY_ADDRESS = copy_u8_col;
 3ea:	96 2f       	mov	r25, r22
		case LINE3:
			LCD_MEMORY_ADDRESS = copy_u8_col + 0x50;
			break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_voidSendCommand(LCD_MEMORY_ADDRESS | LINE0_ADDRESS);
 3ec:	89 2f       	mov	r24, r25
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_voidSendCommand>
 3f4:	08 95       	ret

000003f6 <__vector_16>:
	CallBackPtr_ADC = Ptr_ADC;
}


void __vector_16(void) __attribute__((signal, used));
void __vector_16(void) {
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	6f 93       	push	r22
 40a:	7f 93       	push	r23
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	af 93       	push	r26
 412:	bf 93       	push	r27
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
	if(CallBackPtr_ADC != NULL) {
 418:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <CallBackPtr_ADC>
 41c:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <CallBackPtr_ADC+0x1>
 420:	30 97       	sbiw	r30, 0x00	; 0
 422:	09 f0       	breq	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		CallBackPtr_ADC();
 424:	09 95       	icall
	}
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_1>:
}


// Disables Compiler Optimizations & verifies callback not empty
void __vector_1(void) __attribute__((signal, used));
void __vector_1(void) {
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	if(CallBackPtr_INT0 != NULL) {
 46a:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <CallBackPtr_INT0>
 46e:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <CallBackPtr_INT0+0x1>
 472:	30 97       	sbiw	r30, 0x00	; 0
 474:	09 f0       	breq	.+2      	; 0x478 <__vector_1+0x30>
		CallBackPtr_INT0();
 476:	09 95       	icall
	}
}
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_2>:

void __vector_2(void) __attribute__((signal, used));
void __vector_2(void) {
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
	if(CallBackPtr_INT1 != NULL) {
 4bc:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <CallBackPtr_INT1>
 4c0:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <CallBackPtr_INT1+0x1>
 4c4:	30 97       	sbiw	r30, 0x00	; 0
 4c6:	09 f0       	breq	.+2      	; 0x4ca <__vector_2+0x30>
		CallBackPtr_INT1();
 4c8:	09 95       	icall
	}
}
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__vector_3>:

void __vector_3(void) __attribute__((signal, used));
void __vector_3(void) {
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31
	if(CallBackPtr_INT2 != NULL) {
 50e:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <CallBackPtr_INT2>
 512:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <CallBackPtr_INT2+0x1>
 516:	30 97       	sbiw	r30, 0x00	; 0
 518:	09 f0       	breq	.+2      	; 0x51c <__vector_3+0x30>
		CallBackPtr_INT2();
 51a:	09 95       	icall
	}
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <GPIO_voidSetPinDirection>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
 53e:	68 30       	cpi	r22, 0x08	; 8
 540:	08 f0       	brcs	.+2      	; 0x544 <GPIO_voidSetPinDirection+0x6>
 542:	7b c0       	rjmp	.+246    	; 0x63a <GPIO_voidSetPinDirection+0xfc>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	08 f0       	brcs	.+2      	; 0x54a <GPIO_voidSetPinDirection+0xc>
 548:	7a c0       	rjmp	.+244    	; 0x63e <GPIO_voidSetPinDirection+0x100>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
 54a:	42 30       	cpi	r20, 0x02	; 2
 54c:	08 f0       	brcs	.+2      	; 0x550 <GPIO_voidSetPinDirection+0x12>
 54e:	79 c0       	rjmp	.+242    	; 0x642 <GPIO_voidSetPinDirection+0x104>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		// Setup the pin direction as required
		switch(copy_u8portID) {
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	11 f1       	breq	.+68     	; 0x598 <GPIO_voidSetPinDirection+0x5a>
 554:	30 f0       	brcs	.+12     	; 0x562 <GPIO_voidSetPinDirection+0x24>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	d1 f1       	breq	.+116    	; 0x5ce <GPIO_voidSetPinDirection+0x90>
 55a:	83 30       	cpi	r24, 0x03	; 3
 55c:	09 f4       	brne	.+2      	; 0x560 <GPIO_voidSetPinDirection+0x22>
 55e:	52 c0       	rjmp	.+164    	; 0x604 <GPIO_voidSetPinDirection+0xc6>
 560:	72 c0       	rjmp	.+228    	; 0x646 <GPIO_voidSetPinDirection+0x108>
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 562:	41 30       	cpi	r20, 0x01	; 1
 564:	61 f4       	brne	.+24     	; 0x57e <GPIO_voidSetPinDirection+0x40>
					SET_BIT(DDRA_REG, copy_u8pinID);
 566:	2a b3       	in	r18, 0x1a	; 26
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <GPIO_voidSetPinDirection+0x34>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <GPIO_voidSetPinDirection+0x30>
 576:	82 2b       	or	r24, r18
 578:	8a bb       	out	0x1a, r24	; 26
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	08 95       	ret
			case PORT_A:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRA_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
 57e:	2a b3       	in	r18, 0x1a	; 26
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <GPIO_voidSetPinDirection+0x4c>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <GPIO_voidSetPinDirection+0x48>
 58e:	80 95       	com	r24
 590:	82 23       	and	r24, r18
 592:	8a bb       	out	0x1a, r24	; 26
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	08 95       	ret
				else {
					CLR_BIT(DDRA_REG, copy_u8pinID);
				}
				break;
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 598:	41 30       	cpi	r20, 0x01	; 1
 59a:	61 f4       	brne	.+24     	; 0x5b4 <GPIO_voidSetPinDirection+0x76>
					SET_BIT(DDRB_REG, copy_u8pinID);
 59c:	27 b3       	in	r18, 0x17	; 23
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <GPIO_voidSetPinDirection+0x6a>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	6a 95       	dec	r22
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <GPIO_voidSetPinDirection+0x66>
 5ac:	82 2b       	or	r24, r18
 5ae:	87 bb       	out	0x17, r24	; 23
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	08 95       	ret
			case PORT_B:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRB_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
 5b4:	27 b3       	in	r18, 0x17	; 23
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <GPIO_voidSetPinDirection+0x82>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <GPIO_voidSetPinDirection+0x7e>
 5c4:	80 95       	com	r24
 5c6:	82 23       	and	r24, r18
 5c8:	87 bb       	out	0x17, r24	; 23
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	08 95       	ret
				else {
					CLR_BIT(DDRB_REG, copy_u8pinID);
				}
				break;
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 5ce:	41 30       	cpi	r20, 0x01	; 1
 5d0:	61 f4       	brne	.+24     	; 0x5ea <GPIO_voidSetPinDirection+0xac>
					SET_BIT(DDRC_REG, copy_u8pinID);
 5d2:	24 b3       	in	r18, 0x14	; 20
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <GPIO_voidSetPinDirection+0xa0>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <GPIO_voidSetPinDirection+0x9c>
 5e2:	82 2b       	or	r24, r18
 5e4:	84 bb       	out	0x14, r24	; 20
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	08 95       	ret
			case PORT_C:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRC_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
 5ea:	24 b3       	in	r18, 0x14	; 20
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <GPIO_voidSetPinDirection+0xb8>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <GPIO_voidSetPinDirection+0xb4>
 5fa:	80 95       	com	r24
 5fc:	82 23       	and	r24, r18
 5fe:	84 bb       	out	0x14, r24	; 20
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret
				else {
					CLR_BIT(DDRC_REG, copy_u8pinID);
				}
				break;
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
 604:	41 30       	cpi	r20, 0x01	; 1
 606:	61 f4       	brne	.+24     	; 0x620 <GPIO_voidSetPinDirection+0xe2>
					SET_BIT(DDRD_REG, copy_u8pinID);
 608:	21 b3       	in	r18, 0x11	; 17
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <GPIO_voidSetPinDirection+0xd6>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <GPIO_voidSetPinDirection+0xd2>
 618:	82 2b       	or	r24, r18
 61a:	81 bb       	out	0x11, r24	; 17
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	08 95       	ret
			case PORT_D:
				if(copy_u8pinDIR == PIN_OUTPUT) {
					SET_BIT(DDRD_REG, copy_u8pinID);
				}
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
 620:	21 b3       	in	r18, 0x11	; 17
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <GPIO_voidSetPinDirection+0xee>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	6a 95       	dec	r22
 62e:	e2 f7       	brpl	.-8      	; 0x628 <GPIO_voidSetPinDirection+0xea>
 630:	80 95       	com	r24
 632:	82 23       	and	r24, r18
 634:	81 bb       	out	0x11, r24	; 17
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	08 95       	ret
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	08 95       	ret
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 63e:	82 e0       	ldi	r24, 0x02	; 2
 640:	08 95       	ret
	}
	else if((copy_u8pinDIR != PIN_INPUT) && (copy_u8pinDIR != PIN_OUTPUT)) {
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 642:	83 e0       	ldi	r24, 0x03	; 3
 644:	08 95       	ret
				else {
					CLR_BIT(DDRD_REG, copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 646:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 648:	08 95       	ret

0000064a <GPIO_voidSetPinValue>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
 64a:	68 30       	cpi	r22, 0x08	; 8
 64c:	08 f0       	brcs	.+2      	; 0x650 <GPIO_voidSetPinValue+0x6>
 64e:	7b c0       	rjmp	.+246    	; 0x746 <GPIO_voidSetPinValue+0xfc>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
 650:	84 30       	cpi	r24, 0x04	; 4
 652:	08 f0       	brcs	.+2      	; 0x656 <GPIO_voidSetPinValue+0xc>
 654:	7a c0       	rjmp	.+244    	; 0x74a <GPIO_voidSetPinValue+0x100>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
 656:	42 30       	cpi	r20, 0x02	; 2
 658:	08 f0       	brcs	.+2      	; 0x65c <GPIO_voidSetPinValue+0x12>
 65a:	79 c0       	rjmp	.+242    	; 0x74e <GPIO_voidSetPinValue+0x104>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		switch(copy_u8portID)
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	11 f1       	breq	.+68     	; 0x6a4 <GPIO_voidSetPinValue+0x5a>
 660:	30 f0       	brcs	.+12     	; 0x66e <GPIO_voidSetPinValue+0x24>
 662:	82 30       	cpi	r24, 0x02	; 2
 664:	d1 f1       	breq	.+116    	; 0x6da <GPIO_voidSetPinValue+0x90>
 666:	83 30       	cpi	r24, 0x03	; 3
 668:	09 f4       	brne	.+2      	; 0x66c <GPIO_voidSetPinValue+0x22>
 66a:	52 c0       	rjmp	.+164    	; 0x710 <GPIO_voidSetPinValue+0xc6>
 66c:	72 c0       	rjmp	.+228    	; 0x752 <GPIO_voidSetPinValue+0x108>
		{
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
 66e:	41 30       	cpi	r20, 0x01	; 1
 670:	61 f4       	brne	.+24     	; 0x68a <GPIO_voidSetPinValue+0x40>
					SET_BIT(PORTA_REG ,copy_u8pinID);
 672:	2b b3       	in	r18, 0x1b	; 27
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <GPIO_voidSetPinValue+0x34>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <GPIO_voidSetPinValue+0x30>
 682:	82 2b       	or	r24, r18
 684:	8b bb       	out	0x1b, r24	; 27
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	08 95       	ret
			case PORT_A:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTA_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
 68a:	2b b3       	in	r18, 0x1b	; 27
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	02 c0       	rjmp	.+4      	; 0x696 <GPIO_voidSetPinValue+0x4c>
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	6a 95       	dec	r22
 698:	e2 f7       	brpl	.-8      	; 0x692 <GPIO_voidSetPinValue+0x48>
 69a:	80 95       	com	r24
 69c:	82 23       	and	r24, r18
 69e:	8b bb       	out	0x1b, r24	; 27
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	08 95       	ret
				else {
					CLR_BIT(PORTA_REG,copy_u8pinID);
				}
				break;
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
 6a4:	41 30       	cpi	r20, 0x01	; 1
 6a6:	61 f4       	brne	.+24     	; 0x6c0 <GPIO_voidSetPinValue+0x76>
					SET_BIT(PORTB_REG ,copy_u8pinID);
 6a8:	28 b3       	in	r18, 0x18	; 24
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <GPIO_voidSetPinValue+0x6a>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <GPIO_voidSetPinValue+0x66>
 6b8:	82 2b       	or	r24, r18
 6ba:	88 bb       	out	0x18, r24	; 24
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	08 95       	ret
			case PORT_B:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTB_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
 6c0:	28 b3       	in	r18, 0x18	; 24
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <GPIO_voidSetPinValue+0x82>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <GPIO_voidSetPinValue+0x7e>
 6d0:	80 95       	com	r24
 6d2:	82 23       	and	r24, r18
 6d4:	88 bb       	out	0x18, r24	; 24
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	08 95       	ret
				else {
					CLR_BIT(PORTB_REG,copy_u8pinID);
				}
				break;
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
 6da:	41 30       	cpi	r20, 0x01	; 1
 6dc:	61 f4       	brne	.+24     	; 0x6f6 <GPIO_voidSetPinValue+0xac>
					SET_BIT(PORTC_REG ,copy_u8pinID);
 6de:	25 b3       	in	r18, 0x15	; 21
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <GPIO_voidSetPinValue+0xa0>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	6a 95       	dec	r22
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <GPIO_voidSetPinValue+0x9c>
 6ee:	82 2b       	or	r24, r18
 6f0:	85 bb       	out	0x15, r24	; 21
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret
			case PORT_C:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTC_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
 6f6:	25 b3       	in	r18, 0x15	; 21
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <GPIO_voidSetPinValue+0xb8>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	6a 95       	dec	r22
 704:	e2 f7       	brpl	.-8      	; 0x6fe <GPIO_voidSetPinValue+0xb4>
 706:	80 95       	com	r24
 708:	82 23       	and	r24, r18
 70a:	85 bb       	out	0x15, r24	; 21
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	08 95       	ret
				else {
					CLR_BIT(PORTC_REG,copy_u8pinID);
				}
				break;
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
 710:	41 30       	cpi	r20, 0x01	; 1
 712:	61 f4       	brne	.+24     	; 0x72c <GPIO_voidSetPinValue+0xe2>
					SET_BIT(PORTD_REG ,copy_u8pinID);
 714:	22 b3       	in	r18, 0x12	; 18
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <GPIO_voidSetPinValue+0xd6>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <GPIO_voidSetPinValue+0xd2>
 724:	82 2b       	or	r24, r18
 726:	82 bb       	out	0x12, r24	; 18
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	08 95       	ret
			case PORT_D:
				if(copy_u8pinValue == LOGIC_HIGH) {
					SET_BIT(PORTD_REG ,copy_u8pinID);
				}
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
 72c:	22 b3       	in	r18, 0x12	; 18
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <GPIO_voidSetPinValue+0xee>
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	6a 95       	dec	r22
 73a:	e2 f7       	brpl	.-8      	; 0x734 <GPIO_voidSetPinValue+0xea>
 73c:	80 95       	com	r24
 73e:	82 23       	and	r24, r18
 740:	82 bb       	out	0x12, r24	; 18
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	08 95       	ret
	 */
	u8 GPIO_Driver_Checker = 0;

	if((copy_u8pinID >= NUM_OF_PINS_PER_PORT)) {
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret
	}
	else if((copy_u8portID >= NUM_OF_PORTS)) {
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	08 95       	ret
	}
	else if((copy_u8pinValue != LOGIC_HIGH) && (copy_u8pinValue != LOGIC_LOW)) {
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 74e:	83 e0       	ldi	r24, 0x03	; 3
 750:	08 95       	ret
				else {
					CLR_BIT(PORTD_REG,copy_u8pinID);
				}
				break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 752:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 754:	08 95       	ret

00000756 <I2C_voidSlaveInit>:
		LocalError = MasterReadByteErr;
	}

	*copy_u8DataByte = TWDR_REG;
	return LocalError;
}
 756:	88 0f       	add	r24, r24
 758:	82 b9       	out	0x02, r24	; 2
 75a:	86 b7       	in	r24, 0x36	; 54
 75c:	84 60       	ori	r24, 0x04	; 4
 75e:	86 bf       	out	0x36, r24	; 54
 760:	86 b7       	in	r24, 0x36	; 54
 762:	80 64       	ori	r24, 0x40	; 64
 764:	86 bf       	out	0x36, r24	; 54
 766:	08 95       	ret

00000768 <I2C_u8SlaveReceiveDataByte>:


// Responsible for the SPI to send an array of bytes, a string
u8 I2C_u8SlaveReceiveDataByte() {
	u8 Data;
	TWCR_REG->TWINT = 1;
 768:	86 b7       	in	r24, 0x36	; 54
 76a:	80 68       	ori	r24, 0x80	; 128
 76c:	86 bf       	out	0x36, r24	; 54

	while(TWCR_REG->TWINT == 0);
 76e:	06 b6       	in	r0, 0x36	; 54
 770:	07 fe       	sbrs	r0, 7
 772:	fd cf       	rjmp	.-6      	; 0x76e <I2C_u8SlaveReceiveDataByte+0x6>
	// Busy Wait for TWINT set in TWCR Register
	// to ensure that start bit is send successfully

	while( ((TWSR_REG->TWS) << 3) != I2C_SLAV_RXD_SLA_W_ACK);
 774:	81 b1       	in	r24, 0x01	; 1
 776:	86 95       	lsr	r24
 778:	86 95       	lsr	r24
 77a:	86 95       	lsr	r24
 77c:	8c 30       	cpi	r24, 0x0C	; 12
 77e:	d1 f7       	brne	.-12     	; 0x774 <I2C_u8SlaveReceiveDataByte+0xc>
	
	TWCR_REG->TWEA = 1;
 780:	86 b7       	in	r24, 0x36	; 54
 782:	80 64       	ori	r24, 0x40	; 64
 784:	86 bf       	out	0x36, r24	; 54
	TWCR_REG->TWINT = 1;
 786:	86 b7       	in	r24, 0x36	; 54
 788:	80 68       	ori	r24, 0x80	; 128
 78a:	86 bf       	out	0x36, r24	; 54
	TWCR_REG->TWEN = 1;
 78c:	86 b7       	in	r24, 0x36	; 54
 78e:	84 60       	ori	r24, 0x04	; 4
 790:	86 bf       	out	0x36, r24	; 54

	while(TWCR_REG->TWINT == 0);
 792:	06 b6       	in	r0, 0x36	; 54
 794:	07 fe       	sbrs	r0, 7
 796:	fd cf       	rjmp	.-6      	; 0x792 <I2C_u8SlaveReceiveDataByte+0x2a>

	//if(((TWSR_REG->TWS) << 3) != I2C_SLAV_RXD_DATA_R_NACK);

	Data = TWDR_REG;
 798:	83 b1       	in	r24, 0x03	; 3

	return Data;
}
 79a:	08 95       	ret

0000079c <__vector_12>:
	CallBackPtr_SPI = Ptr_SPI;
}

// The ISR For the SPI CallBack Function
void __vector_12(void) __attribute__((signal, used));
void __vector_12(void) {
 79c:	1f 92       	push	r1
 79e:	0f 92       	push	r0
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	0f 92       	push	r0
 7a4:	11 24       	eor	r1, r1
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	4f 93       	push	r20
 7ac:	5f 93       	push	r21
 7ae:	6f 93       	push	r22
 7b0:	7f 93       	push	r23
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	af 93       	push	r26
 7b8:	bf 93       	push	r27
 7ba:	ef 93       	push	r30
 7bc:	ff 93       	push	r31
	if(CallBackPtr_SPI != NULL) {
 7be:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <CallBackPtr_SPI>
 7c2:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <CallBackPtr_SPI+0x1>
 7c6:	30 97       	sbiw	r30, 0x00	; 0
 7c8:	09 f0       	breq	.+2      	; 0x7cc <__vector_12+0x30>
		CallBackPtr_SPI();
 7ca:	09 95       	icall
	}
}
 7cc:	ff 91       	pop	r31
 7ce:	ef 91       	pop	r30
 7d0:	bf 91       	pop	r27
 7d2:	af 91       	pop	r26
 7d4:	9f 91       	pop	r25
 7d6:	8f 91       	pop	r24
 7d8:	7f 91       	pop	r23
 7da:	6f 91       	pop	r22
 7dc:	5f 91       	pop	r21
 7de:	4f 91       	pop	r20
 7e0:	3f 91       	pop	r19
 7e2:	2f 91       	pop	r18
 7e4:	0f 90       	pop	r0
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	0f 90       	pop	r0
 7ea:	1f 90       	pop	r1
 7ec:	18 95       	reti

000007ee <__vector_10>:
	CallBackPtr_TIMER0_OVF = Ptr_TIMER;
}


void __vector_10(void) __attribute__((signal, used));
void __vector_10(void) {
 7ee:	1f 92       	push	r1
 7f0:	0f 92       	push	r0
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	0f 92       	push	r0
 7f6:	11 24       	eor	r1, r1
 7f8:	2f 93       	push	r18
 7fa:	3f 93       	push	r19
 7fc:	4f 93       	push	r20
 7fe:	5f 93       	push	r21
 800:	6f 93       	push	r22
 802:	7f 93       	push	r23
 804:	8f 93       	push	r24
 806:	9f 93       	push	r25
 808:	af 93       	push	r26
 80a:	bf 93       	push	r27
 80c:	ef 93       	push	r30
 80e:	ff 93       	push	r31
	if(CallBackPtr_TIMER0_COMP != NULL) {
 810:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <CallBackPtr_TIMER0_COMP>
 814:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <CallBackPtr_TIMER0_COMP+0x1>
 818:	30 97       	sbiw	r30, 0x00	; 0
 81a:	09 f0       	breq	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
		CallBackPtr_TIMER0_COMP();
 81c:	09 95       	icall
	}
}
 81e:	ff 91       	pop	r31
 820:	ef 91       	pop	r30
 822:	bf 91       	pop	r27
 824:	af 91       	pop	r26
 826:	9f 91       	pop	r25
 828:	8f 91       	pop	r24
 82a:	7f 91       	pop	r23
 82c:	6f 91       	pop	r22
 82e:	5f 91       	pop	r21
 830:	4f 91       	pop	r20
 832:	3f 91       	pop	r19
 834:	2f 91       	pop	r18
 836:	0f 90       	pop	r0
 838:	0f be       	out	0x3f, r0	; 63
 83a:	0f 90       	pop	r0
 83c:	1f 90       	pop	r1
 83e:	18 95       	reti

00000840 <__vector_11>:

void __vector_11(void) __attribute__((signal, used));
void __vector_11(void) {
 840:	1f 92       	push	r1
 842:	0f 92       	push	r0
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	0f 92       	push	r0
 848:	11 24       	eor	r1, r1
 84a:	2f 93       	push	r18
 84c:	3f 93       	push	r19
 84e:	4f 93       	push	r20
 850:	5f 93       	push	r21
 852:	6f 93       	push	r22
 854:	7f 93       	push	r23
 856:	8f 93       	push	r24
 858:	9f 93       	push	r25
 85a:	af 93       	push	r26
 85c:	bf 93       	push	r27
 85e:	ef 93       	push	r30
 860:	ff 93       	push	r31
	if(CallBackPtr_TIMER0_OVF != NULL) {
 862:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <CallBackPtr_TIMER0_OVF>
 866:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <CallBackPtr_TIMER0_OVF+0x1>
 86a:	30 97       	sbiw	r30, 0x00	; 0
 86c:	09 f0       	breq	.+2      	; 0x870 <__stack+0x11>
		CallBackPtr_TIMER0_OVF();
 86e:	09 95       	icall
	}
}
 870:	ff 91       	pop	r31
 872:	ef 91       	pop	r30
 874:	bf 91       	pop	r27
 876:	af 91       	pop	r26
 878:	9f 91       	pop	r25
 87a:	8f 91       	pop	r24
 87c:	7f 91       	pop	r23
 87e:	6f 91       	pop	r22
 880:	5f 91       	pop	r21
 882:	4f 91       	pop	r20
 884:	3f 91       	pop	r19
 886:	2f 91       	pop	r18
 888:	0f 90       	pop	r0
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	0f 90       	pop	r0
 88e:	1f 90       	pop	r1
 890:	18 95       	reti

00000892 <__vector_6>:
	CallBackPtr_TIMER1_OVF = Ptr_TIMER;
}


void __vector_6(void) __attribute__((signal, used));
void __vector_6(void) {
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	4f 93       	push	r20
 8a2:	5f 93       	push	r21
 8a4:	6f 93       	push	r22
 8a6:	7f 93       	push	r23
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
 8ac:	af 93       	push	r26
 8ae:	bf 93       	push	r27
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_CAPT != NULL) {
 8b4:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <CallBackPtr_TIMER1_CAPT>
 8b8:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <CallBackPtr_TIMER1_CAPT+0x1>
 8bc:	30 97       	sbiw	r30, 0x00	; 0
 8be:	09 f0       	breq	.+2      	; 0x8c2 <__vector_6+0x30>
		CallBackPtr_TIMER1_CAPT();
 8c0:	09 95       	icall
	}
}
 8c2:	ff 91       	pop	r31
 8c4:	ef 91       	pop	r30
 8c6:	bf 91       	pop	r27
 8c8:	af 91       	pop	r26
 8ca:	9f 91       	pop	r25
 8cc:	8f 91       	pop	r24
 8ce:	7f 91       	pop	r23
 8d0:	6f 91       	pop	r22
 8d2:	5f 91       	pop	r21
 8d4:	4f 91       	pop	r20
 8d6:	3f 91       	pop	r19
 8d8:	2f 91       	pop	r18
 8da:	0f 90       	pop	r0
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	0f 90       	pop	r0
 8e0:	1f 90       	pop	r1
 8e2:	18 95       	reti

000008e4 <__vector_7>:

void __vector_7(void) __attribute__((signal, used));
void __vector_7(void) {
 8e4:	1f 92       	push	r1
 8e6:	0f 92       	push	r0
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	0f 92       	push	r0
 8ec:	11 24       	eor	r1, r1
 8ee:	2f 93       	push	r18
 8f0:	3f 93       	push	r19
 8f2:	4f 93       	push	r20
 8f4:	5f 93       	push	r21
 8f6:	6f 93       	push	r22
 8f8:	7f 93       	push	r23
 8fa:	8f 93       	push	r24
 8fc:	9f 93       	push	r25
 8fe:	af 93       	push	r26
 900:	bf 93       	push	r27
 902:	ef 93       	push	r30
 904:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_COMPA != NULL) {
 906:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <CallBackPtr_TIMER1_COMPA>
 90a:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <CallBackPtr_TIMER1_COMPA+0x1>
 90e:	30 97       	sbiw	r30, 0x00	; 0
 910:	09 f0       	breq	.+2      	; 0x914 <__vector_7+0x30>
		CallBackPtr_TIMER1_COMPA();
 912:	09 95       	icall
	}
}
 914:	ff 91       	pop	r31
 916:	ef 91       	pop	r30
 918:	bf 91       	pop	r27
 91a:	af 91       	pop	r26
 91c:	9f 91       	pop	r25
 91e:	8f 91       	pop	r24
 920:	7f 91       	pop	r23
 922:	6f 91       	pop	r22
 924:	5f 91       	pop	r21
 926:	4f 91       	pop	r20
 928:	3f 91       	pop	r19
 92a:	2f 91       	pop	r18
 92c:	0f 90       	pop	r0
 92e:	0f be       	out	0x3f, r0	; 63
 930:	0f 90       	pop	r0
 932:	1f 90       	pop	r1
 934:	18 95       	reti

00000936 <__vector_8>:

void __vector_8(void) __attribute__((signal, used));
void __vector_8(void) {
 936:	1f 92       	push	r1
 938:	0f 92       	push	r0
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	0f 92       	push	r0
 93e:	11 24       	eor	r1, r1
 940:	2f 93       	push	r18
 942:	3f 93       	push	r19
 944:	4f 93       	push	r20
 946:	5f 93       	push	r21
 948:	6f 93       	push	r22
 94a:	7f 93       	push	r23
 94c:	8f 93       	push	r24
 94e:	9f 93       	push	r25
 950:	af 93       	push	r26
 952:	bf 93       	push	r27
 954:	ef 93       	push	r30
 956:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_COMPB != NULL) {
 958:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <CallBackPtr_TIMER1_COMPB>
 95c:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <CallBackPtr_TIMER1_COMPB+0x1>
 960:	30 97       	sbiw	r30, 0x00	; 0
 962:	09 f0       	breq	.+2      	; 0x966 <__vector_8+0x30>
		CallBackPtr_TIMER1_COMPB();
 964:	09 95       	icall
	}
}
 966:	ff 91       	pop	r31
 968:	ef 91       	pop	r30
 96a:	bf 91       	pop	r27
 96c:	af 91       	pop	r26
 96e:	9f 91       	pop	r25
 970:	8f 91       	pop	r24
 972:	7f 91       	pop	r23
 974:	6f 91       	pop	r22
 976:	5f 91       	pop	r21
 978:	4f 91       	pop	r20
 97a:	3f 91       	pop	r19
 97c:	2f 91       	pop	r18
 97e:	0f 90       	pop	r0
 980:	0f be       	out	0x3f, r0	; 63
 982:	0f 90       	pop	r0
 984:	1f 90       	pop	r1
 986:	18 95       	reti

00000988 <__vector_9>:

void __vector_9(void) __attribute__((signal, used));
void __vector_9(void) {
 988:	1f 92       	push	r1
 98a:	0f 92       	push	r0
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	0f 92       	push	r0
 990:	11 24       	eor	r1, r1
 992:	2f 93       	push	r18
 994:	3f 93       	push	r19
 996:	4f 93       	push	r20
 998:	5f 93       	push	r21
 99a:	6f 93       	push	r22
 99c:	7f 93       	push	r23
 99e:	8f 93       	push	r24
 9a0:	9f 93       	push	r25
 9a2:	af 93       	push	r26
 9a4:	bf 93       	push	r27
 9a6:	ef 93       	push	r30
 9a8:	ff 93       	push	r31
	if(CallBackPtr_TIMER1_OVF != NULL) {
 9aa:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <CallBackPtr_TIMER1_OVF>
 9ae:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <CallBackPtr_TIMER1_OVF+0x1>
 9b2:	30 97       	sbiw	r30, 0x00	; 0
 9b4:	09 f0       	breq	.+2      	; 0x9b8 <__vector_9+0x30>
		CallBackPtr_TIMER1_OVF();
 9b6:	09 95       	icall
	}
}
 9b8:	ff 91       	pop	r31
 9ba:	ef 91       	pop	r30
 9bc:	bf 91       	pop	r27
 9be:	af 91       	pop	r26
 9c0:	9f 91       	pop	r25
 9c2:	8f 91       	pop	r24
 9c4:	7f 91       	pop	r23
 9c6:	6f 91       	pop	r22
 9c8:	5f 91       	pop	r21
 9ca:	4f 91       	pop	r20
 9cc:	3f 91       	pop	r19
 9ce:	2f 91       	pop	r18
 9d0:	0f 90       	pop	r0
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	0f 90       	pop	r0
 9d6:	1f 90       	pop	r1
 9d8:	18 95       	reti

000009da <__vector_13>:
}


// The ISR For the UART RXC Callback Function
void __vector_13(void) __attribute__((signal, used));
void __vector_13(void) {
 9da:	1f 92       	push	r1
 9dc:	0f 92       	push	r0
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	0f 92       	push	r0
 9e2:	11 24       	eor	r1, r1
 9e4:	2f 93       	push	r18
 9e6:	3f 93       	push	r19
 9e8:	4f 93       	push	r20
 9ea:	5f 93       	push	r21
 9ec:	6f 93       	push	r22
 9ee:	7f 93       	push	r23
 9f0:	8f 93       	push	r24
 9f2:	9f 93       	push	r25
 9f4:	af 93       	push	r26
 9f6:	bf 93       	push	r27
 9f8:	ef 93       	push	r30
 9fa:	ff 93       	push	r31
	if(CallBackPtr_UART_RXC != NULL) {
 9fc:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <CallBackPtr_UART_RXC>
 a00:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <CallBackPtr_UART_RXC+0x1>
 a04:	30 97       	sbiw	r30, 0x00	; 0
 a06:	09 f0       	breq	.+2      	; 0xa0a <__vector_13+0x30>
		CallBackPtr_UART_RXC();
 a08:	09 95       	icall
	}
}
 a0a:	ff 91       	pop	r31
 a0c:	ef 91       	pop	r30
 a0e:	bf 91       	pop	r27
 a10:	af 91       	pop	r26
 a12:	9f 91       	pop	r25
 a14:	8f 91       	pop	r24
 a16:	7f 91       	pop	r23
 a18:	6f 91       	pop	r22
 a1a:	5f 91       	pop	r21
 a1c:	4f 91       	pop	r20
 a1e:	3f 91       	pop	r19
 a20:	2f 91       	pop	r18
 a22:	0f 90       	pop	r0
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	0f 90       	pop	r0
 a28:	1f 90       	pop	r1
 a2a:	18 95       	reti

00000a2c <__vector_14>:

// The ISR For the UART UDRE Callback Function
void __vector_14(void) __attribute__((signal, used));
void __vector_14(void) {
 a2c:	1f 92       	push	r1
 a2e:	0f 92       	push	r0
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	0f 92       	push	r0
 a34:	11 24       	eor	r1, r1
 a36:	2f 93       	push	r18
 a38:	3f 93       	push	r19
 a3a:	4f 93       	push	r20
 a3c:	5f 93       	push	r21
 a3e:	6f 93       	push	r22
 a40:	7f 93       	push	r23
 a42:	8f 93       	push	r24
 a44:	9f 93       	push	r25
 a46:	af 93       	push	r26
 a48:	bf 93       	push	r27
 a4a:	ef 93       	push	r30
 a4c:	ff 93       	push	r31
	if(CallBackPtr_UART_UDRE != NULL) {
 a4e:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <CallBackPtr_UART_UDRE>
 a52:	f0 91 a0 00 	lds	r31, 0x00A0	; 0x8000a0 <CallBackPtr_UART_UDRE+0x1>
 a56:	30 97       	sbiw	r30, 0x00	; 0
 a58:	09 f0       	breq	.+2      	; 0xa5c <__vector_14+0x30>
		CallBackPtr_UART_UDRE();
 a5a:	09 95       	icall
	}
}
 a5c:	ff 91       	pop	r31
 a5e:	ef 91       	pop	r30
 a60:	bf 91       	pop	r27
 a62:	af 91       	pop	r26
 a64:	9f 91       	pop	r25
 a66:	8f 91       	pop	r24
 a68:	7f 91       	pop	r23
 a6a:	6f 91       	pop	r22
 a6c:	5f 91       	pop	r21
 a6e:	4f 91       	pop	r20
 a70:	3f 91       	pop	r19
 a72:	2f 91       	pop	r18
 a74:	0f 90       	pop	r0
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	0f 90       	pop	r0
 a7a:	1f 90       	pop	r1
 a7c:	18 95       	reti

00000a7e <__vector_15>:

// The ISR For the UART TXC Callback Function
void __vector_15(void) __attribute__((signal, used));
void __vector_15(void) {
 a7e:	1f 92       	push	r1
 a80:	0f 92       	push	r0
 a82:	0f b6       	in	r0, 0x3f	; 63
 a84:	0f 92       	push	r0
 a86:	11 24       	eor	r1, r1
 a88:	2f 93       	push	r18
 a8a:	3f 93       	push	r19
 a8c:	4f 93       	push	r20
 a8e:	5f 93       	push	r21
 a90:	6f 93       	push	r22
 a92:	7f 93       	push	r23
 a94:	8f 93       	push	r24
 a96:	9f 93       	push	r25
 a98:	af 93       	push	r26
 a9a:	bf 93       	push	r27
 a9c:	ef 93       	push	r30
 a9e:	ff 93       	push	r31
	if(CallBackPtr_UART_TXC != NULL) {
 aa0:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <CallBackPtr_UART_TXC>
 aa4:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <CallBackPtr_UART_TXC+0x1>
 aa8:	30 97       	sbiw	r30, 0x00	; 0
 aaa:	09 f0       	breq	.+2      	; 0xaae <__vector_15+0x30>
		CallBackPtr_UART_TXC();
 aac:	09 95       	icall
	}
}
 aae:	ff 91       	pop	r31
 ab0:	ef 91       	pop	r30
 ab2:	bf 91       	pop	r27
 ab4:	af 91       	pop	r26
 ab6:	9f 91       	pop	r25
 ab8:	8f 91       	pop	r24
 aba:	7f 91       	pop	r23
 abc:	6f 91       	pop	r22
 abe:	5f 91       	pop	r21
 ac0:	4f 91       	pop	r20
 ac2:	3f 91       	pop	r19
 ac4:	2f 91       	pop	r18
 ac6:	0f 90       	pop	r0
 ac8:	0f be       	out	0x3f, r0	; 63
 aca:	0f 90       	pop	r0
 acc:	1f 90       	pop	r1
 ace:	18 95       	reti

00000ad0 <_exit>:
 ad0:	f8 94       	cli

00000ad2 <__stop_program>:
 ad2:	ff cf       	rjmp	.-2      	; 0xad2 <__stop_program>
